#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __toCommonJS = (from) => {
  const moduleCache = __toCommonJS.moduleCache ??= new WeakMap;
  var cached = moduleCache.get(from);
  if (cached)
    return cached;
  var to = __defProp({}, "__esModule", { value: true });
  var desc = { enumerable: false };
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key))
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
  }
  moduleCache.set(from, to);
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __require = (id) => {
  return import.meta.require(id);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// node_modules/lodash.camelcase/index.js
var require_lodash = __commonJS((exports, module) => {
  var arrayReduce = function(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  };
  var asciiToArray = function(string) {
    return string.split("");
  };
  var asciiWords = function(string) {
    return string.match(reAsciiWord) || [];
  };
  var basePropertyOf = function(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  };
  var hasUnicode = function(string) {
    return reHasUnicode.test(string);
  };
  var hasUnicodeWord = function(string) {
    return reHasUnicodeWord.test(string);
  };
  var stringToArray = function(string) {
    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
  };
  var unicodeToArray = function(string) {
    return string.match(reUnicode) || [];
  };
  var unicodeWords = function(string) {
    return string.match(reUnicodeWord) || [];
  };
  var baseSlice = function(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  };
  var baseToString = function(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  };
  var castSlice = function(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : baseSlice(array, start, end);
  };
  var createCaseFirst = function(methodName) {
    return function(string) {
      string = toString(string);
      var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
      return chr[methodName]() + trailing;
    };
  };
  var createCompounder = function(callback) {
    return function(string) {
      return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
    };
  };
  var isObjectLike = function(value) {
    return !!value && typeof value == "object";
  };
  var isSymbol = function(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  };
  var toString = function(value) {
    return value == null ? "" : baseToString(value);
  };
  var capitalize = function(string) {
    return upperFirst(toString(string).toLowerCase());
  };
  var deburr = function(string) {
    string = toString(string);
    return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
  };
  var words = function(string, pattern, guard) {
    string = toString(string);
    pattern = guard ? undefined : pattern;
    if (pattern === undefined) {
      return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
    }
    return string.match(pattern) || [];
  };
  var INFINITY = 1 / 0;
  var symbolTag = "[object Symbol]";
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  var rsAstralRange = "\\ud800-\\udfff";
  var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
  var rsComboSymbolsRange = "\\u20d0-\\u20f0";
  var rsDingbatRange = "\\u2700-\\u27bf";
  var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
  var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
  var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
  var rsPunctuationRange = "\\u2000-\\u206f";
  var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
  var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
  var rsVarRange = "\\ufe0e\\ufe0f";
  var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  var rsApos = "['\u2019]";
  var rsAstral = "[" + rsAstralRange + "]";
  var rsBreak = "[" + rsBreakRange + "]";
  var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
  var rsDigits = "\\d+";
  var rsDingbat = "[" + rsDingbatRange + "]";
  var rsLower = "[" + rsLowerRange + "]";
  var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
  var rsFitz = "\\ud83c[\\udffb-\\udfff]";
  var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
  var rsNonAstral = "[^" + rsAstralRange + "]";
  var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
  var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
  var rsUpper = "[" + rsUpperRange + "]";
  var rsZWJ = "\\u200d";
  var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
  var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
  var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
  var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
  var reOptMod = rsModifier + "?";
  var rsOptVar = "[" + rsVarRange + "]?";
  var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
  var rsSeq = rsOptVar + reOptMod + rsOptJoin;
  var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
  var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
  var reApos = RegExp(rsApos, "g");
  var reComboMark = RegExp(rsCombo, "g");
  var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
  var reUnicodeWord = RegExp([
    rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
    rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
    rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
    rsUpper + "+" + rsOptUpperContr,
    rsDigits,
    rsEmoji
  ].join("|"), "g");
  var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  var deburredLetters = {
    "\xC0": "A",
    "\xC1": "A",
    "\xC2": "A",
    "\xC3": "A",
    "\xC4": "A",
    "\xC5": "A",
    "\xE0": "a",
    "\xE1": "a",
    "\xE2": "a",
    "\xE3": "a",
    "\xE4": "a",
    "\xE5": "a",
    "\xC7": "C",
    "\xE7": "c",
    "\xD0": "D",
    "\xF0": "d",
    "\xC8": "E",
    "\xC9": "E",
    "\xCA": "E",
    "\xCB": "E",
    "\xE8": "e",
    "\xE9": "e",
    "\xEA": "e",
    "\xEB": "e",
    "\xCC": "I",
    "\xCD": "I",
    "\xCE": "I",
    "\xCF": "I",
    "\xEC": "i",
    "\xED": "i",
    "\xEE": "i",
    "\xEF": "i",
    "\xD1": "N",
    "\xF1": "n",
    "\xD2": "O",
    "\xD3": "O",
    "\xD4": "O",
    "\xD5": "O",
    "\xD6": "O",
    "\xD8": "O",
    "\xF2": "o",
    "\xF3": "o",
    "\xF4": "o",
    "\xF5": "o",
    "\xF6": "o",
    "\xF8": "o",
    "\xD9": "U",
    "\xDA": "U",
    "\xDB": "U",
    "\xDC": "U",
    "\xF9": "u",
    "\xFA": "u",
    "\xFB": "u",
    "\xFC": "u",
    "\xDD": "Y",
    "\xFD": "y",
    "\xFF": "y",
    "\xC6": "Ae",
    "\xE6": "ae",
    "\xDE": "Th",
    "\xFE": "th",
    "\xDF": "ss",
    "\u0100": "A",
    "\u0102": "A",
    "\u0104": "A",
    "\u0101": "a",
    "\u0103": "a",
    "\u0105": "a",
    "\u0106": "C",
    "\u0108": "C",
    "\u010A": "C",
    "\u010C": "C",
    "\u0107": "c",
    "\u0109": "c",
    "\u010B": "c",
    "\u010D": "c",
    "\u010E": "D",
    "\u0110": "D",
    "\u010F": "d",
    "\u0111": "d",
    "\u0112": "E",
    "\u0114": "E",
    "\u0116": "E",
    "\u0118": "E",
    "\u011A": "E",
    "\u0113": "e",
    "\u0115": "e",
    "\u0117": "e",
    "\u0119": "e",
    "\u011B": "e",
    "\u011C": "G",
    "\u011E": "G",
    "\u0120": "G",
    "\u0122": "G",
    "\u011D": "g",
    "\u011F": "g",
    "\u0121": "g",
    "\u0123": "g",
    "\u0124": "H",
    "\u0126": "H",
    "\u0125": "h",
    "\u0127": "h",
    "\u0128": "I",
    "\u012A": "I",
    "\u012C": "I",
    "\u012E": "I",
    "\u0130": "I",
    "\u0129": "i",
    "\u012B": "i",
    "\u012D": "i",
    "\u012F": "i",
    "\u0131": "i",
    "\u0134": "J",
    "\u0135": "j",
    "\u0136": "K",
    "\u0137": "k",
    "\u0138": "k",
    "\u0139": "L",
    "\u013B": "L",
    "\u013D": "L",
    "\u013F": "L",
    "\u0141": "L",
    "\u013A": "l",
    "\u013C": "l",
    "\u013E": "l",
    "\u0140": "l",
    "\u0142": "l",
    "\u0143": "N",
    "\u0145": "N",
    "\u0147": "N",
    "\u014A": "N",
    "\u0144": "n",
    "\u0146": "n",
    "\u0148": "n",
    "\u014B": "n",
    "\u014C": "O",
    "\u014E": "O",
    "\u0150": "O",
    "\u014D": "o",
    "\u014F": "o",
    "\u0151": "o",
    "\u0154": "R",
    "\u0156": "R",
    "\u0158": "R",
    "\u0155": "r",
    "\u0157": "r",
    "\u0159": "r",
    "\u015A": "S",
    "\u015C": "S",
    "\u015E": "S",
    "\u0160": "S",
    "\u015B": "s",
    "\u015D": "s",
    "\u015F": "s",
    "\u0161": "s",
    "\u0162": "T",
    "\u0164": "T",
    "\u0166": "T",
    "\u0163": "t",
    "\u0165": "t",
    "\u0167": "t",
    "\u0168": "U",
    "\u016A": "U",
    "\u016C": "U",
    "\u016E": "U",
    "\u0170": "U",
    "\u0172": "U",
    "\u0169": "u",
    "\u016B": "u",
    "\u016D": "u",
    "\u016F": "u",
    "\u0171": "u",
    "\u0173": "u",
    "\u0174": "W",
    "\u0175": "w",
    "\u0176": "Y",
    "\u0177": "y",
    "\u0178": "Y",
    "\u0179": "Z",
    "\u017B": "Z",
    "\u017D": "Z",
    "\u017A": "z",
    "\u017C": "z",
    "\u017E": "z",
    "\u0132": "IJ",
    "\u0133": "ij",
    "\u0152": "Oe",
    "\u0153": "oe",
    "\u0149": "'n",
    "\u017F": "ss"
  };
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var deburrLetter = basePropertyOf(deburredLetters);
  var objectProto = Object.prototype;
  var objectToString = objectProto.toString;
  var Symbol2 = root.Symbol;
  var symbolProto = Symbol2 ? Symbol2.prototype : undefined;
  var symbolToString = symbolProto ? symbolProto.toString : undefined;
  var camelCase = createCompounder(function(result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize(word) : word);
  });
  var upperFirst = createCaseFirst("toUpperCase");
  module.exports = camelCase;
});

// node_modules/command-line-args/dist/index.js
var require_dist = __commonJS((exports, module) => {
  var _interopDefault = function(ex) {
    return ex && typeof ex === "object" && ("default" in ex) ? ex["default"] : ex;
  };
  var isObject = function(input) {
    return typeof input === "object" && input !== null;
  };
  var isArrayLike = function(input) {
    return isObject(input) && typeof input.length === "number";
  };
  var arrayify = function(input) {
    if (Array.isArray(input)) {
      return input;
    }
    if (input === undefined) {
      return [];
    }
    if (isArrayLike(input) || input instanceof Set) {
      return Array.from(input);
    }
    return [input];
  };
  var isObject$1 = function(input) {
    return typeof input === "object" && input !== null;
  };
  var isArrayLike$1 = function(input) {
    return isObject$1(input) && typeof input.length === "number";
  };
  var arrayify$1 = function(input) {
    if (Array.isArray(input)) {
      return input;
    } else {
      if (input === undefined) {
        return [];
      } else if (isArrayLike$1(input)) {
        return Array.prototype.slice.call(input);
      } else {
        return [input];
      }
    }
  };
  var findReplace = function(array, testFn) {
    const found = [];
    const replaceWiths = arrayify$1(arguments);
    replaceWiths.splice(0, 2);
    arrayify$1(array).forEach((value, index) => {
      let expanded = [];
      replaceWiths.forEach((replaceWith) => {
        if (typeof replaceWith === "function") {
          expanded = expanded.concat(replaceWith(value));
        } else {
          expanded.push(replaceWith);
        }
      });
      if (testFn(value)) {
        found.push({
          index,
          replaceWithValue: expanded
        });
      }
    });
    found.reverse().forEach((item) => {
      const spliceArgs = [item.index, 1].concat(item.replaceWithValue);
      array.splice.apply(array, spliceArgs);
    });
    return array;
  };
  var expandCombinedShortArg = function(arg) {
    arg = arg.slice(1);
    return arg.split("").map((letter) => "-" + letter);
  };
  var isOptionEqualsNotation = function(arg) {
    return re.optEquals.test(arg);
  };
  var isOption = function(arg) {
    return (re.short.test(arg) || re.long.test(arg)) && !re.optEquals.test(arg);
  };
  var isLongOption = function(arg) {
    return re.long.test(arg) && !isOptionEqualsNotation(arg);
  };
  var getOptionName = function(arg) {
    if (re.short.test(arg)) {
      return arg.match(re.short)[1];
    } else if (isLongOption(arg)) {
      return arg.match(re.long)[1];
    } else if (isOptionEqualsNotation(arg)) {
      return arg.match(re.optEquals)[1].replace(/^--/, "");
    } else {
      return null;
    }
  };
  var isValue = function(arg) {
    return !(isOption(arg) || re.combinedShort.test(arg) || re.optEquals.test(arg));
  };
  var isExecArg = function(arg) {
    return ["--eval", "-e"].indexOf(arg) > -1 || arg.startsWith("--eval=");
  };
  var isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };
  var isPlainObject = function(input) {
    return input !== null && typeof input === "object" && input.constructor === Object;
  };
  var isArrayLike$2 = function(input) {
    return isObject$2(input) && typeof input.length === "number";
  };
  var isObject$2 = function(input) {
    return typeof input === "object" && input !== null;
  };
  var isDefined = function(input) {
    return typeof input !== "undefined";
  };
  var isString = function(input) {
    return typeof input === "string";
  };
  var isBoolean = function(input) {
    return typeof input === "boolean";
  };
  var isFunction = function(input) {
    return typeof input === "function";
  };
  var isClass = function(input) {
    if (isFunction(input)) {
      return /^class /.test(Function.prototype.toString.call(input));
    } else {
      return false;
    }
  };
  var isPrimitive = function(input) {
    if (input === null)
      return true;
    switch (typeof input) {
      case "string":
      case "number":
      case "symbol":
      case "undefined":
      case "boolean":
        return true;
      default:
        return false;
    }
  };
  var isPromise = function(input) {
    if (input) {
      const isPromise2 = isDefined(Promise) && input instanceof Promise;
      const isThenable = input.then && typeof input.then === "function";
      return !!(isPromise2 || isThenable);
    } else {
      return false;
    }
  };
  var isIterable = function(input) {
    if (input === null || !isDefined(input)) {
      return false;
    } else {
      return typeof input[Symbol.iterator] === "function" || typeof input[Symbol.asyncIterator] === "function";
    }
  };
  var halt = function(name, message) {
    const err = new Error(message);
    err.name = name;
    throw err;
  };
  var containsValidGroup = function(def) {
    return arrayify(def.group).some((group) => group);
  };
  var hasDuplicates = function(array) {
    const items = {};
    for (let i = 0;i < array.length; i++) {
      const value = array[i];
      if (items[value]) {
        return true;
      } else {
        if (t.isDefined(value))
          items[value] = true;
      }
    }
  };
  var commandLineArgs = function(optionDefinitions, options) {
    options = options || {};
    if (options.stopAtFirstUnknown)
      options.partial = true;
    optionDefinitions = Definitions.from(optionDefinitions, options.caseInsensitive);
    const parser = new ArgvParser(optionDefinitions, {
      argv: options.argv,
      stopAtFirstUnknown: options.stopAtFirstUnknown,
      caseInsensitive: options.caseInsensitive
    });
    const OutputClass = optionDefinitions.isGrouped() ? GroupedOutput : Output;
    const output = new OutputClass(optionDefinitions);
    for (const argInfo of parser) {
      const arg = argInfo.subArg || argInfo.arg;
      if (!options.partial) {
        if (argInfo.event === "unknown_value") {
          const err = new Error(`Unknown value: ${arg}`);
          err.name = "UNKNOWN_VALUE";
          err.value = arg;
          throw err;
        } else if (argInfo.event === "unknown_option") {
          const err = new Error(`Unknown option: ${arg}`);
          err.name = "UNKNOWN_OPTION";
          err.optionName = arg;
          throw err;
        }
      }
      let option;
      if (output.has(argInfo.name)) {
        option = output.get(argInfo.name);
      } else {
        option = Option.create(argInfo.def);
        output.set(argInfo.name, option);
      }
      if (argInfo.name === "_unknown") {
        option.set(arg);
      } else {
        option.set(argInfo.value);
      }
    }
    return output.toObject({ skipUnknown: !options.partial, camelCase: options.camelCase });
  };
  var camelCase = _interopDefault(require_lodash());
  var re = {
    short: /^-([^\d-])$/,
    long: /^--(\S+)/,
    combinedShort: /^-[^\d-]{2,}$/,
    optEquals: /^(--\S+?)=(.*)/
  };

  class ArgvArray extends Array {
    load(argv) {
      this.clear();
      if (argv && argv !== process.argv) {
        argv = arrayify(argv);
      } else {
        argv = process.argv.slice(0);
        const deleteCount = process.execArgv.some(isExecArg) ? 1 : 2;
        argv.splice(0, deleteCount);
      }
      argv.forEach((arg) => this.push(String(arg)));
    }
    clear() {
      this.length = 0;
    }
    expandOptionEqualsNotation() {
      if (this.some((arg) => re.optEquals.test(arg))) {
        const expandedArgs = [];
        this.forEach((arg) => {
          const matches = arg.match(re.optEquals);
          if (matches) {
            expandedArgs.push(matches[1], matches[2]);
          } else {
            expandedArgs.push(arg);
          }
        });
        this.clear();
        this.load(expandedArgs);
      }
    }
    expandGetoptNotation() {
      if (this.hasCombinedShortOptions()) {
        findReplace(this, re.combinedShort, expandCombinedShortArg);
      }
    }
    hasCombinedShortOptions() {
      return this.some((arg) => re.combinedShort.test(arg));
    }
    static from(argv) {
      const result = new this;
      result.load(argv);
      return result;
    }
  }
  var t = {
    isNumber,
    isString,
    isBoolean,
    isPlainObject,
    isArrayLike: isArrayLike$2,
    isObject: isObject$2,
    isDefined,
    isFunction,
    isClass,
    isPrimitive,
    isPromise,
    isIterable
  };

  class OptionDefinition {
    constructor(definition) {
      this.name = definition.name;
      this.type = definition.type || String;
      this.alias = definition.alias;
      this.multiple = definition.multiple;
      this.lazyMultiple = definition.lazyMultiple;
      this.defaultOption = definition.defaultOption;
      this.defaultValue = definition.defaultValue;
      this.group = definition.group;
      for (const prop in definition) {
        if (!this[prop])
          this[prop] = definition[prop];
      }
    }
    isBoolean() {
      return this.type === Boolean || t.isFunction(this.type) && this.type.name === "Boolean";
    }
    isMultiple() {
      return this.multiple || this.lazyMultiple;
    }
    static create(def) {
      const result = new this(def);
      return result;
    }
  }

  class Definitions extends Array {
    validate(caseInsensitive) {
      const someHaveNoName = this.some((def) => !def.name);
      if (someHaveNoName) {
        halt("INVALID_DEFINITIONS", "Invalid option definitions: the `name` property is required on each definition");
      }
      const someDontHaveFunctionType = this.some((def) => def.type && typeof def.type !== "function");
      if (someDontHaveFunctionType) {
        halt("INVALID_DEFINITIONS", "Invalid option definitions: the `type` property must be a setter fuction (default: `Boolean`)");
      }
      let invalidOption;
      const numericAlias = this.some((def) => {
        invalidOption = def;
        return t.isDefined(def.alias) && t.isNumber(def.alias);
      });
      if (numericAlias) {
        halt("INVALID_DEFINITIONS", "Invalid option definition: to avoid ambiguity an alias cannot be numeric [--" + invalidOption.name + " alias is -" + invalidOption.alias + "]");
      }
      const multiCharacterAlias = this.some((def) => {
        invalidOption = def;
        return t.isDefined(def.alias) && def.alias.length !== 1;
      });
      if (multiCharacterAlias) {
        halt("INVALID_DEFINITIONS", "Invalid option definition: an alias must be a single character");
      }
      const hypenAlias = this.some((def) => {
        invalidOption = def;
        return def.alias === "-";
      });
      if (hypenAlias) {
        halt("INVALID_DEFINITIONS", 'Invalid option definition: an alias cannot be "-"');
      }
      const duplicateName = hasDuplicates(this.map((def) => caseInsensitive ? def.name.toLowerCase() : def.name));
      if (duplicateName) {
        halt("INVALID_DEFINITIONS", "Two or more option definitions have the same name");
      }
      const duplicateAlias = hasDuplicates(this.map((def) => caseInsensitive && t.isDefined(def.alias) ? def.alias.toLowerCase() : def.alias));
      if (duplicateAlias) {
        halt("INVALID_DEFINITIONS", "Two or more option definitions have the same alias");
      }
      const duplicateDefaultOption = this.filter((def) => def.defaultOption === true).length > 1;
      if (duplicateDefaultOption) {
        halt("INVALID_DEFINITIONS", "Only one option definition can be the defaultOption");
      }
      const defaultBoolean = this.some((def) => {
        invalidOption = def;
        return def.isBoolean() && def.defaultOption;
      });
      if (defaultBoolean) {
        halt("INVALID_DEFINITIONS", `A boolean option ["${invalidOption.name}"] can not also be the defaultOption.`);
      }
    }
    get(arg, caseInsensitive) {
      if (isOption(arg)) {
        if (re.short.test(arg)) {
          const shortOptionName = getOptionName(arg);
          if (caseInsensitive) {
            const lowercaseShortOptionName = shortOptionName.toLowerCase();
            return this.find((def) => t.isDefined(def.alias) && def.alias.toLowerCase() === lowercaseShortOptionName);
          } else {
            return this.find((def) => def.alias === shortOptionName);
          }
        } else {
          const optionName = getOptionName(arg);
          if (caseInsensitive) {
            const lowercaseOptionName = optionName.toLowerCase();
            return this.find((def) => def.name.toLowerCase() === lowercaseOptionName);
          } else {
            return this.find((def) => def.name === optionName);
          }
        }
      } else {
        return this.find((def) => def.name === arg);
      }
    }
    getDefault() {
      return this.find((def) => def.defaultOption === true);
    }
    isGrouped() {
      return this.some((def) => def.group);
    }
    whereGrouped() {
      return this.filter(containsValidGroup);
    }
    whereNotGrouped() {
      return this.filter((def) => !containsValidGroup(def));
    }
    whereDefaultValueSet() {
      return this.filter((def) => t.isDefined(def.defaultValue));
    }
    static from(definitions, caseInsensitive) {
      if (definitions instanceof this)
        return definitions;
      const result = super.from(arrayify(definitions), (def) => OptionDefinition.create(def));
      result.validate(caseInsensitive);
      return result;
    }
  }

  class ArgvParser {
    constructor(definitions, options) {
      this.options = Object.assign({}, options);
      this.definitions = Definitions.from(definitions, this.options.caseInsensitive);
      this.argv = ArgvArray.from(this.options.argv);
      if (this.argv.hasCombinedShortOptions()) {
        findReplace(this.argv, re.combinedShort.test.bind(re.combinedShort), (arg) => {
          arg = arg.slice(1);
          return arg.split("").map((letter) => ({ origArg: `-${arg}`, arg: "-" + letter }));
        });
      }
    }
    *[Symbol.iterator]() {
      const definitions = this.definitions;
      let def;
      let value;
      let name;
      let event;
      let singularDefaultSet = false;
      let unknownFound = false;
      let origArg;
      for (let arg of this.argv) {
        if (t.isPlainObject(arg)) {
          origArg = arg.origArg;
          arg = arg.arg;
        }
        if (unknownFound && this.options.stopAtFirstUnknown) {
          yield { event: "unknown_value", arg, name: "_unknown", value: undefined };
          continue;
        }
        if (isOption(arg)) {
          def = definitions.get(arg, this.options.caseInsensitive);
          value = undefined;
          if (def) {
            value = def.isBoolean() ? true : null;
            event = "set";
          } else {
            event = "unknown_option";
          }
        } else if (isOptionEqualsNotation(arg)) {
          const matches = arg.match(re.optEquals);
          def = definitions.get(matches[1], this.options.caseInsensitive);
          if (def) {
            if (def.isBoolean()) {
              yield { event: "unknown_value", arg, name: "_unknown", value, def };
              event = "set";
              value = true;
            } else {
              event = "set";
              value = matches[2];
            }
          } else {
            event = "unknown_option";
          }
        } else if (isValue(arg)) {
          if (def) {
            value = arg;
            event = "set";
          } else {
            def = this.definitions.getDefault();
            if (def && !singularDefaultSet) {
              value = arg;
              event = "set";
            } else {
              event = "unknown_value";
              def = undefined;
            }
          }
        }
        name = def ? def.name : "_unknown";
        const argInfo = { event, arg, name, value, def };
        if (origArg) {
          argInfo.subArg = arg;
          argInfo.arg = origArg;
        }
        yield argInfo;
        if (name === "_unknown")
          unknownFound = true;
        if (def && def.defaultOption && !def.isMultiple() && event === "set")
          singularDefaultSet = true;
        if (def && def.isBoolean())
          def = undefined;
        if (def && !def.multiple && t.isDefined(value) && value !== null) {
          def = undefined;
        }
        value = undefined;
        event = undefined;
        name = undefined;
        origArg = undefined;
      }
    }
  }
  var _value = new WeakMap;

  class Option {
    constructor(definition) {
      this.definition = new OptionDefinition(definition);
      this.state = null;
      this.resetToDefault();
    }
    get() {
      return _value.get(this);
    }
    set(val) {
      this._set(val, "set");
    }
    _set(val, state) {
      const def = this.definition;
      if (def.isMultiple()) {
        if (val !== null && val !== undefined) {
          const arr = this.get();
          if (this.state === "default")
            arr.length = 0;
          arr.push(def.type(val));
          this.state = state;
        }
      } else {
        if (!def.isMultiple() && this.state === "set") {
          const err = new Error(`Singular option already set [${this.definition.name}=${this.get()}]`);
          err.name = "ALREADY_SET";
          err.value = val;
          err.optionName = def.name;
          throw err;
        } else if (val === null || val === undefined) {
          _value.set(this, val);
        } else {
          _value.set(this, def.type(val));
          this.state = state;
        }
      }
    }
    resetToDefault() {
      if (t.isDefined(this.definition.defaultValue)) {
        if (this.definition.isMultiple()) {
          _value.set(this, arrayify(this.definition.defaultValue).slice());
        } else {
          _value.set(this, this.definition.defaultValue);
        }
      } else {
        if (this.definition.isMultiple()) {
          _value.set(this, []);
        } else {
          _value.set(this, null);
        }
      }
      this.state = "default";
    }
    static create(definition) {
      definition = new OptionDefinition(definition);
      if (definition.isBoolean()) {
        return FlagOption.create(definition);
      } else {
        return new this(definition);
      }
    }
  }

  class FlagOption extends Option {
    set(val) {
      super.set(true);
    }
    static create(def) {
      return new this(def);
    }
  }

  class Output extends Map {
    constructor(definitions) {
      super();
      this.definitions = Definitions.from(definitions);
      this.set("_unknown", Option.create({ name: "_unknown", multiple: true }));
      for (const def of this.definitions.whereDefaultValueSet()) {
        this.set(def.name, Option.create(def));
      }
    }
    toObject(options) {
      options = options || {};
      const output = {};
      for (const item of this) {
        const name = options.camelCase && item[0] !== "_unknown" ? camelCase(item[0]) : item[0];
        const option = item[1];
        if (name === "_unknown" && !option.get().length)
          continue;
        output[name] = option.get();
      }
      if (options.skipUnknown)
        delete output._unknown;
      return output;
    }
  }

  class GroupedOutput extends Output {
    toObject(options) {
      const superOutputNoCamel = super.toObject({ skipUnknown: options.skipUnknown });
      const superOutput = super.toObject(options);
      const unknown = superOutput._unknown;
      delete superOutput._unknown;
      const grouped = {
        _all: superOutput
      };
      if (unknown && unknown.length)
        grouped._unknown = unknown;
      this.definitions.whereGrouped().forEach((def) => {
        const name = options.camelCase ? camelCase(def.name) : def.name;
        const outputValue = superOutputNoCamel[def.name];
        for (const groupName of arrayify(def.group)) {
          grouped[groupName] = grouped[groupName] || {};
          if (t.isDefined(outputValue)) {
            grouped[groupName][name] = outputValue;
          }
        }
      });
      this.definitions.whereNotGrouped().forEach((def) => {
        const name = options.camelCase ? camelCase(def.name) : def.name;
        const outputValue = superOutputNoCamel[def.name];
        if (t.isDefined(outputValue)) {
          if (!grouped._none)
            grouped._none = {};
          grouped._none[name] = outputValue;
        }
      });
      return grouped;
    }
  }
  module.exports = commandLineArgs;
});

// node_modules/yaml/dist/nodes/identity.js
var require_identity = __commonJS((exports) => {
  var isCollection = function(node) {
    if (node && typeof node === "object")
      switch (node[NODE_TYPE]) {
        case MAP:
        case SEQ:
          return true;
      }
    return false;
  };
  var isNode = function(node) {
    if (node && typeof node === "object")
      switch (node[NODE_TYPE]) {
        case ALIAS:
        case MAP:
        case SCALAR:
        case SEQ:
          return true;
      }
    return false;
  };
  var ALIAS = Symbol.for("yaml.alias");
  var DOC = Symbol.for("yaml.document");
  var MAP = Symbol.for("yaml.map");
  var PAIR = Symbol.for("yaml.pair");
  var SCALAR = Symbol.for("yaml.scalar");
  var SEQ = Symbol.for("yaml.seq");
  var NODE_TYPE = Symbol.for("yaml.node.type");
  var isAlias = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
  var isDocument = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC;
  var isMap = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP;
  var isPair = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
  var isScalar = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
  var isSeq = (node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
  var hasAnchor = (node) => (isScalar(node) || isCollection(node)) && !!node.anchor;
  exports.ALIAS = ALIAS;
  exports.DOC = DOC;
  exports.MAP = MAP;
  exports.NODE_TYPE = NODE_TYPE;
  exports.PAIR = PAIR;
  exports.SCALAR = SCALAR;
  exports.SEQ = SEQ;
  exports.hasAnchor = hasAnchor;
  exports.isAlias = isAlias;
  exports.isCollection = isCollection;
  exports.isDocument = isDocument;
  exports.isMap = isMap;
  exports.isNode = isNode;
  exports.isPair = isPair;
  exports.isScalar = isScalar;
  exports.isSeq = isSeq;
});

// node_modules/yaml/dist/visit.js
var require_visit = __commonJS((exports) => {
  var visit = function(node, visitor2) {
    const visitor_ = initVisitor(visitor2);
    if (identity.isDocument(node)) {
      const cd = visit_(null, node.contents, visitor_, Object.freeze([node]));
      if (cd === REMOVE)
        node.contents = null;
    } else
      visit_(null, node, visitor_, Object.freeze([]));
  };
  var visit_ = function(key, node, visitor2, path) {
    const ctrl = callVisitor(key, node, visitor2, path);
    if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
      replaceNode(key, path, ctrl);
      return visit_(key, ctrl, visitor2, path);
    }
    if (typeof ctrl !== "symbol") {
      if (identity.isCollection(node)) {
        path = Object.freeze(path.concat(node));
        for (let i = 0;i < node.items.length; ++i) {
          const ci = visit_(i, node.items[i], visitor2, path);
          if (typeof ci === "number")
            i = ci - 1;
          else if (ci === BREAK)
            return BREAK;
          else if (ci === REMOVE) {
            node.items.splice(i, 1);
            i -= 1;
          }
        }
      } else if (identity.isPair(node)) {
        path = Object.freeze(path.concat(node));
        const ck = visit_("key", node.key, visitor2, path);
        if (ck === BREAK)
          return BREAK;
        else if (ck === REMOVE)
          node.key = null;
        const cv = visit_("value", node.value, visitor2, path);
        if (cv === BREAK)
          return BREAK;
        else if (cv === REMOVE)
          node.value = null;
      }
    }
    return ctrl;
  };
  async function visitAsync(node, visitor2) {
    const visitor_ = initVisitor(visitor2);
    if (identity.isDocument(node)) {
      const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
      if (cd === REMOVE)
        node.contents = null;
    } else
      await visitAsync_(null, node, visitor_, Object.freeze([]));
  }
  async function visitAsync_(key, node, visitor2, path) {
    const ctrl = await callVisitor(key, node, visitor2, path);
    if (identity.isNode(ctrl) || identity.isPair(ctrl)) {
      replaceNode(key, path, ctrl);
      return visitAsync_(key, ctrl, visitor2, path);
    }
    if (typeof ctrl !== "symbol") {
      if (identity.isCollection(node)) {
        path = Object.freeze(path.concat(node));
        for (let i = 0;i < node.items.length; ++i) {
          const ci = await visitAsync_(i, node.items[i], visitor2, path);
          if (typeof ci === "number")
            i = ci - 1;
          else if (ci === BREAK)
            return BREAK;
          else if (ci === REMOVE) {
            node.items.splice(i, 1);
            i -= 1;
          }
        }
      } else if (identity.isPair(node)) {
        path = Object.freeze(path.concat(node));
        const ck = await visitAsync_("key", node.key, visitor2, path);
        if (ck === BREAK)
          return BREAK;
        else if (ck === REMOVE)
          node.key = null;
        const cv = await visitAsync_("value", node.value, visitor2, path);
        if (cv === BREAK)
          return BREAK;
        else if (cv === REMOVE)
          node.value = null;
      }
    }
    return ctrl;
  }
  var initVisitor = function(visitor2) {
    if (typeof visitor2 === "object" && (visitor2.Collection || visitor2.Node || visitor2.Value)) {
      return Object.assign({
        Alias: visitor2.Node,
        Map: visitor2.Node,
        Scalar: visitor2.Node,
        Seq: visitor2.Node
      }, visitor2.Value && {
        Map: visitor2.Value,
        Scalar: visitor2.Value,
        Seq: visitor2.Value
      }, visitor2.Collection && {
        Map: visitor2.Collection,
        Seq: visitor2.Collection
      }, visitor2);
    }
    return visitor2;
  };
  var callVisitor = function(key, node, visitor2, path) {
    if (typeof visitor2 === "function")
      return visitor2(key, node, path);
    if (identity.isMap(node))
      return visitor2.Map?.(key, node, path);
    if (identity.isSeq(node))
      return visitor2.Seq?.(key, node, path);
    if (identity.isPair(node))
      return visitor2.Pair?.(key, node, path);
    if (identity.isScalar(node))
      return visitor2.Scalar?.(key, node, path);
    if (identity.isAlias(node))
      return visitor2.Alias?.(key, node, path);
    return;
  };
  var replaceNode = function(key, path, node) {
    const parent = path[path.length - 1];
    if (identity.isCollection(parent)) {
      parent.items[key] = node;
    } else if (identity.isPair(parent)) {
      if (key === "key")
        parent.key = node;
      else
        parent.value = node;
    } else if (identity.isDocument(parent)) {
      parent.contents = node;
    } else {
      const pt = identity.isAlias(parent) ? "alias" : "scalar";
      throw new Error(`Cannot replace node with ${pt} parent`);
    }
  };
  var identity = require_identity();
  var BREAK = Symbol("break visit");
  var SKIP = Symbol("skip children");
  var REMOVE = Symbol("remove node");
  visit.BREAK = BREAK;
  visit.SKIP = SKIP;
  visit.REMOVE = REMOVE;
  visitAsync.BREAK = BREAK;
  visitAsync.SKIP = SKIP;
  visitAsync.REMOVE = REMOVE;
  exports.visit = visit;
  exports.visitAsync = visitAsync;
});

// node_modules/yaml/dist/doc/directives.js
var require_directives = __commonJS((exports) => {
  var identity = require_identity();
  var visit = require_visit();
  var escapeChars = {
    "!": "%21",
    ",": "%2C",
    "[": "%5B",
    "]": "%5D",
    "{": "%7B",
    "}": "%7D"
  };
  var escapeTagName = (tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]);

  class Directives {
    constructor(yaml, tags) {
      this.docStart = null;
      this.docEnd = false;
      this.yaml = Object.assign({}, Directives.defaultYaml, yaml);
      this.tags = Object.assign({}, Directives.defaultTags, tags);
    }
    clone() {
      const copy = new Directives(this.yaml, this.tags);
      copy.docStart = this.docStart;
      return copy;
    }
    atDocument() {
      const res = new Directives(this.yaml, this.tags);
      switch (this.yaml.version) {
        case "1.1":
          this.atNextDocument = true;
          break;
        case "1.2":
          this.atNextDocument = false;
          this.yaml = {
            explicit: Directives.defaultYaml.explicit,
            version: "1.2"
          };
          this.tags = Object.assign({}, Directives.defaultTags);
          break;
      }
      return res;
    }
    add(line, onError) {
      if (this.atNextDocument) {
        this.yaml = { explicit: Directives.defaultYaml.explicit, version: "1.1" };
        this.tags = Object.assign({}, Directives.defaultTags);
        this.atNextDocument = false;
      }
      const parts = line.trim().split(/[ \t]+/);
      const name = parts.shift();
      switch (name) {
        case "%TAG": {
          if (parts.length !== 2) {
            onError(0, "%TAG directive should contain exactly two parts");
            if (parts.length < 2)
              return false;
          }
          const [handle, prefix] = parts;
          this.tags[handle] = prefix;
          return true;
        }
        case "%YAML": {
          this.yaml.explicit = true;
          if (parts.length !== 1) {
            onError(0, "%YAML directive should contain exactly one part");
            return false;
          }
          const [version] = parts;
          if (version === "1.1" || version === "1.2") {
            this.yaml.version = version;
            return true;
          } else {
            const isValid = /^\d+\.\d+$/.test(version);
            onError(6, `Unsupported YAML version ${version}`, isValid);
            return false;
          }
        }
        default:
          onError(0, `Unknown directive ${name}`, true);
          return false;
      }
    }
    tagName(source, onError) {
      if (source === "!")
        return "!";
      if (source[0] !== "!") {
        onError(`Not a valid tag: ${source}`);
        return null;
      }
      if (source[1] === "<") {
        const verbatim = source.slice(2, -1);
        if (verbatim === "!" || verbatim === "!!") {
          onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
          return null;
        }
        if (source[source.length - 1] !== ">")
          onError("Verbatim tags must end with a >");
        return verbatim;
      }
      const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
      if (!suffix)
        onError(`The ${source} tag has no suffix`);
      const prefix = this.tags[handle];
      if (prefix)
        return prefix + decodeURIComponent(suffix);
      if (handle === "!")
        return source;
      onError(`Could not resolve tag: ${source}`);
      return null;
    }
    tagString(tag) {
      for (const [handle, prefix] of Object.entries(this.tags)) {
        if (tag.startsWith(prefix))
          return handle + escapeTagName(tag.substring(prefix.length));
      }
      return tag[0] === "!" ? tag : `!<${tag}>`;
    }
    toString(doc) {
      const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
      const tagEntries = Object.entries(this.tags);
      let tagNames;
      if (doc && tagEntries.length > 0 && identity.isNode(doc.contents)) {
        const tags = {};
        visit.visit(doc.contents, (_key, node) => {
          if (identity.isNode(node) && node.tag)
            tags[node.tag] = true;
        });
        tagNames = Object.keys(tags);
      } else
        tagNames = [];
      for (const [handle, prefix] of tagEntries) {
        if (handle === "!!" && prefix === "tag:yaml.org,2002:")
          continue;
        if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
          lines.push(`%TAG ${handle} ${prefix}`);
      }
      return lines.join("\n");
    }
  }
  Directives.defaultYaml = { explicit: false, version: "1.2" };
  Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };
  exports.Directives = Directives;
});

// node_modules/yaml/dist/doc/anchors.js
var require_anchors = __commonJS((exports) => {
  var anchorIsValid = function(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
      const sa = JSON.stringify(anchor);
      const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
      throw new Error(msg);
    }
    return true;
  };
  var anchorNames = function(root) {
    const anchors = new Set;
    visit.visit(root, {
      Value(_key, node) {
        if (node.anchor)
          anchors.add(node.anchor);
      }
    });
    return anchors;
  };
  var findNewAnchor = function(prefix, exclude) {
    for (let i = 1;; ++i) {
      const name = `${prefix}${i}`;
      if (!exclude.has(name))
        return name;
    }
  };
  var createNodeAnchors = function(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = new Map;
    let prevAnchors = null;
    return {
      onAnchor: (source) => {
        aliasObjects.push(source);
        if (!prevAnchors)
          prevAnchors = anchorNames(doc);
        const anchor = findNewAnchor(prefix, prevAnchors);
        prevAnchors.add(anchor);
        return anchor;
      },
      setAnchors: () => {
        for (const source of aliasObjects) {
          const ref = sourceObjects.get(source);
          if (typeof ref === "object" && ref.anchor && (identity.isScalar(ref.node) || identity.isCollection(ref.node))) {
            ref.node.anchor = ref.anchor;
          } else {
            const error = new Error("Failed to resolve repeated object (this should not happen)");
            error.source = source;
            throw error;
          }
        }
      },
      sourceObjects
    };
  };
  var identity = require_identity();
  var visit = require_visit();
  exports.anchorIsValid = anchorIsValid;
  exports.anchorNames = anchorNames;
  exports.createNodeAnchors = createNodeAnchors;
  exports.findNewAnchor = findNewAnchor;
});

// node_modules/yaml/dist/doc/applyReviver.js
var require_applyReviver = __commonJS((exports) => {
  var applyReviver = function(reviver, obj, key, val) {
    if (val && typeof val === "object") {
      if (Array.isArray(val)) {
        for (let i = 0, len = val.length;i < len; ++i) {
          const v0 = val[i];
          const v1 = applyReviver(reviver, val, String(i), v0);
          if (v1 === undefined)
            delete val[i];
          else if (v1 !== v0)
            val[i] = v1;
        }
      } else if (val instanceof Map) {
        for (const k of Array.from(val.keys())) {
          const v0 = val.get(k);
          const v1 = applyReviver(reviver, val, k, v0);
          if (v1 === undefined)
            val.delete(k);
          else if (v1 !== v0)
            val.set(k, v1);
        }
      } else if (val instanceof Set) {
        for (const v0 of Array.from(val)) {
          const v1 = applyReviver(reviver, val, v0, v0);
          if (v1 === undefined)
            val.delete(v0);
          else if (v1 !== v0) {
            val.delete(v0);
            val.add(v1);
          }
        }
      } else {
        for (const [k, v0] of Object.entries(val)) {
          const v1 = applyReviver(reviver, val, k, v0);
          if (v1 === undefined)
            delete val[k];
          else if (v1 !== v0)
            val[k] = v1;
        }
      }
    }
    return reviver.call(obj, key, val);
  };
  exports.applyReviver = applyReviver;
});

// node_modules/yaml/dist/nodes/toJS.js
var require_toJS = __commonJS((exports) => {
  var toJS = function(value, arg, ctx) {
    if (Array.isArray(value))
      return value.map((v, i) => toJS(v, String(i), ctx));
    if (value && typeof value.toJSON === "function") {
      if (!ctx || !identity.hasAnchor(value))
        return value.toJSON(arg, ctx);
      const data = { aliasCount: 0, count: 1, res: undefined };
      ctx.anchors.set(value, data);
      ctx.onCreate = (res2) => {
        data.res = res2;
        delete ctx.onCreate;
      };
      const res = value.toJSON(arg, ctx);
      if (ctx.onCreate)
        ctx.onCreate(res);
      return res;
    }
    if (typeof value === "bigint" && !ctx?.keep)
      return Number(value);
    return value;
  };
  var identity = require_identity();
  exports.toJS = toJS;
});

// node_modules/yaml/dist/nodes/Node.js
var require_Node = __commonJS((exports) => {
  var applyReviver = require_applyReviver();
  var identity = require_identity();
  var toJS = require_toJS();

  class NodeBase {
    constructor(type) {
      Object.defineProperty(this, identity.NODE_TYPE, { value: type });
    }
    clone() {
      const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
      if (this.range)
        copy.range = this.range.slice();
      return copy;
    }
    toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
      if (!identity.isDocument(doc))
        throw new TypeError("A document argument is required");
      const ctx = {
        anchors: new Map,
        doc,
        keep: true,
        mapAsMap: mapAsMap === true,
        mapKeyWarned: false,
        maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
      };
      const res = toJS.toJS(this, "", ctx);
      if (typeof onAnchor === "function")
        for (const { count, res: res2 } of ctx.anchors.values())
          onAnchor(res2, count);
      return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
    }
  }
  exports.NodeBase = NodeBase;
});

// node_modules/yaml/dist/nodes/Alias.js
var require_Alias = __commonJS((exports) => {
  var getAliasCount = function(doc, node, anchors2) {
    if (identity.isAlias(node)) {
      const source = node.resolve(doc);
      const anchor = anchors2 && source && anchors2.get(source);
      return anchor ? anchor.count * anchor.aliasCount : 0;
    } else if (identity.isCollection(node)) {
      let count = 0;
      for (const item of node.items) {
        const c = getAliasCount(doc, item, anchors2);
        if (c > count)
          count = c;
      }
      return count;
    } else if (identity.isPair(node)) {
      const kc = getAliasCount(doc, node.key, anchors2);
      const vc = getAliasCount(doc, node.value, anchors2);
      return Math.max(kc, vc);
    }
    return 1;
  };
  var anchors = require_anchors();
  var visit = require_visit();
  var identity = require_identity();
  var Node = require_Node();
  var toJS = require_toJS();

  class Alias extends Node.NodeBase {
    constructor(source) {
      super(identity.ALIAS);
      this.source = source;
      Object.defineProperty(this, "tag", {
        set() {
          throw new Error("Alias nodes cannot have tags");
        }
      });
    }
    resolve(doc) {
      let found = undefined;
      visit.visit(doc, {
        Node: (_key, node) => {
          if (node === this)
            return visit.visit.BREAK;
          if (node.anchor === this.source)
            found = node;
        }
      });
      return found;
    }
    toJSON(_arg, ctx) {
      if (!ctx)
        return { source: this.source };
      const { anchors: anchors2, doc, maxAliasCount } = ctx;
      const source = this.resolve(doc);
      if (!source) {
        const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
        throw new ReferenceError(msg);
      }
      let data = anchors2.get(source);
      if (!data) {
        toJS.toJS(source, null, ctx);
        data = anchors2.get(source);
      }
      if (!data || data.res === undefined) {
        const msg = "This should not happen: Alias anchor was not resolved?";
        throw new ReferenceError(msg);
      }
      if (maxAliasCount >= 0) {
        data.count += 1;
        if (data.aliasCount === 0)
          data.aliasCount = getAliasCount(doc, source, anchors2);
        if (data.count * data.aliasCount > maxAliasCount) {
          const msg = "Excessive alias count indicates a resource exhaustion attack";
          throw new ReferenceError(msg);
        }
      }
      return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
      const src = `*${this.source}`;
      if (ctx) {
        anchors.anchorIsValid(this.source);
        if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
          const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
          throw new Error(msg);
        }
        if (ctx.implicitKey)
          return `${src} `;
      }
      return src;
    }
  }
  exports.Alias = Alias;
});

// node_modules/yaml/dist/nodes/Scalar.js
var require_Scalar = __commonJS((exports) => {
  var identity = require_identity();
  var Node = require_Node();
  var toJS = require_toJS();
  var isScalarValue = (value) => !value || typeof value !== "function" && typeof value !== "object";

  class Scalar extends Node.NodeBase {
    constructor(value) {
      super(identity.SCALAR);
      this.value = value;
    }
    toJSON(arg, ctx) {
      return ctx?.keep ? this.value : toJS.toJS(this.value, arg, ctx);
    }
    toString() {
      return String(this.value);
    }
  }
  Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
  Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
  Scalar.PLAIN = "PLAIN";
  Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
  Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
  exports.Scalar = Scalar;
  exports.isScalarValue = isScalarValue;
});

// node_modules/yaml/dist/doc/createNode.js
var require_createNode = __commonJS((exports) => {
  var findTagObject = function(value, tagName, tags) {
    if (tagName) {
      const match = tags.filter((t) => t.tag === tagName);
      const tagObj = match.find((t) => !t.format) ?? match[0];
      if (!tagObj)
        throw new Error(`Tag ${tagName} not found`);
      return tagObj;
    }
    return tags.find((t) => t.identify?.(value) && !t.format);
  };
  var createNode = function(value, tagName, ctx) {
    if (identity.isDocument(value))
      value = value.contents;
    if (identity.isNode(value))
      return value;
    if (identity.isPair(value)) {
      const map = ctx.schema[identity.MAP].createNode?.(ctx.schema, null, ctx);
      map.items.push(value);
      return map;
    }
    if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt !== "undefined" && value instanceof BigInt) {
      value = value.valueOf();
    }
    const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
    let ref = undefined;
    if (aliasDuplicateObjects && value && typeof value === "object") {
      ref = sourceObjects.get(value);
      if (ref) {
        if (!ref.anchor)
          ref.anchor = onAnchor(value);
        return new Alias.Alias(ref.anchor);
      } else {
        ref = { anchor: null, node: null };
        sourceObjects.set(value, ref);
      }
    }
    if (tagName?.startsWith("!!"))
      tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value, tagName, schema.tags);
    if (!tagObj) {
      if (value && typeof value.toJSON === "function") {
        value = value.toJSON();
      }
      if (!value || typeof value !== "object") {
        const node2 = new Scalar.Scalar(value);
        if (ref)
          ref.node = node2;
        return node2;
      }
      tagObj = value instanceof Map ? schema[identity.MAP] : (Symbol.iterator in Object(value)) ? schema[identity.SEQ] : schema[identity.MAP];
    }
    if (onTagObj) {
      onTagObj(tagObj);
      delete ctx.onTagObj;
    }
    const node = tagObj?.createNode ? tagObj.createNode(ctx.schema, value, ctx) : typeof tagObj?.nodeClass?.from === "function" ? tagObj.nodeClass.from(ctx.schema, value, ctx) : new Scalar.Scalar(value);
    if (tagName)
      node.tag = tagName;
    else if (!tagObj.default)
      node.tag = tagObj.tag;
    if (ref)
      ref.node = node;
    return node;
  };
  var Alias = require_Alias();
  var identity = require_identity();
  var Scalar = require_Scalar();
  var defaultTagPrefix = "tag:yaml.org,2002:";
  exports.createNode = createNode;
});

// node_modules/yaml/dist/nodes/Collection.js
var require_Collection = __commonJS((exports) => {
  var collectionFromPath = function(schema, path, value) {
    let v = value;
    for (let i = path.length - 1;i >= 0; --i) {
      const k = path[i];
      if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
        const a = [];
        a[k] = v;
        v = a;
      } else {
        v = new Map([[k, v]]);
      }
    }
    return createNode.createNode(v, undefined, {
      aliasDuplicateObjects: false,
      keepUndefined: false,
      onAnchor: () => {
        throw new Error("This should not happen, please report a bug.");
      },
      schema,
      sourceObjects: new Map
    });
  };
  var createNode = require_createNode();
  var identity = require_identity();
  var Node = require_Node();
  var isEmptyPath = (path) => path == null || typeof path === "object" && !!path[Symbol.iterator]().next().done;

  class Collection extends Node.NodeBase {
    constructor(type, schema) {
      super(type);
      Object.defineProperty(this, "schema", {
        value: schema,
        configurable: true,
        enumerable: false,
        writable: true
      });
    }
    clone(schema) {
      const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
      if (schema)
        copy.schema = schema;
      copy.items = copy.items.map((it) => identity.isNode(it) || identity.isPair(it) ? it.clone(schema) : it);
      if (this.range)
        copy.range = this.range.slice();
      return copy;
    }
    addIn(path, value) {
      if (isEmptyPath(path))
        this.add(value);
      else {
        const [key, ...rest] = path;
        const node = this.get(key, true);
        if (identity.isCollection(node))
          node.addIn(rest, value);
        else if (node === undefined && this.schema)
          this.set(key, collectionFromPath(this.schema, rest, value));
        else
          throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
    }
    deleteIn(path) {
      const [key, ...rest] = path;
      if (rest.length === 0)
        return this.delete(key);
      const node = this.get(key, true);
      if (identity.isCollection(node))
        return node.deleteIn(rest);
      else
        throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    getIn(path, keepScalar) {
      const [key, ...rest] = path;
      const node = this.get(key, true);
      if (rest.length === 0)
        return !keepScalar && identity.isScalar(node) ? node.value : node;
      else
        return identity.isCollection(node) ? node.getIn(rest, keepScalar) : undefined;
    }
    hasAllNullValues(allowScalar) {
      return this.items.every((node) => {
        if (!identity.isPair(node))
          return false;
        const n = node.value;
        return n == null || allowScalar && identity.isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
      });
    }
    hasIn(path) {
      const [key, ...rest] = path;
      if (rest.length === 0)
        return this.has(key);
      const node = this.get(key, true);
      return identity.isCollection(node) ? node.hasIn(rest) : false;
    }
    setIn(path, value) {
      const [key, ...rest] = path;
      if (rest.length === 0) {
        this.set(key, value);
      } else {
        const node = this.get(key, true);
        if (identity.isCollection(node))
          node.setIn(rest, value);
        else if (node === undefined && this.schema)
          this.set(key, collectionFromPath(this.schema, rest, value));
        else
          throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
      }
    }
  }
  Collection.maxFlowStringSingleLineLength = 60;
  exports.Collection = Collection;
  exports.collectionFromPath = collectionFromPath;
  exports.isEmptyPath = isEmptyPath;
});

// node_modules/yaml/dist/stringify/stringifyComment.js
var require_stringifyComment = __commonJS((exports) => {
  var indentComment = function(comment, indent) {
    if (/^\n+$/.test(comment))
      return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
  };
  var stringifyComment = (str) => str.replace(/^(?!$)(?: $)?/gm, "#");
  var lineComment = (str, indent, comment) => str.endsWith("\n") ? indentComment(comment, indent) : comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
  exports.indentComment = indentComment;
  exports.lineComment = lineComment;
  exports.stringifyComment = stringifyComment;
});

// node_modules/yaml/dist/stringify/foldFlowLines.js
var require_foldFlowLines = __commonJS((exports) => {
  var foldFlowLines = function(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
    if (!lineWidth || lineWidth < 0)
      return text;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep)
      return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === "number") {
      if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
        folds.push(0);
      else
        end = lineWidth - indentAtStart;
    }
    let split = undefined;
    let prev = undefined;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
      i = consumeMoreIndentedLines(text, i);
      if (i !== -1)
        end = i + endStep;
    }
    for (let ch;ch = text[i += 1]; ) {
      if (mode === FOLD_QUOTED && ch === "\\") {
        escStart = i;
        switch (text[i + 1]) {
          case "x":
            i += 3;
            break;
          case "u":
            i += 5;
            break;
          case "U":
            i += 9;
            break;
          default:
            i += 1;
        }
        escEnd = i;
      }
      if (ch === "\n") {
        if (mode === FOLD_BLOCK)
          i = consumeMoreIndentedLines(text, i);
        end = i + endStep;
        split = undefined;
      } else {
        if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "\t") {
          const next = text[i + 1];
          if (next && next !== " " && next !== "\n" && next !== "\t")
            split = i;
        }
        if (i >= end) {
          if (split) {
            folds.push(split);
            end = split + endStep;
            split = undefined;
          } else if (mode === FOLD_QUOTED) {
            while (prev === " " || prev === "\t") {
              prev = ch;
              ch = text[i += 1];
              overflow = true;
            }
            const j = i > escEnd + 1 ? i - 2 : escStart - 1;
            if (escapedFolds[j])
              return text;
            folds.push(j);
            escapedFolds[j] = true;
            end = j + endStep;
            split = undefined;
          } else {
            overflow = true;
          }
        }
      }
      prev = ch;
    }
    if (overflow && onOverflow)
      onOverflow();
    if (folds.length === 0)
      return text;
    if (onFold)
      onFold();
    let res = text.slice(0, folds[0]);
    for (let i2 = 0;i2 < folds.length; ++i2) {
      const fold = folds[i2];
      const end2 = folds[i2 + 1] || text.length;
      if (fold === 0)
        res = `\n${indent}${text.slice(0, end2)}`;
      else {
        if (mode === FOLD_QUOTED && escapedFolds[fold])
          res += `${text[fold]}\\`;
        res += `\n${indent}${text.slice(fold + 1, end2)}`;
      }
    }
    return res;
  };
  var consumeMoreIndentedLines = function(text, i) {
    let ch = text[i + 1];
    while (ch === " " || ch === "\t") {
      do {
        ch = text[i += 1];
      } while (ch && ch !== "\n");
      ch = text[i + 1];
    }
    return i;
  };
  var FOLD_FLOW = "flow";
  var FOLD_BLOCK = "block";
  var FOLD_QUOTED = "quoted";
  exports.FOLD_BLOCK = FOLD_BLOCK;
  exports.FOLD_FLOW = FOLD_FLOW;
  exports.FOLD_QUOTED = FOLD_QUOTED;
  exports.foldFlowLines = foldFlowLines;
});

// node_modules/yaml/dist/stringify/stringifyString.js
var require_stringifyString = __commonJS((exports) => {
  var lineLengthOverLimit = function(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0)
      return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit)
      return false;
    for (let i = 0, start = 0;i < strLen; ++i) {
      if (str[i] === "\n") {
        if (i - start > limit)
          return true;
        start = i + 1;
        if (strLen - start <= limit)
          return false;
      }
    }
    return true;
  };
  var doubleQuotedString = function(value, ctx) {
    const json = JSON.stringify(value);
    if (ctx.options.doubleQuotedAsJSON)
      return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
    let str = "";
    let start = 0;
    for (let i = 0, ch = json[i];ch; ch = json[++i]) {
      if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
        str += json.slice(start, i) + "\\ ";
        i += 1;
        start = i;
        ch = "\\";
      }
      if (ch === "\\")
        switch (json[i + 1]) {
          case "u":
            {
              str += json.slice(start, i);
              const code = json.substr(i + 2, 4);
              switch (code) {
                case "0000":
                  str += "\\0";
                  break;
                case "0007":
                  str += "\\a";
                  break;
                case "000b":
                  str += "\\v";
                  break;
                case "001b":
                  str += "\\e";
                  break;
                case "0085":
                  str += "\\N";
                  break;
                case "00a0":
                  str += "\\_";
                  break;
                case "2028":
                  str += "\\L";
                  break;
                case "2029":
                  str += "\\P";
                  break;
                default:
                  if (code.substr(0, 2) === "00")
                    str += "\\x" + code.substr(2);
                  else
                    str += json.substr(i, 6);
              }
              i += 5;
              start = i + 1;
            }
            break;
          case "n":
            if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
              i += 1;
            } else {
              str += json.slice(start, i) + "\n\n";
              while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                str += "\n";
                i += 2;
              }
              str += indent;
              if (json[i + 2] === " ")
                str += "\\";
              i += 1;
              start = i + 1;
            }
            break;
          default:
            i += 1;
        }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx, false));
  };
  var singleQuotedString = function(value, ctx) {
    if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes("\n") || /[ \t]\n|\n[ \t]/.test(value))
      return doubleQuotedString(value, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
    const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `\$&\n${indent}`) + "'";
    return ctx.implicitKey ? res : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
  };
  var quotedString = function(value, ctx) {
    const { singleQuote } = ctx.options;
    let qs;
    if (singleQuote === false)
      qs = doubleQuotedString;
    else {
      const hasDouble = value.includes('"');
      const hasSingle = value.includes("'");
      if (hasDouble && !hasSingle)
        qs = singleQuotedString;
      else if (hasSingle && !hasDouble)
        qs = doubleQuotedString;
      else
        qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value, ctx);
  };
  var blockString = function({ comment, type, value }, ctx, onComment, onChompKeep) {
    const { blockQuote, commentString, lineWidth } = ctx.options;
    if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
      return quotedString(value, ctx);
    }
    const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
    const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.Scalar.BLOCK_FOLDED ? false : type === Scalar.Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
    if (!value)
      return literal ? "|\n" : ">\n";
    let chomp;
    let endStart;
    for (endStart = value.length;endStart > 0; --endStart) {
      const ch = value[endStart - 1];
      if (ch !== "\n" && ch !== "\t" && ch !== " ")
        break;
    }
    let end = value.substring(endStart);
    const endNlPos = end.indexOf("\n");
    if (endNlPos === -1) {
      chomp = "-";
    } else if (value === end || endNlPos !== end.length - 1) {
      chomp = "+";
      if (onChompKeep)
        onChompKeep();
    } else {
      chomp = "";
    }
    if (end) {
      value = value.slice(0, -end.length);
      if (end[end.length - 1] === "\n")
        end = end.slice(0, -1);
      end = end.replace(blockEndNewlines, `\$&${indent}`);
    }
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for (startEnd = 0;startEnd < value.length; ++startEnd) {
      const ch = value[startEnd];
      if (ch === " ")
        startWithSpace = true;
      else if (ch === "\n")
        startNlPos = startEnd;
      else
        break;
    }
    let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
      value = value.substring(start.length);
      start = start.replace(/\n+/g, `\$&${indent}`);
    }
    const indentSize = indent ? "2" : "1";
    let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
    if (comment) {
      header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
      if (onComment)
        onComment();
    }
    if (literal) {
      value = value.replace(/\n+/g, `\$&${indent}`);
      return `${header}\n${indent}${start}${value}${end}`;
    }
    value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `\$&${indent}`);
    const body = foldFlowLines.foldFlowLines(`${start}${value}${end}`, indent, foldFlowLines.FOLD_BLOCK, getFoldOptions(ctx, true));
    return `${header}\n${indent}${body}`;
  };
  var plainString = function(item, ctx, onComment, onChompKeep) {
    const { type, value } = item;
    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
    if (implicitKey && value.includes("\n") || inFlow && /[[\]{},]/.test(value)) {
      return quotedString(value, ctx);
    }
    if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
      return implicitKey || inFlow || !value.includes("\n") ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey && !inFlow && type !== Scalar.Scalar.PLAIN && value.includes("\n")) {
      return blockString(item, ctx, onComment, onChompKeep);
    }
    if (containsDocumentMarker(value)) {
      if (indent === "") {
        ctx.forceBlockIndent = true;
        return blockString(item, ctx, onComment, onChompKeep);
      } else if (implicitKey && indent === indentStep) {
        return quotedString(value, ctx);
      }
    }
    const str = value.replace(/\n+/g, `\$&\n${indent}`);
    if (actualString) {
      const test = (tag) => tag.default && tag.tag !== "tag:yaml.org,2002:str" && tag.test?.test(str);
      const { compat, tags } = ctx.doc.schema;
      if (tags.some(test) || compat?.some(test))
        return quotedString(value, ctx);
    }
    return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
  };
  var stringifyString = function(item, ctx, onComment, onChompKeep) {
    const { implicitKey, inFlow } = ctx;
    const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
    let { type } = item;
    if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
      if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
        type = Scalar.Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type) => {
      switch (_type) {
        case Scalar.Scalar.BLOCK_FOLDED:
        case Scalar.Scalar.BLOCK_LITERAL:
          return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
        case Scalar.Scalar.QUOTE_DOUBLE:
          return doubleQuotedString(ss.value, ctx);
        case Scalar.Scalar.QUOTE_SINGLE:
          return singleQuotedString(ss.value, ctx);
        case Scalar.Scalar.PLAIN:
          return plainString(ss, ctx, onComment, onChompKeep);
        default:
          return null;
      }
    };
    let res = _stringify(type);
    if (res === null) {
      const { defaultKeyType, defaultStringType } = ctx.options;
      const t = implicitKey && defaultKeyType || defaultStringType;
      res = _stringify(t);
      if (res === null)
        throw new Error(`Unsupported default string type ${t}`);
    }
    return res;
  };
  var Scalar = require_Scalar();
  var foldFlowLines = require_foldFlowLines();
  var getFoldOptions = (ctx, isBlock) => ({
    indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
    lineWidth: ctx.options.lineWidth,
    minContentWidth: ctx.options.minContentWidth
  });
  var containsDocumentMarker = (str) => /^(%|---|\.\.\.)/m.test(str);
  var blockEndNewlines;
  try {
    blockEndNewlines = new RegExp("(^|(?<!\n))\n+(?!\n|$)", "g");
  } catch {
    blockEndNewlines = /\n+(?!\n|$)/g;
  }
  exports.stringifyString = stringifyString;
});

// node_modules/yaml/dist/stringify/stringify.js
var require_stringify = __commonJS((exports) => {
  var createStringifyContext = function(doc, options) {
    const opt = Object.assign({
      blockQuote: true,
      commentString: stringifyComment.stringifyComment,
      defaultKeyType: null,
      defaultStringType: "PLAIN",
      directives: null,
      doubleQuotedAsJSON: false,
      doubleQuotedMinMultiLineLength: 40,
      falseStr: "false",
      flowCollectionPadding: true,
      indentSeq: true,
      lineWidth: 80,
      minContentWidth: 20,
      nullStr: "null",
      simpleKeys: false,
      singleQuote: null,
      trueStr: "true",
      verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch (opt.collectionStyle) {
      case "block":
        inFlow = false;
        break;
      case "flow":
        inFlow = true;
        break;
      default:
        inFlow = null;
    }
    return {
      anchors: new Set,
      doc,
      flowCollectionPadding: opt.flowCollectionPadding ? " " : "",
      indent: "",
      indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
      inFlow,
      options: opt
    };
  };
  var getTagObject = function(tags, item) {
    if (item.tag) {
      const match = tags.filter((t) => t.tag === item.tag);
      if (match.length > 0)
        return match.find((t) => t.format === item.format) ?? match[0];
    }
    let tagObj = undefined;
    let obj;
    if (identity.isScalar(item)) {
      obj = item.value;
      const match = tags.filter((t) => t.identify?.(obj));
      tagObj = match.find((t) => t.format === item.format) ?? match.find((t) => !t.format);
    } else {
      obj = item;
      tagObj = tags.find((t) => t.nodeClass && obj instanceof t.nodeClass);
    }
    if (!tagObj) {
      const name = obj?.constructor?.name ?? typeof obj;
      throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
  };
  var stringifyProps = function(node, tagObj, { anchors: anchors$1, doc }) {
    if (!doc.directives)
      return "";
    const props = [];
    const anchor = (identity.isScalar(node) || identity.isCollection(node)) && node.anchor;
    if (anchor && anchors.anchorIsValid(anchor)) {
      anchors$1.add(anchor);
      props.push(`&${anchor}`);
    }
    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
    if (tag)
      props.push(doc.directives.tagString(tag));
    return props.join(" ");
  };
  var stringify = function(item, ctx, onComment, onChompKeep) {
    if (identity.isPair(item))
      return item.toString(ctx, onComment, onChompKeep);
    if (identity.isAlias(item)) {
      if (ctx.doc.directives)
        return item.toString(ctx);
      if (ctx.resolvedAliases?.has(item)) {
        throw new TypeError(`Cannot stringify circular structure without alias nodes`);
      } else {
        if (ctx.resolvedAliases)
          ctx.resolvedAliases.add(item);
        else
          ctx.resolvedAliases = new Set([item]);
        item = item.resolve(ctx.doc);
      }
    }
    let tagObj = undefined;
    const node = identity.isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: (o) => tagObj = o });
    if (!tagObj)
      tagObj = getTagObject(ctx.doc.schema.tags, node);
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0)
      ctx.indentAtStart = (ctx.indentAtStart ?? 0) + props.length + 1;
    const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : identity.isScalar(node) ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
    if (!props)
      return str;
    return identity.isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}\n${ctx.indent}${str}`;
  };
  var anchors = require_anchors();
  var identity = require_identity();
  var stringifyComment = require_stringifyComment();
  var stringifyString = require_stringifyString();
  exports.createStringifyContext = createStringifyContext;
  exports.stringify = stringify;
});

// node_modules/yaml/dist/stringify/stringifyPair.js
var require_stringifyPair = __commonJS((exports) => {
  var stringifyPair = function({ key, value }, ctx, onComment, onChompKeep) {
    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
    let keyComment = identity.isNode(key) && key.comment || null;
    if (simpleKeys) {
      if (keyComment) {
        throw new Error("With simple keys, key nodes cannot have comments");
      }
      if (identity.isCollection(key)) {
        const msg = "With simple keys, collection cannot be used as a key value";
        throw new Error(msg);
      }
    }
    let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || identity.isCollection(key) || (identity.isScalar(key) ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL : typeof key === "object"));
    ctx = Object.assign({}, ctx, {
      allNullValues: false,
      implicitKey: !explicitKey && (simpleKeys || !allNullValues),
      indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify.stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
      if (simpleKeys)
        throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
      explicitKey = true;
    }
    if (ctx.inFlow) {
      if (allNullValues || value == null) {
        if (keyCommentDone && onComment)
          onComment();
        return str === "" ? "?" : explicitKey ? `? ${str}` : str;
      }
    } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
      str = `? ${str}`;
      if (keyComment && !keyCommentDone) {
        str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
      } else if (chompKeep && onChompKeep)
        onChompKeep();
      return str;
    }
    if (keyCommentDone)
      keyComment = null;
    if (explicitKey) {
      if (keyComment)
        str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
      str = `? ${str}\n${indent}:`;
    } else {
      str = `${str}:`;
      if (keyComment)
        str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vsb, vcb, valueComment;
    if (identity.isNode(value)) {
      vsb = !!value.spaceBefore;
      vcb = value.commentBefore;
      valueComment = value.comment;
    } else {
      vsb = false;
      vcb = null;
      valueComment = null;
      if (value && typeof value === "object")
        value = doc.createNode(value);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && identity.isScalar(value))
      ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && identity.isSeq(value) && !value.flow && !value.tag && !value.anchor) {
      ctx.indent = ctx.indent.substring(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify.stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
    let ws = " ";
    if (keyComment || vsb || vcb) {
      ws = vsb ? "\n" : "";
      if (vcb) {
        const cs = commentString(vcb);
        ws += `\n${stringifyComment.indentComment(cs, ctx.indent)}`;
      }
      if (valueStr === "" && !ctx.inFlow) {
        if (ws === "\n")
          ws = "\n\n";
      } else {
        ws += `\n${ctx.indent}`;
      }
    } else if (!explicitKey && identity.isCollection(value)) {
      const vs0 = valueStr[0];
      const nl0 = valueStr.indexOf("\n");
      const hasNewline = nl0 !== -1;
      const flow = ctx.inFlow ?? value.flow ?? value.items.length === 0;
      if (hasNewline || !flow) {
        let hasPropsLine = false;
        if (hasNewline && (vs0 === "&" || vs0 === "!")) {
          let sp0 = valueStr.indexOf(" ");
          if (vs0 === "&" && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === "!") {
            sp0 = valueStr.indexOf(" ", sp0 + 1);
          }
          if (sp0 === -1 || nl0 < sp0)
            hasPropsLine = true;
        }
        if (!hasPropsLine)
          ws = `\n${ctx.indent}`;
      }
    } else if (valueStr === "" || valueStr[0] === "\n") {
      ws = "";
    }
    str += ws + valueStr;
    if (ctx.inFlow) {
      if (valueCommentDone && onComment)
        onComment();
    } else if (valueComment && !valueCommentDone) {
      str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));
    } else if (chompKeep && onChompKeep) {
      onChompKeep();
    }
    return str;
  };
  var identity = require_identity();
  var Scalar = require_Scalar();
  var stringify = require_stringify();
  var stringifyComment = require_stringifyComment();
  exports.stringifyPair = stringifyPair;
});

// node_modules/yaml/dist/log.js
var require_log = __commonJS((exports) => {
  var debug = function(logLevel, ...messages) {
    if (logLevel === "debug")
      console.log(...messages);
  };
  var warn = function(logLevel, warning) {
    if (logLevel === "debug" || logLevel === "warn") {
      if (typeof process !== "undefined" && process.emitWarning)
        process.emitWarning(warning);
      else
        console.warn(warning);
    }
  };
  exports.debug = debug;
  exports.warn = warn;
});

// node_modules/yaml/dist/nodes/addPairToJSMap.js
var require_addPairToJSMap = __commonJS((exports) => {
  var addPairToJSMap = function(ctx, map, { key, value }) {
    if (ctx?.doc.schema.merge && isMergeKey(key)) {
      value = identity.isAlias(value) ? value.resolve(ctx.doc) : value;
      if (identity.isSeq(value))
        for (const it of value.items)
          mergeToJSMap(ctx, map, it);
      else if (Array.isArray(value))
        for (const it of value)
          mergeToJSMap(ctx, map, it);
      else
        mergeToJSMap(ctx, map, value);
    } else {
      const jsKey = toJS.toJS(key, "", ctx);
      if (map instanceof Map) {
        map.set(jsKey, toJS.toJS(value, jsKey, ctx));
      } else if (map instanceof Set) {
        map.add(jsKey);
      } else {
        const stringKey = stringifyKey(key, jsKey, ctx);
        const jsValue = toJS.toJS(value, stringKey, ctx);
        if (stringKey in map)
          Object.defineProperty(map, stringKey, {
            value: jsValue,
            writable: true,
            enumerable: true,
            configurable: true
          });
        else
          map[stringKey] = jsValue;
      }
    }
    return map;
  };
  var mergeToJSMap = function(ctx, map, value) {
    const source = ctx && identity.isAlias(value) ? value.resolve(ctx.doc) : value;
    if (!identity.isMap(source))
      throw new Error("Merge sources must be maps or map aliases");
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value2] of srcMap) {
      if (map instanceof Map) {
        if (!map.has(key))
          map.set(key, value2);
      } else if (map instanceof Set) {
        map.add(key);
      } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
        Object.defineProperty(map, key, {
          value: value2,
          writable: true,
          enumerable: true,
          configurable: true
        });
      }
    }
    return map;
  };
  var stringifyKey = function(key, jsKey, ctx) {
    if (jsKey === null)
      return "";
    if (typeof jsKey !== "object")
      return String(jsKey);
    if (identity.isNode(key) && ctx?.doc) {
      const strCtx = stringify.createStringifyContext(ctx.doc, {});
      strCtx.anchors = new Set;
      for (const node of ctx.anchors.keys())
        strCtx.anchors.add(node.anchor);
      strCtx.inFlow = true;
      strCtx.inStringifyKey = true;
      const strKey = key.toString(strCtx);
      if (!ctx.mapKeyWarned) {
        let jsonStr = JSON.stringify(strKey);
        if (jsonStr.length > 40)
          jsonStr = jsonStr.substring(0, 36) + '..."';
        log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
        ctx.mapKeyWarned = true;
      }
      return strKey;
    }
    return JSON.stringify(jsKey);
  };
  var log = require_log();
  var stringify = require_stringify();
  var identity = require_identity();
  var Scalar = require_Scalar();
  var toJS = require_toJS();
  var MERGE_KEY = "<<";
  var isMergeKey = (key) => key === MERGE_KEY || identity.isScalar(key) && key.value === MERGE_KEY && (!key.type || key.type === Scalar.Scalar.PLAIN);
  exports.addPairToJSMap = addPairToJSMap;
});

// node_modules/yaml/dist/nodes/Pair.js
var require_Pair = __commonJS((exports) => {
  var createPair = function(key, value, ctx) {
    const k = createNode.createNode(key, undefined, ctx);
    const v = createNode.createNode(value, undefined, ctx);
    return new Pair(k, v);
  };
  var createNode = require_createNode();
  var stringifyPair = require_stringifyPair();
  var addPairToJSMap = require_addPairToJSMap();
  var identity = require_identity();

  class Pair {
    constructor(key, value = null) {
      Object.defineProperty(this, identity.NODE_TYPE, { value: identity.PAIR });
      this.key = key;
      this.value = value;
    }
    clone(schema) {
      let { key, value } = this;
      if (identity.isNode(key))
        key = key.clone(schema);
      if (identity.isNode(value))
        value = value.clone(schema);
      return new Pair(key, value);
    }
    toJSON(_, ctx) {
      const pair = ctx?.mapAsMap ? new Map : {};
      return addPairToJSMap.addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
      return ctx?.doc ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
    }
  }
  exports.Pair = Pair;
  exports.createPair = createPair;
});

// node_modules/yaml/dist/stringify/stringifyCollection.js
var require_stringifyCollection = __commonJS((exports) => {
  var stringifyCollection = function(collection, ctx, options) {
    const flow = ctx.inFlow ?? collection.flow;
    const stringify2 = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify2(collection, ctx, options);
  };
  var stringifyBlockCollection = function({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
    const { indent, options: { commentString } } = ctx;
    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
    let chompKeep = false;
    const lines = [];
    for (let i = 0;i < items.length; ++i) {
      const item = items[i];
      let comment2 = null;
      if (identity.isNode(item)) {
        if (!chompKeep && item.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
        if (item.comment)
          comment2 = item.comment;
      } else if (identity.isPair(item)) {
        const ik = identity.isNode(item.key) ? item.key : null;
        if (ik) {
          if (!chompKeep && ik.spaceBefore)
            lines.push("");
          addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
        }
      }
      chompKeep = false;
      let str2 = stringify.stringify(item, itemCtx, () => comment2 = null, () => chompKeep = true);
      if (comment2)
        str2 += stringifyComment.lineComment(str2, itemIndent, commentString(comment2));
      if (chompKeep && comment2)
        chompKeep = false;
      lines.push(blockItemPrefix + str2);
    }
    let str;
    if (lines.length === 0) {
      str = flowChars.start + flowChars.end;
    } else {
      str = lines[0];
      for (let i = 1;i < lines.length; ++i) {
        const line = lines[i];
        str += line ? `\n${indent}${line}` : "\n";
      }
    }
    if (comment) {
      str += "\n" + stringifyComment.indentComment(commentString(comment), indent);
      if (onComment)
        onComment();
    } else if (chompKeep && onChompKeep)
      onChompKeep();
    return str;
  };
  var stringifyFlowCollection = function({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {
    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
      indent: itemIndent,
      inFlow: true,
      type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for (let i = 0;i < items.length; ++i) {
      const item = items[i];
      let comment2 = null;
      if (identity.isNode(item)) {
        if (item.spaceBefore)
          lines.push("");
        addCommentBefore(ctx, lines, item.commentBefore, false);
        if (item.comment)
          comment2 = item.comment;
      } else if (identity.isPair(item)) {
        const ik = identity.isNode(item.key) ? item.key : null;
        if (ik) {
          if (ik.spaceBefore)
            lines.push("");
          addCommentBefore(ctx, lines, ik.commentBefore, false);
          if (ik.comment)
            reqNewline = true;
        }
        const iv = identity.isNode(item.value) ? item.value : null;
        if (iv) {
          if (iv.comment)
            comment2 = iv.comment;
          if (iv.commentBefore)
            reqNewline = true;
        } else if (item.value == null && ik?.comment) {
          comment2 = ik.comment;
        }
      }
      if (comment2)
        reqNewline = true;
      let str2 = stringify.stringify(item, itemCtx, () => comment2 = null);
      if (i < items.length - 1)
        str2 += ",";
      if (comment2)
        str2 += stringifyComment.lineComment(str2, itemIndent, commentString(comment2));
      if (!reqNewline && (lines.length > linesAtValue || str2.includes("\n")))
        reqNewline = true;
      lines.push(str2);
      linesAtValue = lines.length;
    }
    let str;
    const { start, end } = flowChars;
    if (lines.length === 0) {
      str = start + end;
    } else {
      if (!reqNewline) {
        const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
        reqNewline = len > Collection.Collection.maxFlowStringSingleLineLength;
      }
      if (reqNewline) {
        str = start;
        for (const line of lines)
          str += line ? `\n${indentStep}${indent}${line}` : "\n";
        str += `\n${indent}${end}`;
      } else {
        str = `${start}${fcPadding}${lines.join(" ")}${fcPadding}${end}`;
      }
    }
    if (comment) {
      str += stringifyComment.lineComment(str, indent, commentString(comment));
      if (onComment)
        onComment();
    }
    return str;
  };
  var addCommentBefore = function({ indent, options: { commentString } }, lines, comment, chompKeep) {
    if (comment && chompKeep)
      comment = comment.replace(/^\n+/, "");
    if (comment) {
      const ic = stringifyComment.indentComment(commentString(comment), indent);
      lines.push(ic.trimStart());
    }
  };
  var Collection = require_Collection();
  var identity = require_identity();
  var stringify = require_stringify();
  var stringifyComment = require_stringifyComment();
  exports.stringifyCollection = stringifyCollection;
});

// node_modules/yaml/dist/nodes/YAMLMap.js
var require_YAMLMap = __commonJS((exports) => {
  var findPair = function(items, key) {
    const k = identity.isScalar(key) ? key.value : key;
    for (const it of items) {
      if (identity.isPair(it)) {
        if (it.key === key || it.key === k)
          return it;
        if (identity.isScalar(it.key) && it.key.value === k)
          return it;
      }
    }
    return;
  };
  var stringifyCollection = require_stringifyCollection();
  var addPairToJSMap = require_addPairToJSMap();
  var Collection = require_Collection();
  var identity = require_identity();
  var Pair = require_Pair();
  var Scalar = require_Scalar();

  class YAMLMap extends Collection.Collection {
    static get tagName() {
      return "tag:yaml.org,2002:map";
    }
    constructor(schema) {
      super(identity.MAP, schema);
      this.items = [];
    }
    static from(schema, obj, ctx) {
      const { keepUndefined, replacer } = ctx;
      const map = new this(schema);
      const add = (key, value) => {
        if (typeof replacer === "function")
          value = replacer.call(obj, key, value);
        else if (Array.isArray(replacer) && !replacer.includes(key))
          return;
        if (value !== undefined || keepUndefined)
          map.items.push(Pair.createPair(key, value, ctx));
      };
      if (obj instanceof Map) {
        for (const [key, value] of obj)
          add(key, value);
      } else if (obj && typeof obj === "object") {
        for (const key of Object.keys(obj))
          add(key, obj[key]);
      }
      if (typeof schema.sortMapEntries === "function") {
        map.items.sort(schema.sortMapEntries);
      }
      return map;
    }
    add(pair, overwrite) {
      let _pair;
      if (identity.isPair(pair))
        _pair = pair;
      else if (!pair || typeof pair !== "object" || !("key" in pair)) {
        _pair = new Pair.Pair(pair, pair?.value);
      } else
        _pair = new Pair.Pair(pair.key, pair.value);
      const prev = findPair(this.items, _pair.key);
      const sortEntries = this.schema?.sortMapEntries;
      if (prev) {
        if (!overwrite)
          throw new Error(`Key ${_pair.key} already set`);
        if (identity.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))
          prev.value.value = _pair.value;
        else
          prev.value = _pair.value;
      } else if (sortEntries) {
        const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
        if (i === -1)
          this.items.push(_pair);
        else
          this.items.splice(i, 0, _pair);
      } else {
        this.items.push(_pair);
      }
    }
    delete(key) {
      const it = findPair(this.items, key);
      if (!it)
        return false;
      const del = this.items.splice(this.items.indexOf(it), 1);
      return del.length > 0;
    }
    get(key, keepScalar) {
      const it = findPair(this.items, key);
      const node = it?.value;
      return (!keepScalar && identity.isScalar(node) ? node.value : node) ?? undefined;
    }
    has(key) {
      return !!findPair(this.items, key);
    }
    set(key, value) {
      this.add(new Pair.Pair(key, value), true);
    }
    toJSON(_, ctx, Type) {
      const map = Type ? new Type : ctx?.mapAsMap ? new Map : {};
      if (ctx?.onCreate)
        ctx.onCreate(map);
      for (const item of this.items)
        addPairToJSMap.addPairToJSMap(ctx, map, item);
      return map;
    }
    toString(ctx, onComment, onChompKeep) {
      if (!ctx)
        return JSON.stringify(this);
      for (const item of this.items) {
        if (!identity.isPair(item))
          throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
      }
      if (!ctx.allNullValues && this.hasAllNullValues(false))
        ctx = Object.assign({}, ctx, { allNullValues: true });
      return stringifyCollection.stringifyCollection(this, ctx, {
        blockItemPrefix: "",
        flowChars: { start: "{", end: "}" },
        itemIndent: ctx.indent || "",
        onChompKeep,
        onComment
      });
    }
  }
  exports.YAMLMap = YAMLMap;
  exports.findPair = findPair;
});

// node_modules/yaml/dist/schema/common/map.js
var require_map = __commonJS((exports) => {
  var identity = require_identity();
  var YAMLMap = require_YAMLMap();
  var map = {
    collection: "map",
    default: true,
    nodeClass: YAMLMap.YAMLMap,
    tag: "tag:yaml.org,2002:map",
    resolve(map2, onError) {
      if (!identity.isMap(map2))
        onError("Expected a mapping for this tag");
      return map2;
    },
    createNode: (schema, obj, ctx) => YAMLMap.YAMLMap.from(schema, obj, ctx)
  };
  exports.map = map;
});

// node_modules/yaml/dist/nodes/YAMLSeq.js
var require_YAMLSeq = __commonJS((exports) => {
  var asItemIndex = function(key) {
    let idx = identity.isScalar(key) ? key.value : key;
    if (idx && typeof idx === "string")
      idx = Number(idx);
    return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
  };
  var createNode = require_createNode();
  var stringifyCollection = require_stringifyCollection();
  var Collection = require_Collection();
  var identity = require_identity();
  var Scalar = require_Scalar();
  var toJS = require_toJS();

  class YAMLSeq extends Collection.Collection {
    static get tagName() {
      return "tag:yaml.org,2002:seq";
    }
    constructor(schema) {
      super(identity.SEQ, schema);
      this.items = [];
    }
    add(value) {
      this.items.push(value);
    }
    delete(key) {
      const idx = asItemIndex(key);
      if (typeof idx !== "number")
        return false;
      const del = this.items.splice(idx, 1);
      return del.length > 0;
    }
    get(key, keepScalar) {
      const idx = asItemIndex(key);
      if (typeof idx !== "number")
        return;
      const it = this.items[idx];
      return !keepScalar && identity.isScalar(it) ? it.value : it;
    }
    has(key) {
      const idx = asItemIndex(key);
      return typeof idx === "number" && idx < this.items.length;
    }
    set(key, value) {
      const idx = asItemIndex(key);
      if (typeof idx !== "number")
        throw new Error(`Expected a valid index, not ${key}.`);
      const prev = this.items[idx];
      if (identity.isScalar(prev) && Scalar.isScalarValue(value))
        prev.value = value;
      else
        this.items[idx] = value;
    }
    toJSON(_, ctx) {
      const seq = [];
      if (ctx?.onCreate)
        ctx.onCreate(seq);
      let i = 0;
      for (const item of this.items)
        seq.push(toJS.toJS(item, String(i++), ctx));
      return seq;
    }
    toString(ctx, onComment, onChompKeep) {
      if (!ctx)
        return JSON.stringify(this);
      return stringifyCollection.stringifyCollection(this, ctx, {
        blockItemPrefix: "- ",
        flowChars: { start: "[", end: "]" },
        itemIndent: (ctx.indent || "") + "  ",
        onChompKeep,
        onComment
      });
    }
    static from(schema, obj, ctx) {
      const { replacer } = ctx;
      const seq = new this(schema);
      if (obj && (Symbol.iterator in Object(obj))) {
        let i = 0;
        for (let it of obj) {
          if (typeof replacer === "function") {
            const key = obj instanceof Set ? it : String(i++);
            it = replacer.call(obj, key, it);
          }
          seq.items.push(createNode.createNode(it, undefined, ctx));
        }
      }
      return seq;
    }
  }
  exports.YAMLSeq = YAMLSeq;
});

// node_modules/yaml/dist/schema/common/seq.js
var require_seq = __commonJS((exports) => {
  var identity = require_identity();
  var YAMLSeq = require_YAMLSeq();
  var seq = {
    collection: "seq",
    default: true,
    nodeClass: YAMLSeq.YAMLSeq,
    tag: "tag:yaml.org,2002:seq",
    resolve(seq2, onError) {
      if (!identity.isSeq(seq2))
        onError("Expected a sequence for this tag");
      return seq2;
    },
    createNode: (schema, obj, ctx) => YAMLSeq.YAMLSeq.from(schema, obj, ctx)
  };
  exports.seq = seq;
});

// node_modules/yaml/dist/schema/common/string.js
var require_string = __commonJS((exports) => {
  var stringifyString = require_stringifyString();
  var string = {
    identify: (value) => typeof value === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str) => str,
    stringify(item, ctx, onComment, onChompKeep) {
      ctx = Object.assign({ actualString: true }, ctx);
      return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);
    }
  };
  exports.string = string;
});

// node_modules/yaml/dist/schema/common/null.js
var require_null = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var nullTag = {
    identify: (value) => value == null,
    createNode: () => new Scalar.Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: () => new Scalar.Scalar(null),
    stringify: ({ source }, ctx) => typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
  };
  exports.nullTag = nullTag;
});

// node_modules/yaml/dist/schema/core/bool.js
var require_bool = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var boolTag = {
    identify: (value) => typeof value === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: (str) => new Scalar.Scalar(str[0] === "t" || str[0] === "T"),
    stringify({ source, value }, ctx) {
      if (source && boolTag.test.test(source)) {
        const sv = source[0] === "t" || source[0] === "T";
        if (value === sv)
          return source;
      }
      return value ? ctx.options.trueStr : ctx.options.falseStr;
    }
  };
  exports.boolTag = boolTag;
});

// node_modules/yaml/dist/stringify/stringifyNumber.js
var require_stringifyNumber = __commonJS((exports) => {
  var stringifyNumber = function({ format, minFractionDigits, tag, value }) {
    if (typeof value === "bigint")
      return String(value);
    const num = typeof value === "number" ? value : Number(value);
    if (!isFinite(num))
      return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
    let n = JSON.stringify(value);
    if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
      let i = n.indexOf(".");
      if (i < 0) {
        i = n.length;
        n += ".";
      }
      let d = minFractionDigits - (n.length - i - 1);
      while (d-- > 0)
        n += "0";
    }
    return n;
  };
  exports.stringifyNumber = stringifyNumber;
});

// node_modules/yaml/dist/schema/core/float.js
var require_float = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var stringifyNumber = require_stringifyNumber();
  var floatNaN = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
    resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
  };
  var floatExp = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str),
    stringify(node) {
      const num = Number(node.value);
      return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
  };
  var float = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve(str) {
      const node = new Scalar.Scalar(parseFloat(str));
      const dot = str.indexOf(".");
      if (dot !== -1 && str[str.length - 1] === "0")
        node.minFractionDigits = str.length - dot - 1;
      return node;
    },
    stringify: stringifyNumber.stringifyNumber
  };
  exports.float = float;
  exports.floatExp = floatExp;
  exports.floatNaN = floatNaN;
});

// node_modules/yaml/dist/schema/core/int.js
var require_int = __commonJS((exports) => {
  var intStringify = function(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value) && value >= 0)
      return prefix + value.toString(radix);
    return stringifyNumber.stringifyNumber(node);
  };
  var stringifyNumber = require_stringifyNumber();
  var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
  var intResolve = (str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
  var intOct = {
    identify: (value) => intIdentify(value) && value >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),
    stringify: (node) => intStringify(node, 8, "0o")
  };
  var int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
  };
  var intHex = {
    identify: (value) => intIdentify(value) && value >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: (node) => intStringify(node, 16, "0x")
  };
  exports.int = int;
  exports.intHex = intHex;
  exports.intOct = intOct;
});

// node_modules/yaml/dist/schema/core/schema.js
var require_schema = __commonJS((exports) => {
  var map = require_map();
  var _null = require_null();
  var seq = require_seq();
  var string = require_string();
  var bool = require_bool();
  var float = require_float();
  var int = require_int();
  var schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.boolTag,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float
  ];
  exports.schema = schema;
});

// node_modules/yaml/dist/schema/json/schema.js
var require_schema2 = __commonJS((exports) => {
  var intIdentify = function(value) {
    return typeof value === "bigint" || Number.isInteger(value);
  };
  var Scalar = require_Scalar();
  var map = require_map();
  var seq = require_seq();
  var stringifyJSON = ({ value }) => JSON.stringify(value);
  var jsonScalars = [
    {
      identify: (value) => typeof value === "string",
      default: true,
      tag: "tag:yaml.org,2002:str",
      resolve: (str) => str,
      stringify: stringifyJSON
    },
    {
      identify: (value) => value == null,
      createNode: () => new Scalar.Scalar(null),
      default: true,
      tag: "tag:yaml.org,2002:null",
      test: /^null$/,
      resolve: () => null,
      stringify: stringifyJSON
    },
    {
      identify: (value) => typeof value === "boolean",
      default: true,
      tag: "tag:yaml.org,2002:bool",
      test: /^true|false$/,
      resolve: (str) => str === "true",
      stringify: stringifyJSON
    },
    {
      identify: intIdentify,
      default: true,
      tag: "tag:yaml.org,2002:int",
      test: /^-?(?:0|[1-9][0-9]*)$/,
      resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),
      stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)
    },
    {
      identify: (value) => typeof value === "number",
      default: true,
      tag: "tag:yaml.org,2002:float",
      test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
      resolve: (str) => parseFloat(str),
      stringify: stringifyJSON
    }
  ];
  var jsonError = {
    default: true,
    tag: "",
    test: /^/,
    resolve(str, onError) {
      onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
      return str;
    }
  };
  var schema = [map.map, seq.seq].concat(jsonScalars, jsonError);
  exports.schema = schema;
});

// node_modules/yaml/dist/schema/yaml-1.1/binary.js
var require_binary = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var stringifyString = require_stringifyString();
  var binary = {
    identify: (value) => value instanceof Uint8Array,
    default: false,
    tag: "tag:yaml.org,2002:binary",
    resolve(src, onError) {
      if (typeof Buffer === "function") {
        return Buffer.from(src, "base64");
      } else if (typeof atob === "function") {
        const str = atob(src.replace(/[\n\r]/g, ""));
        const buffer = new Uint8Array(str.length);
        for (let i = 0;i < str.length; ++i)
          buffer[i] = str.charCodeAt(i);
        return buffer;
      } else {
        onError("This environment does not support reading binary tags; either Buffer or atob is required");
        return src;
      }
    },
    stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
      const buf = value;
      let str;
      if (typeof Buffer === "function") {
        str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
      } else if (typeof btoa === "function") {
        let s = "";
        for (let i = 0;i < buf.length; ++i)
          s += String.fromCharCode(buf[i]);
        str = btoa(s);
      } else {
        throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
      }
      if (!type)
        type = Scalar.Scalar.BLOCK_LITERAL;
      if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
        const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
        const n = Math.ceil(str.length / lineWidth);
        const lines = new Array(n);
        for (let i = 0, o = 0;i < n; ++i, o += lineWidth) {
          lines[i] = str.substr(o, lineWidth);
        }
        str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? "\n" : " ");
      }
      return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
    }
  };
  exports.binary = binary;
});

// node_modules/yaml/dist/schema/yaml-1.1/pairs.js
var require_pairs = __commonJS((exports) => {
  var resolvePairs = function(seq, onError) {
    if (identity.isSeq(seq)) {
      for (let i = 0;i < seq.items.length; ++i) {
        let item = seq.items[i];
        if (identity.isPair(item))
          continue;
        else if (identity.isMap(item)) {
          if (item.items.length > 1)
            onError("Each pair must have its own sequence indicator");
          const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));
          if (item.commentBefore)
            pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}\n${pair.key.commentBefore}` : item.commentBefore;
          if (item.comment) {
            const cn = pair.value ?? pair.key;
            cn.comment = cn.comment ? `${item.comment}\n${cn.comment}` : item.comment;
          }
          item = pair;
        }
        seq.items[i] = identity.isPair(item) ? item : new Pair.Pair(item);
      }
    } else
      onError("Expected a sequence for this tag");
    return seq;
  };
  var createPairs = function(schema, iterable, ctx) {
    const { replacer } = ctx;
    const pairs2 = new YAMLSeq.YAMLSeq(schema);
    pairs2.tag = "tag:yaml.org,2002:pairs";
    let i = 0;
    if (iterable && (Symbol.iterator in Object(iterable)))
      for (let it of iterable) {
        if (typeof replacer === "function")
          it = replacer.call(iterable, String(i++), it);
        let key, value;
        if (Array.isArray(it)) {
          if (it.length === 2) {
            key = it[0];
            value = it[1];
          } else
            throw new TypeError(`Expected [key, value] tuple: ${it}`);
        } else if (it && it instanceof Object) {
          const keys = Object.keys(it);
          if (keys.length === 1) {
            key = keys[0];
            value = it[key];
          } else {
            throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
          }
        } else {
          key = it;
        }
        pairs2.items.push(Pair.createPair(key, value, ctx));
      }
    return pairs2;
  };
  var identity = require_identity();
  var Pair = require_Pair();
  var Scalar = require_Scalar();
  var YAMLSeq = require_YAMLSeq();
  var pairs = {
    collection: "seq",
    default: false,
    tag: "tag:yaml.org,2002:pairs",
    resolve: resolvePairs,
    createNode: createPairs
  };
  exports.createPairs = createPairs;
  exports.pairs = pairs;
  exports.resolvePairs = resolvePairs;
});

// node_modules/yaml/dist/schema/yaml-1.1/omap.js
var require_omap = __commonJS((exports) => {
  var identity = require_identity();
  var toJS = require_toJS();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var pairs = require_pairs();

  class YAMLOMap extends YAMLSeq.YAMLSeq {
    constructor() {
      super();
      this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
      this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
      this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
      this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
      this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
      this.tag = YAMLOMap.tag;
    }
    toJSON(_, ctx) {
      if (!ctx)
        return super.toJSON(_);
      const map = new Map;
      if (ctx?.onCreate)
        ctx.onCreate(map);
      for (const pair of this.items) {
        let key, value;
        if (identity.isPair(pair)) {
          key = toJS.toJS(pair.key, "", ctx);
          value = toJS.toJS(pair.value, key, ctx);
        } else {
          key = toJS.toJS(pair, "", ctx);
        }
        if (map.has(key))
          throw new Error("Ordered maps must not include duplicate keys");
        map.set(key, value);
      }
      return map;
    }
    static from(schema, iterable, ctx) {
      const pairs$1 = pairs.createPairs(schema, iterable, ctx);
      const omap2 = new this;
      omap2.items = pairs$1.items;
      return omap2;
    }
  }
  YAMLOMap.tag = "tag:yaml.org,2002:omap";
  var omap = {
    collection: "seq",
    identify: (value) => value instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: "tag:yaml.org,2002:omap",
    resolve(seq, onError) {
      const pairs$1 = pairs.resolvePairs(seq, onError);
      const seenKeys = [];
      for (const { key } of pairs$1.items) {
        if (identity.isScalar(key)) {
          if (seenKeys.includes(key.value)) {
            onError(`Ordered maps must not include duplicate keys: ${key.value}`);
          } else {
            seenKeys.push(key.value);
          }
        }
      }
      return Object.assign(new YAMLOMap, pairs$1);
    },
    createNode: (schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx)
  };
  exports.YAMLOMap = YAMLOMap;
  exports.omap = omap;
});

// node_modules/yaml/dist/schema/yaml-1.1/bool.js
var require_bool2 = __commonJS((exports) => {
  var boolStringify = function({ value, source }, ctx) {
    const boolObj = value ? trueTag : falseTag;
    if (source && boolObj.test.test(source))
      return source;
    return value ? ctx.options.trueStr : ctx.options.falseStr;
  };
  var Scalar = require_Scalar();
  var trueTag = {
    identify: (value) => value === true,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: () => new Scalar.Scalar(true),
    stringify: boolStringify
  };
  var falseTag = {
    identify: (value) => value === false,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
    resolve: () => new Scalar.Scalar(false),
    stringify: boolStringify
  };
  exports.falseTag = falseTag;
  exports.trueTag = trueTag;
});

// node_modules/yaml/dist/schema/yaml-1.1/float.js
var require_float2 = __commonJS((exports) => {
  var Scalar = require_Scalar();
  var stringifyNumber = require_stringifyNumber();
  var floatNaN = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
    resolve: (str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber.stringifyNumber
  };
  var floatExp = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str) => parseFloat(str.replace(/_/g, "")),
    stringify(node) {
      const num = Number(node.value);
      return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
    }
  };
  var float = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve(str) {
      const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, "")));
      const dot = str.indexOf(".");
      if (dot !== -1) {
        const f = str.substring(dot + 1).replace(/_/g, "");
        if (f[f.length - 1] === "0")
          node.minFractionDigits = f.length;
      }
      return node;
    },
    stringify: stringifyNumber.stringifyNumber
  };
  exports.float = float;
  exports.floatExp = floatExp;
  exports.floatNaN = floatNaN;
});

// node_modules/yaml/dist/schema/yaml-1.1/int.js
var require_int2 = __commonJS((exports) => {
  var intResolve = function(str, offset, radix, { intAsBigInt }) {
    const sign = str[0];
    if (sign === "-" || sign === "+")
      offset += 1;
    str = str.substring(offset).replace(/_/g, "");
    if (intAsBigInt) {
      switch (radix) {
        case 2:
          str = `0b${str}`;
          break;
        case 8:
          str = `0o${str}`;
          break;
        case 16:
          str = `0x${str}`;
          break;
      }
      const n2 = BigInt(str);
      return sign === "-" ? BigInt(-1) * n2 : n2;
    }
    const n = parseInt(str, radix);
    return sign === "-" ? -1 * n : n;
  };
  var intStringify = function(node, radix, prefix) {
    const { value } = node;
    if (intIdentify(value)) {
      const str = value.toString(radix);
      return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber.stringifyNumber(node);
  };
  var stringifyNumber = require_stringifyNumber();
  var intIdentify = (value) => typeof value === "bigint" || Number.isInteger(value);
  var intBin = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "BIN",
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),
    stringify: (node) => intStringify(node, 2, "0b")
  };
  var intOct = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),
    stringify: (node) => intStringify(node, 8, "0")
  };
  var int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),
    stringify: stringifyNumber.stringifyNumber
  };
  var intHex = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),
    stringify: (node) => intStringify(node, 16, "0x")
  };
  exports.int = int;
  exports.intBin = intBin;
  exports.intHex = intHex;
  exports.intOct = intOct;
});

// node_modules/yaml/dist/schema/yaml-1.1/set.js
var require_set = __commonJS((exports) => {
  var identity = require_identity();
  var Pair = require_Pair();
  var YAMLMap = require_YAMLMap();

  class YAMLSet extends YAMLMap.YAMLMap {
    constructor(schema) {
      super(schema);
      this.tag = YAMLSet.tag;
    }
    add(key) {
      let pair;
      if (identity.isPair(key))
        pair = key;
      else if (key && typeof key === "object" && ("key" in key) && ("value" in key) && key.value === null)
        pair = new Pair.Pair(key.key, null);
      else
        pair = new Pair.Pair(key, null);
      const prev = YAMLMap.findPair(this.items, pair.key);
      if (!prev)
        this.items.push(pair);
    }
    get(key, keepPair) {
      const pair = YAMLMap.findPair(this.items, key);
      return !keepPair && identity.isPair(pair) ? identity.isScalar(pair.key) ? pair.key.value : pair.key : pair;
    }
    set(key, value) {
      if (typeof value !== "boolean")
        throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
      const prev = YAMLMap.findPair(this.items, key);
      if (prev && !value) {
        this.items.splice(this.items.indexOf(prev), 1);
      } else if (!prev && value) {
        this.items.push(new Pair.Pair(key));
      }
    }
    toJSON(_, ctx) {
      return super.toJSON(_, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
      if (!ctx)
        return JSON.stringify(this);
      if (this.hasAllNullValues(true))
        return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
      else
        throw new Error("Set items must all have null values");
    }
    static from(schema, iterable, ctx) {
      const { replacer } = ctx;
      const set2 = new this(schema);
      if (iterable && (Symbol.iterator in Object(iterable)))
        for (let value of iterable) {
          if (typeof replacer === "function")
            value = replacer.call(iterable, value, value);
          set2.items.push(Pair.createPair(value, null, ctx));
        }
      return set2;
    }
  }
  YAMLSet.tag = "tag:yaml.org,2002:set";
  var set = {
    collection: "map",
    identify: (value) => value instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: "tag:yaml.org,2002:set",
    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),
    resolve(map, onError) {
      if (identity.isMap(map)) {
        if (map.hasAllNullValues(true))
          return Object.assign(new YAMLSet, map);
        else
          onError("Set items must all have null values");
      } else
        onError("Expected a mapping for this tag");
      return map;
    }
  };
  exports.YAMLSet = YAMLSet;
  exports.set = set;
});

// node_modules/yaml/dist/schema/yaml-1.1/timestamp.js
var require_timestamp = __commonJS((exports) => {
  var parseSexagesimal = function(str, asBigInt) {
    const sign = str[0];
    const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
    const num = (n) => asBigInt ? BigInt(n) : Number(n);
    const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
    return sign === "-" ? num(-1) * res : res;
  };
  var stringifySexagesimal = function(node) {
    let { value } = node;
    let num = (n) => n;
    if (typeof value === "bigint")
      num = (n) => BigInt(n);
    else if (isNaN(value) || !isFinite(value))
      return stringifyNumber.stringifyNumber(node);
    let sign = "";
    if (value < 0) {
      sign = "-";
      value *= num(-1);
    }
    const _60 = num(60);
    const parts = [value % _60];
    if (value < 60) {
      parts.unshift(0);
    } else {
      value = (value - parts[0]) / _60;
      parts.unshift(value % _60);
      if (value >= 60) {
        value = (value - parts[0]) / _60;
        parts.unshift(value);
      }
    }
    return sign + parts.map((n) => String(n).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
  };
  var stringifyNumber = require_stringifyNumber();
  var intTime = {
    identify: (value) => typeof value === "bigint" || Number.isInteger(value),
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
  };
  var floatTime = {
    identify: (value) => typeof value === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: (str) => parseSexagesimal(str, false),
    stringify: stringifySexagesimal
  };
  var timestamp = {
    identify: (value) => value instanceof Date,
    default: true,
    tag: "tag:yaml.org,2002:timestamp",
    test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
    resolve(str) {
      const match = str.match(timestamp.test);
      if (!match)
        throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
      const [, year, month, day, hour, minute, second] = match.map(Number);
      const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
      let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
      const tz = match[8];
      if (tz && tz !== "Z") {
        let d = parseSexagesimal(tz, false);
        if (Math.abs(d) < 30)
          d *= 60;
        date -= 60000 * d;
      }
      return new Date(date);
    },
    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
  };
  exports.floatTime = floatTime;
  exports.intTime = intTime;
  exports.timestamp = timestamp;
});

// node_modules/yaml/dist/schema/yaml-1.1/schema.js
var require_schema3 = __commonJS((exports) => {
  var map = require_map();
  var _null = require_null();
  var seq = require_seq();
  var string = require_string();
  var binary = require_binary();
  var bool = require_bool2();
  var float = require_float2();
  var int = require_int2();
  var omap = require_omap();
  var pairs = require_pairs();
  var set = require_set();
  var timestamp = require_timestamp();
  var schema = [
    map.map,
    seq.seq,
    string.string,
    _null.nullTag,
    bool.trueTag,
    bool.falseTag,
    int.intBin,
    int.intOct,
    int.int,
    int.intHex,
    float.floatNaN,
    float.floatExp,
    float.float,
    binary.binary,
    omap.omap,
    pairs.pairs,
    set.set,
    timestamp.intTime,
    timestamp.floatTime,
    timestamp.timestamp
  ];
  exports.schema = schema;
});

// node_modules/yaml/dist/schema/tags.js
var require_tags = __commonJS((exports) => {
  var getTags = function(customTags, schemaName) {
    let tags = schemas.get(schemaName);
    if (!tags) {
      if (Array.isArray(customTags))
        tags = [];
      else {
        const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
        throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
      }
    }
    if (Array.isArray(customTags)) {
      for (const tag of customTags)
        tags = tags.concat(tag);
    } else if (typeof customTags === "function") {
      tags = customTags(tags.slice());
    }
    return tags.map((tag) => {
      if (typeof tag !== "string")
        return tag;
      const tagObj = tagsByName[tag];
      if (tagObj)
        return tagObj;
      const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
      throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
    });
  };
  var map = require_map();
  var _null = require_null();
  var seq = require_seq();
  var string = require_string();
  var bool = require_bool();
  var float = require_float();
  var int = require_int();
  var schema = require_schema();
  var schema$1 = require_schema2();
  var binary = require_binary();
  var omap = require_omap();
  var pairs = require_pairs();
  var schema$2 = require_schema3();
  var set = require_set();
  var timestamp = require_timestamp();
  var schemas = new Map([
    ["core", schema.schema],
    ["failsafe", [map.map, seq.seq, string.string]],
    ["json", schema$1.schema],
    ["yaml11", schema$2.schema],
    ["yaml-1.1", schema$2.schema]
  ]);
  var tagsByName = {
    binary: binary.binary,
    bool: bool.boolTag,
    float: float.float,
    floatExp: float.floatExp,
    floatNaN: float.floatNaN,
    floatTime: timestamp.floatTime,
    int: int.int,
    intHex: int.intHex,
    intOct: int.intOct,
    intTime: timestamp.intTime,
    map: map.map,
    null: _null.nullTag,
    omap: omap.omap,
    pairs: pairs.pairs,
    seq: seq.seq,
    set: set.set,
    timestamp: timestamp.timestamp
  };
  var coreKnownTags = {
    "tag:yaml.org,2002:binary": binary.binary,
    "tag:yaml.org,2002:omap": omap.omap,
    "tag:yaml.org,2002:pairs": pairs.pairs,
    "tag:yaml.org,2002:set": set.set,
    "tag:yaml.org,2002:timestamp": timestamp.timestamp
  };
  exports.coreKnownTags = coreKnownTags;
  exports.getTags = getTags;
});

// node_modules/yaml/dist/schema/Schema.js
var require_Schema = __commonJS((exports) => {
  var identity = require_identity();
  var map = require_map();
  var seq = require_seq();
  var string = require_string();
  var tags = require_tags();
  var sortMapEntriesByKey = (a, b) => a.key < b.key ? -1 : a.key > b.key ? 1 : 0;

  class Schema {
    constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
      this.compat = Array.isArray(compat) ? tags.getTags(compat, "compat") : compat ? tags.getTags(null, compat) : null;
      this.merge = !!merge;
      this.name = typeof schema === "string" && schema || "core";
      this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
      this.tags = tags.getTags(customTags, this.name);
      this.toStringOptions = toStringDefaults ?? null;
      Object.defineProperty(this, identity.MAP, { value: map.map });
      Object.defineProperty(this, identity.SCALAR, { value: string.string });
      Object.defineProperty(this, identity.SEQ, { value: seq.seq });
      this.sortMapEntries = typeof sortMapEntries === "function" ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
    }
    clone() {
      const copy = Object.create(Schema.prototype, Object.getOwnPropertyDescriptors(this));
      copy.tags = this.tags.slice();
      return copy;
    }
  }
  exports.Schema = Schema;
});

// node_modules/yaml/dist/stringify/stringifyDocument.js
var require_stringifyDocument = __commonJS((exports) => {
  var stringifyDocument = function(doc, options) {
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
      const dir = doc.directives.toString(doc);
      if (dir) {
        lines.push(dir);
        hasDirectives = true;
      } else if (doc.directives.docStart)
        hasDirectives = true;
    }
    if (hasDirectives)
      lines.push("---");
    const ctx = stringify.createStringifyContext(doc, options);
    const { commentString } = ctx.options;
    if (doc.commentBefore) {
      if (lines.length !== 1)
        lines.unshift("");
      const cs = commentString(doc.commentBefore);
      lines.unshift(stringifyComment.indentComment(cs, ""));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
      if (identity.isNode(doc.contents)) {
        if (doc.contents.spaceBefore && hasDirectives)
          lines.push("");
        if (doc.contents.commentBefore) {
          const cs = commentString(doc.contents.commentBefore);
          lines.push(stringifyComment.indentComment(cs, ""));
        }
        ctx.forceBlockIndent = !!doc.comment;
        contentComment = doc.contents.comment;
      }
      const onChompKeep = contentComment ? undefined : () => chompKeep = true;
      let body = stringify.stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);
      if (contentComment)
        body += stringifyComment.lineComment(body, "", commentString(contentComment));
      if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
        lines[lines.length - 1] = `--- ${body}`;
      } else
        lines.push(body);
    } else {
      lines.push(stringify.stringify(doc.contents, ctx));
    }
    if (doc.directives?.docEnd) {
      if (doc.comment) {
        const cs = commentString(doc.comment);
        if (cs.includes("\n")) {
          lines.push("...");
          lines.push(stringifyComment.indentComment(cs, ""));
        } else {
          lines.push(`... ${cs}`);
        }
      } else {
        lines.push("...");
      }
    } else {
      let dc = doc.comment;
      if (dc && chompKeep)
        dc = dc.replace(/^\n+/, "");
      if (dc) {
        if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
          lines.push("");
        lines.push(stringifyComment.indentComment(commentString(dc), ""));
      }
    }
    return lines.join("\n") + "\n";
  };
  var identity = require_identity();
  var stringify = require_stringify();
  var stringifyComment = require_stringifyComment();
  exports.stringifyDocument = stringifyDocument;
});

// node_modules/yaml/dist/doc/Document.js
var require_Document = __commonJS((exports) => {
  var assertCollection = function(contents) {
    if (identity.isCollection(contents))
      return true;
    throw new Error("Expected a YAML collection as document contents");
  };
  var Alias = require_Alias();
  var Collection = require_Collection();
  var identity = require_identity();
  var Pair = require_Pair();
  var toJS = require_toJS();
  var Schema = require_Schema();
  var stringifyDocument = require_stringifyDocument();
  var anchors = require_anchors();
  var applyReviver = require_applyReviver();
  var createNode = require_createNode();
  var directives = require_directives();

  class Document {
    constructor(value, replacer, options) {
      this.commentBefore = null;
      this.comment = null;
      this.errors = [];
      this.warnings = [];
      Object.defineProperty(this, identity.NODE_TYPE, { value: identity.DOC });
      let _replacer = null;
      if (typeof replacer === "function" || Array.isArray(replacer)) {
        _replacer = replacer;
      } else if (options === undefined && replacer) {
        options = replacer;
        replacer = undefined;
      }
      const opt = Object.assign({
        intAsBigInt: false,
        keepSourceTokens: false,
        logLevel: "warn",
        prettyErrors: true,
        strict: true,
        uniqueKeys: true,
        version: "1.2"
      }, options);
      this.options = opt;
      let { version } = opt;
      if (options?._directives) {
        this.directives = options._directives.atDocument();
        if (this.directives.yaml.explicit)
          version = this.directives.yaml.version;
      } else
        this.directives = new directives.Directives({ version });
      this.setSchema(version, options);
      this.contents = value === undefined ? null : this.createNode(value, _replacer, options);
    }
    clone() {
      const copy = Object.create(Document.prototype, {
        [identity.NODE_TYPE]: { value: identity.DOC }
      });
      copy.commentBefore = this.commentBefore;
      copy.comment = this.comment;
      copy.errors = this.errors.slice();
      copy.warnings = this.warnings.slice();
      copy.options = Object.assign({}, this.options);
      if (this.directives)
        copy.directives = this.directives.clone();
      copy.schema = this.schema.clone();
      copy.contents = identity.isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
      if (this.range)
        copy.range = this.range.slice();
      return copy;
    }
    add(value) {
      if (assertCollection(this.contents))
        this.contents.add(value);
    }
    addIn(path, value) {
      if (assertCollection(this.contents))
        this.contents.addIn(path, value);
    }
    createAlias(node, name) {
      if (!node.anchor) {
        const prev = anchors.anchorNames(this);
        node.anchor = !name || prev.has(name) ? anchors.findNewAnchor(name || "a", prev) : name;
      }
      return new Alias.Alias(node.anchor);
    }
    createNode(value, replacer, options) {
      let _replacer = undefined;
      if (typeof replacer === "function") {
        value = replacer.call({ "": value }, "", value);
        _replacer = replacer;
      } else if (Array.isArray(replacer)) {
        const keyToStr = (v) => typeof v === "number" || v instanceof String || v instanceof Number;
        const asStr = replacer.filter(keyToStr).map(String);
        if (asStr.length > 0)
          replacer = replacer.concat(asStr);
        _replacer = replacer;
      } else if (options === undefined && replacer) {
        options = replacer;
        replacer = undefined;
      }
      const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options ?? {};
      const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(this, anchorPrefix || "a");
      const ctx = {
        aliasDuplicateObjects: aliasDuplicateObjects ?? true,
        keepUndefined: keepUndefined ?? false,
        onAnchor,
        onTagObj,
        replacer: _replacer,
        schema: this.schema,
        sourceObjects
      };
      const node = createNode.createNode(value, tag, ctx);
      if (flow && identity.isCollection(node))
        node.flow = true;
      setAnchors();
      return node;
    }
    createPair(key, value, options = {}) {
      const k = this.createNode(key, null, options);
      const v = this.createNode(value, null, options);
      return new Pair.Pair(k, v);
    }
    delete(key) {
      return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    deleteIn(path) {
      if (Collection.isEmptyPath(path)) {
        if (this.contents == null)
          return false;
        this.contents = null;
        return true;
      }
      return assertCollection(this.contents) ? this.contents.deleteIn(path) : false;
    }
    get(key, keepScalar) {
      return identity.isCollection(this.contents) ? this.contents.get(key, keepScalar) : undefined;
    }
    getIn(path, keepScalar) {
      if (Collection.isEmptyPath(path))
        return !keepScalar && identity.isScalar(this.contents) ? this.contents.value : this.contents;
      return identity.isCollection(this.contents) ? this.contents.getIn(path, keepScalar) : undefined;
    }
    has(key) {
      return identity.isCollection(this.contents) ? this.contents.has(key) : false;
    }
    hasIn(path) {
      if (Collection.isEmptyPath(path))
        return this.contents !== undefined;
      return identity.isCollection(this.contents) ? this.contents.hasIn(path) : false;
    }
    set(key, value) {
      if (this.contents == null) {
        this.contents = Collection.collectionFromPath(this.schema, [key], value);
      } else if (assertCollection(this.contents)) {
        this.contents.set(key, value);
      }
    }
    setIn(path, value) {
      if (Collection.isEmptyPath(path)) {
        this.contents = value;
      } else if (this.contents == null) {
        this.contents = Collection.collectionFromPath(this.schema, Array.from(path), value);
      } else if (assertCollection(this.contents)) {
        this.contents.setIn(path, value);
      }
    }
    setSchema(version, options = {}) {
      if (typeof version === "number")
        version = String(version);
      let opt;
      switch (version) {
        case "1.1":
          if (this.directives)
            this.directives.yaml.version = "1.1";
          else
            this.directives = new directives.Directives({ version: "1.1" });
          opt = { merge: true, resolveKnownTags: false, schema: "yaml-1.1" };
          break;
        case "1.2":
        case "next":
          if (this.directives)
            this.directives.yaml.version = version;
          else
            this.directives = new directives.Directives({ version });
          opt = { merge: false, resolveKnownTags: true, schema: "core" };
          break;
        case null:
          if (this.directives)
            delete this.directives;
          opt = null;
          break;
        default: {
          const sv = JSON.stringify(version);
          throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
        }
      }
      if (options.schema instanceof Object)
        this.schema = options.schema;
      else if (opt)
        this.schema = new Schema.Schema(Object.assign(opt, options));
      else
        throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
      const ctx = {
        anchors: new Map,
        doc: this,
        keep: !json,
        mapAsMap: mapAsMap === true,
        mapKeyWarned: false,
        maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
      };
      const res = toJS.toJS(this.contents, jsonArg ?? "", ctx);
      if (typeof onAnchor === "function")
        for (const { count, res: res2 } of ctx.anchors.values())
          onAnchor(res2, count);
      return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
    }
    toJSON(jsonArg, onAnchor) {
      return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
    }
    toString(options = {}) {
      if (this.errors.length > 0)
        throw new Error("Document with errors cannot be stringified");
      if (("indent" in options) && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
        const s = JSON.stringify(options.indent);
        throw new Error(`"indent" option must be a positive integer, not ${s}`);
      }
      return stringifyDocument.stringifyDocument(this, options);
    }
  }
  exports.Document = Document;
});

// node_modules/yaml/dist/errors.js
var require_errors = __commonJS((exports) => {
  class YAMLError extends Error {
    constructor(name, pos, code, message) {
      super();
      this.name = name;
      this.code = code;
      this.message = message;
      this.pos = pos;
    }
  }

  class YAMLParseError extends YAMLError {
    constructor(pos, code, message) {
      super("YAMLParseError", pos, code, message);
    }
  }

  class YAMLWarning extends YAMLError {
    constructor(pos, code, message) {
      super("YAMLWarning", pos, code, message);
    }
  }
  var prettifyError = (src, lc) => (error) => {
    if (error.pos[0] === -1)
      return;
    error.linePos = error.pos.map((pos) => lc.linePos(pos));
    const { line, col } = error.linePos[0];
    error.message += ` at line ${line}, column ${col}`;
    let ci = col - 1;
    let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
    if (ci >= 60 && lineStr.length > 80) {
      const trimStart = Math.min(ci - 39, lineStr.length - 79);
      lineStr = "\u2026" + lineStr.substring(trimStart);
      ci -= trimStart - 1;
    }
    if (lineStr.length > 80)
      lineStr = lineStr.substring(0, 79) + "\u2026";
    if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
      let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
      if (prev.length > 80)
        prev = prev.substring(0, 79) + `\u2026
`;
      lineStr = prev + lineStr;
    }
    if (/[^ ]/.test(lineStr)) {
      let count = 1;
      const end = error.linePos[1];
      if (end && end.line === line && end.col > col) {
        count = Math.max(1, Math.min(end.col - col, 80 - ci));
      }
      const pointer = " ".repeat(ci) + "^".repeat(count);
      error.message += `:\n\n${lineStr}\n${pointer}\n`;
    }
  };
  exports.YAMLError = YAMLError;
  exports.YAMLParseError = YAMLParseError;
  exports.YAMLWarning = YAMLWarning;
  exports.prettifyError = prettifyError;
});

// node_modules/yaml/dist/compose/resolve-props.js
var require_resolve_props = __commonJS((exports) => {
  var resolveProps = function(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = "";
    let commentSep = "";
    let hasNewline = false;
    let hasNewlineAfterProp = false;
    let reqSpace = false;
    let anchor = null;
    let tag = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens) {
      if (reqSpace) {
        if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
          onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
        reqSpace = false;
      }
      switch (token.type) {
        case "space":
          if (!flow && atNewline && indicator !== "doc-start" && token.source[0] === "\t")
            onError(token, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
          hasSpace = true;
          break;
        case "comment": {
          if (!hasSpace)
            onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
          const cb = token.source.substring(1) || " ";
          if (!comment)
            comment = cb;
          else
            comment += commentSep + cb;
          commentSep = "";
          atNewline = false;
          break;
        }
        case "newline":
          if (atNewline) {
            if (comment)
              comment += token.source;
            else
              spaceBefore = true;
          } else
            commentSep += token.source;
          atNewline = true;
          hasNewline = true;
          if (anchor || tag)
            hasNewlineAfterProp = true;
          hasSpace = true;
          break;
        case "anchor":
          if (anchor)
            onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
          if (token.source.endsWith(":"))
            onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
          anchor = token;
          if (start === null)
            start = token.offset;
          atNewline = false;
          hasSpace = false;
          reqSpace = true;
          break;
        case "tag": {
          if (tag)
            onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
          tag = token;
          if (start === null)
            start = token.offset;
          atNewline = false;
          hasSpace = false;
          reqSpace = true;
          break;
        }
        case indicator:
          if (anchor || tag)
            onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
          if (found)
            onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow ?? "collection"}`);
          found = token;
          atNewline = false;
          hasSpace = false;
          break;
        case "comma":
          if (flow) {
            if (comma)
              onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
            comma = token;
            atNewline = false;
            hasSpace = false;
            break;
          }
        default:
          onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
          atNewline = false;
          hasSpace = false;
      }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== ""))
      onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
    return {
      comma,
      found,
      spaceBefore,
      comment,
      hasNewline,
      hasNewlineAfterProp,
      anchor,
      tag,
      end,
      start: start ?? end
    };
  };
  exports.resolveProps = resolveProps;
});

// node_modules/yaml/dist/compose/util-contains-newline.js
var require_util_contains_newline = __commonJS((exports) => {
  var containsNewline = function(key) {
    if (!key)
      return null;
    switch (key.type) {
      case "alias":
      case "scalar":
      case "double-quoted-scalar":
      case "single-quoted-scalar":
        if (key.source.includes("\n"))
          return true;
        if (key.end) {
          for (const st of key.end)
            if (st.type === "newline")
              return true;
        }
        return false;
      case "flow-collection":
        for (const it of key.items) {
          for (const st of it.start)
            if (st.type === "newline")
              return true;
          if (it.sep) {
            for (const st of it.sep)
              if (st.type === "newline")
                return true;
          }
          if (containsNewline(it.key) || containsNewline(it.value))
            return true;
        }
        return false;
      default:
        return true;
    }
  };
  exports.containsNewline = containsNewline;
});

// node_modules/yaml/dist/compose/util-flow-indent-check.js
var require_util_flow_indent_check = __commonJS((exports) => {
  var flowIndentCheck = function(indent, fc, onError) {
    if (fc?.type === "flow-collection") {
      const end = fc.end[0];
      if (end.indent === indent && (end.source === "]" || end.source === "}") && utilContainsNewline.containsNewline(fc)) {
        const msg = "Flow end indicator should be more indented than parent";
        onError(end, "BAD_INDENT", msg, true);
      }
    }
  };
  var utilContainsNewline = require_util_contains_newline();
  exports.flowIndentCheck = flowIndentCheck;
});

// node_modules/yaml/dist/compose/util-map-includes.js
var require_util_map_includes = __commonJS((exports) => {
  var mapIncludes = function(ctx, items, search) {
    const { uniqueKeys } = ctx.options;
    if (uniqueKeys === false)
      return false;
    const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a, b) => a === b || identity.isScalar(a) && identity.isScalar(b) && a.value === b.value && !(a.value === "<<" && ctx.schema.merge);
    return items.some((pair) => isEqual(pair.key, search));
  };
  var identity = require_identity();
  exports.mapIncludes = mapIncludes;
});

// node_modules/yaml/dist/compose/resolve-block-map.js
var require_resolve_block_map = __commonJS((exports) => {
  var resolveBlockMap = function({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {
    const NodeClass = tag?.nodeClass ?? YAMLMap.YAMLMap;
    const map = new NodeClass(ctx.schema);
    if (ctx.atRoot)
      ctx.atRoot = false;
    let offset = bm.offset;
    let commentEnd = null;
    for (const collItem of bm.items) {
      const { start, key, sep, value } = collItem;
      const keyProps = resolveProps.resolveProps(start, {
        indicator: "explicit-key-ind",
        next: key ?? sep?.[0],
        offset,
        onError,
        startOnNewline: true
      });
      const implicitKey = !keyProps.found;
      if (implicitKey) {
        if (key) {
          if (key.type === "block-seq")
            onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
          else if (("indent" in key) && key.indent !== bm.indent)
            onError(offset, "BAD_INDENT", startColMsg);
        }
        if (!keyProps.anchor && !keyProps.tag && !sep) {
          commentEnd = keyProps.end;
          if (keyProps.comment) {
            if (map.comment)
              map.comment += "\n" + keyProps.comment;
            else
              map.comment = keyProps.comment;
          }
          continue;
        }
        if (keyProps.hasNewlineAfterProp || utilContainsNewline.containsNewline(key)) {
          onError(key ?? start[start.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
        }
      } else if (keyProps.found?.indent !== bm.indent) {
        onError(offset, "BAD_INDENT", startColMsg);
      }
      const keyStart = keyProps.end;
      const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
      if (ctx.schema.compat)
        utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
      if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
        onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
      const valueProps = resolveProps.resolveProps(sep ?? [], {
        indicator: "map-value-ind",
        next: value,
        offset: keyNode.range[2],
        onError,
        startOnNewline: !key || key.type === "block-scalar"
      });
      offset = valueProps.end;
      if (valueProps.found) {
        if (implicitKey) {
          if (value?.type === "block-map" && !valueProps.hasNewline)
            onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
          if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
            onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
        }
        const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
        if (ctx.schema.compat)
          utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
        offset = valueNode.range[2];
        const pair = new Pair.Pair(keyNode, valueNode);
        if (ctx.options.keepSourceTokens)
          pair.srcToken = collItem;
        map.items.push(pair);
      } else {
        if (implicitKey)
          onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
        if (valueProps.comment) {
          if (keyNode.comment)
            keyNode.comment += "\n" + valueProps.comment;
          else
            keyNode.comment = valueProps.comment;
        }
        const pair = new Pair.Pair(keyNode);
        if (ctx.options.keepSourceTokens)
          pair.srcToken = collItem;
        map.items.push(pair);
      }
    }
    if (commentEnd && commentEnd < offset)
      onError(commentEnd, "IMPOSSIBLE", "Map comment with trailing content");
    map.range = [bm.offset, offset, commentEnd ?? offset];
    return map;
  };
  var Pair = require_Pair();
  var YAMLMap = require_YAMLMap();
  var resolveProps = require_resolve_props();
  var utilContainsNewline = require_util_contains_newline();
  var utilFlowIndentCheck = require_util_flow_indent_check();
  var utilMapIncludes = require_util_map_includes();
  var startColMsg = "All mapping items must start at the same column";
  exports.resolveBlockMap = resolveBlockMap;
});

// node_modules/yaml/dist/compose/resolve-block-seq.js
var require_resolve_block_seq = __commonJS((exports) => {
  var resolveBlockSeq = function({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {
    const NodeClass = tag?.nodeClass ?? YAMLSeq.YAMLSeq;
    const seq = new NodeClass(ctx.schema);
    if (ctx.atRoot)
      ctx.atRoot = false;
    let offset = bs.offset;
    let commentEnd = null;
    for (const { start, value } of bs.items) {
      const props = resolveProps.resolveProps(start, {
        indicator: "seq-item-ind",
        next: value,
        offset,
        onError,
        startOnNewline: true
      });
      if (!props.found) {
        if (props.anchor || props.tag || value) {
          if (value && value.type === "block-seq")
            onError(props.end, "BAD_INDENT", "All sequence items must start at the same column");
          else
            onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
        } else {
          commentEnd = props.end;
          if (props.comment)
            seq.comment = props.comment;
          continue;
        }
      }
      const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
      if (ctx.schema.compat)
        utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
      offset = node.range[2];
      seq.items.push(node);
    }
    seq.range = [bs.offset, offset, commentEnd ?? offset];
    return seq;
  };
  var YAMLSeq = require_YAMLSeq();
  var resolveProps = require_resolve_props();
  var utilFlowIndentCheck = require_util_flow_indent_check();
  exports.resolveBlockSeq = resolveBlockSeq;
});

// node_modules/yaml/dist/compose/resolve-end.js
var require_resolve_end = __commonJS((exports) => {
  var resolveEnd = function(end, offset, reqSpace, onError) {
    let comment = "";
    if (end) {
      let hasSpace = false;
      let sep = "";
      for (const token of end) {
        const { source, type } = token;
        switch (type) {
          case "space":
            hasSpace = true;
            break;
          case "comment": {
            if (reqSpace && !hasSpace)
              onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
            const cb = source.substring(1) || " ";
            if (!comment)
              comment = cb;
            else
              comment += sep + cb;
            sep = "";
            break;
          }
          case "newline":
            if (comment)
              sep += source;
            hasSpace = true;
            break;
          default:
            onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
        }
        offset += source.length;
      }
    }
    return { comment, offset };
  };
  exports.resolveEnd = resolveEnd;
});

// node_modules/yaml/dist/compose/resolve-flow-collection.js
var require_resolve_flow_collection = __commonJS((exports) => {
  var resolveFlowCollection = function({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {
    const isMap = fc.start.source === "{";
    const fcName = isMap ? "flow map" : "flow sequence";
    const NodeClass = tag?.nodeClass ?? (isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq);
    const coll = new NodeClass(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot)
      ctx.atRoot = false;
    let offset = fc.offset + fc.start.source.length;
    for (let i = 0;i < fc.items.length; ++i) {
      const collItem = fc.items[i];
      const { start, key, sep, value } = collItem;
      const props = resolveProps.resolveProps(start, {
        flow: fcName,
        indicator: "explicit-key-ind",
        next: key ?? sep?.[0],
        offset,
        onError,
        startOnNewline: false
      });
      if (!props.found) {
        if (!props.anchor && !props.tag && !sep && !value) {
          if (i === 0 && props.comma)
            onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
          else if (i < fc.items.length - 1)
            onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
          if (props.comment) {
            if (coll.comment)
              coll.comment += "\n" + props.comment;
            else
              coll.comment = props.comment;
          }
          offset = props.end;
          continue;
        }
        if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))
          onError(key, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
      }
      if (i === 0) {
        if (props.comma)
          onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
      } else {
        if (!props.comma)
          onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
        if (props.comment) {
          let prevItemComment = "";
          loop:
            for (const st of start) {
              switch (st.type) {
                case "comma":
                case "space":
                  break;
                case "comment":
                  prevItemComment = st.source.substring(1);
                  break loop;
                default:
                  break loop;
              }
            }
          if (prevItemComment) {
            let prev = coll.items[coll.items.length - 1];
            if (identity.isPair(prev))
              prev = prev.value ?? prev.key;
            if (prev.comment)
              prev.comment += "\n" + prevItemComment;
            else
              prev.comment = prevItemComment;
            props.comment = props.comment.substring(prevItemComment.length + 1);
          }
        }
      }
      if (!isMap && !sep && !props.found) {
        const valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);
        coll.items.push(valueNode);
        offset = valueNode.range[2];
        if (isBlock(value))
          onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
      } else {
        const keyStart = props.end;
        const keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);
        if (isBlock(key))
          onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
        const valueProps = resolveProps.resolveProps(sep ?? [], {
          flow: fcName,
          indicator: "map-value-ind",
          next: value,
          offset: keyNode.range[2],
          onError,
          startOnNewline: false
        });
        if (valueProps.found) {
          if (!isMap && !props.found && ctx.options.strict) {
            if (sep)
              for (const st of sep) {
                if (st === valueProps.found)
                  break;
                if (st.type === "newline") {
                  onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                  break;
                }
              }
            if (props.start < valueProps.found.offset - 1024)
              onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
          }
        } else if (value) {
          if (("source" in value) && value.source && value.source[0] === ":")
            onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
          else
            onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
        }
        const valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;
        if (valueNode) {
          if (isBlock(value))
            onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
        } else if (valueProps.comment) {
          if (keyNode.comment)
            keyNode.comment += "\n" + valueProps.comment;
          else
            keyNode.comment = valueProps.comment;
        }
        const pair = new Pair.Pair(keyNode, valueNode);
        if (ctx.options.keepSourceTokens)
          pair.srcToken = collItem;
        if (isMap) {
          const map = coll;
          if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
            onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
          map.items.push(pair);
        } else {
          const map = new YAMLMap.YAMLMap(ctx.schema);
          map.flow = true;
          map.items.push(pair);
          coll.items.push(map);
        }
        offset = valueNode ? valueNode.range[2] : valueProps.end;
      }
    }
    const expectedEnd = isMap ? "}" : "]";
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd)
      cePos = ce.offset + ce.source.length;
    else {
      const name = fcName[0].toUpperCase() + fcName.substring(1);
      const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
      onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
      if (ce && ce.source.length !== 1)
        ee.unshift(ce);
    }
    if (ee.length > 0) {
      const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);
      if (end.comment) {
        if (coll.comment)
          coll.comment += "\n" + end.comment;
        else
          coll.comment = end.comment;
      }
      coll.range = [fc.offset, cePos, end.offset];
    } else {
      coll.range = [fc.offset, cePos, cePos];
    }
    return coll;
  };
  var identity = require_identity();
  var Pair = require_Pair();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var resolveEnd = require_resolve_end();
  var resolveProps = require_resolve_props();
  var utilContainsNewline = require_util_contains_newline();
  var utilMapIncludes = require_util_map_includes();
  var blockMsg = "Block collections are not allowed within flow collections";
  var isBlock = (token) => token && (token.type === "block-map" || token.type === "block-seq");
  exports.resolveFlowCollection = resolveFlowCollection;
});

// node_modules/yaml/dist/compose/compose-collection.js
var require_compose_collection = __commonJS((exports) => {
  var resolveCollection = function(CN, ctx, token, onError, tagName, tag) {
    const coll = token.type === "block-map" ? resolveBlockMap.resolveBlockMap(CN, ctx, token, onError, tag) : token.type === "block-seq" ? resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError, tag) : resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError, tag);
    const Coll = coll.constructor;
    if (tagName === "!" || tagName === Coll.tagName) {
      coll.tag = Coll.tagName;
      return coll;
    }
    if (tagName)
      coll.tag = tagName;
    return coll;
  };
  var composeCollection = function(CN, ctx, token, tagToken, onError) {
    const tagName = !tagToken ? null : ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
    const expType = token.type === "block-map" ? "map" : token.type === "block-seq" ? "seq" : token.start.source === "{" ? "map" : "seq";
    if (!tagToken || !tagName || tagName === "!" || tagName === YAMLMap.YAMLMap.tagName && expType === "map" || tagName === YAMLSeq.YAMLSeq.tagName && expType === "seq" || !expType) {
      return resolveCollection(CN, ctx, token, onError, tagName);
    }
    let tag = ctx.schema.tags.find((t) => t.tag === tagName && t.collection === expType);
    if (!tag) {
      const kt = ctx.schema.knownTags[tagName];
      if (kt && kt.collection === expType) {
        ctx.schema.tags.push(Object.assign({}, kt, { default: false }));
        tag = kt;
      } else {
        if (kt?.collection) {
          onError(tagToken, "BAD_COLLECTION_TYPE", `${kt.tag} used for ${expType} collection, but expects ${kt.collection}`, true);
        } else {
          onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
        }
        return resolveCollection(CN, ctx, token, onError, tagName);
      }
    }
    const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);
    const res = tag.resolve?.(coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options) ?? coll;
    const node = identity.isNode(res) ? res : new Scalar.Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag?.format)
      node.format = tag.format;
    return node;
  };
  var identity = require_identity();
  var Scalar = require_Scalar();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var resolveBlockMap = require_resolve_block_map();
  var resolveBlockSeq = require_resolve_block_seq();
  var resolveFlowCollection = require_resolve_flow_collection();
  exports.composeCollection = composeCollection;
});

// node_modules/yaml/dist/compose/resolve-block-scalar.js
var require_resolve_block_scalar = __commonJS((exports) => {
  var resolveBlockScalar = function(scalar, strict, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, strict, onError);
    if (!header)
      return { value: "", type: null, comment: "", range: [start, start, start] };
    const type = header.mode === ">" ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    let chompStart = lines.length;
    for (let i = lines.length - 1;i >= 0; --i) {
      const content = lines[i][1];
      if (content === "" || content === "\r")
        chompStart = i;
      else
        break;
    }
    if (chompStart === 0) {
      const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
      let end2 = start + header.length;
      if (scalar.source)
        end2 += scalar.source.length;
      return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
    }
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for (let i = 0;i < chompStart; ++i) {
      const [indent, content] = lines[i];
      if (content === "" || content === "\r") {
        if (header.indent === 0 && indent.length > trimIndent)
          trimIndent = indent.length;
      } else {
        if (indent.length < trimIndent) {
          const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
          onError(offset + indent.length, "MISSING_CHAR", message);
        }
        if (header.indent === 0)
          trimIndent = indent.length;
        contentStart = i;
        break;
      }
      offset += indent.length + content.length + 1;
    }
    for (let i = lines.length - 1;i >= chompStart; --i) {
      if (lines[i][0].length > trimIndent)
        chompStart = i + 1;
    }
    let value = "";
    let sep = "";
    let prevMoreIndented = false;
    for (let i = 0;i < contentStart; ++i)
      value += lines[i][0].slice(trimIndent) + "\n";
    for (let i = contentStart;i < chompStart; ++i) {
      let [indent, content] = lines[i];
      offset += indent.length + content.length + 1;
      const crlf = content[content.length - 1] === "\r";
      if (crlf)
        content = content.slice(0, -1);
      if (content && indent.length < trimIndent) {
        const src = header.indent ? "explicit indentation indicator" : "first line";
        const message = `Block scalar lines must not be less indented than their ${src}`;
        onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
        indent = "";
      }
      if (type === Scalar.Scalar.BLOCK_LITERAL) {
        value += sep + indent.slice(trimIndent) + content;
        sep = "\n";
      } else if (indent.length > trimIndent || content[0] === "\t") {
        if (sep === " ")
          sep = "\n";
        else if (!prevMoreIndented && sep === "\n")
          sep = "\n\n";
        value += sep + indent.slice(trimIndent) + content;
        sep = "\n";
        prevMoreIndented = true;
      } else if (content === "") {
        if (sep === "\n")
          value += "\n";
        else
          sep = "\n";
      } else {
        value += sep + content;
        sep = " ";
        prevMoreIndented = false;
      }
    }
    switch (header.chomp) {
      case "-":
        break;
      case "+":
        for (let i = chompStart;i < lines.length; ++i)
          value += "\n" + lines[i][0].slice(trimIndent);
        if (value[value.length - 1] !== "\n")
          value += "\n";
        break;
      default:
        value += "\n";
    }
    const end = start + header.length + scalar.source.length;
    return { value, type, comment: header.comment, range: [start, end, end] };
  };
  var parseBlockScalarHeader = function({ offset, props }, strict, onError) {
    if (props[0].type !== "block-scalar-header") {
      onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
      return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = "";
    let error = -1;
    for (let i = 1;i < source.length; ++i) {
      const ch = source[i];
      if (!chomp && (ch === "-" || ch === "+"))
        chomp = ch;
      else {
        const n = Number(ch);
        if (!indent && n)
          indent = n;
        else if (error === -1)
          error = offset + i;
      }
    }
    if (error !== -1)
      onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = "";
    let length = source.length;
    for (let i = 1;i < props.length; ++i) {
      const token = props[i];
      switch (token.type) {
        case "space":
          hasSpace = true;
        case "newline":
          length += token.source.length;
          break;
        case "comment":
          if (strict && !hasSpace) {
            const message = "Comments must be separated from other tokens by white space characters";
            onError(token, "MISSING_CHAR", message);
          }
          length += token.source.length;
          comment = token.source.substring(1);
          break;
        case "error":
          onError(token, "UNEXPECTED_TOKEN", token.message);
          length += token.source.length;
          break;
        default: {
          const message = `Unexpected token in block scalar header: ${token.type}`;
          onError(token, "UNEXPECTED_TOKEN", message);
          const ts = token.source;
          if (ts && typeof ts === "string")
            length += ts.length;
        }
      }
    }
    return { mode, indent, chomp, comment, length };
  };
  var splitLines = function(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = m?.[1] ? [m[1], first.slice(m[1].length)] : ["", first];
    const lines = [line0];
    for (let i = 1;i < split.length; i += 2)
      lines.push([split[i], split[i + 1]]);
    return lines;
  };
  var Scalar = require_Scalar();
  exports.resolveBlockScalar = resolveBlockScalar;
});

// node_modules/yaml/dist/compose/resolve-flow-scalar.js
var require_resolve_flow_scalar = __commonJS((exports) => {
  var resolveFlowScalar = function(scalar, strict, onError) {
    const { offset, type, source, end } = scalar;
    let _type;
    let value;
    const _onError = (rel, code, msg) => onError(offset + rel, code, msg);
    switch (type) {
      case "scalar":
        _type = Scalar.Scalar.PLAIN;
        value = plainValue(source, _onError);
        break;
      case "single-quoted-scalar":
        _type = Scalar.Scalar.QUOTE_SINGLE;
        value = singleQuotedValue(source, _onError);
        break;
      case "double-quoted-scalar":
        _type = Scalar.Scalar.QUOTE_DOUBLE;
        value = doubleQuotedValue(source, _onError);
        break;
      default:
        onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
        return {
          value: "",
          type: null,
          comment: "",
          range: [offset, offset + source.length, offset + source.length]
        };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);
    return {
      value,
      type: _type,
      comment: re.comment,
      range: [offset, valueEnd, re.offset]
    };
  };
  var plainValue = function(source, onError) {
    let badChar = "";
    switch (source[0]) {
      case "\t":
        badChar = "a tab character";
        break;
      case ",":
        badChar = "flow indicator character ,";
        break;
      case "%":
        badChar = "directive indicator character %";
        break;
      case "|":
      case ">": {
        badChar = `block scalar indicator ${source[0]}`;
        break;
      }
      case "@":
      case "`": {
        badChar = `reserved character ${source[0]}`;
        break;
      }
    }
    if (badChar)
      onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
    return foldLines(source);
  };
  var singleQuotedValue = function(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1)
      onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
  };
  var foldLines = function(source) {
    let first, line;
    try {
      first = new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n", "sy");
      line = new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n", "sy");
    } catch (_) {
      first = /(.*?)[ \t]*\r?\n/sy;
      line = /[ \t]*(.*?)[ \t]*\r?\n/sy;
    }
    let match = first.exec(source);
    if (!match)
      return source;
    let res = match[1];
    let sep = " ";
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while (match = line.exec(source)) {
      if (match[1] === "") {
        if (sep === "\n")
          res += sep;
        else
          sep = "\n";
      } else {
        res += sep + match[1];
        sep = " ";
      }
      pos = line.lastIndex;
    }
    const last = /[ \t]*(.*)/sy;
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + (match?.[1] ?? "");
  };
  var doubleQuotedValue = function(source, onError) {
    let res = "";
    for (let i = 1;i < source.length - 1; ++i) {
      const ch = source[i];
      if (ch === "\r" && source[i + 1] === "\n")
        continue;
      if (ch === "\n") {
        const { fold, offset } = foldNewline(source, i);
        res += fold;
        i = offset;
      } else if (ch === "\\") {
        let next = source[++i];
        const cc = escapeCodes[next];
        if (cc)
          res += cc;
        else if (next === "\n") {
          next = source[i + 1];
          while (next === " " || next === "\t")
            next = source[++i + 1];
        } else if (next === "\r" && source[i + 1] === "\n") {
          next = source[++i + 1];
          while (next === " " || next === "\t")
            next = source[++i + 1];
        } else if (next === "x" || next === "u" || next === "U") {
          const length = { x: 2, u: 4, U: 8 }[next];
          res += parseCharCode(source, i + 1, length, onError);
          i += length;
        } else {
          const raw = source.substr(i - 1, 2);
          onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
          res += raw;
        }
      } else if (ch === " " || ch === "\t") {
        const wsStart = i;
        let next = source[i + 1];
        while (next === " " || next === "\t")
          next = source[++i + 1];
        if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n"))
          res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
      } else {
        res += ch;
      }
    }
    if (source[source.length - 1] !== '"' || source.length === 1)
      onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
    return res;
  };
  var foldNewline = function(source, offset) {
    let fold = "";
    let ch = source[offset + 1];
    while (ch === " " || ch === "\t" || ch === "\n" || ch === "\r") {
      if (ch === "\r" && source[offset + 2] !== "\n")
        break;
      if (ch === "\n")
        fold += "\n";
      offset += 1;
      ch = source[offset + 1];
    }
    if (!fold)
      fold = " ";
    return { fold, offset };
  };
  var parseCharCode = function(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
      const raw = source.substr(offset - 2, length + 2);
      onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
      return raw;
    }
    return String.fromCodePoint(code);
  };
  var Scalar = require_Scalar();
  var resolveEnd = require_resolve_end();
  var escapeCodes = {
    "0": "\0",
    a: "\x07",
    b: "\b",
    e: "\x1B",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "\t",
    v: "\v",
    N: "\x85",
    _: "\xA0",
    L: "\u2028",
    P: "\u2029",
    " ": " ",
    '"': '"',
    "/": "/",
    "\\": "\\",
    "\t": "\t"
  };
  exports.resolveFlowScalar = resolveFlowScalar;
});

// node_modules/yaml/dist/compose/compose-scalar.js
var require_compose_scalar = __commonJS((exports) => {
  var composeScalar = function(ctx, token, tagToken, onError) {
    const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar.resolveBlockScalar(token, ctx.options.strict, onError) : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
    const tag = tagToken && tagName ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError) : token.type === "scalar" ? findScalarTagByTest(ctx, value, token, onError) : ctx.schema[identity.SCALAR];
    let scalar;
    try {
      const res = tag.resolve(value, (msg) => onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg), ctx.options);
      scalar = identity.isScalar(res) ? res : new Scalar.Scalar(res);
    } catch (error) {
      const msg = error instanceof Error ? error.message : String(error);
      onError(tagToken ?? token, "TAG_RESOLVE_FAILED", msg);
      scalar = new Scalar.Scalar(value);
    }
    scalar.range = range;
    scalar.source = value;
    if (type)
      scalar.type = type;
    if (tagName)
      scalar.tag = tagName;
    if (tag.format)
      scalar.format = tag.format;
    if (comment)
      scalar.comment = comment;
    return scalar;
  };
  var findScalarTagByName = function(schema, value, tagName, tagToken, onError) {
    if (tagName === "!")
      return schema[identity.SCALAR];
    const matchWithTest = [];
    for (const tag of schema.tags) {
      if (!tag.collection && tag.tag === tagName) {
        if (tag.default && tag.test)
          matchWithTest.push(tag);
        else
          return tag;
      }
    }
    for (const tag of matchWithTest)
      if (tag.test?.test(value))
        return tag;
    const kt = schema.knownTags[tagName];
    if (kt && !kt.collection) {
      schema.tags.push(Object.assign({}, kt, { default: false, test: undefined }));
      return kt;
    }
    onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
    return schema[identity.SCALAR];
  };
  var findScalarTagByTest = function({ directives, schema }, value, token, onError) {
    const tag = schema.tags.find((tag2) => tag2.default && tag2.test?.test(value)) || schema[identity.SCALAR];
    if (schema.compat) {
      const compat = schema.compat.find((tag2) => tag2.default && tag2.test?.test(value)) ?? schema[identity.SCALAR];
      if (tag.tag !== compat.tag) {
        const ts = directives.tagString(tag.tag);
        const cs = directives.tagString(compat.tag);
        const msg = `Value may be parsed as either ${ts} or ${cs}`;
        onError(token, "TAG_RESOLVE_FAILED", msg, true);
      }
    }
    return tag;
  };
  var identity = require_identity();
  var Scalar = require_Scalar();
  var resolveBlockScalar = require_resolve_block_scalar();
  var resolveFlowScalar = require_resolve_flow_scalar();
  exports.composeScalar = composeScalar;
});

// node_modules/yaml/dist/compose/util-empty-scalar-position.js
var require_util_empty_scalar_position = __commonJS((exports) => {
  var emptyScalarPosition = function(offset, before, pos) {
    if (before) {
      if (pos === null)
        pos = before.length;
      for (let i = pos - 1;i >= 0; --i) {
        let st = before[i];
        switch (st.type) {
          case "space":
          case "comment":
          case "newline":
            offset -= st.source.length;
            continue;
        }
        st = before[++i];
        while (st?.type === "space") {
          offset += st.source.length;
          st = before[++i];
        }
        break;
      }
    }
    return offset;
  };
  exports.emptyScalarPosition = emptyScalarPosition;
});

// node_modules/yaml/dist/compose/compose-node.js
var require_compose_node = __commonJS((exports) => {
  var composeNode = function(ctx, token, props, onError) {
    const { spaceBefore, comment, anchor, tag } = props;
    let node;
    let isSrcToken = true;
    switch (token.type) {
      case "alias":
        node = composeAlias(ctx, token, onError);
        if (anchor || tag)
          onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
        break;
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
      case "block-scalar":
        node = composeScalar.composeScalar(ctx, token, tag, onError);
        if (anchor)
          node.anchor = anchor.source.substring(1);
        break;
      case "block-map":
      case "block-seq":
      case "flow-collection":
        node = composeCollection.composeCollection(CN, ctx, token, tag, onError);
        if (anchor)
          node.anchor = anchor.source.substring(1);
        break;
      default: {
        const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
        onError(token, "UNEXPECTED_TOKEN", message);
        node = composeEmptyNode(ctx, token.offset, undefined, null, props, onError);
        isSrcToken = false;
      }
    }
    if (anchor && node.anchor === "")
      onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    if (spaceBefore)
      node.spaceBefore = true;
    if (comment) {
      if (token.type === "scalar" && token.source === "")
        node.comment = comment;
      else
        node.commentBefore = comment;
    }
    if (ctx.options.keepSourceTokens && isSrcToken)
      node.srcToken = token;
    return node;
  };
  var composeEmptyNode = function(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
    const token = {
      type: "scalar",
      offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),
      indent: -1,
      source: ""
    };
    const node = composeScalar.composeScalar(ctx, token, tag, onError);
    if (anchor) {
      node.anchor = anchor.source.substring(1);
      if (node.anchor === "")
        onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    }
    if (spaceBefore)
      node.spaceBefore = true;
    if (comment) {
      node.comment = comment;
      node.range[2] = end;
    }
    return node;
  };
  var composeAlias = function({ options }, { offset, source, end }, onError) {
    const alias = new Alias.Alias(source.substring(1));
    if (alias.source === "")
      onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
    if (alias.source.endsWith(":"))
      onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
    const valueEnd = offset + source.length;
    const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [offset, valueEnd, re.offset];
    if (re.comment)
      alias.comment = re.comment;
    return alias;
  };
  var Alias = require_Alias();
  var composeCollection = require_compose_collection();
  var composeScalar = require_compose_scalar();
  var resolveEnd = require_resolve_end();
  var utilEmptyScalarPosition = require_util_empty_scalar_position();
  var CN = { composeNode, composeEmptyNode };
  exports.composeEmptyNode = composeEmptyNode;
  exports.composeNode = composeNode;
});

// node_modules/yaml/dist/compose/compose-doc.js
var require_compose_doc = __commonJS((exports) => {
  var composeDoc = function(options, directives, { offset, start, value, end }, onError) {
    const opts = Object.assign({ _directives: directives }, options);
    const doc = new Document.Document(undefined, opts);
    const ctx = {
      atRoot: true,
      directives: doc.directives,
      options: doc.options,
      schema: doc.schema
    };
    const props = resolveProps.resolveProps(start, {
      indicator: "doc-start",
      next: value ?? end?.[0],
      offset,
      onError,
      startOnNewline: true
    });
    if (props.found) {
      doc.directives.docStart = true;
      if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
        onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
    }
    doc.contents = value ? composeNode.composeNode(ctx, value, props, onError) : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);
    if (re.comment)
      doc.comment = re.comment;
    doc.range = [offset, contentEnd, re.offset];
    return doc;
  };
  var Document = require_Document();
  var composeNode = require_compose_node();
  var resolveEnd = require_resolve_end();
  var resolveProps = require_resolve_props();
  exports.composeDoc = composeDoc;
});

// node_modules/yaml/dist/compose/composer.js
var require_composer = __commonJS((exports) => {
  var getErrorPos = function(src) {
    if (typeof src === "number")
      return [src, src + 1];
    if (Array.isArray(src))
      return src.length === 2 ? src : [src[0], src[1]];
    const { offset, source } = src;
    return [offset, offset + (typeof source === "string" ? source.length : 1)];
  };
  var parsePrelude = function(prelude) {
    let comment = "";
    let atComment = false;
    let afterEmptyLine = false;
    for (let i = 0;i < prelude.length; ++i) {
      const source = prelude[i];
      switch (source[0]) {
        case "#":
          comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
          atComment = true;
          afterEmptyLine = false;
          break;
        case "%":
          if (prelude[i + 1]?.[0] !== "#")
            i += 1;
          atComment = false;
          break;
        default:
          if (!atComment)
            afterEmptyLine = true;
          atComment = false;
      }
    }
    return { comment, afterEmptyLine };
  };
  var directives = require_directives();
  var Document = require_Document();
  var errors = require_errors();
  var identity = require_identity();
  var composeDoc = require_compose_doc();
  var resolveEnd = require_resolve_end();

  class Composer {
    constructor(options = {}) {
      this.doc = null;
      this.atDirectives = false;
      this.prelude = [];
      this.errors = [];
      this.warnings = [];
      this.onError = (source, code, message, warning) => {
        const pos = getErrorPos(source);
        if (warning)
          this.warnings.push(new errors.YAMLWarning(pos, code, message));
        else
          this.errors.push(new errors.YAMLParseError(pos, code, message));
      };
      this.directives = new directives.Directives({ version: options.version || "1.2" });
      this.options = options;
    }
    decorate(doc, afterDoc) {
      const { comment, afterEmptyLine } = parsePrelude(this.prelude);
      if (comment) {
        const dc = doc.contents;
        if (afterDoc) {
          doc.comment = doc.comment ? `${doc.comment}\n${comment}` : comment;
        } else if (afterEmptyLine || doc.directives.docStart || !dc) {
          doc.commentBefore = comment;
        } else if (identity.isCollection(dc) && !dc.flow && dc.items.length > 0) {
          let it = dc.items[0];
          if (identity.isPair(it))
            it = it.key;
          const cb = it.commentBefore;
          it.commentBefore = cb ? `${comment}\n${cb}` : comment;
        } else {
          const cb = dc.commentBefore;
          dc.commentBefore = cb ? `${comment}\n${cb}` : comment;
        }
      }
      if (afterDoc) {
        Array.prototype.push.apply(doc.errors, this.errors);
        Array.prototype.push.apply(doc.warnings, this.warnings);
      } else {
        doc.errors = this.errors;
        doc.warnings = this.warnings;
      }
      this.prelude = [];
      this.errors = [];
      this.warnings = [];
    }
    streamInfo() {
      return {
        comment: parsePrelude(this.prelude).comment,
        directives: this.directives,
        errors: this.errors,
        warnings: this.warnings
      };
    }
    *compose(tokens, forceDoc = false, endOffset = -1) {
      for (const token of tokens)
        yield* this.next(token);
      yield* this.end(forceDoc, endOffset);
    }
    *next(token) {
      if (process.env.LOG_STREAM)
        console.dir(token, { depth: null });
      switch (token.type) {
        case "directive":
          this.directives.add(token.source, (offset, message, warning) => {
            const pos = getErrorPos(token);
            pos[0] += offset;
            this.onError(pos, "BAD_DIRECTIVE", message, warning);
          });
          this.prelude.push(token.source);
          this.atDirectives = true;
          break;
        case "document": {
          const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
          if (this.atDirectives && !doc.directives.docStart)
            this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
          this.decorate(doc, false);
          if (this.doc)
            yield this.doc;
          this.doc = doc;
          this.atDirectives = false;
          break;
        }
        case "byte-order-mark":
        case "space":
          break;
        case "comment":
        case "newline":
          this.prelude.push(token.source);
          break;
        case "error": {
          const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
          const error = new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
          if (this.atDirectives || !this.doc)
            this.errors.push(error);
          else
            this.doc.errors.push(error);
          break;
        }
        case "doc-end": {
          if (!this.doc) {
            const msg = "Unexpected doc-end without preceding document";
            this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
            break;
          }
          this.doc.directives.docEnd = true;
          const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
          this.decorate(this.doc, true);
          if (end.comment) {
            const dc = this.doc.comment;
            this.doc.comment = dc ? `${dc}\n${end.comment}` : end.comment;
          }
          this.doc.range[2] = end.offset;
          break;
        }
        default:
          this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
      }
    }
    *end(forceDoc = false, endOffset = -1) {
      if (this.doc) {
        this.decorate(this.doc, true);
        yield this.doc;
        this.doc = null;
      } else if (forceDoc) {
        const opts = Object.assign({ _directives: this.directives }, this.options);
        const doc = new Document.Document(undefined, opts);
        if (this.atDirectives)
          this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
        doc.range = [0, endOffset, endOffset];
        this.decorate(doc, false);
        yield doc;
      }
    }
  }
  exports.Composer = Composer;
});

// node_modules/yaml/dist/parse/cst-scalar.js
var require_cst_scalar = __commonJS((exports) => {
  var resolveAsScalar = function(token, strict = true, onError) {
    if (token) {
      const _onError = (pos, code, message) => {
        const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
        if (onError)
          onError(offset, code, message);
        else
          throw new errors.YAMLParseError([offset, offset + 1], code, message);
      };
      switch (token.type) {
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
          return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);
        case "block-scalar":
          return resolveBlockScalar.resolveBlockScalar(token, strict, _onError);
      }
    }
    return null;
  };
  var createScalarToken = function(value, context) {
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
    const source = stringifyString.stringifyString({ type, value }, {
      implicitKey,
      indent: indent > 0 ? " ".repeat(indent) : "",
      inFlow,
      options: { blockQuote: true, lineWidth: -1 }
    });
    const end = context.end ?? [
      { type: "newline", offset: -1, indent, source: "\n" }
    ];
    switch (source[0]) {
      case "|":
      case ">": {
        const he = source.indexOf("\n");
        const head = source.substring(0, he);
        const body = source.substring(he + 1) + "\n";
        const props = [
          { type: "block-scalar-header", offset, indent, source: head }
        ];
        if (!addEndtoBlockProps(props, end))
          props.push({ type: "newline", offset: -1, indent, source: "\n" });
        return { type: "block-scalar", offset, indent, props, source: body };
      }
      case '"':
        return { type: "double-quoted-scalar", offset, indent, source, end };
      case "'":
        return { type: "single-quoted-scalar", offset, indent, source, end };
      default:
        return { type: "scalar", offset, indent, source, end };
    }
  };
  var setScalarValue = function(token, value, context = {}) {
    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
    let indent = "indent" in token ? token.indent : null;
    if (afterKey && typeof indent === "number")
      indent += 2;
    if (!type)
      switch (token.type) {
        case "single-quoted-scalar":
          type = "QUOTE_SINGLE";
          break;
        case "double-quoted-scalar":
          type = "QUOTE_DOUBLE";
          break;
        case "block-scalar": {
          const header = token.props[0];
          if (header.type !== "block-scalar-header")
            throw new Error("Invalid block scalar header");
          type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
          break;
        }
        default:
          type = "PLAIN";
      }
    const source = stringifyString.stringifyString({ type, value }, {
      implicitKey: implicitKey || indent === null,
      indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
      inFlow,
      options: { blockQuote: true, lineWidth: -1 }
    });
    switch (source[0]) {
      case "|":
      case ">":
        setBlockScalarValue(token, source);
        break;
      case '"':
        setFlowScalarValue(token, source, "double-quoted-scalar");
        break;
      case "'":
        setFlowScalarValue(token, source, "single-quoted-scalar");
        break;
      default:
        setFlowScalarValue(token, source, "scalar");
    }
  };
  var setBlockScalarValue = function(token, source) {
    const he = source.indexOf("\n");
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + "\n";
    if (token.type === "block-scalar") {
      const header = token.props[0];
      if (header.type !== "block-scalar-header")
        throw new Error("Invalid block scalar header");
      header.source = head;
      token.source = body;
    } else {
      const { offset } = token;
      const indent = "indent" in token ? token.indent : -1;
      const props = [
        { type: "block-scalar-header", offset, indent, source: head }
      ];
      if (!addEndtoBlockProps(props, "end" in token ? token.end : undefined))
        props.push({ type: "newline", offset: -1, indent, source: "\n" });
      for (const key of Object.keys(token))
        if (key !== "type" && key !== "offset")
          delete token[key];
      Object.assign(token, { type: "block-scalar", indent, props, source: body });
    }
  };
  var addEndtoBlockProps = function(props, end) {
    if (end)
      for (const st of end)
        switch (st.type) {
          case "space":
          case "comment":
            props.push(st);
            break;
          case "newline":
            props.push(st);
            return true;
        }
    return false;
  };
  var setFlowScalarValue = function(token, source, type) {
    switch (token.type) {
      case "scalar":
      case "double-quoted-scalar":
      case "single-quoted-scalar":
        token.type = type;
        token.source = source;
        break;
      case "block-scalar": {
        const end = token.props.slice(1);
        let oa = source.length;
        if (token.props[0].type === "block-scalar-header")
          oa -= token.props[0].source.length;
        for (const tok of end)
          tok.offset += oa;
        delete token.props;
        Object.assign(token, { type, source, end });
        break;
      }
      case "block-map":
      case "block-seq": {
        const offset = token.offset + source.length;
        const nl = { type: "newline", offset, indent: token.indent, source: "\n" };
        delete token.items;
        Object.assign(token, { type, source, end: [nl] });
        break;
      }
      default: {
        const indent = "indent" in token ? token.indent : -1;
        const end = ("end" in token) && Array.isArray(token.end) ? token.end.filter((st) => st.type === "space" || st.type === "comment" || st.type === "newline") : [];
        for (const key of Object.keys(token))
          if (key !== "type" && key !== "offset")
            delete token[key];
        Object.assign(token, { type, indent, source, end });
      }
    }
  };
  var resolveBlockScalar = require_resolve_block_scalar();
  var resolveFlowScalar = require_resolve_flow_scalar();
  var errors = require_errors();
  var stringifyString = require_stringifyString();
  exports.createScalarToken = createScalarToken;
  exports.resolveAsScalar = resolveAsScalar;
  exports.setScalarValue = setScalarValue;
});

// node_modules/yaml/dist/parse/cst-stringify.js
var require_cst_stringify = __commonJS((exports) => {
  var stringifyToken = function(token) {
    switch (token.type) {
      case "block-scalar": {
        let res = "";
        for (const tok of token.props)
          res += stringifyToken(tok);
        return res + token.source;
      }
      case "block-map":
      case "block-seq": {
        let res = "";
        for (const item of token.items)
          res += stringifyItem(item);
        return res;
      }
      case "flow-collection": {
        let res = token.start.source;
        for (const item of token.items)
          res += stringifyItem(item);
        for (const st of token.end)
          res += st.source;
        return res;
      }
      case "document": {
        let res = stringifyItem(token);
        if (token.end)
          for (const st of token.end)
            res += st.source;
        return res;
      }
      default: {
        let res = token.source;
        if (("end" in token) && token.end)
          for (const st of token.end)
            res += st.source;
        return res;
      }
    }
  };
  var stringifyItem = function({ start, key, sep, value }) {
    let res = "";
    for (const st of start)
      res += st.source;
    if (key)
      res += stringifyToken(key);
    if (sep)
      for (const st of sep)
        res += st.source;
    if (value)
      res += stringifyToken(value);
    return res;
  };
  var stringify = (cst) => ("type" in cst) ? stringifyToken(cst) : stringifyItem(cst);
  exports.stringify = stringify;
});

// node_modules/yaml/dist/parse/cst-visit.js
var require_cst_visit = __commonJS((exports) => {
  var visit = function(cst, visitor2) {
    if (("type" in cst) && cst.type === "document")
      cst = { start: cst.start, value: cst.value };
    _visit(Object.freeze([]), cst, visitor2);
  };
  var _visit = function(path, item, visitor2) {
    let ctrl = visitor2(item, path);
    if (typeof ctrl === "symbol")
      return ctrl;
    for (const field of ["key", "value"]) {
      const token = item[field];
      if (token && ("items" in token)) {
        for (let i = 0;i < token.items.length; ++i) {
          const ci = _visit(Object.freeze(path.concat([[field, i]])), token.items[i], visitor2);
          if (typeof ci === "number")
            i = ci - 1;
          else if (ci === BREAK)
            return BREAK;
          else if (ci === REMOVE) {
            token.items.splice(i, 1);
            i -= 1;
          }
        }
        if (typeof ctrl === "function" && field === "key")
          ctrl = ctrl(item, path);
      }
    }
    return typeof ctrl === "function" ? ctrl(item, path) : ctrl;
  };
  var BREAK = Symbol("break visit");
  var SKIP = Symbol("skip children");
  var REMOVE = Symbol("remove item");
  visit.BREAK = BREAK;
  visit.SKIP = SKIP;
  visit.REMOVE = REMOVE;
  visit.itemAtPath = (cst, path) => {
    let item = cst;
    for (const [field, index] of path) {
      const tok = item?.[field];
      if (tok && ("items" in tok)) {
        item = tok.items[index];
      } else
        return;
    }
    return item;
  };
  visit.parentCollection = (cst, path) => {
    const parent = visit.itemAtPath(cst, path.slice(0, -1));
    const field = path[path.length - 1][0];
    const coll = parent?.[field];
    if (coll && ("items" in coll))
      return coll;
    throw new Error("Parent collection not found");
  };
  exports.visit = visit;
});

// node_modules/yaml/dist/parse/cst.js
var require_cst = __commonJS((exports) => {
  var prettyToken = function(token) {
    switch (token) {
      case BOM:
        return "<BOM>";
      case DOCUMENT:
        return "<DOC>";
      case FLOW_END:
        return "<FLOW_END>";
      case SCALAR:
        return "<SCALAR>";
      default:
        return JSON.stringify(token);
    }
  };
  var tokenType = function(source) {
    switch (source) {
      case BOM:
        return "byte-order-mark";
      case DOCUMENT:
        return "doc-mode";
      case FLOW_END:
        return "flow-error-end";
      case SCALAR:
        return "scalar";
      case "---":
        return "doc-start";
      case "...":
        return "doc-end";
      case "":
      case "\n":
      case "\r\n":
        return "newline";
      case "-":
        return "seq-item-ind";
      case "?":
        return "explicit-key-ind";
      case ":":
        return "map-value-ind";
      case "{":
        return "flow-map-start";
      case "}":
        return "flow-map-end";
      case "[":
        return "flow-seq-start";
      case "]":
        return "flow-seq-end";
      case ",":
        return "comma";
    }
    switch (source[0]) {
      case " ":
      case "\t":
        return "space";
      case "#":
        return "comment";
      case "%":
        return "directive-line";
      case "*":
        return "alias";
      case "&":
        return "anchor";
      case "!":
        return "tag";
      case "'":
        return "single-quoted-scalar";
      case '"':
        return "double-quoted-scalar";
      case "|":
      case ">":
        return "block-scalar-header";
    }
    return null;
  };
  var cstScalar = require_cst_scalar();
  var cstStringify = require_cst_stringify();
  var cstVisit = require_cst_visit();
  var BOM = "\uFEFF";
  var DOCUMENT = "\x02";
  var FLOW_END = "\x18";
  var SCALAR = "\x1F";
  var isCollection = (token) => !!token && ("items" in token);
  var isScalar = (token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
  exports.createScalarToken = cstScalar.createScalarToken;
  exports.resolveAsScalar = cstScalar.resolveAsScalar;
  exports.setScalarValue = cstScalar.setScalarValue;
  exports.stringify = cstStringify.stringify;
  exports.visit = cstVisit.visit;
  exports.BOM = BOM;
  exports.DOCUMENT = DOCUMENT;
  exports.FLOW_END = FLOW_END;
  exports.SCALAR = SCALAR;
  exports.isCollection = isCollection;
  exports.isScalar = isScalar;
  exports.prettyToken = prettyToken;
  exports.tokenType = tokenType;
});

// node_modules/yaml/dist/parse/lexer.js
var require_lexer = __commonJS((exports) => {
  var isEmpty = function(ch) {
    switch (ch) {
      case undefined:
      case " ":
      case "\n":
      case "\r":
      case "\t":
        return true;
      default:
        return false;
    }
  };
  var cst = require_cst();
  var hexDigits = "0123456789ABCDEFabcdef".split("");
  var tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split("");
  var invalidFlowScalarChars = ",[]{}".split("");
  var invalidAnchorChars = " ,[]{}\n\r\t".split("");
  var isNotAnchorChar = (ch) => !ch || invalidAnchorChars.includes(ch);

  class Lexer {
    constructor() {
      this.atEnd = false;
      this.blockScalarIndent = -1;
      this.blockScalarKeep = false;
      this.buffer = "";
      this.flowKey = false;
      this.flowLevel = 0;
      this.indentNext = 0;
      this.indentValue = 0;
      this.lineEndPos = null;
      this.next = null;
      this.pos = 0;
    }
    *lex(source, incomplete = false) {
      if (source) {
        this.buffer = this.buffer ? this.buffer + source : source;
        this.lineEndPos = null;
      }
      this.atEnd = !incomplete;
      let next = this.next ?? "stream";
      while (next && (incomplete || this.hasChars(1)))
        next = yield* this.parseNext(next);
    }
    atLineEnd() {
      let i = this.pos;
      let ch = this.buffer[i];
      while (ch === " " || ch === "\t")
        ch = this.buffer[++i];
      if (!ch || ch === "#" || ch === "\n")
        return true;
      if (ch === "\r")
        return this.buffer[i + 1] === "\n";
      return false;
    }
    charAt(n) {
      return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
      let ch = this.buffer[offset];
      if (this.indentNext > 0) {
        let indent = 0;
        while (ch === " ")
          ch = this.buffer[++indent + offset];
        if (ch === "\r") {
          const next = this.buffer[indent + offset + 1];
          if (next === "\n" || !next && !this.atEnd)
            return offset + indent + 1;
        }
        return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
      }
      if (ch === "-" || ch === ".") {
        const dt = this.buffer.substr(offset, 3);
        if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3]))
          return -1;
      }
      return offset;
    }
    getLine() {
      let end = this.lineEndPos;
      if (typeof end !== "number" || end !== -1 && end < this.pos) {
        end = this.buffer.indexOf("\n", this.pos);
        this.lineEndPos = end;
      }
      if (end === -1)
        return this.atEnd ? this.buffer.substring(this.pos) : null;
      if (this.buffer[end - 1] === "\r")
        end -= 1;
      return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
      return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
      this.buffer = this.buffer.substring(this.pos);
      this.pos = 0;
      this.lineEndPos = null;
      this.next = state;
      return null;
    }
    peek(n) {
      return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
      switch (next) {
        case "stream":
          return yield* this.parseStream();
        case "line-start":
          return yield* this.parseLineStart();
        case "block-start":
          return yield* this.parseBlockStart();
        case "doc":
          return yield* this.parseDocument();
        case "flow":
          return yield* this.parseFlowCollection();
        case "quoted-scalar":
          return yield* this.parseQuotedScalar();
        case "block-scalar":
          return yield* this.parseBlockScalar();
        case "plain-scalar":
          return yield* this.parsePlainScalar();
      }
    }
    *parseStream() {
      let line = this.getLine();
      if (line === null)
        return this.setNext("stream");
      if (line[0] === cst.BOM) {
        yield* this.pushCount(1);
        line = line.substring(1);
      }
      if (line[0] === "%") {
        let dirEnd = line.length;
        const cs = line.indexOf("#");
        if (cs !== -1) {
          const ch = line[cs - 1];
          if (ch === " " || ch === "\t")
            dirEnd = cs - 1;
        }
        while (true) {
          const ch = line[dirEnd - 1];
          if (ch === " " || ch === "\t")
            dirEnd -= 1;
          else
            break;
        }
        const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
        yield* this.pushCount(line.length - n);
        this.pushNewline();
        return "stream";
      }
      if (this.atLineEnd()) {
        const sp = yield* this.pushSpaces(true);
        yield* this.pushCount(line.length - sp);
        yield* this.pushNewline();
        return "stream";
      }
      yield cst.DOCUMENT;
      return yield* this.parseLineStart();
    }
    *parseLineStart() {
      const ch = this.charAt(0);
      if (!ch && !this.atEnd)
        return this.setNext("line-start");
      if (ch === "-" || ch === ".") {
        if (!this.atEnd && !this.hasChars(4))
          return this.setNext("line-start");
        const s = this.peek(3);
        if (s === "---" && isEmpty(this.charAt(3))) {
          yield* this.pushCount(3);
          this.indentValue = 0;
          this.indentNext = 0;
          return "doc";
        } else if (s === "..." && isEmpty(this.charAt(3))) {
          yield* this.pushCount(3);
          return "stream";
        }
      }
      this.indentValue = yield* this.pushSpaces(false);
      if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
        this.indentNext = this.indentValue;
      return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
      const [ch0, ch1] = this.peek(2);
      if (!ch1 && !this.atEnd)
        return this.setNext("block-start");
      if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
        const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
        this.indentNext = this.indentValue + 1;
        this.indentValue += n;
        return yield* this.parseBlockStart();
      }
      return "doc";
    }
    *parseDocument() {
      yield* this.pushSpaces(true);
      const line = this.getLine();
      if (line === null)
        return this.setNext("doc");
      let n = yield* this.pushIndicators();
      switch (line[n]) {
        case "#":
          yield* this.pushCount(line.length - n);
        case undefined:
          yield* this.pushNewline();
          return yield* this.parseLineStart();
        case "{":
        case "[":
          yield* this.pushCount(1);
          this.flowKey = false;
          this.flowLevel = 1;
          return "flow";
        case "}":
        case "]":
          yield* this.pushCount(1);
          return "doc";
        case "*":
          yield* this.pushUntil(isNotAnchorChar);
          return "doc";
        case '"':
        case "'":
          return yield* this.parseQuotedScalar();
        case "|":
        case ">":
          n += yield* this.parseBlockScalarHeader();
          n += yield* this.pushSpaces(true);
          yield* this.pushCount(line.length - n);
          yield* this.pushNewline();
          return yield* this.parseBlockScalar();
        default:
          return yield* this.parsePlainScalar();
      }
    }
    *parseFlowCollection() {
      let nl, sp;
      let indent = -1;
      do {
        nl = yield* this.pushNewline();
        if (nl > 0) {
          sp = yield* this.pushSpaces(false);
          this.indentValue = indent = sp;
        } else {
          sp = 0;
        }
        sp += yield* this.pushSpaces(true);
      } while (nl + sp > 0);
      const line = this.getLine();
      if (line === null)
        return this.setNext("flow");
      if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
        const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
        if (!atFlowEndMarker) {
          this.flowLevel = 0;
          yield cst.FLOW_END;
          return yield* this.parseLineStart();
        }
      }
      let n = 0;
      while (line[n] === ",") {
        n += yield* this.pushCount(1);
        n += yield* this.pushSpaces(true);
        this.flowKey = false;
      }
      n += yield* this.pushIndicators();
      switch (line[n]) {
        case undefined:
          return "flow";
        case "#":
          yield* this.pushCount(line.length - n);
          return "flow";
        case "{":
        case "[":
          yield* this.pushCount(1);
          this.flowKey = false;
          this.flowLevel += 1;
          return "flow";
        case "}":
        case "]":
          yield* this.pushCount(1);
          this.flowKey = true;
          this.flowLevel -= 1;
          return this.flowLevel ? "flow" : "doc";
        case "*":
          yield* this.pushUntil(isNotAnchorChar);
          return "flow";
        case '"':
        case "'":
          this.flowKey = true;
          return yield* this.parseQuotedScalar();
        case ":": {
          const next = this.charAt(1);
          if (this.flowKey || isEmpty(next) || next === ",") {
            this.flowKey = false;
            yield* this.pushCount(1);
            yield* this.pushSpaces(true);
            return "flow";
          }
        }
        default:
          this.flowKey = false;
          return yield* this.parsePlainScalar();
      }
    }
    *parseQuotedScalar() {
      const quote = this.charAt(0);
      let end = this.buffer.indexOf(quote, this.pos + 1);
      if (quote === "'") {
        while (end !== -1 && this.buffer[end + 1] === "'")
          end = this.buffer.indexOf("'", end + 2);
      } else {
        while (end !== -1) {
          let n = 0;
          while (this.buffer[end - 1 - n] === "\\")
            n += 1;
          if (n % 2 === 0)
            break;
          end = this.buffer.indexOf('"', end + 1);
        }
      }
      const qb = this.buffer.substring(0, end);
      let nl = qb.indexOf("\n", this.pos);
      if (nl !== -1) {
        while (nl !== -1) {
          const cs = this.continueScalar(nl + 1);
          if (cs === -1)
            break;
          nl = qb.indexOf("\n", cs);
        }
        if (nl !== -1) {
          end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
        }
      }
      if (end === -1) {
        if (!this.atEnd)
          return this.setNext("quoted-scalar");
        end = this.buffer.length;
      }
      yield* this.pushToIndex(end + 1, false);
      return this.flowLevel ? "flow" : "doc";
    }
    *parseBlockScalarHeader() {
      this.blockScalarIndent = -1;
      this.blockScalarKeep = false;
      let i = this.pos;
      while (true) {
        const ch = this.buffer[++i];
        if (ch === "+")
          this.blockScalarKeep = true;
        else if (ch > "0" && ch <= "9")
          this.blockScalarIndent = Number(ch) - 1;
        else if (ch !== "-")
          break;
      }
      return yield* this.pushUntil((ch) => isEmpty(ch) || ch === "#");
    }
    *parseBlockScalar() {
      let nl = this.pos - 1;
      let indent = 0;
      let ch;
      loop:
        for (let i = this.pos;ch = this.buffer[i]; ++i) {
          switch (ch) {
            case " ":
              indent += 1;
              break;
            case "\n":
              nl = i;
              indent = 0;
              break;
            case "\r": {
              const next = this.buffer[i + 1];
              if (!next && !this.atEnd)
                return this.setNext("block-scalar");
              if (next === "\n")
                break;
            }
            default:
              break loop;
          }
        }
      if (!ch && !this.atEnd)
        return this.setNext("block-scalar");
      if (indent >= this.indentNext) {
        if (this.blockScalarIndent === -1)
          this.indentNext = indent;
        else
          this.indentNext += this.blockScalarIndent;
        do {
          const cs = this.continueScalar(nl + 1);
          if (cs === -1)
            break;
          nl = this.buffer.indexOf("\n", cs);
        } while (nl !== -1);
        if (nl === -1) {
          if (!this.atEnd)
            return this.setNext("block-scalar");
          nl = this.buffer.length;
        }
      }
      if (!this.blockScalarKeep) {
        do {
          let i = nl - 1;
          let ch2 = this.buffer[i];
          if (ch2 === "\r")
            ch2 = this.buffer[--i];
          const lastChar = i;
          while (ch2 === " " || ch2 === "\t")
            ch2 = this.buffer[--i];
          if (ch2 === "\n" && i >= this.pos && i + 1 + indent > lastChar)
            nl = i;
          else
            break;
        } while (true);
      }
      yield cst.SCALAR;
      yield* this.pushToIndex(nl + 1, true);
      return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
      const inFlow = this.flowLevel > 0;
      let end = this.pos - 1;
      let i = this.pos - 1;
      let ch;
      while (ch = this.buffer[++i]) {
        if (ch === ":") {
          const next = this.buffer[i + 1];
          if (isEmpty(next) || inFlow && next === ",")
            break;
          end = i;
        } else if (isEmpty(ch)) {
          let next = this.buffer[i + 1];
          if (ch === "\r") {
            if (next === "\n") {
              i += 1;
              ch = "\n";
              next = this.buffer[i + 1];
            } else
              end = i;
          }
          if (next === "#" || inFlow && invalidFlowScalarChars.includes(next))
            break;
          if (ch === "\n") {
            const cs = this.continueScalar(i + 1);
            if (cs === -1)
              break;
            i = Math.max(i, cs - 2);
          }
        } else {
          if (inFlow && invalidFlowScalarChars.includes(ch))
            break;
          end = i;
        }
      }
      if (!ch && !this.atEnd)
        return this.setNext("plain-scalar");
      yield cst.SCALAR;
      yield* this.pushToIndex(end + 1, true);
      return inFlow ? "flow" : "doc";
    }
    *pushCount(n) {
      if (n > 0) {
        yield this.buffer.substr(this.pos, n);
        this.pos += n;
        return n;
      }
      return 0;
    }
    *pushToIndex(i, allowEmpty) {
      const s = this.buffer.slice(this.pos, i);
      if (s) {
        yield s;
        this.pos += s.length;
        return s.length;
      } else if (allowEmpty)
        yield "";
      return 0;
    }
    *pushIndicators() {
      switch (this.charAt(0)) {
        case "!":
          return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        case "&":
          return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
        case "-":
        case "?":
        case ":": {
          const inFlow = this.flowLevel > 0;
          const ch1 = this.charAt(1);
          if (isEmpty(ch1) || inFlow && invalidFlowScalarChars.includes(ch1)) {
            if (!inFlow)
              this.indentNext = this.indentValue + 1;
            else if (this.flowKey)
              this.flowKey = false;
            return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
          }
        }
      }
      return 0;
    }
    *pushTag() {
      if (this.charAt(1) === "<") {
        let i = this.pos + 2;
        let ch = this.buffer[i];
        while (!isEmpty(ch) && ch !== ">")
          ch = this.buffer[++i];
        return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
      } else {
        let i = this.pos + 1;
        let ch = this.buffer[i];
        while (ch) {
          if (tagChars.includes(ch))
            ch = this.buffer[++i];
          else if (ch === "%" && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
            ch = this.buffer[i += 3];
          } else
            break;
        }
        return yield* this.pushToIndex(i, false);
      }
    }
    *pushNewline() {
      const ch = this.buffer[this.pos];
      if (ch === "\n")
        return yield* this.pushCount(1);
      else if (ch === "\r" && this.charAt(1) === "\n")
        return yield* this.pushCount(2);
      else
        return 0;
    }
    *pushSpaces(allowTabs) {
      let i = this.pos - 1;
      let ch;
      do {
        ch = this.buffer[++i];
      } while (ch === " " || allowTabs && ch === "\t");
      const n = i - this.pos;
      if (n > 0) {
        yield this.buffer.substr(this.pos, n);
        this.pos = i;
      }
      return n;
    }
    *pushUntil(test) {
      let i = this.pos;
      let ch = this.buffer[i];
      while (!test(ch))
        ch = this.buffer[++i];
      return yield* this.pushToIndex(i, false);
    }
  }
  exports.Lexer = Lexer;
});

// node_modules/yaml/dist/parse/line-counter.js
var require_line_counter = __commonJS((exports) => {
  class LineCounter {
    constructor() {
      this.lineStarts = [];
      this.addNewLine = (offset) => this.lineStarts.push(offset);
      this.linePos = (offset) => {
        let low = 0;
        let high = this.lineStarts.length;
        while (low < high) {
          const mid = low + high >> 1;
          if (this.lineStarts[mid] < offset)
            low = mid + 1;
          else
            high = mid;
        }
        if (this.lineStarts[low] === offset)
          return { line: low + 1, col: 1 };
        if (low === 0)
          return { line: 0, col: offset };
        const start = this.lineStarts[low - 1];
        return { line: low, col: offset - start + 1 };
      };
    }
  }
  exports.LineCounter = LineCounter;
});

// node_modules/yaml/dist/parse/parser.js
var require_parser = __commonJS((exports) => {
  var includesToken = function(list, type) {
    for (let i = 0;i < list.length; ++i)
      if (list[i].type === type)
        return true;
    return false;
  };
  var findNonEmptyIndex = function(list) {
    for (let i = 0;i < list.length; ++i) {
      switch (list[i].type) {
        case "space":
        case "comment":
        case "newline":
          break;
        default:
          return i;
      }
    }
    return -1;
  };
  var isFlowToken = function(token) {
    switch (token?.type) {
      case "alias":
      case "scalar":
      case "single-quoted-scalar":
      case "double-quoted-scalar":
      case "flow-collection":
        return true;
      default:
        return false;
    }
  };
  var getPrevProps = function(parent) {
    switch (parent.type) {
      case "document":
        return parent.start;
      case "block-map": {
        const it = parent.items[parent.items.length - 1];
        return it.sep ?? it.start;
      }
      case "block-seq":
        return parent.items[parent.items.length - 1].start;
      default:
        return [];
    }
  };
  var getFirstKeyStartProps = function(prev) {
    if (prev.length === 0)
      return [];
    let i = prev.length;
    loop:
      while (--i >= 0) {
        switch (prev[i].type) {
          case "doc-start":
          case "explicit-key-ind":
          case "map-value-ind":
          case "seq-item-ind":
          case "newline":
            break loop;
        }
      }
    while (prev[++i]?.type === "space") {
    }
    return prev.splice(i, prev.length);
  };
  var fixFlowSeqItems = function(fc) {
    if (fc.start.type === "flow-seq-start") {
      for (const it of fc.items) {
        if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
          if (it.key)
            it.value = it.key;
          delete it.key;
          if (isFlowToken(it.value)) {
            if (it.value.end)
              Array.prototype.push.apply(it.value.end, it.sep);
            else
              it.value.end = it.sep;
          } else
            Array.prototype.push.apply(it.start, it.sep);
          delete it.sep;
        }
      }
    }
  };
  var cst = require_cst();
  var lexer = require_lexer();

  class Parser {
    constructor(onNewLine) {
      this.atNewLine = true;
      this.atScalar = false;
      this.indent = 0;
      this.offset = 0;
      this.onKeyLine = false;
      this.stack = [];
      this.source = "";
      this.type = "";
      this.lexer = new lexer.Lexer;
      this.onNewLine = onNewLine;
    }
    *parse(source, incomplete = false) {
      if (this.onNewLine && this.offset === 0)
        this.onNewLine(0);
      for (const lexeme of this.lexer.lex(source, incomplete))
        yield* this.next(lexeme);
      if (!incomplete)
        yield* this.end();
    }
    *next(source) {
      this.source = source;
      if (process.env.LOG_TOKENS)
        console.log("|", cst.prettyToken(source));
      if (this.atScalar) {
        this.atScalar = false;
        yield* this.step();
        this.offset += source.length;
        return;
      }
      const type = cst.tokenType(source);
      if (!type) {
        const message = `Not a YAML token: ${source}`;
        yield* this.pop({ type: "error", offset: this.offset, message, source });
        this.offset += source.length;
      } else if (type === "scalar") {
        this.atNewLine = false;
        this.atScalar = true;
        this.type = "scalar";
      } else {
        this.type = type;
        yield* this.step();
        switch (type) {
          case "newline":
            this.atNewLine = true;
            this.indent = 0;
            if (this.onNewLine)
              this.onNewLine(this.offset + source.length);
            break;
          case "space":
            if (this.atNewLine && source[0] === " ")
              this.indent += source.length;
            break;
          case "explicit-key-ind":
          case "map-value-ind":
          case "seq-item-ind":
            if (this.atNewLine)
              this.indent += source.length;
            break;
          case "doc-mode":
          case "flow-error-end":
            return;
          default:
            this.atNewLine = false;
        }
        this.offset += source.length;
      }
    }
    *end() {
      while (this.stack.length > 0)
        yield* this.pop();
    }
    get sourceToken() {
      const st = {
        type: this.type,
        offset: this.offset,
        indent: this.indent,
        source: this.source
      };
      return st;
    }
    *step() {
      const top = this.peek(1);
      if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
        while (this.stack.length > 0)
          yield* this.pop();
        this.stack.push({
          type: "doc-end",
          offset: this.offset,
          source: this.source
        });
        return;
      }
      if (!top)
        return yield* this.stream();
      switch (top.type) {
        case "document":
          return yield* this.document(top);
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
          return yield* this.scalar(top);
        case "block-scalar":
          return yield* this.blockScalar(top);
        case "block-map":
          return yield* this.blockMap(top);
        case "block-seq":
          return yield* this.blockSequence(top);
        case "flow-collection":
          return yield* this.flowCollection(top);
        case "doc-end":
          return yield* this.documentEnd(top);
      }
      yield* this.pop();
    }
    peek(n) {
      return this.stack[this.stack.length - n];
    }
    *pop(error) {
      const token = error ?? this.stack.pop();
      if (!token) {
        const message = "Tried to pop an empty stack";
        yield { type: "error", offset: this.offset, source: "", message };
      } else if (this.stack.length === 0) {
        yield token;
      } else {
        const top = this.peek(1);
        if (token.type === "block-scalar") {
          token.indent = ("indent" in top) ? top.indent : 0;
        } else if (token.type === "flow-collection" && top.type === "document") {
          token.indent = 0;
        }
        if (token.type === "flow-collection")
          fixFlowSeqItems(token);
        switch (top.type) {
          case "document":
            top.value = token;
            break;
          case "block-scalar":
            top.props.push(token);
            break;
          case "block-map": {
            const it = top.items[top.items.length - 1];
            if (it.value) {
              top.items.push({ start: [], key: token, sep: [] });
              this.onKeyLine = true;
              return;
            } else if (it.sep) {
              it.value = token;
            } else {
              Object.assign(it, { key: token, sep: [] });
              this.onKeyLine = !includesToken(it.start, "explicit-key-ind");
              return;
            }
            break;
          }
          case "block-seq": {
            const it = top.items[top.items.length - 1];
            if (it.value)
              top.items.push({ start: [], value: token });
            else
              it.value = token;
            break;
          }
          case "flow-collection": {
            const it = top.items[top.items.length - 1];
            if (!it || it.value)
              top.items.push({ start: [], key: token, sep: [] });
            else if (it.sep)
              it.value = token;
            else
              Object.assign(it, { key: token, sep: [] });
            return;
          }
          default:
            yield* this.pop();
            yield* this.pop(token);
        }
        if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
          const last = token.items[token.items.length - 1];
          if (last && !last.sep && !last.value && last.start.length > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0 || last.start.every((st) => st.type !== "comment" || st.indent < token.indent))) {
            if (top.type === "document")
              top.end = last.start;
            else
              top.items.push({ start: last.start });
            token.items.splice(-1, 1);
          }
        }
      }
    }
    *stream() {
      switch (this.type) {
        case "directive-line":
          yield { type: "directive", offset: this.offset, source: this.source };
          return;
        case "byte-order-mark":
        case "space":
        case "comment":
        case "newline":
          yield this.sourceToken;
          return;
        case "doc-mode":
        case "doc-start": {
          const doc = {
            type: "document",
            offset: this.offset,
            start: []
          };
          if (this.type === "doc-start")
            doc.start.push(this.sourceToken);
          this.stack.push(doc);
          return;
        }
      }
      yield {
        type: "error",
        offset: this.offset,
        message: `Unexpected ${this.type} token in YAML stream`,
        source: this.source
      };
    }
    *document(doc) {
      if (doc.value)
        return yield* this.lineEnd(doc);
      switch (this.type) {
        case "doc-start": {
          if (findNonEmptyIndex(doc.start) !== -1) {
            yield* this.pop();
            yield* this.step();
          } else
            doc.start.push(this.sourceToken);
          return;
        }
        case "anchor":
        case "tag":
        case "space":
        case "comment":
        case "newline":
          doc.start.push(this.sourceToken);
          return;
      }
      const bv = this.startBlockValue(doc);
      if (bv)
        this.stack.push(bv);
      else {
        yield {
          type: "error",
          offset: this.offset,
          message: `Unexpected ${this.type} token in YAML document`,
          source: this.source
        };
      }
    }
    *scalar(scalar) {
      if (this.type === "map-value-ind") {
        const prev = getPrevProps(this.peek(2));
        const start = getFirstKeyStartProps(prev);
        let sep;
        if (scalar.end) {
          sep = scalar.end;
          sep.push(this.sourceToken);
          delete scalar.end;
        } else
          sep = [this.sourceToken];
        const map = {
          type: "block-map",
          offset: scalar.offset,
          indent: scalar.indent,
          items: [{ start, key: scalar, sep }]
        };
        this.onKeyLine = true;
        this.stack[this.stack.length - 1] = map;
      } else
        yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
      switch (this.type) {
        case "space":
        case "comment":
        case "newline":
          scalar.props.push(this.sourceToken);
          return;
        case "scalar":
          scalar.source = this.source;
          this.atNewLine = true;
          this.indent = 0;
          if (this.onNewLine) {
            let nl = this.source.indexOf("\n") + 1;
            while (nl !== 0) {
              this.onNewLine(this.offset + nl);
              nl = this.source.indexOf("\n", nl) + 1;
            }
          }
          yield* this.pop();
          break;
        default:
          yield* this.pop();
          yield* this.step();
      }
    }
    *blockMap(map) {
      const it = map.items[map.items.length - 1];
      switch (this.type) {
        case "newline":
          this.onKeyLine = false;
          if (it.value) {
            const end = "end" in it.value ? it.value.end : undefined;
            const last = Array.isArray(end) ? end[end.length - 1] : undefined;
            if (last?.type === "comment")
              end?.push(this.sourceToken);
            else
              map.items.push({ start: [this.sourceToken] });
          } else if (it.sep) {
            it.sep.push(this.sourceToken);
          } else {
            it.start.push(this.sourceToken);
          }
          return;
        case "space":
        case "comment":
          if (it.value) {
            map.items.push({ start: [this.sourceToken] });
          } else if (it.sep) {
            it.sep.push(this.sourceToken);
          } else {
            if (this.atIndentedComment(it.start, map.indent)) {
              const prev = map.items[map.items.length - 2];
              const end = prev?.value?.end;
              if (Array.isArray(end)) {
                Array.prototype.push.apply(end, it.start);
                end.push(this.sourceToken);
                map.items.pop();
                return;
              }
            }
            it.start.push(this.sourceToken);
          }
          return;
      }
      if (this.indent >= map.indent) {
        const atNextItem = !this.onKeyLine && this.indent === map.indent && it.sep;
        let start = [];
        if (atNextItem && it.sep && !it.value) {
          const nl = [];
          for (let i = 0;i < it.sep.length; ++i) {
            const st = it.sep[i];
            switch (st.type) {
              case "newline":
                nl.push(i);
                break;
              case "space":
                break;
              case "comment":
                if (st.indent > map.indent)
                  nl.length = 0;
                break;
              default:
                nl.length = 0;
            }
          }
          if (nl.length >= 2)
            start = it.sep.splice(nl[1]);
        }
        switch (this.type) {
          case "anchor":
          case "tag":
            if (atNextItem || it.value) {
              start.push(this.sourceToken);
              map.items.push({ start });
              this.onKeyLine = true;
            } else if (it.sep) {
              it.sep.push(this.sourceToken);
            } else {
              it.start.push(this.sourceToken);
            }
            return;
          case "explicit-key-ind":
            if (!it.sep && !includesToken(it.start, "explicit-key-ind")) {
              it.start.push(this.sourceToken);
            } else if (atNextItem || it.value) {
              start.push(this.sourceToken);
              map.items.push({ start });
            } else {
              this.stack.push({
                type: "block-map",
                offset: this.offset,
                indent: this.indent,
                items: [{ start: [this.sourceToken] }]
              });
            }
            this.onKeyLine = true;
            return;
          case "map-value-ind":
            if (includesToken(it.start, "explicit-key-ind")) {
              if (!it.sep) {
                if (includesToken(it.start, "newline")) {
                  Object.assign(it, { key: null, sep: [this.sourceToken] });
                } else {
                  const start2 = getFirstKeyStartProps(it.start);
                  this.stack.push({
                    type: "block-map",
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: start2, key: null, sep: [this.sourceToken] }]
                  });
                }
              } else if (it.value) {
                map.items.push({ start: [], key: null, sep: [this.sourceToken] });
              } else if (includesToken(it.sep, "map-value-ind")) {
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start, key: null, sep: [this.sourceToken] }]
                });
              } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                const start2 = getFirstKeyStartProps(it.start);
                const key = it.key;
                const sep = it.sep;
                sep.push(this.sourceToken);
                delete it.key, delete it.sep;
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: start2, key, sep }]
                });
              } else if (start.length > 0) {
                it.sep = it.sep.concat(start, this.sourceToken);
              } else {
                it.sep.push(this.sourceToken);
              }
            } else {
              if (!it.sep) {
                Object.assign(it, { key: null, sep: [this.sourceToken] });
              } else if (it.value || atNextItem) {
                map.items.push({ start, key: null, sep: [this.sourceToken] });
              } else if (includesToken(it.sep, "map-value-ind")) {
                this.stack.push({
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: [], key: null, sep: [this.sourceToken] }]
                });
              } else {
                it.sep.push(this.sourceToken);
              }
            }
            this.onKeyLine = true;
            return;
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar": {
            const fs = this.flowScalar(this.type);
            if (atNextItem || it.value) {
              map.items.push({ start, key: fs, sep: [] });
              this.onKeyLine = true;
            } else if (it.sep) {
              this.stack.push(fs);
            } else {
              Object.assign(it, { key: fs, sep: [] });
              this.onKeyLine = true;
            }
            return;
          }
          default: {
            const bv = this.startBlockValue(map);
            if (bv) {
              if (atNextItem && bv.type !== "block-seq" && includesToken(it.start, "explicit-key-ind")) {
                map.items.push({ start });
              }
              this.stack.push(bv);
              return;
            }
          }
        }
      }
      yield* this.pop();
      yield* this.step();
    }
    *blockSequence(seq) {
      const it = seq.items[seq.items.length - 1];
      switch (this.type) {
        case "newline":
          if (it.value) {
            const end = "end" in it.value ? it.value.end : undefined;
            const last = Array.isArray(end) ? end[end.length - 1] : undefined;
            if (last?.type === "comment")
              end?.push(this.sourceToken);
            else
              seq.items.push({ start: [this.sourceToken] });
          } else
            it.start.push(this.sourceToken);
          return;
        case "space":
        case "comment":
          if (it.value)
            seq.items.push({ start: [this.sourceToken] });
          else {
            if (this.atIndentedComment(it.start, seq.indent)) {
              const prev = seq.items[seq.items.length - 2];
              const end = prev?.value?.end;
              if (Array.isArray(end)) {
                Array.prototype.push.apply(end, it.start);
                end.push(this.sourceToken);
                seq.items.pop();
                return;
              }
            }
            it.start.push(this.sourceToken);
          }
          return;
        case "anchor":
        case "tag":
          if (it.value || this.indent <= seq.indent)
            break;
          it.start.push(this.sourceToken);
          return;
        case "seq-item-ind":
          if (this.indent !== seq.indent)
            break;
          if (it.value || includesToken(it.start, "seq-item-ind"))
            seq.items.push({ start: [this.sourceToken] });
          else
            it.start.push(this.sourceToken);
          return;
      }
      if (this.indent > seq.indent) {
        const bv = this.startBlockValue(seq);
        if (bv) {
          this.stack.push(bv);
          return;
        }
      }
      yield* this.pop();
      yield* this.step();
    }
    *flowCollection(fc) {
      const it = fc.items[fc.items.length - 1];
      if (this.type === "flow-error-end") {
        let top;
        do {
          yield* this.pop();
          top = this.peek(1);
        } while (top && top.type === "flow-collection");
      } else if (fc.end.length === 0) {
        switch (this.type) {
          case "comma":
          case "explicit-key-ind":
            if (!it || it.sep)
              fc.items.push({ start: [this.sourceToken] });
            else
              it.start.push(this.sourceToken);
            return;
          case "map-value-ind":
            if (!it || it.value)
              fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
            else if (it.sep)
              it.sep.push(this.sourceToken);
            else
              Object.assign(it, { key: null, sep: [this.sourceToken] });
            return;
          case "space":
          case "comment":
          case "newline":
          case "anchor":
          case "tag":
            if (!it || it.value)
              fc.items.push({ start: [this.sourceToken] });
            else if (it.sep)
              it.sep.push(this.sourceToken);
            else
              it.start.push(this.sourceToken);
            return;
          case "alias":
          case "scalar":
          case "single-quoted-scalar":
          case "double-quoted-scalar": {
            const fs = this.flowScalar(this.type);
            if (!it || it.value)
              fc.items.push({ start: [], key: fs, sep: [] });
            else if (it.sep)
              this.stack.push(fs);
            else
              Object.assign(it, { key: fs, sep: [] });
            return;
          }
          case "flow-map-end":
          case "flow-seq-end":
            fc.end.push(this.sourceToken);
            return;
        }
        const bv = this.startBlockValue(fc);
        if (bv)
          this.stack.push(bv);
        else {
          yield* this.pop();
          yield* this.step();
        }
      } else {
        const parent = this.peek(2);
        if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
          yield* this.pop();
          yield* this.step();
        } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          fixFlowSeqItems(fc);
          const sep = fc.end.splice(1, fc.end.length);
          sep.push(this.sourceToken);
          const map = {
            type: "block-map",
            offset: fc.offset,
            indent: fc.indent,
            items: [{ start, key: fc, sep }]
          };
          this.onKeyLine = true;
          this.stack[this.stack.length - 1] = map;
        } else {
          yield* this.lineEnd(fc);
        }
      }
    }
    flowScalar(type) {
      if (this.onNewLine) {
        let nl = this.source.indexOf("\n") + 1;
        while (nl !== 0) {
          this.onNewLine(this.offset + nl);
          nl = this.source.indexOf("\n", nl) + 1;
        }
      }
      return {
        type,
        offset: this.offset,
        indent: this.indent,
        source: this.source
      };
    }
    startBlockValue(parent) {
      switch (this.type) {
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
          return this.flowScalar(this.type);
        case "block-scalar-header":
          return {
            type: "block-scalar",
            offset: this.offset,
            indent: this.indent,
            props: [this.sourceToken],
            source: ""
          };
        case "flow-map-start":
        case "flow-seq-start":
          return {
            type: "flow-collection",
            offset: this.offset,
            indent: this.indent,
            start: this.sourceToken,
            items: [],
            end: []
          };
        case "seq-item-ind":
          return {
            type: "block-seq",
            offset: this.offset,
            indent: this.indent,
            items: [{ start: [this.sourceToken] }]
          };
        case "explicit-key-ind": {
          this.onKeyLine = true;
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          start.push(this.sourceToken);
          return {
            type: "block-map",
            offset: this.offset,
            indent: this.indent,
            items: [{ start }]
          };
        }
        case "map-value-ind": {
          this.onKeyLine = true;
          const prev = getPrevProps(parent);
          const start = getFirstKeyStartProps(prev);
          return {
            type: "block-map",
            offset: this.offset,
            indent: this.indent,
            items: [{ start, key: null, sep: [this.sourceToken] }]
          };
        }
      }
      return null;
    }
    atIndentedComment(start, indent) {
      if (this.type !== "comment")
        return false;
      if (this.indent <= indent)
        return false;
      return start.every((st) => st.type === "newline" || st.type === "space");
    }
    *documentEnd(docEnd) {
      if (this.type !== "doc-mode") {
        if (docEnd.end)
          docEnd.end.push(this.sourceToken);
        else
          docEnd.end = [this.sourceToken];
        if (this.type === "newline")
          yield* this.pop();
      }
    }
    *lineEnd(token) {
      switch (this.type) {
        case "comma":
        case "doc-start":
        case "doc-end":
        case "flow-seq-end":
        case "flow-map-end":
        case "map-value-ind":
          yield* this.pop();
          yield* this.step();
          break;
        case "newline":
          this.onKeyLine = false;
        case "space":
        case "comment":
        default:
          if (token.end)
            token.end.push(this.sourceToken);
          else
            token.end = [this.sourceToken];
          if (this.type === "newline")
            yield* this.pop();
      }
    }
  }
  exports.Parser = Parser;
});

// node_modules/yaml/dist/public-api.js
var require_public_api = __commonJS((exports) => {
  var parseOptions = function(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter$1 = options.lineCounter || prettyErrors && new lineCounter.LineCounter || null;
    return { lineCounter: lineCounter$1, prettyErrors };
  };
  var parseAllDocuments = function(source, options = {}) {
    const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter2?.addNewLine);
    const composer$1 = new composer.Composer(options);
    const docs = Array.from(composer$1.compose(parser$1.parse(source)));
    if (prettyErrors && lineCounter2)
      for (const doc of docs) {
        doc.errors.forEach(errors.prettifyError(source, lineCounter2));
        doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
      }
    if (docs.length > 0)
      return docs;
    return Object.assign([], { empty: true }, composer$1.streamInfo());
  };
  var parseDocument = function(source, options = {}) {
    const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
    const parser$1 = new parser.Parser(lineCounter2?.addNewLine);
    const composer$1 = new composer.Composer(options);
    let doc = null;
    for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
      if (!doc)
        doc = _doc;
      else if (doc.options.logLevel !== "silent") {
        doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
        break;
      }
    }
    if (prettyErrors && lineCounter2) {
      doc.errors.forEach(errors.prettifyError(source, lineCounter2));
      doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
    }
    return doc;
  };
  var parse = function(src, reviver, options) {
    let _reviver = undefined;
    if (typeof reviver === "function") {
      _reviver = reviver;
    } else if (options === undefined && reviver && typeof reviver === "object") {
      options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc)
      return null;
    doc.warnings.forEach((warning) => log.warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
      if (doc.options.logLevel !== "silent")
        throw doc.errors[0];
      else
        doc.errors = [];
    }
    return doc.toJS(Object.assign({ reviver: _reviver }, options));
  };
  var stringify = function(value, replacer, options) {
    let _replacer = null;
    if (typeof replacer === "function" || Array.isArray(replacer)) {
      _replacer = replacer;
    } else if (options === undefined && replacer) {
      options = replacer;
    }
    if (typeof options === "string")
      options = options.length;
    if (typeof options === "number") {
      const indent = Math.round(options);
      options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };
    }
    if (value === undefined) {
      const { keepUndefined } = options ?? replacer ?? {};
      if (!keepUndefined)
        return;
    }
    return new Document.Document(value, _replacer, options).toString(options);
  };
  var composer = require_composer();
  var Document = require_Document();
  var errors = require_errors();
  var log = require_log();
  var lineCounter = require_line_counter();
  var parser = require_parser();
  exports.parse = parse;
  exports.parseAllDocuments = parseAllDocuments;
  exports.parseDocument = parseDocument;
  exports.stringify = stringify;
});

// node_modules/yaml/dist/index.js
var require_dist2 = __commonJS((exports) => {
  var composer = require_composer();
  var Document = require_Document();
  var Schema = require_Schema();
  var errors = require_errors();
  var Alias = require_Alias();
  var identity = require_identity();
  var Pair = require_Pair();
  var Scalar = require_Scalar();
  var YAMLMap = require_YAMLMap();
  var YAMLSeq = require_YAMLSeq();
  var cst = require_cst();
  var lexer = require_lexer();
  var lineCounter = require_line_counter();
  var parser = require_parser();
  var publicApi = require_public_api();
  var visit = require_visit();
  exports.Composer = composer.Composer;
  exports.Document = Document.Document;
  exports.Schema = Schema.Schema;
  exports.YAMLError = errors.YAMLError;
  exports.YAMLParseError = errors.YAMLParseError;
  exports.YAMLWarning = errors.YAMLWarning;
  exports.Alias = Alias.Alias;
  exports.isAlias = identity.isAlias;
  exports.isCollection = identity.isCollection;
  exports.isDocument = identity.isDocument;
  exports.isMap = identity.isMap;
  exports.isNode = identity.isNode;
  exports.isPair = identity.isPair;
  exports.isScalar = identity.isScalar;
  exports.isSeq = identity.isSeq;
  exports.Pair = Pair.Pair;
  exports.Scalar = Scalar.Scalar;
  exports.YAMLMap = YAMLMap.YAMLMap;
  exports.YAMLSeq = YAMLSeq.YAMLSeq;
  exports.CST = cst;
  exports.Lexer = lexer.Lexer;
  exports.LineCounter = lineCounter.LineCounter;
  exports.Parser = parser.Parser;
  exports.parse = publicApi.parse;
  exports.parseAllDocuments = publicApi.parseAllDocuments;
  exports.parseDocument = publicApi.parseDocument;
  exports.stringify = publicApi.stringify;
  exports.visit = visit.visit;
  exports.visitAsync = visit.visitAsync;
});

// node_modules/loading-cli/lib/utilities.js
var require_utilities = __commonJS((exports, module) => {
  var extend = function(des, src, override) {
    if (src instanceof Array) {
      for (var i = 0, len = src.length;i < len; i++)
        extend(des, src[i], override);
    }
    for (var i in src) {
      if (override || !(i in des)) {
        des[i] = src[i];
      }
    }
    return des;
  };
  module.exports = {
    extend
  };
});

// node_modules/loading-cli/lib/cursor.js
var require_cursor = __commonJS((exports) => {
  var hidden = false;
  exports.show = function(stream) {
    const s = stream || process.stderr;
    if (!s.isTTY) {
      return;
    }
    hidden = false;
    s.write("\x1B[?25h");
  };
  exports.hide = function(stream) {
    var s = stream || process.stderr;
    if (!s.isTTY) {
      return;
    }
    hidden = true;
    s.write("\x1B[?25l");
  };
  exports.toggle = function(force) {
    if (force !== undefined) {
      hidden = force;
    }
    if (hidden) {
      exports.show();
    } else {
      exports.hide();
    }
  };
});

// node_modules/colors-cli/lib/styles-name.js
var require_styles_name = __commonJS((exports, module) => {
  module.exports = {
    colors: [
      "black",
      "red",
      "green",
      "yellow",
      "blue",
      "magenta",
      "cyan",
      "white"
    ],
    styles: [
      "bold",
      "faint",
      "italic",
      "underline",
      "blink",
      "overline",
      "inverse",
      "conceal",
      "strike"
    ]
  };
});

// node_modules/colors-cli/lib/supports-colors.js
var require_supports_colors = __commonJS((exports, module) => {
  var argv = process.argv;
  module.exports = function() {
    if (argv.indexOf("--no-color") !== -1 || argv.indexOf("--color=false") !== -1) {
      return false;
    }
    if (argv.indexOf("--color") !== -1 || argv.indexOf("--color=true") !== -1 || argv.indexOf("--color=always") !== -1) {
      return true;
    }
    if (process.stdout && !process.stdout.isTTY) {
      return false;
    }
    if (process.platform === "win32") {
      return true;
    }
    if ("COLORTERM" in process.env) {
      return true;
    }
    if (process.env.TERM === "dumb") {
      return false;
    }
    if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
      return true;
    }
    return false;
  }();
});

// node_modules/colors-cli/lib/color.js
var require_color = __commonJS((exports) => {
  var Colors = function(str) {
    this.string = str;
    this.styles = [];
    this.fgcolor = null;
    this.bgcolor = null;
    this.fgcolor_bt = null;
    this.bgcolor_bt = null;
    this.fgcolor_x = null;
    this.bgcolor_x = null;
  };
  var _styles = require_styles_name();
  var isSupported = require_supports_colors();
  var colors = _styles.colors;
  var styles = _styles.styles;
  exports.color = {};
  for (i = 0;i < colors.length; i++) {
    (function(i2) {
      var name = colors[i2];
      Object.defineProperty(Colors.prototype, name, {
        get: function() {
          this.fgcolor = i2;
          return this;
        }
      });
      Object.defineProperty(Colors.prototype, name + "_b", {
        get: function() {
          this.bgcolor = i2;
          return this;
        }
      });
      Object.defineProperty(Colors.prototype, name + "_bt", {
        get: function() {
          this.fgcolor_bt = i2;
          return this;
        }
      });
      Object.defineProperty(Colors.prototype, name + "_bbt", {
        get: function() {
          this.bgcolor_bt = i2;
          return this;
        }
      });
      exports.color[name] = exports[name] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[" + (30 + i2) + "m" + text + "\x1B[0m";
      };
      exports.color[name + "_b"] = exports[name + "_b"] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[" + (40 + i2) + "m" + text + "\x1B[0m";
      };
      exports.color[name + "_bt"] = exports[name + "_bt"] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[" + (90 + i2) + "m" + text + "\x1B[0m";
      };
      exports.color[name + "_bbt"] = exports[name + "_bbt"] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[" + (100 + i2) + "m" + text + "\x1B[0m";
      };
    })(i);
  }
  var i;
  for (i = 0;i < 256; i++) {
    (function(i2) {
      Object.defineProperty(Colors.prototype, "x" + i2, {
        get: function() {
          this.fgcolor_x = i2;
          return this;
        }
      });
      Object.defineProperty(Colors.prototype, "xb" + i2, {
        get: function() {
          this.bgcolor_x = i2;
          return this;
        }
      });
      exports.color["x" + i2] = exports["x" + i2] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[38;5;" + i2 + "m" + text + "\x1B[0m";
      };
      exports.color["xb" + i2] = exports["xb" + i2] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[48;5;" + i2 + "m" + text + "\x1B[0m";
      };
    })(i);
  }
  var i;
  for (i = 0;i < styles.length; i++) {
    (function(i2) {
      var name = styles[i2];
      Object.defineProperty(Colors.prototype, name, {
        get: function() {
          if (this.styles.indexOf(i2) === -1) {
            this.styles = this.styles.concat(i2 + 1);
          }
          return this;
        }
      });
      exports.color[name] = exports[name] = function(text) {
        if (!isSupported)
          return text;
        return "\x1B[" + (i2 + 1) + "m" + text + "\x1B[0m";
      };
    })(i);
  }
  var i;
  Colors.prototype.colored = function(text) {
    var reset = "\x1B[0m";
    var is256 = isSupported;
    if (this.fgcolor_x && this.fgcolor_x !== null && is256) {
      text = "\x1B[38;5;" + this.fgcolor_x + "m" + text + reset;
    }
    if (this.bgcolor_x && this.bgcolor_x !== null && is256) {
      text = "\x1B[48;5;" + this.bgcolor_x + "m" + text + reset;
    }
    if (this.fgcolor !== null && this.fgcolor < 8) {
      text = "\x1B[" + (30 + this.fgcolor) + "m" + text + reset;
    }
    if (this.fgcolor_bt !== null && this.fgcolor_bt < 8) {
      text = "\x1B[" + (90 + this.fgcolor_bt) + "m" + text + reset;
    }
    if (this.bgcolor !== null && this.bgcolor < 8) {
      text = "\x1B[" + (40 + this.bgcolor) + "m" + text + reset;
    }
    if (this.bgcolor_bt !== null && this.bgcolor_bt < 8) {
      text = "\x1B[" + (100 + this.bgcolor_bt) + "m" + text + reset;
    }
    if (this.styles && this.styles.length) {
      text = "\x1B[" + this.styles.join(";") + "m" + text + reset;
    }
    return text;
  };
  Colors.prototype.valueOf = function(type) {
    var text = this.string;
    text = this.colored(text);
    return text;
  };
  exports.Colors = Colors;
});

// node_modules/colors-cli/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var color = require_color();
  exports = module.exports = color;
});

// node_modules/loading-cli/lib/index.js
var require_lib2 = __commonJS((exports, module) => {
  var loading = function(options) {
    if (!(this instanceof loading)) {
      return new loading(options);
    }
    if (typeof options === "string") {
      options = {
        text: options
      };
    }
    this.options = ut.extend(options, {
      text: "",
      color: "cyan",
      stream: process.stderr,
      frames: ["\u25DC", "\u25E0", "\u25DD", "\u25DE", "\u25E1", "\u25DF"]
    });
    this.text = this.options.text;
    this.color = this.options.color;
    this.interval = this.options.interval || 60;
    this.stream = this.options.stream;
    this.frames = this.options.frames;
    this.id = null;
    this.enabled = this.options.enabled || this.stream && this.stream.isTTY && !process.env.CI;
    this.frameIndex = 0;
  };
  var ut = require_utilities();
  var cursor = require_cursor();
  var color = require_lib();
  loading.prototype.frame = function(frame) {
    if (frame)
      this.options.frames = frame;
    var frames = this.options.frames;
    var frame = frames[this.frameIndex];
    if (this.color) {
      frame = color[this.color](frame);
    }
    this.frameIndex = ++this.frameIndex % frames.length;
    return frame + " " + this.text;
  };
  loading.prototype.clear = function() {
    if (!this.enabled) {
      return this;
    }
    this.stream.clearLine();
    this.stream.cursorTo(0);
    return this;
  };
  loading.prototype.render = function() {
    this.clear();
    this.stream.write(this.frame());
    return this;
  };
  loading.prototype.start = function(text) {
    if (text)
      this.text = text;
    if (!this.enabled || this.id)
      return this;
    this.clear();
    cursor.hide(this.stream);
    this.id = setInterval(this.render.bind(this), this.interval);
    return this;
  };
  loading.prototype.stop = function() {
    if (!this.enabled)
      return this;
    clearInterval(this.id);
    this.id = null;
    this.clear();
    cursor.show(this.stream);
    return this;
  };
  loading.prototype.succeed = function(text) {
    return this.stopAndPersist(color.green("\u2714"), text);
  };
  loading.prototype.fail = function(text) {
    return this.stopAndPersist(color.red("\u2716"), text);
  };
  loading.prototype.warn = function(text) {
    return this.stopAndPersist(color.yellow("\u26A0"), text);
  };
  loading.prototype.info = function(text) {
    return this.stopAndPersist(color.blue("\u2139"), text);
  };
  loading.prototype.stopAndPersist = function(symbol, text) {
    text = text || this.text;
    this.stop();
    this.stream.write((symbol ? symbol + " " : " ") + text + "\n");
    return this;
  };
  module.exports = loading;
});

// load.ts
var exports_load = {};
__export(exports_load, {
  stopLoad: () => {
    {
      return stopLoad;
    }
  },
  startLoad: () => {
    {
      return startLoad;
    }
  }
});
var import_loading_cli, load, startLoad, stopLoad;
var init_load = __esm(() => {
  import_loading_cli = __toESM(require_lib2(), 1);
  load = null;
  startLoad = (prompt = "Loading...") => {
    load = import_loading_cli.default({
      text: prompt
    }).start();
  };
  stopLoad = (prompt = "Done!") => {
    if (load) {
      load.stop();
    }
    console.log(prompt);
  };
});

// node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS((exports, module) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };
  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/core-js-pure/internals/global.js
var require_global = __commonJS((exports, module) => {
  var check = function(it) {
    return it && it.Math === Math && it;
  };
  module.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global == "object" && global) || function() {
    return this;
  }() || exports || Function("return this")();
});

// node_modules/core-js-pure/internals/fails.js
var require_fails = __commonJS((exports, module) => {
  module.exports = function(exec) {
    try {
      return !!exec();
    } catch (error) {
      return true;
    }
  };
});

// node_modules/core-js-pure/internals/function-bind-native.js
var require_function_bind_native = __commonJS((exports, module) => {
  var fails = require_fails();
  module.exports = !fails(function() {
    var test = function() {
    }.bind();
    return typeof test != "function" || test.hasOwnProperty("prototype");
  });
});

// node_modules/core-js-pure/internals/function-apply.js
var require_function_apply = __commonJS((exports, module) => {
  var NATIVE_BIND = require_function_bind_native();
  var FunctionPrototype = Function.prototype;
  var apply = FunctionPrototype.apply;
  var call = FunctionPrototype.call;
  module.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
    return call.apply(apply, arguments);
  });
});

// node_modules/core-js-pure/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS((exports, module) => {
  var NATIVE_BIND = require_function_bind_native();
  var FunctionPrototype = Function.prototype;
  var call = FunctionPrototype.call;
  var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
  module.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
    return function() {
      return call.apply(fn, arguments);
    };
  };
});

// node_modules/core-js-pure/internals/classof-raw.js
var require_classof_raw = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var toString = uncurryThis({}.toString);
  var stringSlice = uncurryThis("".slice);
  module.exports = function(it) {
    return stringSlice(toString(it), 8, -1);
  };
});

// node_modules/core-js-pure/internals/function-uncurry-this-clause.js
var require_function_uncurry_this_clause = __commonJS((exports, module) => {
  var classofRaw = require_classof_raw();
  var uncurryThis = require_function_uncurry_this();
  module.exports = function(fn) {
    if (classofRaw(fn) === "Function")
      return uncurryThis(fn);
  };
});

// node_modules/core-js-pure/internals/document-all.js
var require_document_all = __commonJS((exports, module) => {
  var documentAll = typeof document == "object" && document.all;
  var IS_HTMLDDA = typeof documentAll == "undefined" && documentAll !== undefined;
  module.exports = {
    all: documentAll,
    IS_HTMLDDA
  };
});

// node_modules/core-js-pure/internals/is-callable.js
var require_is_callable = __commonJS((exports, module) => {
  var $documentAll = require_document_all();
  var documentAll = $documentAll.all;
  module.exports = $documentAll.IS_HTMLDDA ? function(argument) {
    return typeof argument == "function" || argument === documentAll;
  } : function(argument) {
    return typeof argument == "function";
  };
});

// node_modules/core-js-pure/internals/descriptors.js
var require_descriptors = __commonJS((exports, module) => {
  var fails = require_fails();
  module.exports = !fails(function() {
    return Object.defineProperty({}, 1, { get: function() {
      return 7;
    } })[1] !== 7;
  });
});

// node_modules/core-js-pure/internals/function-call.js
var require_function_call = __commonJS((exports, module) => {
  var NATIVE_BIND = require_function_bind_native();
  var call = Function.prototype.call;
  module.exports = NATIVE_BIND ? call.bind(call) : function() {
    return call.apply(call, arguments);
  };
});

// node_modules/core-js-pure/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS((exports) => {
  var $propertyIsEnumerable = {}.propertyIsEnumerable;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
  exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
    var descriptor = getOwnPropertyDescriptor(this, V);
    return !!descriptor && descriptor.enumerable;
  } : $propertyIsEnumerable;
});

// node_modules/core-js-pure/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS((exports, module) => {
  module.exports = function(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value
    };
  };
});

// node_modules/core-js-pure/internals/indexed-object.js
var require_indexed_object = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var fails = require_fails();
  var classof = require_classof_raw();
  var $Object = Object;
  var split = uncurryThis("".split);
  module.exports = fails(function() {
    return !$Object("z").propertyIsEnumerable(0);
  }) ? function(it) {
    return classof(it) === "String" ? split(it, "") : $Object(it);
  } : $Object;
});

// node_modules/core-js-pure/internals/is-null-or-undefined.js
var require_is_null_or_undefined = __commonJS((exports, module) => {
  module.exports = function(it) {
    return it === null || it === undefined;
  };
});

// node_modules/core-js-pure/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS((exports, module) => {
  var isNullOrUndefined = require_is_null_or_undefined();
  var $TypeError = TypeError;
  module.exports = function(it) {
    if (isNullOrUndefined(it))
      throw $TypeError("Can't call method on " + it);
    return it;
  };
});

// node_modules/core-js-pure/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS((exports, module) => {
  var IndexedObject = require_indexed_object();
  var requireObjectCoercible = require_require_object_coercible();
  module.exports = function(it) {
    return IndexedObject(requireObjectCoercible(it));
  };
});

// node_modules/core-js-pure/internals/is-object.js
var require_is_object = __commonJS((exports, module) => {
  var isCallable = require_is_callable();
  var $documentAll = require_document_all();
  var documentAll = $documentAll.all;
  module.exports = $documentAll.IS_HTMLDDA ? function(it) {
    return typeof it == "object" ? it !== null : isCallable(it) || it === documentAll;
  } : function(it) {
    return typeof it == "object" ? it !== null : isCallable(it);
  };
});

// node_modules/core-js-pure/internals/path.js
var require_path = __commonJS((exports, module) => {
  module.exports = {};
});

// node_modules/core-js-pure/internals/get-built-in.js
var require_get_built_in = __commonJS((exports, module) => {
  var path = require_path();
  var global2 = require_global();
  var isCallable = require_is_callable();
  var aFunction = function(variable) {
    return isCallable(variable) ? variable : undefined;
  };
  module.exports = function(namespace, method) {
    return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
  };
});

// node_modules/core-js-pure/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  module.exports = uncurryThis({}.isPrototypeOf);
});

// node_modules/core-js-pure/internals/engine-user-agent.js
var require_engine_user_agent = __commonJS((exports, module) => {
  module.exports = typeof navigator != "undefined" && String(navigator.userAgent) || "";
});

// node_modules/core-js-pure/internals/engine-v8-version.js
var require_engine_v8_version = __commonJS((exports, module) => {
  var global2 = require_global();
  var userAgent = require_engine_user_agent();
  var process2 = global2.process;
  var Deno = global2.Deno;
  var versions = process2 && process2.versions || Deno && Deno.version;
  var v8 = versions && versions.v8;
  var match;
  var version;
  if (v8) {
    match = v8.split(".");
    version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
  }
  if (!version && userAgent) {
    match = userAgent.match(/Edge\/(\d+)/);
    if (!match || match[1] >= 74) {
      match = userAgent.match(/Chrome\/(\d+)/);
      if (match)
        version = +match[1];
    }
  }
  module.exports = version;
});

// node_modules/core-js-pure/internals/symbol-constructor-detection.js
var require_symbol_constructor_detection = __commonJS((exports, module) => {
  var V8_VERSION = require_engine_v8_version();
  var fails = require_fails();
  var global2 = require_global();
  var $String = global2.String;
  module.exports = !!Object.getOwnPropertySymbols && !fails(function() {
    var symbol = Symbol("symbol detection");
    return !$String(symbol) || !(Object(symbol) instanceof Symbol) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
  });
});

// node_modules/core-js-pure/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS((exports, module) => {
  var NATIVE_SYMBOL = require_symbol_constructor_detection();
  module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
});

// node_modules/core-js-pure/internals/is-symbol.js
var require_is_symbol = __commonJS((exports, module) => {
  var getBuiltIn = require_get_built_in();
  var isCallable = require_is_callable();
  var isPrototypeOf = require_object_is_prototype_of();
  var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
  var $Object = Object;
  module.exports = USE_SYMBOL_AS_UID ? function(it) {
    return typeof it == "symbol";
  } : function(it) {
    var $Symbol = getBuiltIn("Symbol");
    return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
  };
});

// node_modules/core-js-pure/internals/try-to-string.js
var require_try_to_string = __commonJS((exports, module) => {
  var $String = String;
  module.exports = function(argument) {
    try {
      return $String(argument);
    } catch (error) {
      return "Object";
    }
  };
});

// node_modules/core-js-pure/internals/a-callable.js
var require_a_callable = __commonJS((exports, module) => {
  var isCallable = require_is_callable();
  var tryToString = require_try_to_string();
  var $TypeError = TypeError;
  module.exports = function(argument) {
    if (isCallable(argument))
      return argument;
    throw $TypeError(tryToString(argument) + " is not a function");
  };
});

// node_modules/core-js-pure/internals/get-method.js
var require_get_method = __commonJS((exports, module) => {
  var aCallable = require_a_callable();
  var isNullOrUndefined = require_is_null_or_undefined();
  module.exports = function(V, P) {
    var func = V[P];
    return isNullOrUndefined(func) ? undefined : aCallable(func);
  };
});

// node_modules/core-js-pure/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS((exports, module) => {
  var call = require_function_call();
  var isCallable = require_is_callable();
  var isObject = require_is_object();
  var $TypeError = TypeError;
  module.exports = function(input, pref) {
    var fn, val;
    if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
      return val;
    if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
      return val;
    if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
      return val;
    throw $TypeError("Can't convert object to primitive value");
  };
});

// node_modules/core-js-pure/internals/is-pure.js
var require_is_pure = __commonJS((exports, module) => {
  module.exports = true;
});

// node_modules/core-js-pure/internals/define-global-property.js
var require_define_global_property = __commonJS((exports, module) => {
  var global2 = require_global();
  var defineProperty = Object.defineProperty;
  module.exports = function(key, value) {
    try {
      defineProperty(global2, key, { value, configurable: true, writable: true });
    } catch (error) {
      global2[key] = value;
    }
    return value;
  };
});

// node_modules/core-js-pure/internals/shared-store.js
var require_shared_store = __commonJS((exports, module) => {
  var global2 = require_global();
  var defineGlobalProperty = require_define_global_property();
  var SHARED = "__core-js_shared__";
  var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
  module.exports = store;
});

// node_modules/core-js-pure/internals/shared.js
var require_shared = __commonJS((exports, module) => {
  var IS_PURE = require_is_pure();
  var store = require_shared_store();
  (module.exports = function(key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
  })("versions", []).push({
    version: "3.32.2",
    mode: IS_PURE ? "pure" : "global",
    copyright: "\xA9 2014-2023 Denis Pushkarev (zloirock.ru)",
    license: "https://github.com/zloirock/core-js/blob/v3.32.2/LICENSE",
    source: "https://github.com/zloirock/core-js"
  });
});

// node_modules/core-js-pure/internals/to-object.js
var require_to_object = __commonJS((exports, module) => {
  var requireObjectCoercible = require_require_object_coercible();
  var $Object = Object;
  module.exports = function(argument) {
    return $Object(requireObjectCoercible(argument));
  };
});

// node_modules/core-js-pure/internals/has-own-property.js
var require_has_own_property = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var toObject = require_to_object();
  var hasOwnProperty = uncurryThis({}.hasOwnProperty);
  module.exports = Object.hasOwn || function hasOwn(it, key) {
    return hasOwnProperty(toObject(it), key);
  };
});

// node_modules/core-js-pure/internals/uid.js
var require_uid = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var id = 0;
  var postfix = Math.random();
  var toString = uncurryThis(1 .toString);
  module.exports = function(key) {
    return "Symbol(" + (key === undefined ? "" : key) + ")_" + toString(++id + postfix, 36);
  };
});

// node_modules/core-js-pure/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS((exports, module) => {
  var global2 = require_global();
  var shared = require_shared();
  var hasOwn = require_has_own_property();
  var uid = require_uid();
  var NATIVE_SYMBOL = require_symbol_constructor_detection();
  var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
  var Symbol2 = global2.Symbol;
  var WellKnownSymbolsStore = shared("wks");
  var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
  module.exports = function(name) {
    if (!hasOwn(WellKnownSymbolsStore, name)) {
      WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
    }
    return WellKnownSymbolsStore[name];
  };
});

// node_modules/core-js-pure/internals/to-primitive.js
var require_to_primitive = __commonJS((exports, module) => {
  var call = require_function_call();
  var isObject = require_is_object();
  var isSymbol = require_is_symbol();
  var getMethod = require_get_method();
  var ordinaryToPrimitive = require_ordinary_to_primitive();
  var wellKnownSymbol = require_well_known_symbol();
  var $TypeError = TypeError;
  var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
  module.exports = function(input, pref) {
    if (!isObject(input) || isSymbol(input))
      return input;
    var exoticToPrim = getMethod(input, TO_PRIMITIVE);
    var result;
    if (exoticToPrim) {
      if (pref === undefined)
        pref = "default";
      result = call(exoticToPrim, input, pref);
      if (!isObject(result) || isSymbol(result))
        return result;
      throw $TypeError("Can't convert object to primitive value");
    }
    if (pref === undefined)
      pref = "number";
    return ordinaryToPrimitive(input, pref);
  };
});

// node_modules/core-js-pure/internals/to-property-key.js
var require_to_property_key = __commonJS((exports, module) => {
  var toPrimitive = require_to_primitive();
  var isSymbol = require_is_symbol();
  module.exports = function(argument) {
    var key = toPrimitive(argument, "string");
    return isSymbol(key) ? key : key + "";
  };
});

// node_modules/core-js-pure/internals/document-create-element.js
var require_document_create_element = __commonJS((exports, module) => {
  var global2 = require_global();
  var isObject = require_is_object();
  var document2 = global2.document;
  var EXISTS = isObject(document2) && isObject(document2.createElement);
  module.exports = function(it) {
    return EXISTS ? document2.createElement(it) : {};
  };
});

// node_modules/core-js-pure/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS((exports, module) => {
  var DESCRIPTORS = require_descriptors();
  var fails = require_fails();
  var createElement = require_document_create_element();
  module.exports = !DESCRIPTORS && !fails(function() {
    return Object.defineProperty(createElement("div"), "a", {
      get: function() {
        return 7;
      }
    }).a !== 7;
  });
});

// node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS((exports) => {
  var DESCRIPTORS = require_descriptors();
  var call = require_function_call();
  var propertyIsEnumerableModule = require_object_property_is_enumerable();
  var createPropertyDescriptor = require_create_property_descriptor();
  var toIndexedObject = require_to_indexed_object();
  var toPropertyKey = require_to_property_key();
  var hasOwn = require_has_own_property();
  var IE8_DOM_DEFINE = require_ie8_dom_define();
  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
    O = toIndexedObject(O);
    P = toPropertyKey(P);
    if (IE8_DOM_DEFINE)
      try {
        return $getOwnPropertyDescriptor(O, P);
      } catch (error) {
      }
    if (hasOwn(O, P))
      return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
  };
});

// node_modules/core-js-pure/internals/is-forced.js
var require_is_forced = __commonJS((exports, module) => {
  var fails = require_fails();
  var isCallable = require_is_callable();
  var replacement = /#|\.prototype\./;
  var isForced = function(feature, detection) {
    var value = data[normalize(feature)];
    return value === POLYFILL ? true : value === NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
  };
  var normalize = isForced.normalize = function(string) {
    return String(string).replace(replacement, ".").toLowerCase();
  };
  var data = isForced.data = {};
  var NATIVE = isForced.NATIVE = "N";
  var POLYFILL = isForced.POLYFILL = "P";
  module.exports = isForced;
});

// node_modules/core-js-pure/internals/function-bind-context.js
var require_function_bind_context = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this_clause();
  var aCallable = require_a_callable();
  var NATIVE_BIND = require_function_bind_native();
  var bind = uncurryThis(uncurryThis.bind);
  module.exports = function(fn, that) {
    aCallable(fn);
    return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function() {
      return fn.apply(that, arguments);
    };
  };
});

// node_modules/core-js-pure/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS((exports, module) => {
  var DESCRIPTORS = require_descriptors();
  var fails = require_fails();
  module.exports = DESCRIPTORS && fails(function() {
    return Object.defineProperty(function() {
    }, "prototype", {
      value: 42,
      writable: false
    }).prototype !== 42;
  });
});

// node_modules/core-js-pure/internals/an-object.js
var require_an_object = __commonJS((exports, module) => {
  var isObject = require_is_object();
  var $String = String;
  var $TypeError = TypeError;
  module.exports = function(argument) {
    if (isObject(argument))
      return argument;
    throw $TypeError($String(argument) + " is not an object");
  };
});

// node_modules/core-js-pure/internals/object-define-property.js
var require_object_define_property = __commonJS((exports) => {
  var DESCRIPTORS = require_descriptors();
  var IE8_DOM_DEFINE = require_ie8_dom_define();
  var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
  var anObject = require_an_object();
  var toPropertyKey = require_to_property_key();
  var $TypeError = TypeError;
  var $defineProperty = Object.defineProperty;
  var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var ENUMERABLE = "enumerable";
  var CONFIGURABLE = "configurable";
  var WRITABLE = "writable";
  exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (typeof O === "function" && P === "prototype" && ("value" in Attributes) && (WRITABLE in Attributes) && !Attributes[WRITABLE]) {
      var current = $getOwnPropertyDescriptor(O, P);
      if (current && current[WRITABLE]) {
        O[P] = Attributes.value;
        Attributes = {
          configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
          enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
          writable: false
        };
      }
    }
    return $defineProperty(O, P, Attributes);
  } : $defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPropertyKey(P);
    anObject(Attributes);
    if (IE8_DOM_DEFINE)
      try {
        return $defineProperty(O, P, Attributes);
      } catch (error) {
      }
    if (("get" in Attributes) || ("set" in Attributes))
      throw $TypeError("Accessors not supported");
    if ("value" in Attributes)
      O[P] = Attributes.value;
    return O;
  };
});

// node_modules/core-js-pure/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS((exports, module) => {
  var DESCRIPTORS = require_descriptors();
  var definePropertyModule = require_object_define_property();
  var createPropertyDescriptor = require_create_property_descriptor();
  module.exports = DESCRIPTORS ? function(object, key, value) {
    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
  } : function(object, key, value) {
    object[key] = value;
    return object;
  };
});

// node_modules/core-js-pure/internals/export.js
var require_export = __commonJS((exports, module) => {
  var global2 = require_global();
  var apply = require_function_apply();
  var uncurryThis = require_function_uncurry_this_clause();
  var isCallable = require_is_callable();
  var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
  var isForced = require_is_forced();
  var path = require_path();
  var bind = require_function_bind_context();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var hasOwn = require_has_own_property();
  var wrapConstructor = function(NativeConstructor) {
    var Wrapper = function(a, b, c) {
      if (this instanceof Wrapper) {
        switch (arguments.length) {
          case 0:
            return new NativeConstructor;
          case 1:
            return new NativeConstructor(a);
          case 2:
            return new NativeConstructor(a, b);
        }
        return new NativeConstructor(a, b, c);
      }
      return apply(NativeConstructor, this, arguments);
    };
    Wrapper.prototype = NativeConstructor.prototype;
    return Wrapper;
  };
  module.exports = function(options, source) {
    var TARGET = options.target;
    var GLOBAL = options.global;
    var STATIC = options.stat;
    var PROTO = options.proto;
    var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
    var target = GLOBAL ? path : path[TARGET] || createNonEnumerableProperty(path, TARGET, {})[TARGET];
    var targetPrototype = target.prototype;
    var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
    var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
    for (key in source) {
      FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
      USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
      targetProperty = target[key];
      if (USE_NATIVE)
        if (options.dontCallGetSet) {
          descriptor = getOwnPropertyDescriptor(nativeSource, key);
          nativeProperty = descriptor && descriptor.value;
        } else
          nativeProperty = nativeSource[key];
      sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
      if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
        continue;
      if (options.bind && USE_NATIVE)
        resultProperty = bind(sourceProperty, global2);
      else if (options.wrap && USE_NATIVE)
        resultProperty = wrapConstructor(sourceProperty);
      else if (PROTO && isCallable(sourceProperty))
        resultProperty = uncurryThis(sourceProperty);
      else
        resultProperty = sourceProperty;
      if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
        createNonEnumerableProperty(resultProperty, "sham", true);
      }
      createNonEnumerableProperty(target, key, resultProperty);
      if (PROTO) {
        VIRTUAL_PROTOTYPE = TARGET + "Prototype";
        if (!hasOwn(path, VIRTUAL_PROTOTYPE)) {
          createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
        }
        createNonEnumerableProperty(path[VIRTUAL_PROTOTYPE], key, sourceProperty);
        if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) {
          createNonEnumerableProperty(targetPrototype, key, sourceProperty);
        }
      }
    }
  };
});

// node_modules/core-js-pure/internals/is-array.js
var require_is_array = __commonJS((exports, module) => {
  var classof = require_classof_raw();
  module.exports = Array.isArray || function isArray(argument) {
    return classof(argument) === "Array";
  };
});

// node_modules/core-js-pure/internals/math-trunc.js
var require_math_trunc = __commonJS((exports, module) => {
  var ceil = Math.ceil;
  var floor = Math.floor;
  module.exports = Math.trunc || function trunc(x) {
    var n = +x;
    return (n > 0 ? floor : ceil)(n);
  };
});

// node_modules/core-js-pure/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS((exports, module) => {
  var trunc = require_math_trunc();
  module.exports = function(argument) {
    var number = +argument;
    return number !== number || number === 0 ? 0 : trunc(number);
  };
});

// node_modules/core-js-pure/internals/to-length.js
var require_to_length = __commonJS((exports, module) => {
  var toIntegerOrInfinity = require_to_integer_or_infinity();
  var min = Math.min;
  module.exports = function(argument) {
    return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
  };
});

// node_modules/core-js-pure/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS((exports, module) => {
  var toLength = require_to_length();
  module.exports = function(obj) {
    return toLength(obj.length);
  };
});

// node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js
var require_does_not_exceed_safe_integer = __commonJS((exports, module) => {
  var $TypeError = TypeError;
  var MAX_SAFE_INTEGER = 9007199254740991;
  module.exports = function(it) {
    if (it > MAX_SAFE_INTEGER)
      throw $TypeError("Maximum allowed index exceeded");
    return it;
  };
});

// node_modules/core-js-pure/internals/create-property.js
var require_create_property = __commonJS((exports, module) => {
  var toPropertyKey = require_to_property_key();
  var definePropertyModule = require_object_define_property();
  var createPropertyDescriptor = require_create_property_descriptor();
  module.exports = function(object, key, value) {
    var propertyKey = toPropertyKey(key);
    if (propertyKey in object)
      definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
    else
      object[propertyKey] = value;
  };
});

// node_modules/core-js-pure/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS((exports, module) => {
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  var test = {};
  test[TO_STRING_TAG] = "z";
  module.exports = String(test) === "[object z]";
});

// node_modules/core-js-pure/internals/classof.js
var require_classof = __commonJS((exports, module) => {
  var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
  var isCallable = require_is_callable();
  var classofRaw = require_classof_raw();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  var $Object = Object;
  var CORRECT_ARGUMENTS = classofRaw(function() {
    return arguments;
  }()) === "Arguments";
  var tryGet = function(it, key) {
    try {
      return it[key];
    } catch (error) {
    }
  };
  module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
    var O, tag, result;
    return it === undefined ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) === "Object" && isCallable(O.callee) ? "Arguments" : result;
  };
});

// node_modules/core-js-pure/internals/inspect-source.js
var require_inspect_source = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var isCallable = require_is_callable();
  var store = require_shared_store();
  var functionToString = uncurryThis(Function.toString);
  if (!isCallable(store.inspectSource)) {
    store.inspectSource = function(it) {
      return functionToString(it);
    };
  }
  module.exports = store.inspectSource;
});

// node_modules/core-js-pure/internals/is-constructor.js
var require_is_constructor = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var fails = require_fails();
  var isCallable = require_is_callable();
  var classof = require_classof();
  var getBuiltIn = require_get_built_in();
  var inspectSource = require_inspect_source();
  var noop = function() {
  };
  var empty = [];
  var construct = getBuiltIn("Reflect", "construct");
  var constructorRegExp = /^\s*(?:class|function)\b/;
  var exec = uncurryThis(constructorRegExp.exec);
  var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
  var isConstructorModern = function isConstructor(argument) {
    if (!isCallable(argument))
      return false;
    try {
      construct(noop, empty, argument);
      return true;
    } catch (error) {
      return false;
    }
  };
  var isConstructorLegacy = function isConstructor(argument) {
    if (!isCallable(argument))
      return false;
    switch (classof(argument)) {
      case "AsyncFunction":
      case "GeneratorFunction":
      case "AsyncGeneratorFunction":
        return false;
    }
    try {
      return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
    } catch (error) {
      return true;
    }
  };
  isConstructorLegacy.sham = true;
  module.exports = !construct || fails(function() {
    var called;
    return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
      called = true;
    }) || called;
  }) ? isConstructorLegacy : isConstructorModern;
});

// node_modules/core-js-pure/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS((exports, module) => {
  var isArray = require_is_array();
  var isConstructor = require_is_constructor();
  var isObject = require_is_object();
  var wellKnownSymbol = require_well_known_symbol();
  var SPECIES = wellKnownSymbol("species");
  var $Array = Array;
  module.exports = function(originalArray) {
    var C;
    if (isArray(originalArray)) {
      C = originalArray.constructor;
      if (isConstructor(C) && (C === $Array || isArray(C.prototype)))
        C = undefined;
      else if (isObject(C)) {
        C = C[SPECIES];
        if (C === null)
          C = undefined;
      }
    }
    return C === undefined ? $Array : C;
  };
});

// node_modules/core-js-pure/internals/array-species-create.js
var require_array_species_create = __commonJS((exports, module) => {
  var arraySpeciesConstructor = require_array_species_constructor();
  module.exports = function(originalArray, length) {
    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
  };
});

// node_modules/core-js-pure/internals/array-method-has-species-support.js
var require_array_method_has_species_support = __commonJS((exports, module) => {
  var fails = require_fails();
  var wellKnownSymbol = require_well_known_symbol();
  var V8_VERSION = require_engine_v8_version();
  var SPECIES = wellKnownSymbol("species");
  module.exports = function(METHOD_NAME) {
    return V8_VERSION >= 51 || !fails(function() {
      var array = [];
      var constructor = array.constructor = {};
      constructor[SPECIES] = function() {
        return { foo: 1 };
      };
      return array[METHOD_NAME](Boolean).foo !== 1;
    });
  };
});

// node_modules/core-js-pure/modules/es.array.concat.js
var require_es_array_concat = __commonJS(() => {
  var $ = require_export();
  var fails = require_fails();
  var isArray = require_is_array();
  var isObject = require_is_object();
  var toObject = require_to_object();
  var lengthOfArrayLike = require_length_of_array_like();
  var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
  var createProperty = require_create_property();
  var arraySpeciesCreate = require_array_species_create();
  var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
  var wellKnownSymbol = require_well_known_symbol();
  var V8_VERSION = require_engine_v8_version();
  var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
  var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
    var array = [];
    array[IS_CONCAT_SPREADABLE] = false;
    return array.concat()[0] !== array;
  });
  var isConcatSpreadable = function(O) {
    if (!isObject(O))
      return false;
    var spreadable = O[IS_CONCAT_SPREADABLE];
    return spreadable !== undefined ? !!spreadable : isArray(O);
  };
  var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport("concat");
  $({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
    concat: function concat(arg) {
      var O = toObject(this);
      var A = arraySpeciesCreate(O, 0);
      var n = 0;
      var i, k, length, len, E;
      for (i = -1, length = arguments.length;i < length; i++) {
        E = i === -1 ? O : arguments[i];
        if (isConcatSpreadable(E)) {
          len = lengthOfArrayLike(E);
          doesNotExceedSafeInteger(n + len);
          for (k = 0;k < len; k++, n++)
            if (k in E)
              createProperty(A, n, E[k]);
        } else {
          doesNotExceedSafeInteger(n + 1);
          createProperty(A, n++, E);
        }
      }
      A.length = n;
      return A;
    }
  });
});

// node_modules/core-js-pure/modules/es.object.to-string.js
var exports_es_object_to_string = {};
var init_es_object_to_string = __esm(() => {
});

// node_modules/core-js-pure/internals/to-string.js
var require_to_string = __commonJS((exports, module) => {
  var classof = require_classof();
  var $String = String;
  module.exports = function(argument) {
    if (classof(argument) === "Symbol")
      throw TypeError("Cannot convert a Symbol value to a string");
    return $String(argument);
  };
});

// node_modules/core-js-pure/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS((exports, module) => {
  var toIntegerOrInfinity = require_to_integer_or_infinity();
  var max = Math.max;
  var min = Math.min;
  module.exports = function(index, length) {
    var integer = toIntegerOrInfinity(index);
    return integer < 0 ? max(integer + length, 0) : min(integer, length);
  };
});

// node_modules/core-js-pure/internals/array-includes.js
var require_array_includes = __commonJS((exports, module) => {
  var toIndexedObject = require_to_indexed_object();
  var toAbsoluteIndex = require_to_absolute_index();
  var lengthOfArrayLike = require_length_of_array_like();
  var createMethod = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
      var O = toIndexedObject($this);
      var length = lengthOfArrayLike(O);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      if (IS_INCLUDES && el !== el)
        while (length > index) {
          value = O[index++];
          if (value !== value)
            return true;
        }
      else
        for (;length > index; index++) {
          if ((IS_INCLUDES || (index in O)) && O[index] === el)
            return IS_INCLUDES || index || 0;
        }
      return !IS_INCLUDES && -1;
    };
  };
  module.exports = {
    includes: createMethod(true),
    indexOf: createMethod(false)
  };
});

// node_modules/core-js-pure/internals/hidden-keys.js
var require_hidden_keys = __commonJS((exports, module) => {
  module.exports = {};
});

// node_modules/core-js-pure/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var hasOwn = require_has_own_property();
  var toIndexedObject = require_to_indexed_object();
  var indexOf = require_array_includes().indexOf;
  var hiddenKeys = require_hidden_keys();
  var push = uncurryThis([].push);
  module.exports = function(object, names) {
    var O = toIndexedObject(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O)
      !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
    while (names.length > i)
      if (hasOwn(O, key = names[i++])) {
        ~indexOf(result, key) || push(result, key);
      }
    return result;
  };
});

// node_modules/core-js-pure/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS((exports, module) => {
  module.exports = [
    "constructor",
    "hasOwnProperty",
    "isPrototypeOf",
    "propertyIsEnumerable",
    "toLocaleString",
    "toString",
    "valueOf"
  ];
});

// node_modules/core-js-pure/internals/object-keys.js
var require_object_keys = __commonJS((exports, module) => {
  var internalObjectKeys = require_object_keys_internal();
  var enumBugKeys = require_enum_bug_keys();
  module.exports = Object.keys || function keys(O) {
    return internalObjectKeys(O, enumBugKeys);
  };
});

// node_modules/core-js-pure/internals/object-define-properties.js
var require_object_define_properties = __commonJS((exports) => {
  var DESCRIPTORS = require_descriptors();
  var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
  var definePropertyModule = require_object_define_property();
  var anObject = require_an_object();
  var toIndexedObject = require_to_indexed_object();
  var objectKeys = require_object_keys();
  exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var props = toIndexedObject(Properties);
    var keys = objectKeys(Properties);
    var length = keys.length;
    var index = 0;
    var key;
    while (length > index)
      definePropertyModule.f(O, key = keys[index++], props[key]);
    return O;
  };
});

// node_modules/core-js-pure/internals/html.js
var require_html = __commonJS((exports, module) => {
  var getBuiltIn = require_get_built_in();
  module.exports = getBuiltIn("document", "documentElement");
});

// node_modules/core-js-pure/internals/shared-key.js
var require_shared_key = __commonJS((exports, module) => {
  var shared = require_shared();
  var uid = require_uid();
  var keys = shared("keys");
  module.exports = function(key) {
    return keys[key] || (keys[key] = uid(key));
  };
});

// node_modules/core-js-pure/internals/object-create.js
var require_object_create = __commonJS((exports, module) => {
  var anObject = require_an_object();
  var definePropertiesModule = require_object_define_properties();
  var enumBugKeys = require_enum_bug_keys();
  var hiddenKeys = require_hidden_keys();
  var html = require_html();
  var documentCreateElement = require_document_create_element();
  var sharedKey = require_shared_key();
  var GT = ">";
  var LT = "<";
  var PROTOTYPE = "prototype";
  var SCRIPT = "script";
  var IE_PROTO = sharedKey("IE_PROTO");
  var EmptyConstructor = function() {
  };
  var scriptTag = function(content) {
    return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
  };
  var NullProtoObjectViaActiveX = function(activeXDocument2) {
    activeXDocument2.write(scriptTag(""));
    activeXDocument2.close();
    var temp = activeXDocument2.parentWindow.Object;
    activeXDocument2 = null;
    return temp;
  };
  var NullProtoObjectViaIFrame = function() {
    var iframe = documentCreateElement("iframe");
    var JS = "java" + SCRIPT + ":";
    var iframeDocument;
    iframe.style.display = "none";
    html.appendChild(iframe);
    iframe.src = String(JS);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(scriptTag("document.F=Object"));
    iframeDocument.close();
    return iframeDocument.F;
  };
  var activeXDocument;
  var NullProtoObject = function() {
    try {
      activeXDocument = new ActiveXObject("htmlfile");
    } catch (error) {
    }
    NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
    var length = enumBugKeys.length;
    while (length--)
      delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
    return NullProtoObject();
  };
  hiddenKeys[IE_PROTO] = true;
  module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      EmptyConstructor[PROTOTYPE] = anObject(O);
      result = new EmptyConstructor;
      EmptyConstructor[PROTOTYPE] = null;
      result[IE_PROTO] = O;
    } else
      result = NullProtoObject();
    return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
  };
});

// node_modules/core-js-pure/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS((exports) => {
  var internalObjectKeys = require_object_keys_internal();
  var enumBugKeys = require_enum_bug_keys();
  var hiddenKeys = enumBugKeys.concat("length", "prototype");
  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return internalObjectKeys(O, hiddenKeys);
  };
});

// node_modules/core-js-pure/internals/array-slice-simple.js
var require_array_slice_simple = __commonJS((exports, module) => {
  var toAbsoluteIndex = require_to_absolute_index();
  var lengthOfArrayLike = require_length_of_array_like();
  var createProperty = require_create_property();
  var $Array = Array;
  var max = Math.max;
  module.exports = function(O, start, end) {
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = $Array(max(fin - k, 0));
    var n = 0;
    for (;k < fin; k++, n++)
      createProperty(result, n, O[k]);
    result.length = n;
    return result;
  };
});

// node_modules/core-js-pure/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS((exports, module) => {
  var classof = require_classof_raw();
  var toIndexedObject = require_to_indexed_object();
  var $getOwnPropertyNames = require_object_get_own_property_names().f;
  var arraySlice = require_array_slice_simple();
  var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
  var getWindowNames = function(it) {
    try {
      return $getOwnPropertyNames(it);
    } catch (error) {
      return arraySlice(windowNames);
    }
  };
  exports.f = function getOwnPropertyNames(it) {
    return windowNames && classof(it) === "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
  };
});

// node_modules/core-js-pure/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS((exports) => {
  exports.f = Object.getOwnPropertySymbols;
});

// node_modules/core-js-pure/internals/define-built-in.js
var require_define_built_in = __commonJS((exports, module) => {
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  module.exports = function(target, key, value, options) {
    if (options && options.enumerable)
      target[key] = value;
    else
      createNonEnumerableProperty(target, key, value);
    return target;
  };
});

// node_modules/core-js-pure/internals/define-built-in-accessor.js
var require_define_built_in_accessor = __commonJS((exports, module) => {
  var defineProperty = require_object_define_property();
  module.exports = function(target, name, descriptor) {
    return defineProperty.f(target, name, descriptor);
  };
});

// node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
var require_well_known_symbol_wrapped = __commonJS((exports) => {
  var wellKnownSymbol = require_well_known_symbol();
  exports.f = wellKnownSymbol;
});

// node_modules/core-js-pure/internals/well-known-symbol-define.js
var require_well_known_symbol_define = __commonJS((exports, module) => {
  var path = require_path();
  var hasOwn = require_has_own_property();
  var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
  var defineProperty = require_object_define_property().f;
  module.exports = function(NAME) {
    var Symbol2 = path.Symbol || (path.Symbol = {});
    if (!hasOwn(Symbol2, NAME))
      defineProperty(Symbol2, NAME, {
        value: wrappedWellKnownSymbolModule.f(NAME)
      });
  };
});

// node_modules/core-js-pure/internals/symbol-define-to-primitive.js
var require_symbol_define_to_primitive = __commonJS((exports, module) => {
  var call = require_function_call();
  var getBuiltIn = require_get_built_in();
  var wellKnownSymbol = require_well_known_symbol();
  var defineBuiltIn = require_define_built_in();
  module.exports = function() {
    var Symbol2 = getBuiltIn("Symbol");
    var SymbolPrototype = Symbol2 && Symbol2.prototype;
    var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
      defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function(hint) {
        return call(valueOf, this);
      }, { arity: 1 });
    }
  };
});

// node_modules/core-js-pure/internals/object-to-string.js
var require_object_to_string = __commonJS((exports, module) => {
  var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
  var classof = require_classof();
  module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
    return "[object " + classof(this) + "]";
  };
});

// node_modules/core-js-pure/internals/set-to-string-tag.js
var require_set_to_string_tag = __commonJS((exports, module) => {
  var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
  var defineProperty = require_object_define_property().f;
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var hasOwn = require_has_own_property();
  var toString = require_object_to_string();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  module.exports = function(it, TAG, STATIC, SET_METHOD) {
    if (it) {
      var target = STATIC ? it : it.prototype;
      if (!hasOwn(target, TO_STRING_TAG)) {
        defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
      }
      if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
        createNonEnumerableProperty(target, "toString", toString);
      }
    }
  };
});

// node_modules/core-js-pure/internals/weak-map-basic-detection.js
var require_weak_map_basic_detection = __commonJS((exports, module) => {
  var global2 = require_global();
  var isCallable = require_is_callable();
  var WeakMap2 = global2.WeakMap;
  module.exports = isCallable(WeakMap2) && /native code/.test(String(WeakMap2));
});

// node_modules/core-js-pure/internals/internal-state.js
var require_internal_state = __commonJS((exports, module) => {
  var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
  var global2 = require_global();
  var isObject = require_is_object();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var hasOwn = require_has_own_property();
  var shared = require_shared_store();
  var sharedKey = require_shared_key();
  var hiddenKeys = require_hidden_keys();
  var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
  var TypeError2 = global2.TypeError;
  var WeakMap2 = global2.WeakMap;
  var set;
  var get;
  var has;
  var enforce = function(it) {
    return has(it) ? get(it) : set(it, {});
  };
  var getterFor = function(TYPE) {
    return function(it) {
      var state;
      if (!isObject(it) || (state = get(it)).type !== TYPE) {
        throw TypeError2("Incompatible receiver, " + TYPE + " required");
      }
      return state;
    };
  };
  if (NATIVE_WEAK_MAP || shared.state) {
    store = shared.state || (shared.state = new WeakMap2);
    store.get = store.get;
    store.has = store.has;
    store.set = store.set;
    set = function(it, metadata) {
      if (store.has(it))
        throw TypeError2(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      store.set(it, metadata);
      return metadata;
    };
    get = function(it) {
      return store.get(it) || {};
    };
    has = function(it) {
      return store.has(it);
    };
  } else {
    STATE = sharedKey("state");
    hiddenKeys[STATE] = true;
    set = function(it, metadata) {
      if (hasOwn(it, STATE))
        throw TypeError2(OBJECT_ALREADY_INITIALIZED);
      metadata.facade = it;
      createNonEnumerableProperty(it, STATE, metadata);
      return metadata;
    };
    get = function(it) {
      return hasOwn(it, STATE) ? it[STATE] : {};
    };
    has = function(it) {
      return hasOwn(it, STATE);
    };
  }
  var store;
  var STATE;
  module.exports = {
    set,
    get,
    has,
    enforce,
    getterFor
  };
});

// node_modules/core-js-pure/internals/array-iteration.js
var require_array_iteration = __commonJS((exports, module) => {
  var bind = require_function_bind_context();
  var uncurryThis = require_function_uncurry_this();
  var IndexedObject = require_indexed_object();
  var toObject = require_to_object();
  var lengthOfArrayLike = require_length_of_array_like();
  var arraySpeciesCreate = require_array_species_create();
  var push = uncurryThis([].push);
  var createMethod = function(TYPE) {
    var IS_MAP = TYPE === 1;
    var IS_FILTER = TYPE === 2;
    var IS_SOME = TYPE === 3;
    var IS_EVERY = TYPE === 4;
    var IS_FIND_INDEX = TYPE === 6;
    var IS_FILTER_REJECT = TYPE === 7;
    var NO_HOLES = TYPE === 5 || IS_FIND_INDEX;
    return function($this, callbackfn, that, specificCreate) {
      var O = toObject($this);
      var self2 = IndexedObject(O);
      var boundFunction = bind(callbackfn, that);
      var length = lengthOfArrayLike(self2);
      var index = 0;
      var create = specificCreate || arraySpeciesCreate;
      var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
      var value, result;
      for (;length > index; index++)
        if (NO_HOLES || (index in self2)) {
          value = self2[index];
          result = boundFunction(value, index, O);
          if (TYPE) {
            if (IS_MAP)
              target[index] = result;
            else if (result)
              switch (TYPE) {
                case 3:
                  return true;
                case 5:
                  return value;
                case 6:
                  return index;
                case 2:
                  push(target, value);
              }
            else
              switch (TYPE) {
                case 4:
                  return false;
                case 7:
                  push(target, value);
              }
          }
        }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
    };
  };
  module.exports = {
    forEach: createMethod(0),
    map: createMethod(1),
    filter: createMethod(2),
    some: createMethod(3),
    every: createMethod(4),
    find: createMethod(5),
    findIndex: createMethod(6),
    filterReject: createMethod(7)
  };
});

// node_modules/core-js-pure/modules/es.symbol.constructor.js
var require_es_symbol_constructor = __commonJS(() => {
  var $ = require_export();
  var global2 = require_global();
  var call = require_function_call();
  var uncurryThis = require_function_uncurry_this();
  var IS_PURE = require_is_pure();
  var DESCRIPTORS = require_descriptors();
  var NATIVE_SYMBOL = require_symbol_constructor_detection();
  var fails = require_fails();
  var hasOwn = require_has_own_property();
  var isPrototypeOf = require_object_is_prototype_of();
  var anObject = require_an_object();
  var toIndexedObject = require_to_indexed_object();
  var toPropertyKey = require_to_property_key();
  var $toString = require_to_string();
  var createPropertyDescriptor = require_create_property_descriptor();
  var nativeObjectCreate = require_object_create();
  var objectKeys = require_object_keys();
  var getOwnPropertyNamesModule = require_object_get_own_property_names();
  var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
  var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
  var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
  var definePropertyModule = require_object_define_property();
  var definePropertiesModule = require_object_define_properties();
  var propertyIsEnumerableModule = require_object_property_is_enumerable();
  var defineBuiltIn = require_define_built_in();
  var defineBuiltInAccessor = require_define_built_in_accessor();
  var shared = require_shared();
  var sharedKey = require_shared_key();
  var hiddenKeys = require_hidden_keys();
  var uid = require_uid();
  var wellKnownSymbol = require_well_known_symbol();
  var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
  var defineWellKnownSymbol = require_well_known_symbol_define();
  var defineSymbolToPrimitive = require_symbol_define_to_primitive();
  var setToStringTag = require_set_to_string_tag();
  var InternalStateModule = require_internal_state();
  var $forEach = require_array_iteration().forEach;
  var HIDDEN = sharedKey("hidden");
  var SYMBOL = "Symbol";
  var PROTOTYPE = "prototype";
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(SYMBOL);
  var ObjectPrototype = Object[PROTOTYPE];
  var $Symbol = global2.Symbol;
  var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
  var TypeError2 = global2.TypeError;
  var QObject = global2.QObject;
  var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  var nativeDefineProperty = definePropertyModule.f;
  var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
  var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
  var push = uncurryThis([].push);
  var AllSymbols = shared("symbols");
  var ObjectPrototypeSymbols = shared("op-symbols");
  var WellKnownSymbolsStore = shared("wks");
  var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
  var setSymbolDescriptor = DESCRIPTORS && fails(function() {
    return nativeObjectCreate(nativeDefineProperty({}, "a", {
      get: function() {
        return nativeDefineProperty(this, "a", { value: 7 }).a;
      }
    })).a !== 7;
  }) ? function(O, P, Attributes) {
    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
    if (ObjectPrototypeDescriptor)
      delete ObjectPrototype[P];
    nativeDefineProperty(O, P, Attributes);
    if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
      nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
    }
  } : nativeDefineProperty;
  var wrap = function(tag, description) {
    var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
    setInternalState(symbol, {
      type: SYMBOL,
      tag,
      description
    });
    if (!DESCRIPTORS)
      symbol.description = description;
    return symbol;
  };
  var $defineProperty = function defineProperty(O, P, Attributes) {
    if (O === ObjectPrototype)
      $defineProperty(ObjectPrototypeSymbols, P, Attributes);
    anObject(O);
    var key = toPropertyKey(P);
    anObject(Attributes);
    if (hasOwn(AllSymbols, key)) {
      if (!Attributes.enumerable) {
        if (!hasOwn(O, HIDDEN))
          nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
        O[HIDDEN][key] = true;
      } else {
        if (hasOwn(O, HIDDEN) && O[HIDDEN][key])
          O[HIDDEN][key] = false;
        Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
      }
      return setSymbolDescriptor(O, key, Attributes);
    }
    return nativeDefineProperty(O, key, Attributes);
  };
  var $defineProperties = function defineProperties(O, Properties) {
    anObject(O);
    var properties = toIndexedObject(Properties);
    var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
    $forEach(keys, function(key) {
      if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
        $defineProperty(O, key, properties[key]);
    });
    return O;
  };
  var $create = function create(O, Properties) {
    return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(V) {
    var P = toPropertyKey(V);
    var enumerable = call(nativePropertyIsEnumerable, this, P);
    if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P))
      return false;
    return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
    var it = toIndexedObject(O);
    var key = toPropertyKey(P);
    if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
      return;
    var descriptor = nativeGetOwnPropertyDescriptor(it, key);
    if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
      descriptor.enumerable = true;
    }
    return descriptor;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(O) {
    var names = nativeGetOwnPropertyNames(toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
      if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
        push(result, key);
    });
    return result;
  };
  var $getOwnPropertySymbols = function(O) {
    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
    var result = [];
    $forEach(names, function(key) {
      if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
        push(result, AllSymbols[key]);
      }
    });
    return result;
  };
  if (!NATIVE_SYMBOL) {
    $Symbol = function Symbol() {
      if (isPrototypeOf(SymbolPrototype, this))
        throw TypeError2("Symbol is not a constructor");
      var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
      var tag = uid(description);
      var setter = function(value) {
        if (this === ObjectPrototype)
          call(setter, ObjectPrototypeSymbols, value);
        if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
          this[HIDDEN][tag] = false;
        setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
      };
      if (DESCRIPTORS && USE_SETTER)
        setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
      return wrap(tag, description);
    };
    SymbolPrototype = $Symbol[PROTOTYPE];
    defineBuiltIn(SymbolPrototype, "toString", function toString() {
      return getInternalState(this).tag;
    });
    defineBuiltIn($Symbol, "withoutSetter", function(description) {
      return wrap(uid(description), description);
    });
    propertyIsEnumerableModule.f = $propertyIsEnumerable;
    definePropertyModule.f = $defineProperty;
    definePropertiesModule.f = $defineProperties;
    getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
    getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
    getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
    wrappedWellKnownSymbolModule.f = function(name) {
      return wrap(wellKnownSymbol(name), name);
    };
    if (DESCRIPTORS) {
      defineBuiltInAccessor(SymbolPrototype, "description", {
        configurable: true,
        get: function description() {
          return getInternalState(this).description;
        }
      });
      if (!IS_PURE) {
        defineBuiltIn(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
      }
    }
  }
  $({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
    Symbol: $Symbol
  });
  $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
    defineWellKnownSymbol(name);
  });
  $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
    useSetter: function() {
      USE_SETTER = true;
    },
    useSimple: function() {
      USE_SETTER = false;
    }
  });
  $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
    create: $create,
    defineProperty: $defineProperty,
    defineProperties: $defineProperties,
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor
  });
  $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
    getOwnPropertyNames: $getOwnPropertyNames
  });
  defineSymbolToPrimitive();
  setToStringTag($Symbol, SYMBOL);
  hiddenKeys[HIDDEN] = true;
});

// node_modules/core-js-pure/internals/symbol-registry-detection.js
var require_symbol_registry_detection = __commonJS((exports, module) => {
  var NATIVE_SYMBOL = require_symbol_constructor_detection();
  module.exports = NATIVE_SYMBOL && !!Symbol["for"] && !!Symbol.keyFor;
});

// node_modules/core-js-pure/modules/es.symbol.for.js
var require_es_symbol_for = __commonJS(() => {
  var $ = require_export();
  var getBuiltIn = require_get_built_in();
  var hasOwn = require_has_own_property();
  var toString = require_to_string();
  var shared = require_shared();
  var NATIVE_SYMBOL_REGISTRY = require_symbol_registry_detection();
  var StringToSymbolRegistry = shared("string-to-symbol-registry");
  var SymbolToStringRegistry = shared("symbol-to-string-registry");
  $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
    for: function(key) {
      var string = toString(key);
      if (hasOwn(StringToSymbolRegistry, string))
        return StringToSymbolRegistry[string];
      var symbol = getBuiltIn("Symbol")(string);
      StringToSymbolRegistry[string] = symbol;
      SymbolToStringRegistry[symbol] = string;
      return symbol;
    }
  });
});

// node_modules/core-js-pure/modules/es.symbol.key-for.js
var require_es_symbol_key_for = __commonJS(() => {
  var $ = require_export();
  var hasOwn = require_has_own_property();
  var isSymbol = require_is_symbol();
  var tryToString = require_try_to_string();
  var shared = require_shared();
  var NATIVE_SYMBOL_REGISTRY = require_symbol_registry_detection();
  var SymbolToStringRegistry = shared("symbol-to-string-registry");
  $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym))
        throw TypeError(tryToString(sym) + " is not a symbol");
      if (hasOwn(SymbolToStringRegistry, sym))
        return SymbolToStringRegistry[sym];
    }
  });
});

// node_modules/core-js-pure/internals/array-slice.js
var require_array_slice = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  module.exports = uncurryThis([].slice);
});

// node_modules/core-js-pure/internals/get-json-replacer-function.js
var require_get_json_replacer_function = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var isArray = require_is_array();
  var isCallable = require_is_callable();
  var classof = require_classof_raw();
  var toString = require_to_string();
  var push = uncurryThis([].push);
  module.exports = function(replacer) {
    if (isCallable(replacer))
      return replacer;
    if (!isArray(replacer))
      return;
    var rawLength = replacer.length;
    var keys = [];
    for (var i = 0;i < rawLength; i++) {
      var element = replacer[i];
      if (typeof element == "string")
        push(keys, element);
      else if (typeof element == "number" || classof(element) === "Number" || classof(element) === "String")
        push(keys, toString(element));
    }
    var keysLength = keys.length;
    var root = true;
    return function(key, value) {
      if (root) {
        root = false;
        return value;
      }
      if (isArray(this))
        return value;
      for (var j = 0;j < keysLength; j++)
        if (keys[j] === key)
          return value;
    };
  };
});

// node_modules/core-js-pure/modules/es.json.stringify.js
var require_es_json_stringify = __commonJS(() => {
  var $ = require_export();
  var getBuiltIn = require_get_built_in();
  var apply = require_function_apply();
  var call = require_function_call();
  var uncurryThis = require_function_uncurry_this();
  var fails = require_fails();
  var isCallable = require_is_callable();
  var isSymbol = require_is_symbol();
  var arraySlice = require_array_slice();
  var getReplacerFunction = require_get_json_replacer_function();
  var NATIVE_SYMBOL = require_symbol_constructor_detection();
  var $String = String;
  var $stringify = getBuiltIn("JSON", "stringify");
  var exec = uncurryThis(/./.exec);
  var charAt = uncurryThis("".charAt);
  var charCodeAt = uncurryThis("".charCodeAt);
  var replace = uncurryThis("".replace);
  var numberToString = uncurryThis(1 .toString);
  var tester = /[\uD800-\uDFFF]/g;
  var low = /^[\uD800-\uDBFF]$/;
  var hi = /^[\uDC00-\uDFFF]$/;
  var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function() {
    var symbol = getBuiltIn("Symbol")("stringify detection");
    return $stringify([symbol]) !== "[null]" || $stringify({ a: symbol }) !== "{}" || $stringify(Object(symbol)) !== "{}";
  });
  var ILL_FORMED_UNICODE = fails(function() {
    return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
  });
  var stringifyWithSymbolsFix = function(it, replacer) {
    var args = arraySlice(arguments);
    var $replacer = getReplacerFunction(replacer);
    if (!isCallable($replacer) && (it === undefined || isSymbol(it)))
      return;
    args[1] = function(key, value) {
      if (isCallable($replacer))
        value = call($replacer, this, $String(key), value);
      if (!isSymbol(value))
        return value;
    };
    return apply($stringify, null, args);
  };
  var fixIllFormed = function(match, offset, string) {
    var prev = charAt(string, offset - 1);
    var next = charAt(string, offset + 1);
    if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
      return "\\u" + numberToString(charCodeAt(match, 0), 16);
    }
    return match;
  };
  if ($stringify) {
    $({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
      stringify: function stringify(it, replacer, space) {
        var args = arraySlice(arguments);
        var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
        return ILL_FORMED_UNICODE && typeof result == "string" ? replace(result, tester, fixIllFormed) : result;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js
var require_es_object_get_own_property_symbols = __commonJS(() => {
  var $ = require_export();
  var NATIVE_SYMBOL = require_symbol_constructor_detection();
  var fails = require_fails();
  var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
  var toObject = require_to_object();
  var FORCED = !NATIVE_SYMBOL || fails(function() {
    getOwnPropertySymbolsModule.f(1);
  });
  $({ target: "Object", stat: true, forced: FORCED }, {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
      return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
    }
  });
});

// node_modules/core-js-pure/modules/es.symbol.js
var require_es_symbol = __commonJS(() => {
  require_es_symbol_constructor();
  require_es_symbol_for();
  require_es_symbol_key_for();
  require_es_json_stringify();
  require_es_object_get_own_property_symbols();
});

// node_modules/core-js-pure/modules/es.symbol.async-iterator.js
var require_es_symbol_async_iterator = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("asyncIterator");
});

// node_modules/core-js-pure/modules/es.symbol.description.js
var exports_es_symbol_description = {};
var init_es_symbol_description = __esm(() => {
});

// node_modules/core-js-pure/modules/es.symbol.has-instance.js
var require_es_symbol_has_instance = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("hasInstance");
});

// node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
var require_es_symbol_is_concat_spreadable = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("isConcatSpreadable");
});

// node_modules/core-js-pure/modules/es.symbol.iterator.js
var require_es_symbol_iterator = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("iterator");
});

// node_modules/core-js-pure/modules/es.symbol.match.js
var require_es_symbol_match = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("match");
});

// node_modules/core-js-pure/modules/es.symbol.match-all.js
var require_es_symbol_match_all = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("matchAll");
});

// node_modules/core-js-pure/modules/es.symbol.replace.js
var require_es_symbol_replace = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("replace");
});

// node_modules/core-js-pure/modules/es.symbol.search.js
var require_es_symbol_search = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("search");
});

// node_modules/core-js-pure/modules/es.symbol.species.js
var require_es_symbol_species = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("species");
});

// node_modules/core-js-pure/modules/es.symbol.split.js
var require_es_symbol_split = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("split");
});

// node_modules/core-js-pure/modules/es.symbol.to-primitive.js
var require_es_symbol_to_primitive = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  var defineSymbolToPrimitive = require_symbol_define_to_primitive();
  defineWellKnownSymbol("toPrimitive");
  defineSymbolToPrimitive();
});

// node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
var require_es_symbol_to_string_tag = __commonJS(() => {
  var getBuiltIn = require_get_built_in();
  var defineWellKnownSymbol = require_well_known_symbol_define();
  var setToStringTag = require_set_to_string_tag();
  defineWellKnownSymbol("toStringTag");
  setToStringTag(getBuiltIn("Symbol"), "Symbol");
});

// node_modules/core-js-pure/modules/es.symbol.unscopables.js
var require_es_symbol_unscopables = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("unscopables");
});

// node_modules/core-js-pure/modules/es.json.to-string-tag.js
var require_es_json_to_string_tag = __commonJS(() => {
  var global2 = require_global();
  var setToStringTag = require_set_to_string_tag();
  setToStringTag(global2.JSON, "JSON", true);
});

// node_modules/core-js-pure/modules/es.math.to-string-tag.js
var exports_es_math_to_string_tag = {};
var init_es_math_to_string_tag = __esm(() => {
});

// node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
var exports_es_reflect_to_string_tag = {};
var init_es_reflect_to_string_tag = __esm(() => {
});

// node_modules/core-js-pure/es/symbol/index.js
var require_symbol = __commonJS((exports, module) => {
  require_es_array_concat();
  init_es_object_to_string();
  require_es_symbol();
  require_es_symbol_async_iterator();
  init_es_symbol_description();
  require_es_symbol_has_instance();
  require_es_symbol_is_concat_spreadable();
  require_es_symbol_iterator();
  require_es_symbol_match();
  require_es_symbol_match_all();
  require_es_symbol_replace();
  require_es_symbol_search();
  require_es_symbol_species();
  require_es_symbol_split();
  require_es_symbol_to_primitive();
  require_es_symbol_to_string_tag();
  require_es_symbol_unscopables();
  require_es_json_to_string_tag();
  init_es_math_to_string_tag();
  init_es_reflect_to_string_tag();
  var path = require_path();
  module.exports = path.Symbol;
});

// node_modules/core-js-pure/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS((exports, module) => {
  module.exports = function() {
  };
});

// node_modules/core-js-pure/internals/iterators.js
var require_iterators = __commonJS((exports, module) => {
  module.exports = {};
});

// node_modules/core-js-pure/internals/function-name.js
var require_function_name = __commonJS((exports, module) => {
  var DESCRIPTORS = require_descriptors();
  var hasOwn = require_has_own_property();
  var FunctionPrototype = Function.prototype;
  var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
  var EXISTS = hasOwn(FunctionPrototype, "name");
  var PROPER = EXISTS && function something() {
  }.name === "something";
  var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
  module.exports = {
    EXISTS,
    PROPER,
    CONFIGURABLE
  };
});

// node_modules/core-js-pure/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS((exports, module) => {
  var fails = require_fails();
  module.exports = !fails(function() {
    function F() {
    }
    F.prototype.constructor = null;
    return Object.getPrototypeOf(new F) !== F.prototype;
  });
});

// node_modules/core-js-pure/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS((exports, module) => {
  var hasOwn = require_has_own_property();
  var isCallable = require_is_callable();
  var toObject = require_to_object();
  var sharedKey = require_shared_key();
  var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
  var IE_PROTO = sharedKey("IE_PROTO");
  var $Object = Object;
  var ObjectPrototype = $Object.prototype;
  module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
    var object = toObject(O);
    if (hasOwn(object, IE_PROTO))
      return object[IE_PROTO];
    var constructor = object.constructor;
    if (isCallable(constructor) && object instanceof constructor) {
      return constructor.prototype;
    }
    return object instanceof $Object ? ObjectPrototype : null;
  };
});

// node_modules/core-js-pure/internals/iterators-core.js
var require_iterators_core = __commonJS((exports, module) => {
  var fails = require_fails();
  var isCallable = require_is_callable();
  var isObject = require_is_object();
  var create = require_object_create();
  var getPrototypeOf = require_object_get_prototype_of();
  var defineBuiltIn = require_define_built_in();
  var wellKnownSymbol = require_well_known_symbol();
  var IS_PURE = require_is_pure();
  var ITERATOR = wellKnownSymbol("iterator");
  var BUGGY_SAFARI_ITERATORS = false;
  var IteratorPrototype;
  var PrototypeOfArrayIteratorPrototype;
  var arrayIterator;
  if ([].keys) {
    arrayIterator = [].keys();
    if (!("next" in arrayIterator))
      BUGGY_SAFARI_ITERATORS = true;
    else {
      PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
      if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
        IteratorPrototype = PrototypeOfArrayIteratorPrototype;
    }
  }
  var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {
    var test = {};
    return IteratorPrototype[ITERATOR].call(test) !== test;
  });
  if (NEW_ITERATOR_PROTOTYPE)
    IteratorPrototype = {};
  else if (IS_PURE)
    IteratorPrototype = create(IteratorPrototype);
  if (!isCallable(IteratorPrototype[ITERATOR])) {
    defineBuiltIn(IteratorPrototype, ITERATOR, function() {
      return this;
    });
  }
  module.exports = {
    IteratorPrototype,
    BUGGY_SAFARI_ITERATORS
  };
});

// node_modules/core-js-pure/internals/iterator-create-constructor.js
var require_iterator_create_constructor = __commonJS((exports, module) => {
  var IteratorPrototype = require_iterators_core().IteratorPrototype;
  var create = require_object_create();
  var createPropertyDescriptor = require_create_property_descriptor();
  var setToStringTag = require_set_to_string_tag();
  var Iterators = require_iterators();
  var returnThis = function() {
    return this;
  };
  module.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
    var TO_STRING_TAG = NAME + " Iterator";
    IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
    Iterators[TO_STRING_TAG] = returnThis;
    return IteratorConstructor;
  };
});

// node_modules/core-js-pure/internals/function-uncurry-this-accessor.js
var require_function_uncurry_this_accessor = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var aCallable = require_a_callable();
  module.exports = function(object, key, method) {
    try {
      return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
    } catch (error) {
    }
  };
});

// node_modules/core-js-pure/internals/a-possible-prototype.js
var require_a_possible_prototype = __commonJS((exports, module) => {
  var isCallable = require_is_callable();
  var $String = String;
  var $TypeError = TypeError;
  module.exports = function(argument) {
    if (typeof argument == "object" || isCallable(argument))
      return argument;
    throw $TypeError("Can't set " + $String(argument) + " as a prototype");
  };
});

// node_modules/core-js-pure/internals/object-set-prototype-of.js
var require_object_set_prototype_of = __commonJS((exports, module) => {
  var uncurryThisAccessor = require_function_uncurry_this_accessor();
  var anObject = require_an_object();
  var aPossiblePrototype = require_a_possible_prototype();
  module.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
    var CORRECT_SETTER = false;
    var test = {};
    var setter;
    try {
      setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
      setter(test, []);
      CORRECT_SETTER = test instanceof Array;
    } catch (error) {
    }
    return function setPrototypeOf(O, proto) {
      anObject(O);
      aPossiblePrototype(proto);
      if (CORRECT_SETTER)
        setter(O, proto);
      else
        O.__proto__ = proto;
      return O;
    };
  }() : undefined);
});

// node_modules/core-js-pure/internals/iterator-define.js
var require_iterator_define = __commonJS((exports, module) => {
  var $ = require_export();
  var call = require_function_call();
  var IS_PURE = require_is_pure();
  var FunctionName = require_function_name();
  var isCallable = require_is_callable();
  var createIteratorConstructor = require_iterator_create_constructor();
  var getPrototypeOf = require_object_get_prototype_of();
  var setPrototypeOf = require_object_set_prototype_of();
  var setToStringTag = require_set_to_string_tag();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var defineBuiltIn = require_define_built_in();
  var wellKnownSymbol = require_well_known_symbol();
  var Iterators = require_iterators();
  var IteratorsCore = require_iterators_core();
  var PROPER_FUNCTION_NAME = FunctionName.PROPER;
  var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
  var IteratorPrototype = IteratorsCore.IteratorPrototype;
  var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
  var ITERATOR = wellKnownSymbol("iterator");
  var KEYS = "keys";
  var VALUES = "values";
  var ENTRIES = "entries";
  var returnThis = function() {
    return this;
  };
  module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
    createIteratorConstructor(IteratorConstructor, NAME, next);
    var getIterationMethod = function(KIND) {
      if (KIND === DEFAULT && defaultIterator)
        return defaultIterator;
      if (!BUGGY_SAFARI_ITERATORS && KIND && (KIND in IterablePrototype))
        return IterablePrototype[KIND];
      switch (KIND) {
        case KEYS:
          return function keys() {
            return new IteratorConstructor(this, KIND);
          };
        case VALUES:
          return function values() {
            return new IteratorConstructor(this, KIND);
          };
        case ENTRIES:
          return function entries() {
            return new IteratorConstructor(this, KIND);
          };
      }
      return function() {
        return new IteratorConstructor(this);
      };
    };
    var TO_STRING_TAG = NAME + " Iterator";
    var INCORRECT_VALUES_NAME = false;
    var IterablePrototype = Iterable.prototype;
    var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
    var anyNativeIterator = NAME === "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
    var CurrentIteratorPrototype, methods, KEY;
    if (anyNativeIterator) {
      CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable));
      if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
        if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
          if (setPrototypeOf) {
            setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
          } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
            defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
          }
        }
        setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
        if (IS_PURE)
          Iterators[TO_STRING_TAG] = returnThis;
      }
    }
    if (PROPER_FUNCTION_NAME && DEFAULT === VALUES && nativeIterator && nativeIterator.name !== VALUES) {
      if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
        createNonEnumerableProperty(IterablePrototype, "name", VALUES);
      } else {
        INCORRECT_VALUES_NAME = true;
        defaultIterator = function values() {
          return call(nativeIterator, this);
        };
      }
    }
    if (DEFAULT) {
      methods = {
        values: getIterationMethod(VALUES),
        keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
        entries: getIterationMethod(ENTRIES)
      };
      if (FORCED)
        for (KEY in methods) {
          if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
            defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
          }
        }
      else
        $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
    }
    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
      defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
    }
    Iterators[NAME] = defaultIterator;
    return methods;
  };
});

// node_modules/core-js-pure/internals/create-iter-result-object.js
var require_create_iter_result_object = __commonJS((exports, module) => {
  module.exports = function(value, done) {
    return { value, done };
  };
});

// node_modules/core-js-pure/modules/es.array.iterator.js
var require_es_array_iterator = __commonJS((exports, module) => {
  var toIndexedObject = require_to_indexed_object();
  var addToUnscopables = require_add_to_unscopables();
  var Iterators = require_iterators();
  var InternalStateModule = require_internal_state();
  var defineProperty = require_object_define_property().f;
  var defineIterator = require_iterator_define();
  var createIterResultObject = require_create_iter_result_object();
  var IS_PURE = require_is_pure();
  var DESCRIPTORS = require_descriptors();
  var ARRAY_ITERATOR = "Array Iterator";
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
  module.exports = defineIterator(Array, "Array", function(iterated, kind) {
    setInternalState(this, {
      type: ARRAY_ITERATOR,
      target: toIndexedObject(iterated),
      index: 0,
      kind
    });
  }, function() {
    var state = getInternalState(this);
    var target = state.target;
    var kind = state.kind;
    var index = state.index++;
    if (!target || index >= target.length) {
      state.target = undefined;
      return createIterResultObject(undefined, true);
    }
    switch (kind) {
      case "keys":
        return createIterResultObject(index, false);
      case "values":
        return createIterResultObject(target[index], false);
    }
    return createIterResultObject([index, target[index]], false);
  }, "values");
  var values = Iterators.Arguments = Iterators.Array;
  addToUnscopables("keys");
  addToUnscopables("values");
  addToUnscopables("entries");
  if (!IS_PURE && DESCRIPTORS && values.name !== "values")
    try {
      defineProperty(values, "name", { value: "values" });
    } catch (error) {
    }
});

// node_modules/core-js-pure/internals/dom-iterables.js
var require_dom_iterables = __commonJS((exports, module) => {
  module.exports = {
    CSSRuleList: 0,
    CSSStyleDeclaration: 0,
    CSSValueList: 0,
    ClientRectList: 0,
    DOMRectList: 0,
    DOMStringList: 0,
    DOMTokenList: 1,
    DataTransferItemList: 0,
    FileList: 0,
    HTMLAllCollection: 0,
    HTMLCollection: 0,
    HTMLFormElement: 0,
    HTMLSelectElement: 0,
    MediaList: 0,
    MimeTypeArray: 0,
    NamedNodeMap: 0,
    NodeList: 1,
    PaintRequestList: 0,
    Plugin: 0,
    PluginArray: 0,
    SVGLengthList: 0,
    SVGNumberList: 0,
    SVGPathSegList: 0,
    SVGPointList: 0,
    SVGStringList: 0,
    SVGTransformList: 0,
    SourceBufferList: 0,
    StyleSheetList: 0,
    TextTrackCueList: 0,
    TextTrackList: 0,
    TouchList: 0
  };
});

// node_modules/core-js-pure/modules/web.dom-collections.iterator.js
var require_web_dom_collections_iterator = __commonJS(() => {
  require_es_array_iterator();
  var DOMIterables = require_dom_iterables();
  var global2 = require_global();
  var classof = require_classof();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var Iterators = require_iterators();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  for (COLLECTION_NAME in DOMIterables) {
    Collection = global2[COLLECTION_NAME];
    CollectionPrototype = Collection && Collection.prototype;
    if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    Iterators[COLLECTION_NAME] = Iterators.Array;
  }
  var Collection;
  var CollectionPrototype;
  var COLLECTION_NAME;
});

// node_modules/core-js-pure/stable/symbol/index.js
var require_symbol2 = __commonJS((exports, module) => {
  var parent = require_symbol();
  require_web_dom_collections_iterator();
  module.exports = parent;
});

// node_modules/core-js-pure/modules/esnext.function.metadata.js
var require_esnext_function_metadata = __commonJS(() => {
  var wellKnownSymbol = require_well_known_symbol();
  var defineProperty = require_object_define_property().f;
  var METADATA = wellKnownSymbol("metadata");
  var FunctionPrototype = Function.prototype;
  if (FunctionPrototype[METADATA] === undefined) {
    defineProperty(FunctionPrototype, METADATA, {
      value: null
    });
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
var require_esnext_symbol_async_dispose = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("asyncDispose");
});

// node_modules/core-js-pure/modules/esnext.symbol.dispose.js
var require_esnext_symbol_dispose = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("dispose");
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata.js
var require_esnext_symbol_metadata = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("metadata");
});

// node_modules/core-js-pure/actual/symbol/index.js
var require_symbol3 = __commonJS((exports, module) => {
  var parent = require_symbol2();
  require_esnext_function_metadata();
  require_esnext_symbol_async_dispose();
  require_esnext_symbol_dispose();
  require_esnext_symbol_metadata();
  module.exports = parent;
});

// node_modules/core-js-pure/internals/symbol-is-registered.js
var require_symbol_is_registered = __commonJS((exports, module) => {
  var getBuiltIn = require_get_built_in();
  var uncurryThis = require_function_uncurry_this();
  var Symbol2 = getBuiltIn("Symbol");
  var keyFor = Symbol2.keyFor;
  var thisSymbolValue = uncurryThis(Symbol2.prototype.valueOf);
  module.exports = Symbol2.isRegisteredSymbol || function isRegisteredSymbol(value) {
    try {
      return keyFor(thisSymbolValue(value)) !== undefined;
    } catch (error) {
      return false;
    }
  };
});

// node_modules/core-js-pure/modules/esnext.symbol.is-registered-symbol.js
var require_esnext_symbol_is_registered_symbol = __commonJS(() => {
  var $ = require_export();
  var isRegisteredSymbol = require_symbol_is_registered();
  $({ target: "Symbol", stat: true }, {
    isRegisteredSymbol
  });
});

// node_modules/core-js-pure/internals/symbol-is-well-known.js
var require_symbol_is_well_known = __commonJS((exports, module) => {
  var shared = require_shared();
  var getBuiltIn = require_get_built_in();
  var uncurryThis = require_function_uncurry_this();
  var isSymbol = require_is_symbol();
  var wellKnownSymbol = require_well_known_symbol();
  var Symbol2 = getBuiltIn("Symbol");
  var $isWellKnownSymbol = Symbol2.isWellKnownSymbol;
  var getOwnPropertyNames = getBuiltIn("Object", "getOwnPropertyNames");
  var thisSymbolValue = uncurryThis(Symbol2.prototype.valueOf);
  var WellKnownSymbolsStore = shared("wks");
  for (i = 0, symbolKeys = getOwnPropertyNames(Symbol2), symbolKeysLength = symbolKeys.length;i < symbolKeysLength; i++) {
    try {
      symbolKey = symbolKeys[i];
      if (isSymbol(Symbol2[symbolKey]))
        wellKnownSymbol(symbolKey);
    } catch (error) {
    }
  }
  var symbolKey;
  var i;
  var symbolKeys;
  var symbolKeysLength;
  module.exports = function isWellKnownSymbol(value) {
    if ($isWellKnownSymbol && $isWellKnownSymbol(value))
      return true;
    try {
      var symbol = thisSymbolValue(value);
      for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length;j < keysLength; j++) {
        if (WellKnownSymbolsStore[keys[j]] == symbol)
          return true;
      }
    } catch (error) {
    }
    return false;
  };
});

// node_modules/core-js-pure/modules/esnext.symbol.is-well-known-symbol.js
var require_esnext_symbol_is_well_known_symbol = __commonJS(() => {
  var $ = require_export();
  var isWellKnownSymbol = require_symbol_is_well_known();
  $({ target: "Symbol", stat: true, forced: true }, {
    isWellKnownSymbol
  });
});

// node_modules/core-js-pure/modules/esnext.symbol.matcher.js
var require_esnext_symbol_matcher = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("matcher");
});

// node_modules/core-js-pure/modules/esnext.symbol.observable.js
var require_esnext_symbol_observable = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("observable");
});

// node_modules/core-js-pure/modules/esnext.symbol.is-registered.js
var require_esnext_symbol_is_registered = __commonJS(() => {
  var $ = require_export();
  var isRegisteredSymbol = require_symbol_is_registered();
  $({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, {
    isRegistered: isRegisteredSymbol
  });
});

// node_modules/core-js-pure/modules/esnext.symbol.is-well-known.js
var require_esnext_symbol_is_well_known = __commonJS(() => {
  var $ = require_export();
  var isWellKnownSymbol = require_symbol_is_well_known();
  $({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, {
    isWellKnown: isWellKnownSymbol
  });
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js
var require_esnext_symbol_metadata_key = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("metadataKey");
});

// node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
var require_esnext_symbol_pattern_match = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("patternMatch");
});

// node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
var require_esnext_symbol_replace_all = __commonJS(() => {
  var defineWellKnownSymbol = require_well_known_symbol_define();
  defineWellKnownSymbol("replaceAll");
});

// node_modules/core-js-pure/full/symbol/index.js
var require_symbol4 = __commonJS((exports, module) => {
  var parent = require_symbol3();
  require_esnext_symbol_is_registered_symbol();
  require_esnext_symbol_is_well_known_symbol();
  require_esnext_symbol_matcher();
  require_esnext_symbol_observable();
  require_esnext_symbol_is_registered();
  require_esnext_symbol_is_well_known();
  require_esnext_symbol_metadata_key();
  require_esnext_symbol_pattern_match();
  require_esnext_symbol_replace_all();
  module.exports = parent;
});

// node_modules/core-js-pure/internals/string-multibyte.js
var require_string_multibyte = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var toIntegerOrInfinity = require_to_integer_or_infinity();
  var toString = require_to_string();
  var requireObjectCoercible = require_require_object_coercible();
  var charAt = uncurryThis("".charAt);
  var charCodeAt = uncurryThis("".charCodeAt);
  var stringSlice = uncurryThis("".slice);
  var createMethod = function(CONVERT_TO_STRING) {
    return function($this, pos) {
      var S = toString(requireObjectCoercible($this));
      var position = toIntegerOrInfinity(pos);
      var size = S.length;
      var first, second;
      if (position < 0 || position >= size)
        return CONVERT_TO_STRING ? "" : undefined;
      first = charCodeAt(S, position);
      return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
    };
  };
  module.exports = {
    codeAt: createMethod(false),
    charAt: createMethod(true)
  };
});

// node_modules/core-js-pure/modules/es.string.iterator.js
var require_es_string_iterator = __commonJS(() => {
  var charAt = require_string_multibyte().charAt;
  var toString = require_to_string();
  var InternalStateModule = require_internal_state();
  var defineIterator = require_iterator_define();
  var createIterResultObject = require_create_iter_result_object();
  var STRING_ITERATOR = "String Iterator";
  var setInternalState = InternalStateModule.set;
  var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
  defineIterator(String, "String", function(iterated) {
    setInternalState(this, {
      type: STRING_ITERATOR,
      string: toString(iterated),
      index: 0
    });
  }, function next() {
    var state = getInternalState(this);
    var string = state.string;
    var index = state.index;
    var point;
    if (index >= string.length)
      return createIterResultObject(undefined, true);
    point = charAt(string, index);
    state.index += point.length;
    return createIterResultObject(point, false);
  });
});

// node_modules/core-js-pure/es/symbol/iterator.js
var require_iterator = __commonJS((exports, module) => {
  require_es_array_iterator();
  init_es_object_to_string();
  require_es_string_iterator();
  require_es_symbol_iterator();
  var WrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
  module.exports = WrappedWellKnownSymbolModule.f("iterator");
});

// node_modules/core-js-pure/stable/symbol/iterator.js
var require_iterator2 = __commonJS((exports, module) => {
  var parent = require_iterator();
  require_web_dom_collections_iterator();
  module.exports = parent;
});

// node_modules/core-js-pure/actual/symbol/iterator.js
var require_iterator3 = __commonJS((exports, module) => {
  var parent = require_iterator2();
  module.exports = parent;
});

// node_modules/core-js-pure/full/symbol/iterator.js
var require_iterator4 = __commonJS((exports, module) => {
  var parent = require_iterator3();
  module.exports = parent;
});

// node_modules/@babel/runtime-corejs3/helpers/typeof.js
var require_typeof = __commonJS((exports, module) => {
  var _typeof = function(o) {
    return module.exports = _typeof = typeof _Symbol == "function" && typeof _Symbol$iterator == "symbol" ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && typeof _Symbol == "function" && o2.constructor === _Symbol && o2 !== _Symbol.prototype ? "symbol" : typeof o2;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
  };
  var _Symbol = require_symbol4();
  var _Symbol$iterator = require_iterator4();
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/core-js-pure/internals/freezing.js
var require_freezing = __commonJS((exports, module) => {
  var fails = require_fails();
  module.exports = !fails(function() {
    return Object.isExtensible(Object.preventExtensions({}));
  });
});

// node_modules/core-js-pure/internals/define-built-ins.js
var require_define_built_ins = __commonJS((exports, module) => {
  var defineBuiltIn = require_define_built_in();
  module.exports = function(target, src, options) {
    for (var key in src) {
      if (options && options.unsafe && target[key])
        target[key] = src[key];
      else
        defineBuiltIn(target, key, src[key], options);
    }
    return target;
  };
});

// node_modules/core-js-pure/internals/array-buffer-non-extensible.js
var require_array_buffer_non_extensible = __commonJS((exports, module) => {
  var fails = require_fails();
  module.exports = fails(function() {
    if (typeof ArrayBuffer == "function") {
      var buffer = new ArrayBuffer(8);
      if (Object.isExtensible(buffer))
        Object.defineProperty(buffer, "a", { value: 8 });
    }
  });
});

// node_modules/core-js-pure/internals/object-is-extensible.js
var require_object_is_extensible = __commonJS((exports, module) => {
  var fails = require_fails();
  var isObject = require_is_object();
  var classof = require_classof_raw();
  var ARRAY_BUFFER_NON_EXTENSIBLE = require_array_buffer_non_extensible();
  var $isExtensible = Object.isExtensible;
  var FAILS_ON_PRIMITIVES = fails(function() {
    $isExtensible(1);
  });
  module.exports = FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE ? function isExtensible(it) {
    if (!isObject(it))
      return false;
    if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) === "ArrayBuffer")
      return false;
    return $isExtensible ? $isExtensible(it) : true;
  } : $isExtensible;
});

// node_modules/core-js-pure/internals/internal-metadata.js
var require_internal_metadata = __commonJS((exports, module) => {
  var $ = require_export();
  var uncurryThis = require_function_uncurry_this();
  var hiddenKeys = require_hidden_keys();
  var isObject = require_is_object();
  var hasOwn = require_has_own_property();
  var defineProperty = require_object_define_property().f;
  var getOwnPropertyNamesModule = require_object_get_own_property_names();
  var getOwnPropertyNamesExternalModule = require_object_get_own_property_names_external();
  var isExtensible = require_object_is_extensible();
  var uid = require_uid();
  var FREEZING = require_freezing();
  var REQUIRED = false;
  var METADATA = uid("meta");
  var id = 0;
  var setMetadata = function(it) {
    defineProperty(it, METADATA, { value: {
      objectID: "O" + id++,
      weakData: {}
    } });
  };
  var fastKey = function(it, create) {
    if (!isObject(it))
      return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
    if (!hasOwn(it, METADATA)) {
      if (!isExtensible(it))
        return "F";
      if (!create)
        return "E";
      setMetadata(it);
    }
    return it[METADATA].objectID;
  };
  var getWeakData = function(it, create) {
    if (!hasOwn(it, METADATA)) {
      if (!isExtensible(it))
        return true;
      if (!create)
        return false;
      setMetadata(it);
    }
    return it[METADATA].weakData;
  };
  var onFreeze = function(it) {
    if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA))
      setMetadata(it);
    return it;
  };
  var enable = function() {
    meta.enable = function() {
    };
    REQUIRED = true;
    var getOwnPropertyNames = getOwnPropertyNamesModule.f;
    var splice = uncurryThis([].splice);
    var test = {};
    test[METADATA] = 1;
    if (getOwnPropertyNames(test).length) {
      getOwnPropertyNamesModule.f = function(it) {
        var result = getOwnPropertyNames(it);
        for (var i = 0, length = result.length;i < length; i++) {
          if (result[i] === METADATA) {
            splice(result, i, 1);
            break;
          }
        }
        return result;
      };
      $({ target: "Object", stat: true, forced: true }, {
        getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
      });
    }
  };
  var meta = module.exports = {
    enable,
    fastKey,
    getWeakData,
    onFreeze
  };
  hiddenKeys[METADATA] = true;
});

// node_modules/core-js-pure/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS((exports, module) => {
  var wellKnownSymbol = require_well_known_symbol();
  var Iterators = require_iterators();
  var ITERATOR = wellKnownSymbol("iterator");
  var ArrayPrototype = Array.prototype;
  module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
  };
});

// node_modules/core-js-pure/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS((exports, module) => {
  var classof = require_classof();
  var getMethod = require_get_method();
  var isNullOrUndefined = require_is_null_or_undefined();
  var Iterators = require_iterators();
  var wellKnownSymbol = require_well_known_symbol();
  var ITERATOR = wellKnownSymbol("iterator");
  module.exports = function(it) {
    if (!isNullOrUndefined(it))
      return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
  };
});

// node_modules/core-js-pure/internals/get-iterator.js
var require_get_iterator = __commonJS((exports, module) => {
  var call = require_function_call();
  var aCallable = require_a_callable();
  var anObject = require_an_object();
  var tryToString = require_try_to_string();
  var getIteratorMethod = require_get_iterator_method();
  var $TypeError = TypeError;
  module.exports = function(argument, usingIterator) {
    var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
    if (aCallable(iteratorMethod))
      return anObject(call(iteratorMethod, argument));
    throw $TypeError(tryToString(argument) + " is not iterable");
  };
});

// node_modules/core-js-pure/internals/iterator-close.js
var require_iterator_close = __commonJS((exports, module) => {
  var call = require_function_call();
  var anObject = require_an_object();
  var getMethod = require_get_method();
  module.exports = function(iterator, kind, value) {
    var innerResult, innerError;
    anObject(iterator);
    try {
      innerResult = getMethod(iterator, "return");
      if (!innerResult) {
        if (kind === "throw")
          throw value;
        return value;
      }
      innerResult = call(innerResult, iterator);
    } catch (error) {
      innerError = true;
      innerResult = error;
    }
    if (kind === "throw")
      throw value;
    if (innerError)
      throw innerResult;
    anObject(innerResult);
    return value;
  };
});

// node_modules/core-js-pure/internals/iterate.js
var require_iterate = __commonJS((exports, module) => {
  var bind = require_function_bind_context();
  var call = require_function_call();
  var anObject = require_an_object();
  var tryToString = require_try_to_string();
  var isArrayIteratorMethod = require_is_array_iterator_method();
  var lengthOfArrayLike = require_length_of_array_like();
  var isPrototypeOf = require_object_is_prototype_of();
  var getIterator = require_get_iterator();
  var getIteratorMethod = require_get_iterator_method();
  var iteratorClose = require_iterator_close();
  var $TypeError = TypeError;
  var Result = function(stopped, result) {
    this.stopped = stopped;
    this.result = result;
  };
  var ResultPrototype = Result.prototype;
  module.exports = function(iterable, unboundFunction, options) {
    var that = options && options.that;
    var AS_ENTRIES = !!(options && options.AS_ENTRIES);
    var IS_RECORD = !!(options && options.IS_RECORD);
    var IS_ITERATOR = !!(options && options.IS_ITERATOR);
    var INTERRUPTED = !!(options && options.INTERRUPTED);
    var fn = bind(unboundFunction, that);
    var iterator, iterFn, index, length, result, next, step;
    var stop = function(condition) {
      if (iterator)
        iteratorClose(iterator, "normal", condition);
      return new Result(true, condition);
    };
    var callFn = function(value) {
      if (AS_ENTRIES) {
        anObject(value);
        return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
      }
      return INTERRUPTED ? fn(value, stop) : fn(value);
    };
    if (IS_RECORD) {
      iterator = iterable.iterator;
    } else if (IS_ITERATOR) {
      iterator = iterable;
    } else {
      iterFn = getIteratorMethod(iterable);
      if (!iterFn)
        throw $TypeError(tryToString(iterable) + " is not iterable");
      if (isArrayIteratorMethod(iterFn)) {
        for (index = 0, length = lengthOfArrayLike(iterable);length > index; index++) {
          result = callFn(iterable[index]);
          if (result && isPrototypeOf(ResultPrototype, result))
            return result;
        }
        return new Result(false);
      }
      iterator = getIterator(iterable, iterFn);
    }
    next = IS_RECORD ? iterable.next : iterator.next;
    while (!(step = call(next, iterator)).done) {
      try {
        result = callFn(step.value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
      if (typeof result == "object" && result && isPrototypeOf(ResultPrototype, result))
        return result;
    }
    return new Result(false);
  };
});

// node_modules/core-js-pure/internals/an-instance.js
var require_an_instance = __commonJS((exports, module) => {
  var isPrototypeOf = require_object_is_prototype_of();
  var $TypeError = TypeError;
  module.exports = function(it, Prototype) {
    if (isPrototypeOf(Prototype, it))
      return it;
    throw $TypeError("Incorrect invocation");
  };
});

// node_modules/core-js-pure/internals/collection.js
var require_collection = __commonJS((exports, module) => {
  var $ = require_export();
  var global2 = require_global();
  var InternalMetadataModule = require_internal_metadata();
  var fails = require_fails();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var iterate = require_iterate();
  var anInstance = require_an_instance();
  var isCallable = require_is_callable();
  var isObject = require_is_object();
  var isNullOrUndefined = require_is_null_or_undefined();
  var setToStringTag = require_set_to_string_tag();
  var defineProperty = require_object_define_property().f;
  var forEach = require_array_iteration().forEach;
  var DESCRIPTORS = require_descriptors();
  var InternalStateModule = require_internal_state();
  var setInternalState = InternalStateModule.set;
  var internalStateGetterFor = InternalStateModule.getterFor;
  module.exports = function(CONSTRUCTOR_NAME, wrapper, common) {
    var IS_MAP = CONSTRUCTOR_NAME.indexOf("Map") !== -1;
    var IS_WEAK = CONSTRUCTOR_NAME.indexOf("Weak") !== -1;
    var ADDER = IS_MAP ? "set" : "add";
    var NativeConstructor = global2[CONSTRUCTOR_NAME];
    var NativePrototype = NativeConstructor && NativeConstructor.prototype;
    var exported = {};
    var Constructor;
    if (!DESCRIPTORS || !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function() {
      new NativeConstructor().entries().next();
    }))) {
      Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
      InternalMetadataModule.enable();
    } else {
      Constructor = wrapper(function(target, iterable) {
        setInternalState(anInstance(target, Prototype), {
          type: CONSTRUCTOR_NAME,
          collection: new NativeConstructor
        });
        if (!isNullOrUndefined(iterable))
          iterate(iterable, target[ADDER], { that: target, AS_ENTRIES: IS_MAP });
      });
      var Prototype = Constructor.prototype;
      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
      forEach(["add", "clear", "delete", "forEach", "get", "has", "set", "keys", "values", "entries"], function(KEY) {
        var IS_ADDER = KEY === "add" || KEY === "set";
        if ((KEY in NativePrototype) && !(IS_WEAK && KEY === "clear")) {
          createNonEnumerableProperty(Prototype, KEY, function(a, b) {
            var collection = getInternalState(this).collection;
            if (!IS_ADDER && IS_WEAK && !isObject(a))
              return KEY === "get" ? undefined : false;
            var result = collection[KEY](a === 0 ? 0 : a, b);
            return IS_ADDER ? this : result;
          });
        }
      });
      IS_WEAK || defineProperty(Prototype, "size", {
        configurable: true,
        get: function() {
          return getInternalState(this).collection.size;
        }
      });
    }
    setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);
    exported[CONSTRUCTOR_NAME] = Constructor;
    $({ global: true, forced: true }, exported);
    if (!IS_WEAK)
      common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
    return Constructor;
  };
});

// node_modules/core-js-pure/internals/collection-weak.js
var require_collection_weak = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var defineBuiltIns = require_define_built_ins();
  var getWeakData = require_internal_metadata().getWeakData;
  var anInstance = require_an_instance();
  var anObject = require_an_object();
  var isNullOrUndefined = require_is_null_or_undefined();
  var isObject = require_is_object();
  var iterate = require_iterate();
  var ArrayIterationModule = require_array_iteration();
  var hasOwn = require_has_own_property();
  var InternalStateModule = require_internal_state();
  var setInternalState = InternalStateModule.set;
  var internalStateGetterFor = InternalStateModule.getterFor;
  var find = ArrayIterationModule.find;
  var findIndex = ArrayIterationModule.findIndex;
  var splice = uncurryThis([].splice);
  var id = 0;
  var uncaughtFrozenStore = function(state) {
    return state.frozen || (state.frozen = new UncaughtFrozenStore);
  };
  var UncaughtFrozenStore = function() {
    this.entries = [];
  };
  var findUncaughtFrozen = function(store, key) {
    return find(store.entries, function(it) {
      return it[0] === key;
    });
  };
  UncaughtFrozenStore.prototype = {
    get: function(key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry)
        return entry[1];
    },
    has: function(key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function(key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry)
        entry[1] = value;
      else
        this.entries.push([key, value]);
    },
    delete: function(key) {
      var index = findIndex(this.entries, function(it) {
        return it[0] === key;
      });
      if (~index)
        splice(this.entries, index, 1);
      return !!~index;
    }
  };
  module.exports = {
    getConstructor: function(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
      var Constructor = wrapper(function(that, iterable) {
        anInstance(that, Prototype);
        setInternalState(that, {
          type: CONSTRUCTOR_NAME,
          id: id++,
          frozen: undefined
        });
        if (!isNullOrUndefined(iterable))
          iterate(iterable, that[ADDER], { that, AS_ENTRIES: IS_MAP });
      });
      var Prototype = Constructor.prototype;
      var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);
      var define2 = function(that, key, value) {
        var state = getInternalState(that);
        var data = getWeakData(anObject(key), true);
        if (data === true)
          uncaughtFrozenStore(state).set(key, value);
        else
          data[state.id] = value;
        return that;
      };
      defineBuiltIns(Prototype, {
        delete: function(key) {
          var state = getInternalState(this);
          if (!isObject(key))
            return false;
          var data = getWeakData(key);
          if (data === true)
            return uncaughtFrozenStore(state)["delete"](key);
          return data && hasOwn(data, state.id) && delete data[state.id];
        },
        has: function has(key) {
          var state = getInternalState(this);
          if (!isObject(key))
            return false;
          var data = getWeakData(key);
          if (data === true)
            return uncaughtFrozenStore(state).has(key);
          return data && hasOwn(data, state.id);
        }
      });
      defineBuiltIns(Prototype, IS_MAP ? {
        get: function get(key) {
          var state = getInternalState(this);
          if (isObject(key)) {
            var data = getWeakData(key);
            if (data === true)
              return uncaughtFrozenStore(state).get(key);
            return data ? data[state.id] : undefined;
          }
        },
        set: function set(key, value) {
          return define2(this, key, value);
        }
      } : {
        add: function add(value) {
          return define2(this, value, true);
        }
      });
      return Constructor;
    }
  };
});

// node_modules/core-js-pure/modules/es.weak-map.constructor.js
var require_es_weak_map_constructor = __commonJS(() => {
  var FREEZING = require_freezing();
  var global2 = require_global();
  var uncurryThis = require_function_uncurry_this();
  var defineBuiltIns = require_define_built_ins();
  var InternalMetadataModule = require_internal_metadata();
  var collection = require_collection();
  var collectionWeak = require_collection_weak();
  var isObject = require_is_object();
  var enforceInternalState = require_internal_state().enforce;
  var fails = require_fails();
  var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
  var $Object = Object;
  var isArray = Array.isArray;
  var isExtensible = $Object.isExtensible;
  var isFrozen = $Object.isFrozen;
  var isSealed = $Object.isSealed;
  var freeze = $Object.freeze;
  var seal = $Object.seal;
  var FROZEN = {};
  var SEALED = {};
  var IS_IE11 = !global2.ActiveXObject && ("ActiveXObject" in global2);
  var InternalWeakMap;
  var wrapper = function(init) {
    return function WeakMap() {
      return init(this, arguments.length ? arguments[0] : undefined);
    };
  };
  var $WeakMap = collection("WeakMap", wrapper, collectionWeak);
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeSet = uncurryThis(WeakMapPrototype.set);
  var hasMSEdgeFreezingBug = function() {
    return FREEZING && fails(function() {
      var frozenArray = freeze([]);
      nativeSet(new $WeakMap, frozenArray, 1);
      return !isFrozen(frozenArray);
    });
  };
  if (NATIVE_WEAK_MAP) {
    if (IS_IE11) {
      InternalWeakMap = collectionWeak.getConstructor(wrapper, "WeakMap", true);
      InternalMetadataModule.enable();
      nativeDelete = uncurryThis(WeakMapPrototype["delete"]);
      nativeHas = uncurryThis(WeakMapPrototype.has);
      nativeGet = uncurryThis(WeakMapPrototype.get);
      defineBuiltIns(WeakMapPrototype, {
        delete: function(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap;
            return nativeDelete(this, key) || state.frozen["delete"](key);
          }
          return nativeDelete(this, key);
        },
        has: function has(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap;
            return nativeHas(this, key) || state.frozen.has(key);
          }
          return nativeHas(this, key);
        },
        get: function get(key) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap;
            return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
          }
          return nativeGet(this, key);
        },
        set: function set(key, value) {
          if (isObject(key) && !isExtensible(key)) {
            var state = enforceInternalState(this);
            if (!state.frozen)
              state.frozen = new InternalWeakMap;
            nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
          } else
            nativeSet(this, key, value);
          return this;
        }
      });
    } else if (hasMSEdgeFreezingBug()) {
      defineBuiltIns(WeakMapPrototype, {
        set: function set(key, value) {
          var arrayIntegrityLevel;
          if (isArray(key)) {
            if (isFrozen(key))
              arrayIntegrityLevel = FROZEN;
            else if (isSealed(key))
              arrayIntegrityLevel = SEALED;
          }
          nativeSet(this, key, value);
          if (arrayIntegrityLevel === FROZEN)
            freeze(key);
          if (arrayIntegrityLevel === SEALED)
            seal(key);
          return this;
        }
      });
    }
  }
  var nativeDelete;
  var nativeHas;
  var nativeGet;
});

// node_modules/core-js-pure/modules/es.weak-map.js
var require_es_weak_map = __commonJS(() => {
  require_es_weak_map_constructor();
});

// node_modules/core-js-pure/es/weak-map/index.js
var require_weak_map = __commonJS((exports, module) => {
  require_es_array_iterator();
  init_es_object_to_string();
  require_es_weak_map();
  var path = require_path();
  module.exports = path.WeakMap;
});

// node_modules/core-js-pure/stable/weak-map/index.js
var require_weak_map2 = __commonJS((exports, module) => {
  var parent = require_weak_map();
  require_web_dom_collections_iterator();
  module.exports = parent;
});

// node_modules/core-js-pure/actual/weak-map/index.js
var require_weak_map3 = __commonJS((exports, module) => {
  var parent = require_weak_map2();
  module.exports = parent;
});

// node_modules/core-js-pure/internals/a-weak-map.js
var require_a_weak_map = __commonJS((exports, module) => {
  var tryToString = require_try_to_string();
  module.exports = function(it) {
    if (typeof it == "object" && ("has" in it) && ("get" in it) && ("set" in it) && "delete")
      return it;
    throw TypeError(tryToString(it) + " is not a weakmap");
  };
});

// node_modules/core-js-pure/internals/caller.js
var require_caller = __commonJS((exports, module) => {
  module.exports = function(methodName, numArgs) {
    return numArgs === 1 ? function(object, arg) {
      return object[methodName](arg);
    } : function(object, arg1, arg2) {
      return object[methodName](arg1, arg2);
    };
  };
});

// node_modules/core-js-pure/internals/weak-map-helpers.js
var require_weak_map_helpers = __commonJS((exports, module) => {
  var getBuiltIn = require_get_built_in();
  var caller = require_caller();
  module.exports = {
    WeakMap: getBuiltIn("WeakMap"),
    set: caller("set", 2),
    get: caller("get", 1),
    has: caller("has", 1),
    remove: caller("delete", 1)
  };
});

// node_modules/core-js-pure/modules/esnext.weak-map.emplace.js
var require_esnext_weak_map_emplace = __commonJS(() => {
  var $ = require_export();
  var aWeakMap = require_a_weak_map();
  var WeakMapHelpers = require_weak_map_helpers();
  var get = WeakMapHelpers.get;
  var has = WeakMapHelpers.has;
  var set = WeakMapHelpers.set;
  $({ target: "WeakMap", proto: true, real: true, forced: true }, {
    emplace: function emplace(key, handler) {
      var map = aWeakMap(this);
      var value, inserted;
      if (has(map, key)) {
        value = get(map, key);
        if ("update" in handler) {
          value = handler.update(value, key, map);
          set(map, key, value);
        }
        return value;
      }
      inserted = handler.insert(key, map);
      set(map, key, inserted);
      return inserted;
    }
  });
});

// node_modules/core-js-pure/internals/a-constructor.js
var require_a_constructor = __commonJS((exports, module) => {
  var isConstructor = require_is_constructor();
  var tryToString = require_try_to_string();
  var $TypeError = TypeError;
  module.exports = function(argument) {
    if (isConstructor(argument))
      return argument;
    throw $TypeError(tryToString(argument) + " is not a constructor");
  };
});

// node_modules/core-js-pure/internals/collection-from.js
var require_collection_from = __commonJS((exports, module) => {
  var bind = require_function_bind_context();
  var call = require_function_call();
  var aCallable = require_a_callable();
  var aConstructor = require_a_constructor();
  var isNullOrUndefined = require_is_null_or_undefined();
  var iterate = require_iterate();
  var push = [].push;
  module.exports = function from(source) {
    var length = arguments.length;
    var mapFn = length > 1 ? arguments[1] : undefined;
    var mapping, array, n, boundFunction;
    aConstructor(this);
    mapping = mapFn !== undefined;
    if (mapping)
      aCallable(mapFn);
    if (isNullOrUndefined(source))
      return new this;
    array = [];
    if (mapping) {
      n = 0;
      boundFunction = bind(mapFn, length > 2 ? arguments[2] : undefined);
      iterate(source, function(nextItem) {
        call(push, array, boundFunction(nextItem, n++));
      });
    } else {
      iterate(source, push, { that: array });
    }
    return new this(array);
  };
});

// node_modules/core-js-pure/modules/esnext.weak-map.from.js
var require_esnext_weak_map_from = __commonJS(() => {
  var $ = require_export();
  var from = require_collection_from();
  $({ target: "WeakMap", stat: true, forced: true }, {
    from
  });
});

// node_modules/core-js-pure/internals/collection-of.js
var require_collection_of = __commonJS((exports, module) => {
  var arraySlice = require_array_slice();
  module.exports = function of() {
    return new this(arraySlice(arguments));
  };
});

// node_modules/core-js-pure/modules/esnext.weak-map.of.js
var require_esnext_weak_map_of = __commonJS(() => {
  var $ = require_export();
  var of = require_collection_of();
  $({ target: "WeakMap", stat: true, forced: true }, {
    of
  });
});

// node_modules/core-js-pure/modules/esnext.weak-map.delete-all.js
var require_esnext_weak_map_delete_all = __commonJS(() => {
  var $ = require_export();
  var aWeakMap = require_a_weak_map();
  var remove = require_weak_map_helpers().remove;
  $({ target: "WeakMap", proto: true, real: true, forced: true }, {
    deleteAll: function deleteAll() {
      var collection = aWeakMap(this);
      var allDeleted = true;
      var wasDeleted;
      for (var k = 0, len = arguments.length;k < len; k++) {
        wasDeleted = remove(collection, arguments[k]);
        allDeleted = allDeleted && wasDeleted;
      }
      return !!allDeleted;
    }
  });
});

// node_modules/core-js-pure/internals/map-upsert.js
var require_map_upsert = __commonJS((exports, module) => {
  var call = require_function_call();
  var aCallable = require_a_callable();
  var isCallable = require_is_callable();
  var anObject = require_an_object();
  var $TypeError = TypeError;
  module.exports = function upsert(key, updateFn) {
    var map = anObject(this);
    var get = aCallable(map.get);
    var has = aCallable(map.has);
    var set = aCallable(map.set);
    var insertFn = arguments.length > 2 ? arguments[2] : undefined;
    var value;
    if (!isCallable(updateFn) && !isCallable(insertFn)) {
      throw $TypeError("At least one callback required");
    }
    if (call(has, map, key)) {
      value = call(get, map, key);
      if (isCallable(updateFn)) {
        value = updateFn(value);
        call(set, map, key, value);
      }
    } else if (isCallable(insertFn)) {
      value = insertFn();
      call(set, map, key, value);
    }
    return value;
  };
});

// node_modules/core-js-pure/modules/esnext.weak-map.upsert.js
var require_esnext_weak_map_upsert = __commonJS(() => {
  var $ = require_export();
  var upsert = require_map_upsert();
  $({ target: "WeakMap", proto: true, real: true, forced: true }, {
    upsert
  });
});

// node_modules/core-js-pure/full/weak-map/index.js
var require_weak_map4 = __commonJS((exports, module) => {
  var parent = require_weak_map3();
  require_es_string_iterator();
  require_esnext_weak_map_emplace();
  require_esnext_weak_map_from();
  require_esnext_weak_map_of();
  require_esnext_weak_map_delete_all();
  require_esnext_weak_map_upsert();
  module.exports = parent;
});

// node_modules/core-js-pure/modules/es.object.define-property.js
var require_es_object_define_property = __commonJS(() => {
  var $ = require_export();
  var DESCRIPTORS = require_descriptors();
  var defineProperty = require_object_define_property().f;
  $({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
    defineProperty
  });
});

// node_modules/core-js-pure/es/object/define-property.js
var require_define_property = __commonJS((exports, module) => {
  require_es_object_define_property();
  var path = require_path();
  var Object2 = path.Object;
  var defineProperty = module.exports = function defineProperty(it, key, desc) {
    return Object2.defineProperty(it, key, desc);
  };
  if (Object2.defineProperty.sham)
    defineProperty.sham = true;
});

// node_modules/core-js-pure/stable/object/define-property.js
var require_define_property2 = __commonJS((exports, module) => {
  var parent = require_define_property();
  module.exports = parent;
});

// node_modules/core-js-pure/actual/object/define-property.js
var require_define_property3 = __commonJS((exports, module) => {
  var parent = require_define_property2();
  module.exports = parent;
});

// node_modules/core-js-pure/full/object/define-property.js
var require_define_property4 = __commonJS((exports, module) => {
  var parent = require_define_property3();
  module.exports = parent;
});

// node_modules/core-js-pure/modules/es.object.get-own-property-descriptor.js
var require_es_object_get_own_property_descriptor = __commonJS(() => {
  var $ = require_export();
  var fails = require_fails();
  var toIndexedObject = require_to_indexed_object();
  var nativeGetOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
  var DESCRIPTORS = require_descriptors();
  var FORCED = !DESCRIPTORS || fails(function() {
    nativeGetOwnPropertyDescriptor(1);
  });
  $({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
      return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
    }
  });
});

// node_modules/core-js-pure/es/object/get-own-property-descriptor.js
var require_get_own_property_descriptor = __commonJS((exports, module) => {
  require_es_object_get_own_property_descriptor();
  var path = require_path();
  var Object2 = path.Object;
  var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {
    return Object2.getOwnPropertyDescriptor(it, key);
  };
  if (Object2.getOwnPropertyDescriptor.sham)
    getOwnPropertyDescriptor.sham = true;
});

// node_modules/core-js-pure/stable/object/get-own-property-descriptor.js
var require_get_own_property_descriptor2 = __commonJS((exports, module) => {
  var parent = require_get_own_property_descriptor();
  module.exports = parent;
});

// node_modules/core-js-pure/actual/object/get-own-property-descriptor.js
var require_get_own_property_descriptor3 = __commonJS((exports, module) => {
  var parent = require_get_own_property_descriptor2();
  module.exports = parent;
});

// node_modules/core-js-pure/full/object/get-own-property-descriptor.js
var require_get_own_property_descriptor4 = __commonJS((exports, module) => {
  var parent = require_get_own_property_descriptor3();
  module.exports = parent;
});

// node_modules/@babel/runtime-corejs3/helpers/interopRequireWildcard.js
var require_interopRequireWildcard = __commonJS((exports, module) => {
  var _getRequireWildcardCache = function(nodeInterop) {
    if (typeof _WeakMap !== "function")
      return null;
    var cacheBabelInterop = new _WeakMap;
    var cacheNodeInterop = new _WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  };
  var _interopRequireWildcard = function(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {
        default: obj
      };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          _Object$defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  };
  var _typeof = require_typeof()["default"];
  var _WeakMap = require_weak_map4();
  var _Object$defineProperty = require_define_property4();
  var _Object$getOwnPropertyDescriptor = require_get_own_property_descriptor4();
  module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS((exports, module) => {
  module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS((exports, module) => {
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = require_shams();
  module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS((exports, module) => {
  var test = {
    foo: {}
  };
  var $Object = Object;
  module.exports = function hasProto() {
    return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
  };
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = "[object Function]";
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0;i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports, module) => {
  var implementation = require_implementation();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/has/src/index.js
var require_src = __commonJS((exports, module) => {
  var bind = require_function_bind();
  module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS((exports, module) => {
  var undefined2;
  var $SyntaxError = SyntaxError;
  var $Function = Function;
  var $TypeError = TypeError;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD = Object.getOwnPropertyDescriptor;
  if ($gOPD) {
    try {
      $gOPD({}, "");
    } catch (e) {
      $gOPD = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError;
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = require_has_symbols()();
  var hasProto = require_has_proto()();
  var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
  var INTRINSICS = {
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
    "%AsyncFromSyncIteratorPrototype%": undefined2,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": Error,
    "%eval%": eval,
    "%EvalError%": EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
    "%JSON%": typeof JSON === "object" ? JSON : undefined2,
    "%Map%": typeof Map === "undefined" ? undefined2 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
    "%RangeError%": RangeError,
    "%ReferenceError%": ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined2 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
    "%Symbol%": hasSymbols ? Symbol : undefined2,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
    "%URIError%": URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var errorProto;
  var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn = doEval("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = require_function_bind();
  var hasOwn = require_src();
  var $concat = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
  };
  module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true;i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && ("get" in desc) && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS((exports, module) => {
  var bind = require_function_bind();
  var GetIntrinsic = require_get_intrinsic();
  var $apply = GetIntrinsic("%Function.prototype.apply%");
  var $call = GetIntrinsic("%Function.prototype.call%");
  var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
  var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
  var $max = GetIntrinsic("%Math.max%");
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = null;
    }
  }
  module.exports = function callBind(originalFunction) {
    var func = $reflectApply(bind, $call, arguments);
    if ($gOPD && $defineProperty) {
      var desc = $gOPD(func, "length");
      if (desc.configurable) {
        $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
      }
    }
    return func;
  };
  var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
  };
  if ($defineProperty) {
    $defineProperty(module.exports, "apply", { value: applyBind });
  } else {
    module.exports.apply = applyBind;
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBind = require_call_bind();
  var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
  module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
});

// node_modules/object-inspect/util.inspect.js
var require_util_inspect = __commonJS((exports, module) => {
  module.exports = __require("util").inspect;
});

// node_modules/object-inspect/index.js
var require_object_inspect = __commonJS((exports, module) => {
  var addNumericSeparator = function(num, str) {
    if (num === Infinity || num === (-Infinity) || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  };
  var wrapQuotes = function(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
  };
  var quote = function(s) {
    return $replace.call(String(s), /"/g, "&quot;");
  };
  var isArray = function(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isDate = function(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isRegExp = function(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isError = function(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isString = function(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isNumber = function(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isBoolean = function(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && (toStringTag in obj)));
  };
  var isSymbol = function(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  };
  var isBigInt = function(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  };
  var has = function(obj, key) {
    return hasOwn.call(obj, key);
  };
  var toStr = function(obj) {
    return objectToString.call(obj);
  };
  var nameOf = function(f) {
    if (f.name) {
      return f.name;
    }
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) {
      return m[1];
    }
    return null;
  };
  var indexOf = function(xs, x) {
    if (xs.indexOf) {
      return xs.indexOf(x);
    }
    for (var i = 0, l = xs.length;i < l; i++) {
      if (xs[i] === x) {
        return i;
      }
    }
    return -1;
  };
  var isMap = function(x) {
    if (!mapSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      mapSize.call(x);
      try {
        setSize.call(x);
      } catch (s) {
        return true;
      }
      return x instanceof Map;
    } catch (e) {
    }
    return false;
  };
  var isWeakMap = function(x) {
    if (!weakMapHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x, weakMapHas);
      try {
        weakSetHas.call(x, weakSetHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakMap;
    } catch (e) {
    }
    return false;
  };
  var isWeakRef = function(x) {
    if (!weakRefDeref || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x);
      return true;
    } catch (e) {
    }
    return false;
  };
  var isSet = function(x) {
    if (!setSize || !x || typeof x !== "object") {
      return false;
    }
    try {
      setSize.call(x);
      try {
        mapSize.call(x);
      } catch (m) {
        return true;
      }
      return x instanceof Set;
    } catch (e) {
    }
    return false;
  };
  var isWeakSet = function(x) {
    if (!weakSetHas || !x || typeof x !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x, weakSetHas);
      try {
        weakMapHas.call(x, weakMapHas);
      } catch (s) {
        return true;
      }
      return x instanceof WeakSet;
    } catch (e) {
    }
    return false;
  };
  var isElement = function(x) {
    if (!x || typeof x !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) {
      return true;
    }
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
  };
  var inspectString = function(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
  };
  var lowbyte = function(c) {
    var n = c.charCodeAt(0);
    var x = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n];
    if (x) {
      return "\\" + x;
    }
    return "\\x" + (n < 16 ? "0" : "") + $toUpperCase.call(n.toString(16));
  };
  var markBoxed = function(str) {
    return "Object(" + str + ")";
  };
  var weakCollectionOf = function(type) {
    return type + " { ? }";
  };
  var collectionOf = function(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
  };
  var singleLineValues = function(xs) {
    for (var i = 0;i < xs.length; i++) {
      if (indexOf(xs[i], "\n") >= 0) {
        return false;
      }
    }
    return true;
  };
  var getIndent = function(opts, depth) {
    var baseIndent;
    if (opts.indent === "\t") {
      baseIndent = "\t";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  };
  var indentedJoin = function(xs, indent) {
    if (xs.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
  };
  var arrObjKeys = function(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
      xs.length = obj.length;
      for (var i = 0;i < obj.length; i++) {
        xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0;k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
      } else {
        xs.push(key + ": " + inspect(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j = 0;j < syms.length; j++) {
        if (isEnumerable.call(obj, syms[j])) {
          xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
        }
      }
    }
    return xs;
  };
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O) {
    return O.__proto__;
  } : null);
  var utilInspect = require_util_inspect();
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError('option "customInspect", if provided, must be `true`, `false`, or `\'symbol\'`');
    }
    if (has(opts, "indent") && opts.indent !== null && opts.indent !== "\t" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
      var name = nameOf(obj);
      var keys = arrObjKeys(obj, inspect);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs = obj.attributes || [];
      for (var i = 0;i < attrs.length; i++) {
        s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
      }
      s += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s += "...";
      }
      s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s;
    }
    if (isArray(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs = arrObjKeys(obj, inspect);
      if (indent && !singleLineValues(xs)) {
        return "[" + indentedJoin(xs, indent) + "]";
      }
      return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect);
      if (!("cause" in Error.prototype) && ("cause" in obj) && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value) {
          setParts.push(inspect(value, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
      return markBoxed(inspect(String(obj)));
    }
    if (!isDate(obj) && !isRegExp(obj)) {
      var ys = arrObjKeys(obj, inspect);
      var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && (toStringTag in obj) ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
      if (ys.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys, indent) + "}";
      }
      return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
  };
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
});

// node_modules/side-channel/index.js
var require_side_channel = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var callBound = require_callBound();
  var inspect = require_object_inspect();
  var $TypeError = GetIntrinsic("%TypeError%");
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $Map = GetIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    for (var prev = list, curr;(curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value;
    } else {
      objects.next = {
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  module.exports = function getSideChannel() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      get: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            return listGet($o, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            return listHas($o, key);
          }
        }
        return false;
      },
      set: function(key, value) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap;
          }
          $weakMapSet($wm, key, value);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map;
          }
          $mapSet($m, key, value);
        } else {
          if (!$o) {
            $o = { key: {}, next: null };
          }
          listSet($o, key, value);
        }
      }
    };
    return channel;
  };
});

// node_modules/qs/lib/formats.js
var require_formats = __commonJS((exports, module) => {
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  module.exports = {
    default: Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
});

// node_modules/qs/lib/utils.js
var require_utils = __commonJS((exports, module) => {
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i = 0;i < 256; ++i) {
      array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray(obj)) {
        var compacted = [];
        for (var j = 0;j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0;i < source.length; ++i) {
      if (typeof source[i] !== "undefined") {
        obj[i] = source[i];
      }
    }
    return obj;
  };
  var merge = function merge(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
      source.forEach(function(item, i) {
        if (has.call(target, i)) {
          var targetItem = target[i];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i] = merge(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has.call(acc, key)) {
        acc[key] = merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var encode = function encode(str, defaultEncoder, charset, kind, format) {
    if (str.length === 0) {
      return str;
    }
    var string = str;
    if (typeof str === "symbol") {
      string = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var i = 0;i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || format === formats.RFC1738 && (c === 40 || c === 41)) {
        out += string.charAt(i);
        continue;
      }
      if (c < 128) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 2048) {
        out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
        continue;
      }
      if (c < 55296 || c >= 57344) {
        out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
        continue;
      }
      i += 1;
      c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
      out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
    }
    return out;
  };
  var compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: "o" }];
    var refs = [];
    for (var i = 0;i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);
      for (var j = 0;j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({ obj, prop: key });
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine(a, b) {
    return [].concat(a, b);
  };
  var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
      var mapped = [];
      for (var i = 0;i < val.length; i += 1) {
        mapped.push(fn(val[i]));
      }
      return mapped;
    }
    return fn(val);
  };
  module.exports = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
});

// node_modules/qs/lib/stringify.js
var require_stringify2 = __commonJS((exports, module) => {
  var getSideChannel = require_side_channel();
  var utils = require_utils();
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray = Array.isArray;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats["default"];
  var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
  };
  var sentinel = {};
  var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== undefined && !findFlag) {
      var pos = tmpSc.get(object);
      step += 1;
      if (typeof pos !== "undefined") {
        if (pos === step) {
          throw new RangeError("Cyclic object value");
        } else {
          findFlag = true;
        }
      }
      if (typeof tmpSc.get(sentinel) === "undefined") {
        step = 0;
      }
    }
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray(obj)) {
      obj = utils.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray(obj)) {
      if (encodeValuesOnly && encoder) {
        obj = utils.maybeMap(obj, encoder);
      }
      objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : undefined }];
    } else if (isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }
    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? prefix + "[]" : prefix;
    for (var j = 0;j < objKeys.length; ++j) {
      var key = objKeys[j];
      var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
      if (skipNulls && value === null) {
        continue;
      }
      var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, key) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + key : "[" + key + "]");
      sideChannel.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel);
      pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, strictNullHandling, skipNulls, generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format = formats["default"];
    if (typeof opts.format !== "undefined") {
      if (!has.call(formats.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) {
      filter = opts.filter;
    }
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
      filter,
      format,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var arrayFormat;
    if (opts && (opts.arrayFormat in arrayPrefixGenerators)) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && ("indices" in opts)) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = "indices";
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (opts && ("commaRoundTrip" in opts) && typeof opts.commaRoundTrip !== "boolean") {
      throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    }
    var commaRoundTrip = generateArrayPrefix === "comma" && opts && opts.commaRoundTrip;
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    var sideChannel = getSideChannel();
    for (var i = 0;i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
});

// node_modules/qs/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  var utils = require_utils();
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = { __proto__: null };
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i = 0;i < parts.length; ++i) {
        if (parts[i].indexOf("utf8=") === 0) {
          if (parts[i] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i;
          i = parts.length;
        }
      }
    }
    for (i = 0;i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }
      var part = parts[i];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
        val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
          return options.decoder(encodedVal, defaults.decoder, charset, "value");
        });
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray(val) ? [val] : val;
      }
      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for (var i = chain.length - 1;i >= 0; --i) {
      var obj;
      var root = chain[i];
      if (root === "[]" && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (!options.parseArrays && cleanRoot === "") {
          obj = { 0: leaf };
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else if (cleanRoot !== "__proto__") {
          obj[cleanRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(parent);
    }
    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      keys.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);
    for (var i = 0;i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
      obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) {
      return obj;
    }
    return utils.compact(obj);
  };
});

// node_modules/qs/lib/index.js
var require_lib3 = __commonJS((exports, module) => {
  var stringify = require_stringify2();
  var parse = require_parse();
  var formats = require_formats();
  module.exports = {
    formats,
    parse,
    stringify
  };
});

// node_modules/js-yaml/lib/common.js
var require_common = __commonJS((exports, module) => {
  var isNothing = function(subject) {
    return typeof subject === "undefined" || subject === null;
  };
  var isObject = function(subject) {
    return typeof subject === "object" && subject !== null;
  };
  var toArray = function(sequence) {
    if (Array.isArray(sequence))
      return sequence;
    else if (isNothing(sequence))
      return [];
    return [sequence];
  };
  var extend = function(target, source) {
    var index, length, key, sourceKeys;
    if (source) {
      sourceKeys = Object.keys(source);
      for (index = 0, length = sourceKeys.length;index < length; index += 1) {
        key = sourceKeys[index];
        target[key] = source[key];
      }
    }
    return target;
  };
  var repeat = function(string, count) {
    var result = "", cycle;
    for (cycle = 0;cycle < count; cycle += 1) {
      result += string;
    }
    return result;
  };
  var isNegativeZero = function(number) {
    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
  };
  exports.isNothing = isNothing;
  exports.isObject = isObject;
  exports.toArray = toArray;
  exports.repeat = repeat;
  exports.isNegativeZero = isNegativeZero;
  exports.extend = extend;
});

// node_modules/js-yaml/lib/exception.js
var require_exception = __commonJS((exports, module) => {
  var formatError = function(exception, compact) {
    var where = "", message = exception.reason || "(unknown reason)";
    if (!exception.mark)
      return message;
    if (exception.mark.name) {
      where += 'in "' + exception.mark.name + '" ';
    }
    where += "(" + (exception.mark.line + 1) + ":" + (exception.mark.column + 1) + ")";
    if (!compact && exception.mark.snippet) {
      where += "\n\n" + exception.mark.snippet;
    }
    return message + " " + where;
  };
  var YAMLException = function(reason, mark) {
    Error.call(this);
    this.name = "YAMLException";
    this.reason = reason;
    this.mark = mark;
    this.message = formatError(this, false);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack || "";
    }
  };
  YAMLException.prototype = Object.create(Error.prototype);
  YAMLException.prototype.constructor = YAMLException;
  YAMLException.prototype.toString = function toString(compact) {
    return this.name + ": " + formatError(this, compact);
  };
  module.exports = YAMLException;
});

// node_modules/js-yaml/lib/snippet.js
var require_snippet = __commonJS((exports, module) => {
  var getLine = function(buffer, lineStart, lineEnd, position, maxLineLength) {
    var head = "";
    var tail = "";
    var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
    if (position - lineStart > maxHalfLength) {
      head = " ... ";
      lineStart = position - maxHalfLength + head.length;
    }
    if (lineEnd - position > maxHalfLength) {
      tail = " ...";
      lineEnd = position + maxHalfLength - tail.length;
    }
    return {
      str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") + tail,
      pos: position - lineStart + head.length
    };
  };
  var padStart = function(string, max) {
    return common.repeat(" ", max - string.length) + string;
  };
  var makeSnippet = function(mark, options) {
    options = Object.create(options || null);
    if (!mark.buffer)
      return null;
    if (!options.maxLength)
      options.maxLength = 79;
    if (typeof options.indent !== "number")
      options.indent = 1;
    if (typeof options.linesBefore !== "number")
      options.linesBefore = 3;
    if (typeof options.linesAfter !== "number")
      options.linesAfter = 2;
    var re = /\r?\n|\r|\0/g;
    var lineStarts = [0];
    var lineEnds = [];
    var match;
    var foundLineNo = -1;
    while (match = re.exec(mark.buffer)) {
      lineEnds.push(match.index);
      lineStarts.push(match.index + match[0].length);
      if (mark.position <= match.index && foundLineNo < 0) {
        foundLineNo = lineStarts.length - 2;
      }
    }
    if (foundLineNo < 0)
      foundLineNo = lineStarts.length - 1;
    var result = "", i, line;
    var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
    var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);
    for (i = 1;i <= options.linesBefore; i++) {
      if (foundLineNo - i < 0)
        break;
      line = getLine(mark.buffer, lineStarts[foundLineNo - i], lineEnds[foundLineNo - i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]), maxLineLength);
      result = common.repeat(" ", options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) + " | " + line.str + "\n" + result;
    }
    line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
    result += common.repeat(" ", options.indent) + padStart((mark.line + 1).toString(), lineNoLength) + " | " + line.str + "\n";
    result += common.repeat("-", options.indent + lineNoLength + 3 + line.pos) + "^\n";
    for (i = 1;i <= options.linesAfter; i++) {
      if (foundLineNo + i >= lineEnds.length)
        break;
      line = getLine(mark.buffer, lineStarts[foundLineNo + i], lineEnds[foundLineNo + i], mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]), maxLineLength);
      result += common.repeat(" ", options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) + " | " + line.str + "\n";
    }
    return result.replace(/\n$/, "");
  };
  var common = require_common();
  module.exports = makeSnippet;
});

// node_modules/js-yaml/lib/type.js
var require_type = __commonJS((exports, module) => {
  var compileStyleAliases = function(map) {
    var result = {};
    if (map !== null) {
      Object.keys(map).forEach(function(style) {
        map[style].forEach(function(alias) {
          result[String(alias)] = style;
        });
      });
    }
    return result;
  };
  var Type = function(tag, options) {
    options = options || {};
    Object.keys(options).forEach(function(name) {
      if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
        throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
      }
    });
    this.options = options;
    this.tag = tag;
    this.kind = options["kind"] || null;
    this.resolve = options["resolve"] || function() {
      return true;
    };
    this.construct = options["construct"] || function(data) {
      return data;
    };
    this.instanceOf = options["instanceOf"] || null;
    this.predicate = options["predicate"] || null;
    this.represent = options["represent"] || null;
    this.representName = options["representName"] || null;
    this.defaultStyle = options["defaultStyle"] || null;
    this.multi = options["multi"] || false;
    this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
      throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
    }
  };
  var YAMLException = require_exception();
  var TYPE_CONSTRUCTOR_OPTIONS = [
    "kind",
    "multi",
    "resolve",
    "construct",
    "instanceOf",
    "predicate",
    "represent",
    "representName",
    "defaultStyle",
    "styleAliases"
  ];
  var YAML_NODE_KINDS = [
    "scalar",
    "sequence",
    "mapping"
  ];
  module.exports = Type;
});

// node_modules/js-yaml/lib/schema.js
var require_schema4 = __commonJS((exports, module) => {
  var compileList = function(schema, name) {
    var result = [];
    schema[name].forEach(function(currentType) {
      var newIndex = result.length;
      result.forEach(function(previousType, previousIndex) {
        if (previousType.tag === currentType.tag && previousType.kind === currentType.kind && previousType.multi === currentType.multi) {
          newIndex = previousIndex;
        }
      });
      result[newIndex] = currentType;
    });
    return result;
  };
  var compileMap = function() {
    var result = {
      scalar: {},
      sequence: {},
      mapping: {},
      fallback: {},
      multi: {
        scalar: [],
        sequence: [],
        mapping: [],
        fallback: []
      }
    }, index, length;
    function collectType(type) {
      if (type.multi) {
        result.multi[type.kind].push(type);
        result.multi["fallback"].push(type);
      } else {
        result[type.kind][type.tag] = result["fallback"][type.tag] = type;
      }
    }
    for (index = 0, length = arguments.length;index < length; index += 1) {
      arguments[index].forEach(collectType);
    }
    return result;
  };
  var Schema = function(definition) {
    return this.extend(definition);
  };
  var YAMLException = require_exception();
  var Type = require_type();
  Schema.prototype.extend = function extend(definition) {
    var implicit = [];
    var explicit = [];
    if (definition instanceof Type) {
      explicit.push(definition);
    } else if (Array.isArray(definition)) {
      explicit = explicit.concat(definition);
    } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
      if (definition.implicit)
        implicit = implicit.concat(definition.implicit);
      if (definition.explicit)
        explicit = explicit.concat(definition.explicit);
    } else {
      throw new YAMLException("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");
    }
    implicit.forEach(function(type) {
      if (!(type instanceof Type)) {
        throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
      }
      if (type.loadKind && type.loadKind !== "scalar") {
        throw new YAMLException("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
      }
      if (type.multi) {
        throw new YAMLException("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.");
      }
    });
    explicit.forEach(function(type) {
      if (!(type instanceof Type)) {
        throw new YAMLException("Specified list of YAML types (or a single Type object) contains a non-Type object.");
      }
    });
    var result = Object.create(Schema.prototype);
    result.implicit = (this.implicit || []).concat(implicit);
    result.explicit = (this.explicit || []).concat(explicit);
    result.compiledImplicit = compileList(result, "implicit");
    result.compiledExplicit = compileList(result, "explicit");
    result.compiledTypeMap = compileMap(result.compiledImplicit, result.compiledExplicit);
    return result;
  };
  module.exports = Schema;
});

// node_modules/js-yaml/lib/type/str.js
var require_str = __commonJS((exports, module) => {
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:str", {
    kind: "scalar",
    construct: function(data) {
      return data !== null ? data : "";
    }
  });
});

// node_modules/js-yaml/lib/type/seq.js
var require_seq2 = __commonJS((exports, module) => {
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:seq", {
    kind: "sequence",
    construct: function(data) {
      return data !== null ? data : [];
    }
  });
});

// node_modules/js-yaml/lib/type/map.js
var require_map2 = __commonJS((exports, module) => {
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:map", {
    kind: "mapping",
    construct: function(data) {
      return data !== null ? data : {};
    }
  });
});

// node_modules/js-yaml/lib/schema/failsafe.js
var require_failsafe = __commonJS((exports, module) => {
  var Schema = require_schema4();
  module.exports = new Schema({
    explicit: [
      require_str(),
      require_seq2(),
      require_map2()
    ]
  });
});

// node_modules/js-yaml/lib/type/null.js
var require_null2 = __commonJS((exports, module) => {
  var resolveYamlNull = function(data) {
    if (data === null)
      return true;
    var max = data.length;
    return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
  };
  var constructYamlNull = function() {
    return null;
  };
  var isNull = function(object) {
    return object === null;
  };
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:null", {
    kind: "scalar",
    resolve: resolveYamlNull,
    construct: constructYamlNull,
    predicate: isNull,
    represent: {
      canonical: function() {
        return "~";
      },
      lowercase: function() {
        return "null";
      },
      uppercase: function() {
        return "NULL";
      },
      camelcase: function() {
        return "Null";
      },
      empty: function() {
        return "";
      }
    },
    defaultStyle: "lowercase"
  });
});

// node_modules/js-yaml/lib/type/bool.js
var require_bool3 = __commonJS((exports, module) => {
  var resolveYamlBoolean = function(data) {
    if (data === null)
      return false;
    var max = data.length;
    return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
  };
  var constructYamlBoolean = function(data) {
    return data === "true" || data === "True" || data === "TRUE";
  };
  var isBoolean = function(object) {
    return Object.prototype.toString.call(object) === "[object Boolean]";
  };
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:bool", {
    kind: "scalar",
    resolve: resolveYamlBoolean,
    construct: constructYamlBoolean,
    predicate: isBoolean,
    represent: {
      lowercase: function(object) {
        return object ? "true" : "false";
      },
      uppercase: function(object) {
        return object ? "TRUE" : "FALSE";
      },
      camelcase: function(object) {
        return object ? "True" : "False";
      }
    },
    defaultStyle: "lowercase"
  });
});

// node_modules/js-yaml/lib/type/int.js
var require_int3 = __commonJS((exports, module) => {
  var isHexCode = function(c) {
    return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
  };
  var isOctCode = function(c) {
    return 48 <= c && c <= 55;
  };
  var isDecCode = function(c) {
    return 48 <= c && c <= 57;
  };
  var resolveYamlInteger = function(data) {
    if (data === null)
      return false;
    var max = data.length, index = 0, hasDigits = false, ch;
    if (!max)
      return false;
    ch = data[index];
    if (ch === "-" || ch === "+") {
      ch = data[++index];
    }
    if (ch === "0") {
      if (index + 1 === max)
        return true;
      ch = data[++index];
      if (ch === "b") {
        index++;
        for (;index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (ch !== "0" && ch !== "1")
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "x") {
        index++;
        for (;index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (!isHexCode(data.charCodeAt(index)))
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
      if (ch === "o") {
        index++;
        for (;index < max; index++) {
          ch = data[index];
          if (ch === "_")
            continue;
          if (!isOctCode(data.charCodeAt(index)))
            return false;
          hasDigits = true;
        }
        return hasDigits && ch !== "_";
      }
    }
    if (ch === "_")
      return false;
    for (;index < max; index++) {
      ch = data[index];
      if (ch === "_")
        continue;
      if (!isDecCode(data.charCodeAt(index))) {
        return false;
      }
      hasDigits = true;
    }
    if (!hasDigits || ch === "_")
      return false;
    return true;
  };
  var constructYamlInteger = function(data) {
    var value = data, sign = 1, ch;
    if (value.indexOf("_") !== -1) {
      value = value.replace(/_/g, "");
    }
    ch = value[0];
    if (ch === "-" || ch === "+") {
      if (ch === "-")
        sign = -1;
      value = value.slice(1);
      ch = value[0];
    }
    if (value === "0")
      return 0;
    if (ch === "0") {
      if (value[1] === "b")
        return sign * parseInt(value.slice(2), 2);
      if (value[1] === "x")
        return sign * parseInt(value.slice(2), 16);
      if (value[1] === "o")
        return sign * parseInt(value.slice(2), 8);
    }
    return sign * parseInt(value, 10);
  };
  var isInteger = function(object) {
    return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 === 0 && !common.isNegativeZero(object));
  };
  var common = require_common();
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:int", {
    kind: "scalar",
    resolve: resolveYamlInteger,
    construct: constructYamlInteger,
    predicate: isInteger,
    represent: {
      binary: function(obj) {
        return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
      },
      octal: function(obj) {
        return obj >= 0 ? "0o" + obj.toString(8) : "-0o" + obj.toString(8).slice(1);
      },
      decimal: function(obj) {
        return obj.toString(10);
      },
      hexadecimal: function(obj) {
        return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
      }
    },
    defaultStyle: "decimal",
    styleAliases: {
      binary: [2, "bin"],
      octal: [8, "oct"],
      decimal: [10, "dec"],
      hexadecimal: [16, "hex"]
    }
  });
});

// node_modules/js-yaml/lib/type/float.js
var require_float3 = __commonJS((exports, module) => {
  var resolveYamlFloat = function(data) {
    if (data === null)
      return false;
    if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
      return false;
    }
    return true;
  };
  var constructYamlFloat = function(data) {
    var value, sign;
    value = data.replace(/_/g, "").toLowerCase();
    sign = value[0] === "-" ? -1 : 1;
    if ("+-".indexOf(value[0]) >= 0) {
      value = value.slice(1);
    }
    if (value === ".inf") {
      return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
    } else if (value === ".nan") {
      return NaN;
    }
    return sign * parseFloat(value, 10);
  };
  var representYamlFloat = function(object, style) {
    var res;
    if (isNaN(object)) {
      switch (style) {
        case "lowercase":
          return ".nan";
        case "uppercase":
          return ".NAN";
        case "camelcase":
          return ".NaN";
      }
    } else if (Number.POSITIVE_INFINITY === object) {
      switch (style) {
        case "lowercase":
          return ".inf";
        case "uppercase":
          return ".INF";
        case "camelcase":
          return ".Inf";
      }
    } else if (Number.NEGATIVE_INFINITY === object) {
      switch (style) {
        case "lowercase":
          return "-.inf";
        case "uppercase":
          return "-.INF";
        case "camelcase":
          return "-.Inf";
      }
    } else if (common.isNegativeZero(object)) {
      return "-0.0";
    }
    res = object.toString(10);
    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
  };
  var isFloat = function(object) {
    return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common.isNegativeZero(object));
  };
  var common = require_common();
  var Type = require_type();
  var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
  var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
  module.exports = new Type("tag:yaml.org,2002:float", {
    kind: "scalar",
    resolve: resolveYamlFloat,
    construct: constructYamlFloat,
    predicate: isFloat,
    represent: representYamlFloat,
    defaultStyle: "lowercase"
  });
});

// node_modules/js-yaml/lib/schema/json.js
var require_json = __commonJS((exports, module) => {
  module.exports = require_failsafe().extend({
    implicit: [
      require_null2(),
      require_bool3(),
      require_int3(),
      require_float3()
    ]
  });
});

// node_modules/js-yaml/lib/type/timestamp.js
var require_timestamp2 = __commonJS((exports, module) => {
  var resolveYamlTimestamp = function(data) {
    if (data === null)
      return false;
    if (YAML_DATE_REGEXP.exec(data) !== null)
      return true;
    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null)
      return true;
    return false;
  };
  var constructYamlTimestamp = function(data) {
    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;
    match = YAML_DATE_REGEXP.exec(data);
    if (match === null)
      match = YAML_TIMESTAMP_REGEXP.exec(data);
    if (match === null)
      throw new Error("Date resolve error");
    year = +match[1];
    month = +match[2] - 1;
    day = +match[3];
    if (!match[4]) {
      return new Date(Date.UTC(year, month, day));
    }
    hour = +match[4];
    minute = +match[5];
    second = +match[6];
    if (match[7]) {
      fraction = match[7].slice(0, 3);
      while (fraction.length < 3) {
        fraction += "0";
      }
      fraction = +fraction;
    }
    if (match[9]) {
      tz_hour = +match[10];
      tz_minute = +(match[11] || 0);
      delta = (tz_hour * 60 + tz_minute) * 60000;
      if (match[9] === "-")
        delta = -delta;
    }
    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
    if (delta)
      date.setTime(date.getTime() - delta);
    return date;
  };
  var representYamlTimestamp = function(object) {
    return object.toISOString();
  };
  var Type = require_type();
  var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$");
  var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");
  module.exports = new Type("tag:yaml.org,2002:timestamp", {
    kind: "scalar",
    resolve: resolveYamlTimestamp,
    construct: constructYamlTimestamp,
    instanceOf: Date,
    represent: representYamlTimestamp
  });
});

// node_modules/js-yaml/lib/type/merge.js
var require_merge = __commonJS((exports, module) => {
  var resolveYamlMerge = function(data) {
    return data === "<<" || data === null;
  };
  var Type = require_type();
  module.exports = new Type("tag:yaml.org,2002:merge", {
    kind: "scalar",
    resolve: resolveYamlMerge
  });
});

// node_modules/js-yaml/lib/type/binary.js
var require_binary2 = __commonJS((exports, module) => {
  var resolveYamlBinary = function(data) {
    if (data === null)
      return false;
    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;
    for (idx = 0;idx < max; idx++) {
      code = map.indexOf(data.charAt(idx));
      if (code > 64)
        continue;
      if (code < 0)
        return false;
      bitlen += 6;
    }
    return bitlen % 8 === 0;
  };
  var constructYamlBinary = function(data) {
    var idx, tailbits, input = data.replace(/[\r\n=]/g, ""), max = input.length, map = BASE64_MAP, bits = 0, result = [];
    for (idx = 0;idx < max; idx++) {
      if (idx % 4 === 0 && idx) {
        result.push(bits >> 16 & 255);
        result.push(bits >> 8 & 255);
        result.push(bits & 255);
      }
      bits = bits << 6 | map.indexOf(input.charAt(idx));
    }
    tailbits = max % 4 * 6;
    if (tailbits === 0) {
      result.push(bits >> 16 & 255);
      result.push(bits >> 8 & 255);
      result.push(bits & 255);
    } else if (tailbits === 18) {
      result.push(bits >> 10 & 255);
      result.push(bits >> 2 & 255);
    } else if (tailbits === 12) {
      result.push(bits >> 4 & 255);
    }
    return new Uint8Array(result);
  };
  var representYamlBinary = function(object) {
    var result = "", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;
    for (idx = 0;idx < max; idx++) {
      if (idx % 3 === 0 && idx) {
        result += map[bits >> 18 & 63];
        result += map[bits >> 12 & 63];
        result += map[bits >> 6 & 63];
        result += map[bits & 63];
      }
      bits = (bits << 8) + object[idx];
    }
    tail = max % 3;
    if (tail === 0) {
      result += map[bits >> 18 & 63];
      result += map[bits >> 12 & 63];
      result += map[bits >> 6 & 63];
      result += map[bits & 63];
    } else if (tail === 2) {
      result += map[bits >> 10 & 63];
      result += map[bits >> 4 & 63];
      result += map[bits << 2 & 63];
      result += map[64];
    } else if (tail === 1) {
      result += map[bits >> 2 & 63];
      result += map[bits << 4 & 63];
      result += map[64];
      result += map[64];
    }
    return result;
  };
  var isBinary = function(obj) {
    return Object.prototype.toString.call(obj) === "[object Uint8Array]";
  };
  var Type = require_type();
  var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
  module.exports = new Type("tag:yaml.org,2002:binary", {
    kind: "scalar",
    resolve: resolveYamlBinary,
    construct: constructYamlBinary,
    predicate: isBinary,
    represent: representYamlBinary
  });
});

// node_modules/js-yaml/lib/type/omap.js
var require_omap2 = __commonJS((exports, module) => {
  var resolveYamlOmap = function(data) {
    if (data === null)
      return true;
    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;
    for (index = 0, length = object.length;index < length; index += 1) {
      pair = object[index];
      pairHasKey = false;
      if (_toString.call(pair) !== "[object Object]")
        return false;
      for (pairKey in pair) {
        if (_hasOwnProperty.call(pair, pairKey)) {
          if (!pairHasKey)
            pairHasKey = true;
          else
            return false;
        }
      }
      if (!pairHasKey)
        return false;
      if (objectKeys.indexOf(pairKey) === -1)
        objectKeys.push(pairKey);
      else
        return false;
    }
    return true;
  };
  var constructYamlOmap = function(data) {
    return data !== null ? data : [];
  };
  var Type = require_type();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var _toString = Object.prototype.toString;
  module.exports = new Type("tag:yaml.org,2002:omap", {
    kind: "sequence",
    resolve: resolveYamlOmap,
    construct: constructYamlOmap
  });
});

// node_modules/js-yaml/lib/type/pairs.js
var require_pairs2 = __commonJS((exports, module) => {
  var resolveYamlPairs = function(data) {
    if (data === null)
      return true;
    var index, length, pair, keys, result, object = data;
    result = new Array(object.length);
    for (index = 0, length = object.length;index < length; index += 1) {
      pair = object[index];
      if (_toString.call(pair) !== "[object Object]")
        return false;
      keys = Object.keys(pair);
      if (keys.length !== 1)
        return false;
      result[index] = [keys[0], pair[keys[0]]];
    }
    return true;
  };
  var constructYamlPairs = function(data) {
    if (data === null)
      return [];
    var index, length, pair, keys, result, object = data;
    result = new Array(object.length);
    for (index = 0, length = object.length;index < length; index += 1) {
      pair = object[index];
      keys = Object.keys(pair);
      result[index] = [keys[0], pair[keys[0]]];
    }
    return result;
  };
  var Type = require_type();
  var _toString = Object.prototype.toString;
  module.exports = new Type("tag:yaml.org,2002:pairs", {
    kind: "sequence",
    resolve: resolveYamlPairs,
    construct: constructYamlPairs
  });
});

// node_modules/js-yaml/lib/type/set.js
var require_set2 = __commonJS((exports, module) => {
  var resolveYamlSet = function(data) {
    if (data === null)
      return true;
    var key, object = data;
    for (key in object) {
      if (_hasOwnProperty.call(object, key)) {
        if (object[key] !== null)
          return false;
      }
    }
    return true;
  };
  var constructYamlSet = function(data) {
    return data !== null ? data : {};
  };
  var Type = require_type();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  module.exports = new Type("tag:yaml.org,2002:set", {
    kind: "mapping",
    resolve: resolveYamlSet,
    construct: constructYamlSet
  });
});

// node_modules/js-yaml/lib/schema/default.js
var require_default = __commonJS((exports, module) => {
  module.exports = require_json().extend({
    implicit: [
      require_timestamp2(),
      require_merge()
    ],
    explicit: [
      require_binary2(),
      require_omap2(),
      require_pairs2(),
      require_set2()
    ]
  });
});

// node_modules/js-yaml/lib/loader.js
var require_loader = __commonJS((exports, module) => {
  var _class = function(obj) {
    return Object.prototype.toString.call(obj);
  };
  var is_EOL = function(c) {
    return c === 10 || c === 13;
  };
  var is_WHITE_SPACE = function(c) {
    return c === 9 || c === 32;
  };
  var is_WS_OR_EOL = function(c) {
    return c === 9 || c === 32 || c === 10 || c === 13;
  };
  var is_FLOW_INDICATOR = function(c) {
    return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
  };
  var fromHexCode = function(c) {
    var lc;
    if (48 <= c && c <= 57) {
      return c - 48;
    }
    lc = c | 32;
    if (97 <= lc && lc <= 102) {
      return lc - 97 + 10;
    }
    return -1;
  };
  var escapedHexLen = function(c) {
    if (c === 120) {
      return 2;
    }
    if (c === 117) {
      return 4;
    }
    if (c === 85) {
      return 8;
    }
    return 0;
  };
  var fromDecimalCode = function(c) {
    if (48 <= c && c <= 57) {
      return c - 48;
    }
    return -1;
  };
  var simpleEscapeSequence = function(c) {
    return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "\t" : c === 9 ? "\t" : c === 110 ? `
` : c === 118 ? "\v" : c === 102 ? "\f" : c === 114 ? `\r` : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? '"' : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
  };
  var charFromCodepoint = function(c) {
    if (c <= 65535) {
      return String.fromCharCode(c);
    }
    return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
  };
  var State = function(input, options) {
    this.input = input;
    this.filename = options["filename"] || null;
    this.schema = options["schema"] || DEFAULT_SCHEMA;
    this.onWarning = options["onWarning"] || null;
    this.legacy = options["legacy"] || false;
    this.json = options["json"] || false;
    this.listener = options["listener"] || null;
    this.implicitTypes = this.schema.compiledImplicit;
    this.typeMap = this.schema.compiledTypeMap;
    this.length = input.length;
    this.position = 0;
    this.line = 0;
    this.lineStart = 0;
    this.lineIndent = 0;
    this.firstTabInLine = -1;
    this.documents = [];
  };
  var generateError = function(state, message) {
    var mark = {
      name: state.filename,
      buffer: state.input.slice(0, -1),
      position: state.position,
      line: state.line,
      column: state.position - state.lineStart
    };
    mark.snippet = makeSnippet(mark);
    return new YAMLException(message, mark);
  };
  var throwError = function(state, message) {
    throw generateError(state, message);
  };
  var throwWarning = function(state, message) {
    if (state.onWarning) {
      state.onWarning.call(null, generateError(state, message));
    }
  };
  var captureSegment = function(state, start, end, checkJson) {
    var _position, _length, _character, _result;
    if (start < end) {
      _result = state.input.slice(start, end);
      if (checkJson) {
        for (_position = 0, _length = _result.length;_position < _length; _position += 1) {
          _character = _result.charCodeAt(_position);
          if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
            throwError(state, "expected valid JSON character");
          }
        }
      } else if (PATTERN_NON_PRINTABLE.test(_result)) {
        throwError(state, "the stream contains non-printable characters");
      }
      state.result += _result;
    }
  };
  var mergeMappings = function(state, destination, source, overridableKeys) {
    var sourceKeys, key, index, quantity;
    if (!common.isObject(source)) {
      throwError(state, "cannot merge mappings; the provided source object is unacceptable");
    }
    sourceKeys = Object.keys(source);
    for (index = 0, quantity = sourceKeys.length;index < quantity; index += 1) {
      key = sourceKeys[index];
      if (!_hasOwnProperty.call(destination, key)) {
        destination[key] = source[key];
        overridableKeys[key] = true;
      }
    }
  };
  var storeMappingPair = function(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startLineStart, startPos) {
    var index, quantity;
    if (Array.isArray(keyNode)) {
      keyNode = Array.prototype.slice.call(keyNode);
      for (index = 0, quantity = keyNode.length;index < quantity; index += 1) {
        if (Array.isArray(keyNode[index])) {
          throwError(state, "nested arrays are not supported inside keys");
        }
        if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
          keyNode[index] = "[object Object]";
        }
      }
    }
    if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
      keyNode = "[object Object]";
    }
    keyNode = String(keyNode);
    if (_result === null) {
      _result = {};
    }
    if (keyTag === "tag:yaml.org,2002:merge") {
      if (Array.isArray(valueNode)) {
        for (index = 0, quantity = valueNode.length;index < quantity; index += 1) {
          mergeMappings(state, _result, valueNode[index], overridableKeys);
        }
      } else {
        mergeMappings(state, _result, valueNode, overridableKeys);
      }
    } else {
      if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
        state.line = startLine || state.line;
        state.lineStart = startLineStart || state.lineStart;
        state.position = startPos || state.position;
        throwError(state, "duplicated mapping key");
      }
      if (keyNode === "__proto__") {
        Object.defineProperty(_result, keyNode, {
          configurable: true,
          enumerable: true,
          writable: true,
          value: valueNode
        });
      } else {
        _result[keyNode] = valueNode;
      }
      delete overridableKeys[keyNode];
    }
    return _result;
  };
  var readLineBreak = function(state) {
    var ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 10) {
      state.position++;
    } else if (ch === 13) {
      state.position++;
      if (state.input.charCodeAt(state.position) === 10) {
        state.position++;
      }
    } else {
      throwError(state, "a line break is expected");
    }
    state.line += 1;
    state.lineStart = state.position;
    state.firstTabInLine = -1;
  };
  var skipSeparationSpace = function(state, allowComments, checkIndent) {
    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        if (ch === 9 && state.firstTabInLine === -1) {
          state.firstTabInLine = state.position;
        }
        ch = state.input.charCodeAt(++state.position);
      }
      if (allowComments && ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (ch !== 10 && ch !== 13 && ch !== 0);
      }
      if (is_EOL(ch)) {
        readLineBreak(state);
        ch = state.input.charCodeAt(state.position);
        lineBreaks++;
        state.lineIndent = 0;
        while (ch === 32) {
          state.lineIndent++;
          ch = state.input.charCodeAt(++state.position);
        }
      } else {
        break;
      }
    }
    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
      throwWarning(state, "deficient indentation");
    }
    return lineBreaks;
  };
  var testDocumentSeparator = function(state) {
    var _position = state.position, ch;
    ch = state.input.charCodeAt(_position);
    if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
      _position += 3;
      ch = state.input.charCodeAt(_position);
      if (ch === 0 || is_WS_OR_EOL(ch)) {
        return true;
      }
    }
    return false;
  };
  var writeFoldedLines = function(state, count) {
    if (count === 1) {
      state.result += " ";
    } else if (count > 1) {
      state.result += common.repeat("\n", count - 1);
    }
  };
  var readPlainScalar = function(state, nodeIndent, withinFlowCollection) {
    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
    ch = state.input.charCodeAt(state.position);
    if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
      return false;
    }
    if (ch === 63 || ch === 45) {
      following = state.input.charCodeAt(state.position + 1);
      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
        return false;
      }
    }
    state.kind = "scalar";
    state.result = "";
    captureStart = captureEnd = state.position;
    hasPendingContent = false;
    while (ch !== 0) {
      if (ch === 58) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
          break;
        }
      } else if (ch === 35) {
        preceding = state.input.charCodeAt(state.position - 1);
        if (is_WS_OR_EOL(preceding)) {
          break;
        }
      } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
        break;
      } else if (is_EOL(ch)) {
        _line = state.line;
        _lineStart = state.lineStart;
        _lineIndent = state.lineIndent;
        skipSeparationSpace(state, false, -1);
        if (state.lineIndent >= nodeIndent) {
          hasPendingContent = true;
          ch = state.input.charCodeAt(state.position);
          continue;
        } else {
          state.position = captureEnd;
          state.line = _line;
          state.lineStart = _lineStart;
          state.lineIndent = _lineIndent;
          break;
        }
      }
      if (hasPendingContent) {
        captureSegment(state, captureStart, captureEnd, false);
        writeFoldedLines(state, state.line - _line);
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
      }
      if (!is_WHITE_SPACE(ch)) {
        captureEnd = state.position + 1;
      }
      ch = state.input.charCodeAt(++state.position);
    }
    captureSegment(state, captureStart, captureEnd, false);
    if (state.result) {
      return true;
    }
    state.kind = _kind;
    state.result = _result;
    return false;
  };
  var readSingleQuotedScalar = function(state, nodeIndent) {
    var ch, captureStart, captureEnd;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 39) {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    state.position++;
    captureStart = captureEnd = state.position;
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      if (ch === 39) {
        captureSegment(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);
        if (ch === 39) {
          captureStart = state.position;
          state.position++;
          captureEnd = state.position;
        } else {
          return true;
        }
      } else if (is_EOL(ch)) {
        captureSegment(state, captureStart, captureEnd, true);
        writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
        captureStart = captureEnd = state.position;
      } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
        throwError(state, "unexpected end of the document within a single quoted scalar");
      } else {
        state.position++;
        captureEnd = state.position;
      }
    }
    throwError(state, "unexpected end of the stream within a single quoted scalar");
  };
  var readDoubleQuotedScalar = function(state, nodeIndent) {
    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 34) {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    state.position++;
    captureStart = captureEnd = state.position;
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      if (ch === 34) {
        captureSegment(state, captureStart, state.position, true);
        state.position++;
        return true;
      } else if (ch === 92) {
        captureSegment(state, captureStart, state.position, true);
        ch = state.input.charCodeAt(++state.position);
        if (is_EOL(ch)) {
          skipSeparationSpace(state, false, nodeIndent);
        } else if (ch < 256 && simpleEscapeCheck[ch]) {
          state.result += simpleEscapeMap[ch];
          state.position++;
        } else if ((tmp = escapedHexLen(ch)) > 0) {
          hexLength = tmp;
          hexResult = 0;
          for (;hexLength > 0; hexLength--) {
            ch = state.input.charCodeAt(++state.position);
            if ((tmp = fromHexCode(ch)) >= 0) {
              hexResult = (hexResult << 4) + tmp;
            } else {
              throwError(state, "expected hexadecimal character");
            }
          }
          state.result += charFromCodepoint(hexResult);
          state.position++;
        } else {
          throwError(state, "unknown escape sequence");
        }
        captureStart = captureEnd = state.position;
      } else if (is_EOL(ch)) {
        captureSegment(state, captureStart, captureEnd, true);
        writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
        captureStart = captureEnd = state.position;
      } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
        throwError(state, "unexpected end of the document within a double quoted scalar");
      } else {
        state.position++;
        captureEnd = state.position;
      }
    }
    throwError(state, "unexpected end of the stream within a double quoted scalar");
  };
  var readFlowCollection = function(state, nodeIndent) {
    var readNext = true, _line, _lineStart, _pos, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = Object.create(null), keyNode, keyTag, valueNode, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 91) {
      terminator = 93;
      isMapping = false;
      _result = [];
    } else if (ch === 123) {
      terminator = 125;
      isMapping = true;
      _result = {};
    } else {
      return false;
    }
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(++state.position);
    while (ch !== 0) {
      skipSeparationSpace(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if (ch === terminator) {
        state.position++;
        state.tag = _tag;
        state.anchor = _anchor;
        state.kind = isMapping ? "mapping" : "sequence";
        state.result = _result;
        return true;
      } else if (!readNext) {
        throwError(state, "missed comma between flow collection entries");
      } else if (ch === 44) {
        throwError(state, "expected the node content, but found ','");
      }
      keyTag = keyNode = valueNode = null;
      isPair = isExplicitPair = false;
      if (ch === 63) {
        following = state.input.charCodeAt(state.position + 1);
        if (is_WS_OR_EOL(following)) {
          isPair = isExplicitPair = true;
          state.position++;
          skipSeparationSpace(state, true, nodeIndent);
        }
      }
      _line = state.line;
      _lineStart = state.lineStart;
      _pos = state.position;
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      keyTag = state.tag;
      keyNode = state.result;
      skipSeparationSpace(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if ((isExplicitPair || state.line === _line) && ch === 58) {
        isPair = true;
        ch = state.input.charCodeAt(++state.position);
        skipSeparationSpace(state, true, nodeIndent);
        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
        valueNode = state.result;
      }
      if (isMapping) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
      } else if (isPair) {
        _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
      } else {
        _result.push(keyNode);
      }
      skipSeparationSpace(state, true, nodeIndent);
      ch = state.input.charCodeAt(state.position);
      if (ch === 44) {
        readNext = true;
        ch = state.input.charCodeAt(++state.position);
      } else {
        readNext = false;
      }
    }
    throwError(state, "unexpected end of the stream within a flow collection");
  };
  var readBlockScalar = function(state, nodeIndent) {
    var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch === 124) {
      folding = false;
    } else if (ch === 62) {
      folding = true;
    } else {
      return false;
    }
    state.kind = "scalar";
    state.result = "";
    while (ch !== 0) {
      ch = state.input.charCodeAt(++state.position);
      if (ch === 43 || ch === 45) {
        if (CHOMPING_CLIP === chomping) {
          chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
        } else {
          throwError(state, "repeat of a chomping mode identifier");
        }
      } else if ((tmp = fromDecimalCode(ch)) >= 0) {
        if (tmp === 0) {
          throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
        } else if (!detectedIndent) {
          textIndent = nodeIndent + tmp - 1;
          detectedIndent = true;
        } else {
          throwError(state, "repeat of an indentation width identifier");
        }
      } else {
        break;
      }
    }
    if (is_WHITE_SPACE(ch)) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (is_WHITE_SPACE(ch));
      if (ch === 35) {
        do {
          ch = state.input.charCodeAt(++state.position);
        } while (!is_EOL(ch) && ch !== 0);
      }
    }
    while (ch !== 0) {
      readLineBreak(state);
      state.lineIndent = 0;
      ch = state.input.charCodeAt(state.position);
      while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
      if (!detectedIndent && state.lineIndent > textIndent) {
        textIndent = state.lineIndent;
      }
      if (is_EOL(ch)) {
        emptyLines++;
        continue;
      }
      if (state.lineIndent < textIndent) {
        if (chomping === CHOMPING_KEEP) {
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        } else if (chomping === CHOMPING_CLIP) {
          if (didReadContent) {
            state.result += "\n";
          }
        }
        break;
      }
      if (folding) {
        if (is_WHITE_SPACE(ch)) {
          atMoreIndented = true;
          state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
        } else if (atMoreIndented) {
          atMoreIndented = false;
          state.result += common.repeat("\n", emptyLines + 1);
        } else if (emptyLines === 0) {
          if (didReadContent) {
            state.result += " ";
          }
        } else {
          state.result += common.repeat("\n", emptyLines);
        }
      } else {
        state.result += common.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
      }
      didReadContent = true;
      detectedIndent = true;
      emptyLines = 0;
      captureStart = state.position;
      while (!is_EOL(ch) && ch !== 0) {
        ch = state.input.charCodeAt(++state.position);
      }
      captureSegment(state, captureStart, state.position, false);
    }
    return true;
  };
  var readBlockSequence = function(state, nodeIndent) {
    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
    if (state.firstTabInLine !== -1)
      return false;
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      if (state.firstTabInLine !== -1) {
        state.position = state.firstTabInLine;
        throwError(state, "tab characters must not be used in indentation");
      }
      if (ch !== 45) {
        break;
      }
      following = state.input.charCodeAt(state.position + 1);
      if (!is_WS_OR_EOL(following)) {
        break;
      }
      detected = true;
      state.position++;
      if (skipSeparationSpace(state, true, -1)) {
        if (state.lineIndent <= nodeIndent) {
          _result.push(null);
          ch = state.input.charCodeAt(state.position);
          continue;
        }
      }
      _line = state.line;
      composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
      _result.push(state.result);
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
      if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
        throwError(state, "bad indentation of a sequence entry");
      } else if (state.lineIndent < nodeIndent) {
        break;
      }
    }
    if (detected) {
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = "sequence";
      state.result = _result;
      return true;
    }
    return false;
  };
  var readBlockMapping = function(state, nodeIndent, flowIndent) {
    var following, allowCompact, _line, _keyLine, _keyLineStart, _keyPos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = Object.create(null), keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
    if (state.firstTabInLine !== -1)
      return false;
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = _result;
    }
    ch = state.input.charCodeAt(state.position);
    while (ch !== 0) {
      if (!atExplicitKey && state.firstTabInLine !== -1) {
        state.position = state.firstTabInLine;
        throwError(state, "tab characters must not be used in indentation");
      }
      following = state.input.charCodeAt(state.position + 1);
      _line = state.line;
      if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
        if (ch === 63) {
          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }
          detected = true;
          atExplicitKey = true;
          allowCompact = true;
        } else if (atExplicitKey) {
          atExplicitKey = false;
          allowCompact = true;
        } else {
          throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
        }
        state.position += 1;
        ch = following;
      } else {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
        if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
          break;
        }
        if (state.line === _line) {
          ch = state.input.charCodeAt(state.position);
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (ch === 58) {
            ch = state.input.charCodeAt(++state.position);
            if (!is_WS_OR_EOL(ch)) {
              throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
            }
            if (atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
              keyTag = keyNode = valueNode = null;
            }
            detected = true;
            atExplicitKey = false;
            allowCompact = false;
            keyTag = state.tag;
            keyNode = state.result;
          } else if (detected) {
            throwError(state, "can not read an implicit mapping pair; a colon is missed");
          } else {
            state.tag = _tag;
            state.anchor = _anchor;
            return true;
          }
        } else if (detected) {
          throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true;
        }
      }
      if (state.line === _line || state.lineIndent > nodeIndent) {
        if (atExplicitKey) {
          _keyLine = state.line;
          _keyLineStart = state.lineStart;
          _keyPos = state.position;
        }
        if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
          if (atExplicitKey) {
            keyNode = state.result;
          } else {
            valueNode = state.result;
          }
        }
        if (!atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }
        skipSeparationSpace(state, true, -1);
        ch = state.input.charCodeAt(state.position);
      }
      if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
        throwError(state, "bad indentation of a mapping entry");
      } else if (state.lineIndent < nodeIndent) {
        break;
      }
    }
    if (atExplicitKey) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
    }
    if (detected) {
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = "mapping";
      state.result = _result;
    }
    return detected;
  };
  var readTagProperty = function(state) {
    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 33)
      return false;
    if (state.tag !== null) {
      throwError(state, "duplication of a tag property");
    }
    ch = state.input.charCodeAt(++state.position);
    if (ch === 60) {
      isVerbatim = true;
      ch = state.input.charCodeAt(++state.position);
    } else if (ch === 33) {
      isNamed = true;
      tagHandle = "!!";
      ch = state.input.charCodeAt(++state.position);
    } else {
      tagHandle = "!";
    }
    _position = state.position;
    if (isVerbatim) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0 && ch !== 62);
      if (state.position < state.length) {
        tagName = state.input.slice(_position, state.position);
        ch = state.input.charCodeAt(++state.position);
      } else {
        throwError(state, "unexpected end of the stream within a verbatim tag");
      }
    } else {
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        if (ch === 33) {
          if (!isNamed) {
            tagHandle = state.input.slice(_position - 1, state.position + 1);
            if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
              throwError(state, "named tag handle cannot contain such characters");
            }
            isNamed = true;
            _position = state.position + 1;
          } else {
            throwError(state, "tag suffix cannot contain exclamation marks");
          }
        }
        ch = state.input.charCodeAt(++state.position);
      }
      tagName = state.input.slice(_position, state.position);
      if (PATTERN_FLOW_INDICATORS.test(tagName)) {
        throwError(state, "tag suffix cannot contain flow indicator characters");
      }
    }
    if (tagName && !PATTERN_TAG_URI.test(tagName)) {
      throwError(state, "tag name cannot contain such characters: " + tagName);
    }
    try {
      tagName = decodeURIComponent(tagName);
    } catch (err) {
      throwError(state, "tag name is malformed: " + tagName);
    }
    if (isVerbatim) {
      state.tag = tagName;
    } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
      state.tag = state.tagMap[tagHandle] + tagName;
    } else if (tagHandle === "!") {
      state.tag = "!" + tagName;
    } else if (tagHandle === "!!") {
      state.tag = "tag:yaml.org,2002:" + tagName;
    } else {
      throwError(state, 'undeclared tag handle "' + tagHandle + '"');
    }
    return true;
  };
  var readAnchorProperty = function(state) {
    var _position, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 38)
      return false;
    if (state.anchor !== null) {
      throwError(state, "duplication of an anchor property");
    }
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
      throwError(state, "name of an anchor node must contain at least one character");
    }
    state.anchor = state.input.slice(_position, state.position);
    return true;
  };
  var readAlias = function(state) {
    var _position, alias, ch;
    ch = state.input.charCodeAt(state.position);
    if (ch !== 42)
      return false;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;
    while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }
    if (state.position === _position) {
      throwError(state, "name of an alias node must contain at least one character");
    }
    alias = state.input.slice(_position, state.position);
    if (!_hasOwnProperty.call(state.anchorMap, alias)) {
      throwError(state, 'unidentified alias "' + alias + '"');
    }
    state.result = state.anchorMap[alias];
    skipSeparationSpace(state, true, -1);
    return true;
  };
  var composeNode = function(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, typeList, type, flowIndent, blockIndent;
    if (state.listener !== null) {
      state.listener("open", state);
    }
    state.tag = null;
    state.anchor = null;
    state.kind = null;
    state.result = null;
    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
    if (allowToSeek) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      }
    }
    if (indentStatus === 1) {
      while (readTagProperty(state) || readAnchorProperty(state)) {
        if (skipSeparationSpace(state, true, -1)) {
          atNewLine = true;
          allowBlockCollections = allowBlockStyles;
          if (state.lineIndent > parentIndent) {
            indentStatus = 1;
          } else if (state.lineIndent === parentIndent) {
            indentStatus = 0;
          } else if (state.lineIndent < parentIndent) {
            indentStatus = -1;
          }
        } else {
          allowBlockCollections = false;
        }
      }
    }
    if (allowBlockCollections) {
      allowBlockCollections = atNewLine || allowCompact;
    }
    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
      if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
        flowIndent = parentIndent;
      } else {
        flowIndent = parentIndent + 1;
      }
      blockIndent = state.position - state.lineStart;
      if (indentStatus === 1) {
        if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
          hasContent = true;
        } else {
          if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
            hasContent = true;
          } else if (readAlias(state)) {
            hasContent = true;
            if (state.tag !== null || state.anchor !== null) {
              throwError(state, "alias node should not have any properties");
            }
          } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
            hasContent = true;
            if (state.tag === null) {
              state.tag = "?";
            }
          }
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        }
      } else if (indentStatus === 0) {
        hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
      }
    }
    if (state.tag === null) {
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    } else if (state.tag === "?") {
      if (state.result !== null && state.kind !== "scalar") {
        throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
      }
      for (typeIndex = 0, typeQuantity = state.implicitTypes.length;typeIndex < typeQuantity; typeIndex += 1) {
        type = state.implicitTypes[typeIndex];
        if (type.resolve(state.result)) {
          state.result = type.construct(state.result);
          state.tag = type.tag;
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
          break;
        }
      }
    } else if (state.tag !== "!") {
      if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
        type = state.typeMap[state.kind || "fallback"][state.tag];
      } else {
        type = null;
        typeList = state.typeMap.multi[state.kind || "fallback"];
        for (typeIndex = 0, typeQuantity = typeList.length;typeIndex < typeQuantity; typeIndex += 1) {
          if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
            type = typeList[typeIndex];
            break;
          }
        }
      }
      if (!type) {
        throwError(state, "unknown tag !<" + state.tag + ">");
      }
      if (state.result !== null && type.kind !== state.kind) {
        throwError(state, "unacceptable node kind for !<" + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
      }
      if (!type.resolve(state.result, state.tag)) {
        throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
      } else {
        state.result = type.construct(state.result, state.tag);
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    }
    if (state.listener !== null) {
      state.listener("close", state);
    }
    return state.tag !== null || state.anchor !== null || hasContent;
  };
  var readDocument = function(state) {
    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
    state.version = null;
    state.checkLineBreaks = state.legacy;
    state.tagMap = Object.create(null);
    state.anchorMap = Object.create(null);
    while ((ch = state.input.charCodeAt(state.position)) !== 0) {
      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
      if (state.lineIndent > 0 || ch !== 37) {
        break;
      }
      hasDirectives = true;
      ch = state.input.charCodeAt(++state.position);
      _position = state.position;
      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }
      directiveName = state.input.slice(_position, state.position);
      directiveArgs = [];
      if (directiveName.length < 1) {
        throwError(state, "directive name must not be less than one character in length");
      }
      while (ch !== 0) {
        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (ch === 35) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && !is_EOL(ch));
          break;
        }
        if (is_EOL(ch))
          break;
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        directiveArgs.push(state.input.slice(_position, state.position));
      }
      if (ch !== 0)
        readLineBreak(state);
      if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
        directiveHandlers[directiveName](state, directiveName, directiveArgs);
      } else {
        throwWarning(state, 'unknown document directive "' + directiveName + '"');
      }
    }
    skipSeparationSpace(state, true, -1);
    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    } else if (hasDirectives) {
      throwError(state, "directives end mark is expected");
    }
    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
    skipSeparationSpace(state, true, -1);
    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
      throwWarning(state, "non-ASCII line breaks are interpreted as content");
    }
    state.documents.push(state.result);
    if (state.position === state.lineStart && testDocumentSeparator(state)) {
      if (state.input.charCodeAt(state.position) === 46) {
        state.position += 3;
        skipSeparationSpace(state, true, -1);
      }
      return;
    }
    if (state.position < state.length - 1) {
      throwError(state, "end of the stream or a document separator is expected");
    } else {
      return;
    }
  };
  var loadDocuments = function(input, options) {
    input = String(input);
    options = options || {};
    if (input.length !== 0) {
      if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
        input += "\n";
      }
      if (input.charCodeAt(0) === 65279) {
        input = input.slice(1);
      }
    }
    var state = new State(input, options);
    var nullpos = input.indexOf("\0");
    if (nullpos !== -1) {
      state.position = nullpos;
      throwError(state, "null byte is not allowed in input");
    }
    state.input += "\0";
    while (state.input.charCodeAt(state.position) === 32) {
      state.lineIndent += 1;
      state.position += 1;
    }
    while (state.position < state.length - 1) {
      readDocument(state);
    }
    return state.documents;
  };
  var loadAll = function(input, iterator, options) {
    if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
      options = iterator;
      iterator = null;
    }
    var documents = loadDocuments(input, options);
    if (typeof iterator !== "function") {
      return documents;
    }
    for (var index = 0, length = documents.length;index < length; index += 1) {
      iterator(documents[index]);
    }
  };
  var load2 = function(input, options) {
    var documents = loadDocuments(input, options);
    if (documents.length === 0) {
      return;
    } else if (documents.length === 1) {
      return documents[0];
    }
    throw new YAMLException("expected a single document in the stream, but found more");
  };
  var common = require_common();
  var YAMLException = require_exception();
  var makeSnippet = require_snippet();
  var DEFAULT_SCHEMA = require_default();
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var CONTEXT_FLOW_IN = 1;
  var CONTEXT_FLOW_OUT = 2;
  var CONTEXT_BLOCK_IN = 3;
  var CONTEXT_BLOCK_OUT = 4;
  var CHOMPING_CLIP = 1;
  var CHOMPING_STRIP = 2;
  var CHOMPING_KEEP = 3;
  var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
  var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
  var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
  var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
  var simpleEscapeCheck = new Array(256);
  var simpleEscapeMap = new Array(256);
  for (i = 0;i < 256; i++) {
    simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
    simpleEscapeMap[i] = simpleEscapeSequence(i);
  }
  var i;
  var directiveHandlers = {
    YAML: function handleYamlDirective(state, name, args) {
      var match, major, minor;
      if (state.version !== null) {
        throwError(state, "duplication of %YAML directive");
      }
      if (args.length !== 1) {
        throwError(state, "YAML directive accepts exactly one argument");
      }
      match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
      if (match === null) {
        throwError(state, "ill-formed argument of the YAML directive");
      }
      major = parseInt(match[1], 10);
      minor = parseInt(match[2], 10);
      if (major !== 1) {
        throwError(state, "unacceptable YAML version of the document");
      }
      state.version = args[0];
      state.checkLineBreaks = minor < 2;
      if (minor !== 1 && minor !== 2) {
        throwWarning(state, "unsupported YAML version of the document");
      }
    },
    TAG: function handleTagDirective(state, name, args) {
      var handle, prefix;
      if (args.length !== 2) {
        throwError(state, "TAG directive accepts exactly two arguments");
      }
      handle = args[0];
      prefix = args[1];
      if (!PATTERN_TAG_HANDLE.test(handle)) {
        throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
      }
      if (_hasOwnProperty.call(state.tagMap, handle)) {
        throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
      }
      if (!PATTERN_TAG_URI.test(prefix)) {
        throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
      }
      try {
        prefix = decodeURIComponent(prefix);
      } catch (err) {
        throwError(state, "tag prefix is malformed: " + prefix);
      }
      state.tagMap[handle] = prefix;
    }
  };
  exports.loadAll = loadAll;
  exports.load = load2;
});

// node_modules/js-yaml/lib/dumper.js
var require_dumper = __commonJS((exports, module) => {
  var compileStyleMap = function(schema, map) {
    var result, keys, index, length, tag, style, type;
    if (map === null)
      return {};
    result = {};
    keys = Object.keys(map);
    for (index = 0, length = keys.length;index < length; index += 1) {
      tag = keys[index];
      style = String(map[tag]);
      if (tag.slice(0, 2) === "!!") {
        tag = "tag:yaml.org,2002:" + tag.slice(2);
      }
      type = schema.compiledTypeMap["fallback"][tag];
      if (type && _hasOwnProperty.call(type.styleAliases, style)) {
        style = type.styleAliases[style];
      }
      result[tag] = style;
    }
    return result;
  };
  var encodeHex = function(character) {
    var string, handle, length;
    string = character.toString(16).toUpperCase();
    if (character <= 255) {
      handle = "x";
      length = 2;
    } else if (character <= 65535) {
      handle = "u";
      length = 4;
    } else if (character <= 4294967295) {
      handle = "U";
      length = 8;
    } else {
      throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");
    }
    return "\\" + handle + common.repeat("0", length - string.length) + string;
  };
  var State = function(options) {
    this.schema = options["schema"] || DEFAULT_SCHEMA;
    this.indent = Math.max(1, options["indent"] || 2);
    this.noArrayIndent = options["noArrayIndent"] || false;
    this.skipInvalid = options["skipInvalid"] || false;
    this.flowLevel = common.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
    this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
    this.sortKeys = options["sortKeys"] || false;
    this.lineWidth = options["lineWidth"] || 80;
    this.noRefs = options["noRefs"] || false;
    this.noCompatMode = options["noCompatMode"] || false;
    this.condenseFlow = options["condenseFlow"] || false;
    this.quotingType = options["quotingType"] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
    this.forceQuotes = options["forceQuotes"] || false;
    this.replacer = typeof options["replacer"] === "function" ? options["replacer"] : null;
    this.implicitTypes = this.schema.compiledImplicit;
    this.explicitTypes = this.schema.compiledExplicit;
    this.tag = null;
    this.result = "";
    this.duplicates = [];
    this.usedDuplicates = null;
  };
  var indentString = function(string, spaces) {
    var ind = common.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
    while (position < length) {
      next = string.indexOf("\n", position);
      if (next === -1) {
        line = string.slice(position);
        position = length;
      } else {
        line = string.slice(position, next + 1);
        position = next + 1;
      }
      if (line.length && line !== "\n")
        result += ind;
      result += line;
    }
    return result;
  };
  var generateNextLine = function(state, level) {
    return "\n" + common.repeat(" ", state.indent * level);
  };
  var testImplicitResolving = function(state, str) {
    var index, length, type;
    for (index = 0, length = state.implicitTypes.length;index < length; index += 1) {
      type = state.implicitTypes[index];
      if (type.resolve(str)) {
        return true;
      }
    }
    return false;
  };
  var isWhitespace = function(c) {
    return c === CHAR_SPACE || c === CHAR_TAB;
  };
  var isPrintable = function(c) {
    return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== CHAR_BOM || 65536 <= c && c <= 1114111;
  };
  var isNsCharOrWhitespace = function(c) {
    return isPrintable(c) && c !== CHAR_BOM && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
  };
  var isPlainSafe = function(c, prev, inblock) {
    var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
    var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
    return (inblock ? cIsNsCharOrWhitespace : cIsNsCharOrWhitespace && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET) && c !== CHAR_SHARP && !(prev === CHAR_COLON && !cIsNsChar) || isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP || prev === CHAR_COLON && cIsNsChar;
  };
  var isPlainSafeFirst = function(c) {
    return isPrintable(c) && c !== CHAR_BOM && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
  };
  var isPlainSafeLast = function(c) {
    return !isWhitespace(c) && c !== CHAR_COLON;
  };
  var codePointAt = function(string, pos) {
    var first = string.charCodeAt(pos), second;
    if (first >= 55296 && first <= 56319 && pos + 1 < string.length) {
      second = string.charCodeAt(pos + 1);
      if (second >= 56320 && second <= 57343) {
        return (first - 55296) * 1024 + second - 56320 + 65536;
      }
    }
    return first;
  };
  var needIndentIndicator = function(string) {
    var leadingSpaceRe = /^\n* /;
    return leadingSpaceRe.test(string);
  };
  var chooseScalarStyle = function(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType, quotingType, forceQuotes, inblock) {
    var i;
    var char = 0;
    var prevChar = null;
    var hasLineBreak = false;
    var hasFoldableLine = false;
    var shouldTrackWidth = lineWidth !== -1;
    var previousLineBreak = -1;
    var plain = isPlainSafeFirst(codePointAt(string, 0)) && isPlainSafeLast(codePointAt(string, string.length - 1));
    if (singleLineOnly || forceQuotes) {
      for (i = 0;i < string.length; char >= 65536 ? i += 2 : i++) {
        char = codePointAt(string, i);
        if (!isPrintable(char)) {
          return STYLE_DOUBLE;
        }
        plain = plain && isPlainSafe(char, prevChar, inblock);
        prevChar = char;
      }
    } else {
      for (i = 0;i < string.length; char >= 65536 ? i += 2 : i++) {
        char = codePointAt(string, i);
        if (char === CHAR_LINE_FEED) {
          hasLineBreak = true;
          if (shouldTrackWidth) {
            hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
            previousLineBreak = i;
          }
        } else if (!isPrintable(char)) {
          return STYLE_DOUBLE;
        }
        plain = plain && isPlainSafe(char, prevChar, inblock);
        prevChar = char;
      }
      hasFoldableLine = hasFoldableLine || shouldTrackWidth && (i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ");
    }
    if (!hasLineBreak && !hasFoldableLine) {
      if (plain && !forceQuotes && !testAmbiguousType(string)) {
        return STYLE_PLAIN;
      }
      return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
    }
    if (indentPerLevel > 9 && needIndentIndicator(string)) {
      return STYLE_DOUBLE;
    }
    if (!forceQuotes) {
      return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  };
  var writeScalar = function(state, string, level, iskey, inblock) {
    state.dump = function() {
      if (string.length === 0) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
      }
      if (!state.noCompatMode) {
        if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
          return state.quotingType === QUOTING_TYPE_DOUBLE ? '"' + string + '"' : "'" + string + "'";
        }
      }
      var indent = state.indent * Math.max(1, level);
      var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
      var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
      function testAmbiguity(string2) {
        return testImplicitResolving(state, string2);
      }
      switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {
        case STYLE_PLAIN:
          return string;
        case STYLE_SINGLE:
          return "'" + string.replace(/'/g, "''") + "'";
        case STYLE_LITERAL:
          return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
        case STYLE_FOLDED:
          return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
        case STYLE_DOUBLE:
          return '"' + escapeString(string, lineWidth) + '"';
        default:
          throw new YAMLException("impossible error: invalid scalar style");
      }
    }();
  };
  var blockHeader = function(string, indentPerLevel) {
    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
    var clip = string[string.length - 1] === "\n";
    var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
    var chomp = keep ? "+" : clip ? "" : "-";
    return indentIndicator + chomp + "\n";
  };
  var dropEndingNewline = function(string) {
    return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
  };
  var foldString = function(string, width) {
    var lineRe = /(\n+)([^\n]*)/g;
    var result = function() {
      var nextLF = string.indexOf("\n");
      nextLF = nextLF !== -1 ? nextLF : string.length;
      lineRe.lastIndex = nextLF;
      return foldLine(string.slice(0, nextLF), width);
    }();
    var prevMoreIndented = string[0] === "\n" || string[0] === " ";
    var moreIndented;
    var match;
    while (match = lineRe.exec(string)) {
      var prefix = match[1], line = match[2];
      moreIndented = line[0] === " ";
      result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
      prevMoreIndented = moreIndented;
    }
    return result;
  };
  var foldLine = function(line, width) {
    if (line === "" || line[0] === " ")
      return line;
    var breakRe = / [^ ]/g;
    var match;
    var start = 0, end, curr = 0, next = 0;
    var result = "";
    while (match = breakRe.exec(line)) {
      next = match.index;
      if (next - start > width) {
        end = curr > start ? curr : next;
        result += "\n" + line.slice(start, end);
        start = end + 1;
      }
      curr = next;
    }
    result += "\n";
    if (line.length - start > width && curr > start) {
      result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
    } else {
      result += line.slice(start);
    }
    return result.slice(1);
  };
  var escapeString = function(string) {
    var result = "";
    var char = 0;
    var escapeSeq;
    for (var i = 0;i < string.length; char >= 65536 ? i += 2 : i++) {
      char = codePointAt(string, i);
      escapeSeq = ESCAPE_SEQUENCES[char];
      if (!escapeSeq && isPrintable(char)) {
        result += string[i];
        if (char >= 65536)
          result += string[i + 1];
      } else {
        result += escapeSeq || encodeHex(char);
      }
    }
    return result;
  };
  var writeFlowSequence = function(state, level, object) {
    var _result = "", _tag = state.tag, index, length, value;
    for (index = 0, length = object.length;index < length; index += 1) {
      value = object[index];
      if (state.replacer) {
        value = state.replacer.call(object, String(index), value);
      }
      if (writeNode(state, level, value, false, false) || typeof value === "undefined" && writeNode(state, level, null, false, false)) {
        if (_result !== "")
          _result += "," + (!state.condenseFlow ? " " : "");
        _result += state.dump;
      }
    }
    state.tag = _tag;
    state.dump = "[" + _result + "]";
  };
  var writeBlockSequence = function(state, level, object, compact) {
    var _result = "", _tag = state.tag, index, length, value;
    for (index = 0, length = object.length;index < length; index += 1) {
      value = object[index];
      if (state.replacer) {
        value = state.replacer.call(object, String(index), value);
      }
      if (writeNode(state, level + 1, value, true, true, false, true) || typeof value === "undefined" && writeNode(state, level + 1, null, true, true, false, true)) {
        if (!compact || _result !== "") {
          _result += generateNextLine(state, level);
        }
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          _result += "-";
        } else {
          _result += "- ";
        }
        _result += state.dump;
      }
    }
    state.tag = _tag;
    state.dump = _result || "[]";
  };
  var writeFlowMapping = function(state, level, object) {
    var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
    for (index = 0, length = objectKeyList.length;index < length; index += 1) {
      pairBuffer = "";
      if (_result !== "")
        pairBuffer += ", ";
      if (state.condenseFlow)
        pairBuffer += '"';
      objectKey = objectKeyList[index];
      objectValue = object[objectKey];
      if (state.replacer) {
        objectValue = state.replacer.call(object, objectKey, objectValue);
      }
      if (!writeNode(state, level, objectKey, false, false)) {
        continue;
      }
      if (state.dump.length > 1024)
        pairBuffer += "? ";
      pairBuffer += state.dump + (state.condenseFlow ? '"' : "") + ":" + (state.condenseFlow ? "" : " ");
      if (!writeNode(state, level, objectValue, false, false)) {
        continue;
      }
      pairBuffer += state.dump;
      _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = "{" + _result + "}";
  };
  var writeBlockMapping = function(state, level, object, compact) {
    var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
    if (state.sortKeys === true) {
      objectKeyList.sort();
    } else if (typeof state.sortKeys === "function") {
      objectKeyList.sort(state.sortKeys);
    } else if (state.sortKeys) {
      throw new YAMLException("sortKeys must be a boolean or a function");
    }
    for (index = 0, length = objectKeyList.length;index < length; index += 1) {
      pairBuffer = "";
      if (!compact || _result !== "") {
        pairBuffer += generateNextLine(state, level);
      }
      objectKey = objectKeyList[index];
      objectValue = object[objectKey];
      if (state.replacer) {
        objectValue = state.replacer.call(object, objectKey, objectValue);
      }
      if (!writeNode(state, level + 1, objectKey, true, true, true)) {
        continue;
      }
      explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
      if (explicitPair) {
        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
          pairBuffer += "?";
        } else {
          pairBuffer += "? ";
        }
      }
      pairBuffer += state.dump;
      if (explicitPair) {
        pairBuffer += generateNextLine(state, level);
      }
      if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
        continue;
      }
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += ":";
      } else {
        pairBuffer += ": ";
      }
      pairBuffer += state.dump;
      _result += pairBuffer;
    }
    state.tag = _tag;
    state.dump = _result || "{}";
  };
  var detectType = function(state, object, explicit) {
    var _result, typeList, index, length, type, style;
    typeList = explicit ? state.explicitTypes : state.implicitTypes;
    for (index = 0, length = typeList.length;index < length; index += 1) {
      type = typeList[index];
      if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
        if (explicit) {
          if (type.multi && type.representName) {
            state.tag = type.representName(object);
          } else {
            state.tag = type.tag;
          }
        } else {
          state.tag = "?";
        }
        if (type.represent) {
          style = state.styleMap[type.tag] || type.defaultStyle;
          if (_toString.call(type.represent) === "[object Function]") {
            _result = type.represent(object, style);
          } else if (_hasOwnProperty.call(type.represent, style)) {
            _result = type.represent[style](object, style);
          } else {
            throw new YAMLException("!<" + type.tag + '> tag resolver accepts not "' + style + '" style');
          }
          state.dump = _result;
        }
        return true;
      }
    }
    return false;
  };
  var writeNode = function(state, level, object, block, compact, iskey, isblockseq) {
    state.tag = null;
    state.dump = object;
    if (!detectType(state, object, false)) {
      detectType(state, object, true);
    }
    var type = _toString.call(state.dump);
    var inblock = block;
    var tagStr;
    if (block) {
      block = state.flowLevel < 0 || state.flowLevel > level;
    }
    var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
    if (objectOrArray) {
      duplicateIndex = state.duplicates.indexOf(object);
      duplicate = duplicateIndex !== -1;
    }
    if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
      compact = false;
    }
    if (duplicate && state.usedDuplicates[duplicateIndex]) {
      state.dump = "*ref_" + duplicateIndex;
    } else {
      if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
        state.usedDuplicates[duplicateIndex] = true;
      }
      if (type === "[object Object]") {
        if (block && Object.keys(state.dump).length !== 0) {
          writeBlockMapping(state, level, state.dump, compact);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + state.dump;
          }
        } else {
          writeFlowMapping(state, level, state.dump);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + " " + state.dump;
          }
        }
      } else if (type === "[object Array]") {
        if (block && state.dump.length !== 0) {
          if (state.noArrayIndent && !isblockseq && level > 0) {
            writeBlockSequence(state, level - 1, state.dump, compact);
          } else {
            writeBlockSequence(state, level, state.dump, compact);
          }
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + state.dump;
          }
        } else {
          writeFlowSequence(state, level, state.dump);
          if (duplicate) {
            state.dump = "&ref_" + duplicateIndex + " " + state.dump;
          }
        }
      } else if (type === "[object String]") {
        if (state.tag !== "?") {
          writeScalar(state, state.dump, level, iskey, inblock);
        }
      } else if (type === "[object Undefined]") {
        return false;
      } else {
        if (state.skipInvalid)
          return false;
        throw new YAMLException("unacceptable kind of an object to dump " + type);
      }
      if (state.tag !== null && state.tag !== "?") {
        tagStr = encodeURI(state.tag[0] === "!" ? state.tag.slice(1) : state.tag).replace(/!/g, "%21");
        if (state.tag[0] === "!") {
          tagStr = "!" + tagStr;
        } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
          tagStr = "!!" + tagStr.slice(18);
        } else {
          tagStr = "!<" + tagStr + ">";
        }
        state.dump = tagStr + " " + state.dump;
      }
    }
    return true;
  };
  var getDuplicateReferences = function(object, state) {
    var objects = [], duplicatesIndexes = [], index, length;
    inspectNode(object, objects, duplicatesIndexes);
    for (index = 0, length = duplicatesIndexes.length;index < length; index += 1) {
      state.duplicates.push(objects[duplicatesIndexes[index]]);
    }
    state.usedDuplicates = new Array(length);
  };
  var inspectNode = function(object, objects, duplicatesIndexes) {
    var objectKeyList, index, length;
    if (object !== null && typeof object === "object") {
      index = objects.indexOf(object);
      if (index !== -1) {
        if (duplicatesIndexes.indexOf(index) === -1) {
          duplicatesIndexes.push(index);
        }
      } else {
        objects.push(object);
        if (Array.isArray(object)) {
          for (index = 0, length = object.length;index < length; index += 1) {
            inspectNode(object[index], objects, duplicatesIndexes);
          }
        } else {
          objectKeyList = Object.keys(object);
          for (index = 0, length = objectKeyList.length;index < length; index += 1) {
            inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
          }
        }
      }
    }
  };
  var dump = function(input, options) {
    options = options || {};
    var state = new State(options);
    if (!state.noRefs)
      getDuplicateReferences(input, state);
    var value = input;
    if (state.replacer) {
      value = state.replacer.call({ "": value }, "", value);
    }
    if (writeNode(state, 0, value, true, true))
      return state.dump + "\n";
    return "";
  };
  var common = require_common();
  var YAMLException = require_exception();
  var DEFAULT_SCHEMA = require_default();
  var _toString = Object.prototype.toString;
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var CHAR_BOM = 65279;
  var CHAR_TAB = 9;
  var CHAR_LINE_FEED = 10;
  var CHAR_CARRIAGE_RETURN = 13;
  var CHAR_SPACE = 32;
  var CHAR_EXCLAMATION = 33;
  var CHAR_DOUBLE_QUOTE = 34;
  var CHAR_SHARP = 35;
  var CHAR_PERCENT = 37;
  var CHAR_AMPERSAND = 38;
  var CHAR_SINGLE_QUOTE = 39;
  var CHAR_ASTERISK = 42;
  var CHAR_COMMA = 44;
  var CHAR_MINUS = 45;
  var CHAR_COLON = 58;
  var CHAR_EQUALS = 61;
  var CHAR_GREATER_THAN = 62;
  var CHAR_QUESTION = 63;
  var CHAR_COMMERCIAL_AT = 64;
  var CHAR_LEFT_SQUARE_BRACKET = 91;
  var CHAR_RIGHT_SQUARE_BRACKET = 93;
  var CHAR_GRAVE_ACCENT = 96;
  var CHAR_LEFT_CURLY_BRACKET = 123;
  var CHAR_VERTICAL_LINE = 124;
  var CHAR_RIGHT_CURLY_BRACKET = 125;
  var ESCAPE_SEQUENCES = {};
  ESCAPE_SEQUENCES[0] = "\\0";
  ESCAPE_SEQUENCES[7] = "\\a";
  ESCAPE_SEQUENCES[8] = "\\b";
  ESCAPE_SEQUENCES[9] = "\\t";
  ESCAPE_SEQUENCES[10] = "\\n";
  ESCAPE_SEQUENCES[11] = "\\v";
  ESCAPE_SEQUENCES[12] = "\\f";
  ESCAPE_SEQUENCES[13] = "\\r";
  ESCAPE_SEQUENCES[27] = "\\e";
  ESCAPE_SEQUENCES[34] = '\\"';
  ESCAPE_SEQUENCES[92] = "\\\\";
  ESCAPE_SEQUENCES[133] = "\\N";
  ESCAPE_SEQUENCES[160] = "\\_";
  ESCAPE_SEQUENCES[8232] = "\\L";
  ESCAPE_SEQUENCES[8233] = "\\P";
  var DEPRECATED_BOOLEANS_SYNTAX = [
    "y",
    "Y",
    "yes",
    "Yes",
    "YES",
    "on",
    "On",
    "ON",
    "n",
    "N",
    "no",
    "No",
    "NO",
    "off",
    "Off",
    "OFF"
  ];
  var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
  var QUOTING_TYPE_SINGLE = 1;
  var QUOTING_TYPE_DOUBLE = 2;
  var STYLE_PLAIN = 1;
  var STYLE_SINGLE = 2;
  var STYLE_LITERAL = 3;
  var STYLE_FOLDED = 4;
  var STYLE_DOUBLE = 5;
  exports.dump = dump;
});

// node_modules/js-yaml/index.js
var require_js_yaml = __commonJS((exports, module) => {
  var renamed = function(from, to) {
    return function() {
      throw new Error("Function yaml." + from + " is removed in js-yaml 4. Use yaml." + to + " instead, which is now safe by default.");
    };
  };
  var loader = require_loader();
  var dumper = require_dumper();
  exports.Type = require_type();
  exports.Schema = require_schema4();
  exports.FAILSAFE_SCHEMA = require_failsafe();
  exports.JSON_SCHEMA = require_json();
  exports.CORE_SCHEMA = require_json();
  exports.DEFAULT_SCHEMA = require_default();
  exports.load = loader.load;
  exports.loadAll = loader.loadAll;
  exports.dump = dumper.dump;
  exports.YAMLException = require_exception();
  exports.types = {
    binary: require_binary2(),
    float: require_float3(),
    map: require_map2(),
    null: require_null2(),
    pairs: require_pairs2(),
    set: require_set2(),
    timestamp: require_timestamp2(),
    bool: require_bool3(),
    int: require_int3(),
    merge: require_merge(),
    omap: require_omap2(),
    seq: require_seq2(),
    str: require_str()
  };
  exports.safeLoad = renamed("safeLoad", "load");
  exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
  exports.safeDump = renamed("safeDump", "dump");
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS((exports, module) => {
  module.exports = "";
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS((exports, module) => {
  module.exports = "";
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS((exports, module) => {
  module.exports = {
    kClose: Symbol("close"),
    kDestroy: Symbol("destroy"),
    kDispatch: Symbol("dispatch"),
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kConnecting: Symbol("connecting"),
    kHeadersList: Symbol("headers list"),
    kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kHeadersTimeout: Symbol("headers timeout"),
    kBodyTimeout: Symbol("body timeout"),
    kServerName: Symbol("server name"),
    kLocalAddress: Symbol("local address"),
    kHost: Symbol("host"),
    kNoRef: Symbol("no ref"),
    kBodyUsed: Symbol("used"),
    kRunning: Symbol("running"),
    kBlocking: Symbol("blocking"),
    kPending: Symbol("pending"),
    kSize: Symbol("size"),
    kBusy: Symbol("busy"),
    kQueued: Symbol("queued"),
    kFree: Symbol("free"),
    kConnected: Symbol("connected"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol.for("nodejs.stream.destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClients: Symbol("clients"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelining"),
    kSocket: Symbol("socket"),
    kHostHeader: Symbol("host header"),
    kConnector: Symbol("connector"),
    kStrictContentLength: Symbol("strict content length"),
    kMaxRedirections: Symbol("maxRedirections"),
    kMaxRequests: Symbol("maxRequestsPerClient"),
    kProxy: Symbol("proxy agent options"),
    kCounter: Symbol("socket request counter"),
    kInterceptors: Symbol("dispatch interceptors"),
    kMaxResponseSize: Symbol("max response size"),
    kHTTP2Session: Symbol("http2Session"),
    kHTTP2SessionState: Symbol("http2Session state"),
    kHTTP2BuildRequest: Symbol("http2 build request"),
    kHTTP1BuildRequest: Symbol("http1 build request"),
    kHTTP2CopyHeaders: Symbol("http2 copy headers"),
    kHTTPConnVersion: Symbol("http connection version")
  };
});

// node_modules/undici/lib/core/errors.js
var require_errors2 = __commonJS((exports, module) => {
  class UndiciError extends Error {
    constructor(message) {
      super(message);
      this.name = "UndiciError";
      this.code = "UND_ERR";
    }
  }

  class ConnectTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ConnectTimeoutError);
      this.name = "ConnectTimeoutError";
      this.message = message || "Connect Timeout Error";
      this.code = "UND_ERR_CONNECT_TIMEOUT";
    }
  }

  class HeadersTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, HeadersTimeoutError);
      this.name = "HeadersTimeoutError";
      this.message = message || "Headers Timeout Error";
      this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
  }

  class HeadersOverflowError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, HeadersOverflowError);
      this.name = "HeadersOverflowError";
      this.message = message || "Headers Overflow Error";
      this.code = "UND_ERR_HEADERS_OVERFLOW";
    }
  }

  class BodyTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, BodyTimeoutError);
      this.name = "BodyTimeoutError";
      this.message = message || "Body Timeout Error";
      this.code = "UND_ERR_BODY_TIMEOUT";
    }
  }

  class ResponseStatusCodeError extends UndiciError {
    constructor(message, statusCode, headers, body) {
      super(message);
      Error.captureStackTrace(this, ResponseStatusCodeError);
      this.name = "ResponseStatusCodeError";
      this.message = message || "Response Status Code Error";
      this.code = "UND_ERR_RESPONSE_STATUS_CODE";
      this.body = body;
      this.status = statusCode;
      this.statusCode = statusCode;
      this.headers = headers;
    }
  }

  class InvalidArgumentError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidArgumentError);
      this.name = "InvalidArgumentError";
      this.message = message || "Invalid Argument Error";
      this.code = "UND_ERR_INVALID_ARG";
    }
  }

  class InvalidReturnValueError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidReturnValueError);
      this.name = "InvalidReturnValueError";
      this.message = message || "Invalid Return Value Error";
      this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
  }

  class RequestAbortedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestAbortedError);
      this.name = "AbortError";
      this.message = message || "Request aborted";
      this.code = "UND_ERR_ABORTED";
    }
  }

  class InformationalError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InformationalError);
      this.name = "InformationalError";
      this.message = message || "Request information";
      this.code = "UND_ERR_INFO";
    }
  }

  class RequestContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestContentLengthMismatchError);
      this.name = "RequestContentLengthMismatchError";
      this.message = message || "Request body length does not match content-length header";
      this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
    }
  }

  class ResponseContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ResponseContentLengthMismatchError);
      this.name = "ResponseContentLengthMismatchError";
      this.message = message || "Response body length does not match content-length header";
      this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
    }
  }

  class ClientDestroyedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientDestroyedError);
      this.name = "ClientDestroyedError";
      this.message = message || "The client is destroyed";
      this.code = "UND_ERR_DESTROYED";
    }
  }

  class ClientClosedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientClosedError);
      this.name = "ClientClosedError";
      this.message = message || "The client is closed";
      this.code = "UND_ERR_CLOSED";
    }
  }

  class SocketError extends UndiciError {
    constructor(message, socket) {
      super(message);
      Error.captureStackTrace(this, SocketError);
      this.name = "SocketError";
      this.message = message || "Socket error";
      this.code = "UND_ERR_SOCKET";
      this.socket = socket;
    }
  }

  class NotSupportedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, NotSupportedError);
      this.name = "NotSupportedError";
      this.message = message || "Not supported error";
      this.code = "UND_ERR_NOT_SUPPORTED";
    }
  }

  class BalancedPoolMissingUpstreamError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, NotSupportedError);
      this.name = "MissingUpstreamError";
      this.message = message || "No upstream has been added to the BalancedPool";
      this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
    }
  }

  class HTTPParserError extends Error {
    constructor(message, code, data) {
      super(message);
      Error.captureStackTrace(this, HTTPParserError);
      this.name = "HTTPParserError";
      this.code = code ? `HPE_${code}` : undefined;
      this.data = data ? data.toString() : undefined;
    }
  }

  class ResponseExceededMaxSizeError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ResponseExceededMaxSizeError);
      this.name = "ResponseExceededMaxSizeError";
      this.message = message || "Response content exceeded max size";
      this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
    }
  }
  module.exports = {
    HTTPParserError,
    UndiciError,
    HeadersTimeoutError,
    HeadersOverflowError,
    BodyTimeoutError,
    RequestContentLengthMismatchError,
    ConnectTimeoutError,
    ResponseStatusCodeError,
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    InformationalError,
    SocketError,
    NotSupportedError,
    ResponseContentLengthMismatchError,
    BalancedPoolMissingUpstreamError,
    ResponseExceededMaxSizeError
  };
});

// node_modules/undici/lib/core/util.js
var require_util = __commonJS((exports, module) => {
  var nop = function() {
  };
  var isStream = function(obj) {
    return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
  };
  var isBlobLike = function(object) {
    return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
  };
  var buildURL = function(url, queryParams) {
    if (url.includes("?") || url.includes("#")) {
      throw new Error('Query params cannot be passed when url already contains "?" or "#".');
    }
    const stringified = stringify(queryParams);
    if (stringified) {
      url += "?" + stringified;
    }
    return url;
  };
  var parseURL = function(url) {
    if (typeof url === "string") {
      url = new URL(url);
      if (!/^https?:/.test(url.origin || url.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      return url;
    }
    if (!url || typeof url !== "object") {
      throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
    }
    if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
      throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
    }
    if (url.path != null && typeof url.path !== "string") {
      throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
    }
    if (url.pathname != null && typeof url.pathname !== "string") {
      throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
    }
    if (url.hostname != null && typeof url.hostname !== "string") {
      throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
    }
    if (url.origin != null && typeof url.origin !== "string") {
      throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
    }
    if (!/^https?:/.test(url.origin || url.protocol)) {
      throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
    }
    if (!(url instanceof URL)) {
      const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
      let origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
      let path = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
      if (origin.endsWith("/")) {
        origin = origin.substring(0, origin.length - 1);
      }
      if (path && !path.startsWith("/")) {
        path = `/${path}`;
      }
      url = new URL(origin + path);
    }
    return url;
  };
  var parseOrigin = function(url) {
    url = parseURL(url);
    if (url.pathname !== "/" || url.search || url.hash) {
      throw new InvalidArgumentError("invalid url");
    }
    return url;
  };
  var getHostname = function(host) {
    if (host[0] === "[") {
      const idx2 = host.indexOf("]");
      assert(idx2 !== -1);
      return host.substr(1, idx2 - 1);
    }
    const idx = host.indexOf(":");
    if (idx === -1)
      return host;
    return host.substr(0, idx);
  };
  var getServerName = function(host) {
    if (!host) {
      return null;
    }
    assert.strictEqual(typeof host, "string");
    const servername = getHostname(host);
    if (net.isIP(servername)) {
      return "";
    }
    return servername;
  };
  var deepClone = function(obj) {
    return JSON.parse(JSON.stringify(obj));
  };
  var isAsyncIterable = function(obj) {
    return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
  };
  var isIterable = function(obj) {
    return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
  };
  var bodyLength = function(body) {
    if (body == null) {
      return 0;
    } else if (isStream(body)) {
      const state = body._readableState;
      return state && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    } else if (isBlobLike(body)) {
      return body.size != null ? body.size : null;
    } else if (isBuffer(body)) {
      return body.byteLength;
    }
    return null;
  };
  var isDestroyed = function(stream2) {
    return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
  };
  var isReadableAborted = function(stream2) {
    const state = stream2 && stream2._readableState;
    return isDestroyed(stream2) && state && !state.endEmitted;
  };
  var destroy = function(stream2, err) {
    if (!isStream(stream2) || isDestroyed(stream2)) {
      return;
    }
    if (typeof stream2.destroy === "function") {
      if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
        stream2.socket = null;
      }
      stream2.destroy(err);
    } else if (err) {
      process.nextTick((stream3, err2) => {
        stream3.emit("error", err2);
      }, stream2, err);
    }
    if (stream2.destroyed !== true) {
      stream2[kDestroyed] = true;
    }
  };
  var parseKeepAliveTimeout = function(val) {
    const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1], 10) * 1000 : null;
  };
  var parseHeaders = function(headers, obj = {}) {
    if (!Array.isArray(headers))
      return headers;
    for (let i = 0;i < headers.length; i += 2) {
      const key = headers[i].toString().toLowerCase();
      let val = obj[key];
      if (!val) {
        if (Array.isArray(headers[i + 1])) {
          obj[key] = headers[i + 1];
        } else {
          obj[key] = headers[i + 1].toString("utf8");
        }
      } else {
        if (!Array.isArray(val)) {
          val = [val];
          obj[key] = val;
        }
        val.push(headers[i + 1].toString("utf8"));
      }
    }
    if (("content-length" in obj) && ("content-disposition" in obj)) {
      obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
    }
    return obj;
  };
  var parseRawHeaders = function(headers) {
    const ret = [];
    let hasContentLength = false;
    let contentDispositionIdx = -1;
    for (let n = 0;n < headers.length; n += 2) {
      const key = headers[n + 0].toString();
      const val = headers[n + 1].toString("utf8");
      if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
        ret.push(key, val);
        hasContentLength = true;
      } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
        contentDispositionIdx = ret.push(key, val) - 1;
      } else {
        ret.push(key, val);
      }
    }
    if (hasContentLength && contentDispositionIdx !== -1) {
      ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
    }
    return ret;
  };
  var isBuffer = function(buffer) {
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
  };
  var validateHandler = function(handler, method, upgrade) {
    if (!handler || typeof handler !== "object") {
      throw new InvalidArgumentError("handler must be an object");
    }
    if (typeof handler.onConnect !== "function") {
      throw new InvalidArgumentError("invalid onConnect method");
    }
    if (typeof handler.onError !== "function") {
      throw new InvalidArgumentError("invalid onError method");
    }
    if (typeof handler.onBodySent !== "function" && handler.onBodySent !== undefined) {
      throw new InvalidArgumentError("invalid onBodySent method");
    }
    if (upgrade || method === "CONNECT") {
      if (typeof handler.onUpgrade !== "function") {
        throw new InvalidArgumentError("invalid onUpgrade method");
      }
    } else {
      if (typeof handler.onHeaders !== "function") {
        throw new InvalidArgumentError("invalid onHeaders method");
      }
      if (typeof handler.onData !== "function") {
        throw new InvalidArgumentError("invalid onData method");
      }
      if (typeof handler.onComplete !== "function") {
        throw new InvalidArgumentError("invalid onComplete method");
      }
    }
  };
  var isDisturbed = function(body) {
    return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
  };
  var isErrored = function(body) {
    return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
  };
  var isReadable = function(body) {
    return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
  };
  var getSocketInfo = function(socket) {
    return {
      localAddress: socket.localAddress,
      localPort: socket.localPort,
      remoteAddress: socket.remoteAddress,
      remotePort: socket.remotePort,
      remoteFamily: socket.remoteFamily,
      timeout: socket.timeout,
      bytesWritten: socket.bytesWritten,
      bytesRead: socket.bytesRead
    };
  };
  async function* convertIterableToBuffer(iterable) {
    for await (const chunk of iterable) {
      yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
    }
  }
  var ReadableStreamFrom = function(iterable) {
    if (!ReadableStream2) {
      ReadableStream2 = __require("stream/web").ReadableStream;
    }
    if (ReadableStream2.from) {
      return ReadableStream2.from(convertIterableToBuffer(iterable));
    }
    let iterator;
    return new ReadableStream2({
      async start() {
        iterator = iterable[Symbol.asyncIterator]();
      },
      async pull(controller) {
        const { done, value } = await iterator.next();
        if (done) {
          queueMicrotask(() => {
            controller.close();
          });
        } else {
          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
          controller.enqueue(new Uint8Array(buf));
        }
        return controller.desiredSize > 0;
      },
      async cancel(reason) {
        await iterator.return();
      }
    }, 0);
  };
  var isFormDataLike = function(object) {
    return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
  };
  var throwIfAborted = function(signal) {
    if (!signal) {
      return;
    }
    if (typeof signal.throwIfAborted === "function") {
      signal.throwIfAborted();
    } else {
      if (signal.aborted) {
        const err = new Error("The operation was aborted");
        err.name = "AbortError";
        throw err;
      }
    }
  };
  var addAbortListener = function(signal, listener) {
    if (typeof Symbol.dispose === "symbol") {
      if (!events) {
        events = __require("events");
      }
      if (typeof events.addAbortListener === "function" && ("aborted" in signal)) {
        return events.addAbortListener(signal, listener);
      }
    }
    if ("addEventListener" in signal) {
      signal.addEventListener("abort", listener, { once: true });
      return () => signal.removeEventListener("abort", listener);
    }
    signal.addListener("abort", listener);
    return () => signal.removeListener("abort", listener);
  };
  var toUSVString = function(val) {
    if (hasToWellFormed) {
      return `${val}`.toWellFormed();
    } else if (nodeUtil.toUSVString) {
      return nodeUtil.toUSVString(val);
    }
    return `${val}`;
  };
  var assert = __require("assert");
  var { kDestroyed, kBodyUsed } = require_symbols();
  var { IncomingMessage } = __require("http");
  var stream = __require("stream");
  var net = __require("net");
  var { InvalidArgumentError } = require_errors2();
  var { Blob: Blob2 } = __require("buffer");
  var nodeUtil = __require("util");
  var { stringify } = __require("querystring");
  var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v) => Number(v));
  var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
  var ReadableStream2;
  var events;
  var hasToWellFormed = !!String.prototype.toWellFormed;
  var kEnumerableProperty = Object.create(null);
  kEnumerableProperty.enumerable = true;
  module.exports = {
    kEnumerableProperty,
    nop,
    isDisturbed,
    isErrored,
    isReadable,
    toUSVString,
    isReadableAborted,
    isBlobLike,
    parseOrigin,
    parseURL,
    getServerName,
    isStream,
    isIterable,
    isAsyncIterable,
    isDestroyed,
    parseRawHeaders,
    parseHeaders,
    parseKeepAliveTimeout,
    destroy,
    bodyLength,
    deepClone,
    ReadableStreamFrom,
    isBuffer,
    validateHandler,
    getSocketInfo,
    isFormDataLike,
    buildURL,
    throwIfAborted,
    addAbortListener,
    nodeMajor,
    nodeMinor,
    nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13
  };
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS((exports, module) => {
  var onTimeout = function() {
    fastNow = Date.now();
    let len = fastTimers.length;
    let idx = 0;
    while (idx < len) {
      const timer = fastTimers[idx];
      if (timer.state === 0) {
        timer.state = fastNow + timer.delay;
      } else if (timer.state > 0 && fastNow >= timer.state) {
        timer.state = -1;
        timer.callback(timer.opaque);
      }
      if (timer.state === -1) {
        timer.state = -2;
        if (idx !== len - 1) {
          fastTimers[idx] = fastTimers.pop();
        } else {
          fastTimers.pop();
        }
        len -= 1;
      } else {
        idx += 1;
      }
    }
    if (fastTimers.length > 0) {
      refreshTimeout();
    }
  };
  var refreshTimeout = function() {
    if (fastNowTimeout && fastNowTimeout.refresh) {
      fastNowTimeout.refresh();
    } else {
      clearTimeout(fastNowTimeout);
      fastNowTimeout = setTimeout(onTimeout, 1000);
      if (fastNowTimeout.unref) {
        fastNowTimeout.unref();
      }
    }
  };
  var fastNow = Date.now();
  var fastNowTimeout;
  var fastTimers = [];

  class Timeout {
    constructor(callback, delay, opaque) {
      this.callback = callback;
      this.delay = delay;
      this.opaque = opaque;
      this.state = -2;
      this.refresh();
    }
    refresh() {
      if (this.state === -2) {
        fastTimers.push(this);
        if (!fastNowTimeout || fastTimers.length === 1) {
          refreshTimeout();
        }
      }
      this.state = 0;
    }
    clear() {
      this.state = -1;
    }
  }
  module.exports = {
    setTimeout(callback, delay, opaque) {
      return delay < 1000 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
    },
    clearTimeout(timeout) {
      if (timeout instanceof Timeout) {
        timeout.clear();
      } else {
        clearTimeout(timeout);
      }
    }
  };
});

// node_modules/busboy/lib/utils.js
var require_utils2 = __commonJS((exports, module) => {
  var parseContentType = function(str) {
    if (str.length === 0)
      return;
    const params = Object.create(null);
    let i = 0;
    for (;i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (TOKEN[code] !== 1) {
        if (code !== 47 || i === 0)
          return;
        break;
      }
    }
    if (i === str.length)
      return;
    const type = str.slice(0, i).toLowerCase();
    const subtypeStart = ++i;
    for (;i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (TOKEN[code] !== 1) {
        if (i === subtypeStart)
          return;
        if (parseContentTypeParams(str, i, params) === undefined)
          return;
        break;
      }
    }
    if (i === subtypeStart)
      return;
    const subtype = str.slice(subtypeStart, i).toLowerCase();
    return { type, subtype, params };
  };
  var parseContentTypeParams = function(str, i, params) {
    while (i < str.length) {
      for (;i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (code !== 32 && code !== 9)
          break;
      }
      if (i === str.length)
        break;
      if (str.charCodeAt(i++) !== 59)
        return;
      for (;i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (code !== 32 && code !== 9)
          break;
      }
      if (i === str.length)
        return;
      let name;
      const nameStart = i;
      for (;i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (TOKEN[code] !== 1) {
          if (code !== 61)
            return;
          break;
        }
      }
      if (i === str.length)
        return;
      name = str.slice(nameStart, i);
      ++i;
      if (i === str.length)
        return;
      let value = "";
      let valueStart;
      if (str.charCodeAt(i) === 34) {
        valueStart = ++i;
        let escaping = false;
        for (;i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (code === 92) {
            if (escaping) {
              valueStart = i;
              escaping = false;
            } else {
              value += str.slice(valueStart, i);
              escaping = true;
            }
            continue;
          }
          if (code === 34) {
            if (escaping) {
              valueStart = i;
              escaping = false;
              continue;
            }
            value += str.slice(valueStart, i);
            break;
          }
          if (escaping) {
            valueStart = i - 1;
            escaping = false;
          }
          if (QDTEXT[code] !== 1)
            return;
        }
        if (i === str.length)
          return;
        ++i;
      } else {
        valueStart = i;
        for (;i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (TOKEN[code] !== 1) {
            if (i === valueStart)
              return;
            break;
          }
        }
        value = str.slice(valueStart, i);
      }
      name = name.toLowerCase();
      if (params[name] === undefined)
        params[name] = value;
    }
    return params;
  };
  var parseDisposition = function(str, defDecoder) {
    if (str.length === 0)
      return;
    const params = Object.create(null);
    let i = 0;
    for (;i < str.length; ++i) {
      const code = str.charCodeAt(i);
      if (TOKEN[code] !== 1) {
        if (parseDispositionParams(str, i, params, defDecoder) === undefined)
          return;
        break;
      }
    }
    const type = str.slice(0, i).toLowerCase();
    return { type, params };
  };
  var parseDispositionParams = function(str, i, params, defDecoder) {
    while (i < str.length) {
      for (;i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (code !== 32 && code !== 9)
          break;
      }
      if (i === str.length)
        break;
      if (str.charCodeAt(i++) !== 59)
        return;
      for (;i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (code !== 32 && code !== 9)
          break;
      }
      if (i === str.length)
        return;
      let name;
      const nameStart = i;
      for (;i < str.length; ++i) {
        const code = str.charCodeAt(i);
        if (TOKEN[code] !== 1) {
          if (code === 61)
            break;
          return;
        }
      }
      if (i === str.length)
        return;
      let value = "";
      let valueStart;
      let charset;
      name = str.slice(nameStart, i);
      if (name.charCodeAt(name.length - 1) === 42) {
        const charsetStart = ++i;
        for (;i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (CHARSET[code] !== 1) {
            if (code !== 39)
              return;
            break;
          }
        }
        if (i === str.length)
          return;
        charset = str.slice(charsetStart, i);
        ++i;
        for (;i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (code === 39)
            break;
        }
        if (i === str.length)
          return;
        ++i;
        if (i === str.length)
          return;
        valueStart = i;
        let encode = 0;
        for (;i < str.length; ++i) {
          const code = str.charCodeAt(i);
          if (EXTENDED_VALUE[code] !== 1) {
            if (code === 37) {
              let hexUpper;
              let hexLower;
              if (i + 2 < str.length && (hexUpper = HEX_VALUES[str.charCodeAt(i + 1)]) !== -1 && (hexLower = HEX_VALUES[str.charCodeAt(i + 2)]) !== -1) {
                const byteVal = (hexUpper << 4) + hexLower;
                value += str.slice(valueStart, i);
                value += String.fromCharCode(byteVal);
                i += 2;
                valueStart = i + 1;
                if (byteVal >= 128)
                  encode = 2;
                else if (encode === 0)
                  encode = 1;
                continue;
              }
              return;
            }
            break;
          }
        }
        value += str.slice(valueStart, i);
        value = convertToUTF8(value, charset, encode);
        if (value === undefined)
          return;
      } else {
        ++i;
        if (i === str.length)
          return;
        if (str.charCodeAt(i) === 34) {
          valueStart = ++i;
          let escaping = false;
          for (;i < str.length; ++i) {
            const code = str.charCodeAt(i);
            if (code === 92) {
              if (escaping) {
                valueStart = i;
                escaping = false;
              } else {
                value += str.slice(valueStart, i);
                escaping = true;
              }
              continue;
            }
            if (code === 34) {
              if (escaping) {
                valueStart = i;
                escaping = false;
                continue;
              }
              value += str.slice(valueStart, i);
              break;
            }
            if (escaping) {
              valueStart = i - 1;
              escaping = false;
            }
            if (QDTEXT[code] !== 1)
              return;
          }
          if (i === str.length)
            return;
          ++i;
        } else {
          valueStart = i;
          for (;i < str.length; ++i) {
            const code = str.charCodeAt(i);
            if (TOKEN[code] !== 1) {
              if (i === valueStart)
                return;
              break;
            }
          }
          value = str.slice(valueStart, i);
        }
        value = defDecoder(value, 2);
        if (value === undefined)
          return;
      }
      name = name.toLowerCase();
      if (params[name] === undefined)
        params[name] = value;
    }
    return params;
  };
  var getDecoder = function(charset) {
    let lc;
    while (true) {
      switch (charset) {
        case "utf-8":
        case "utf8":
          return decoders.utf8;
        case "latin1":
        case "ascii":
        case "us-ascii":
        case "iso-8859-1":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "windows-1252":
        case "iso_8859-1:1987":
        case "cp1252":
        case "x-cp1252":
          return decoders.latin1;
        case "utf16le":
        case "utf-16le":
        case "ucs2":
        case "ucs-2":
          return decoders.utf16le;
        case "base64":
          return decoders.base64;
        default:
          if (lc === undefined) {
            lc = true;
            charset = charset.toLowerCase();
            continue;
          }
          return decoders.other.bind(charset);
      }
    }
  };
  var convertToUTF8 = function(data, charset, hint) {
    const decode = getDecoder(charset);
    if (decode)
      return decode(data, hint);
  };
  var basename = function(path) {
    if (typeof path !== "string")
      return "";
    for (let i = path.length - 1;i >= 0; --i) {
      switch (path.charCodeAt(i)) {
        case 47:
        case 92:
          path = path.slice(i + 1);
          return path === ".." || path === "." ? "" : path;
      }
    }
    return path === ".." || path === "." ? "" : path;
  };
  var decoders = {
    utf8: (data, hint) => {
      if (data.length === 0)
        return "";
      if (typeof data === "string") {
        if (hint < 2)
          return data;
        data = Buffer.from(data, "latin1");
      }
      return data.utf8Slice(0, data.length);
    },
    latin1: (data, hint) => {
      if (data.length === 0)
        return "";
      if (typeof data === "string")
        return data;
      return data.latin1Slice(0, data.length);
    },
    utf16le: (data, hint) => {
      if (data.length === 0)
        return "";
      if (typeof data === "string")
        data = Buffer.from(data, "latin1");
      return data.ucs2Slice(0, data.length);
    },
    base64: (data, hint) => {
      if (data.length === 0)
        return "";
      if (typeof data === "string")
        data = Buffer.from(data, "latin1");
      return data.base64Slice(0, data.length);
    },
    other: (data, hint) => {
      if (data.length === 0)
        return "";
      if (typeof data === "string")
        data = Buffer.from(data, "latin1");
      try {
        const decoder = new TextDecoder(exports);
        return decoder.decode(data);
      } catch {
      }
    }
  };
  var TOKEN = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  var QDTEXT = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  ];
  var CHARSET = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  var EXTENDED_VALUE = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  var HEX_VALUES = [
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    10,
    11,
    12,
    13,
    14,
    15,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    10,
    11,
    12,
    13,
    14,
    15,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1
  ];
  module.exports = {
    basename,
    convertToUTF8,
    getDecoder,
    parseContentType,
    parseDisposition
  };
});

// node_modules/streamsearch/lib/sbmh.js
var require_sbmh = __commonJS((exports, module) => {
  var memcmp = function(buf1, pos1, buf2, pos2, num) {
    for (let i = 0;i < num; ++i) {
      if (buf1[pos1 + i] !== buf2[pos2 + i])
        return false;
    }
    return true;
  };
  var feed = function(self2, data) {
    const len = data.length;
    const needle = self2._needle;
    const needleLen = needle.length;
    let pos = -self2._lookbehindSize;
    const lastNeedleCharPos = needleLen - 1;
    const lastNeedleChar = needle[lastNeedleCharPos];
    const end = len - needleLen;
    const occ = self2._occ;
    const lookbehind = self2._lookbehind;
    if (pos < 0) {
      while (pos < 0 && pos <= end) {
        const nextPos = pos + lastNeedleCharPos;
        const ch = nextPos < 0 ? lookbehind[self2._lookbehindSize + nextPos] : data[nextPos];
        if (ch === lastNeedleChar && matchNeedle(self2, data, pos, lastNeedleCharPos)) {
          self2._lookbehindSize = 0;
          ++self2.matches;
          if (pos > -self2._lookbehindSize)
            self2._cb(true, lookbehind, 0, self2._lookbehindSize + pos, false);
          else
            self2._cb(true, undefined, 0, 0, true);
          return self2._bufPos = pos + needleLen;
        }
        pos += occ[ch];
      }
      while (pos < 0 && !matchNeedle(self2, data, pos, len - pos))
        ++pos;
      if (pos < 0) {
        const bytesToCutOff = self2._lookbehindSize + pos;
        if (bytesToCutOff > 0) {
          self2._cb(false, lookbehind, 0, bytesToCutOff, false);
        }
        self2._lookbehindSize -= bytesToCutOff;
        lookbehind.copy(lookbehind, 0, bytesToCutOff, self2._lookbehindSize);
        lookbehind.set(data, self2._lookbehindSize);
        self2._lookbehindSize += len;
        self2._bufPos = len;
        return len;
      }
      self2._cb(false, lookbehind, 0, self2._lookbehindSize, false);
      self2._lookbehindSize = 0;
    }
    pos += self2._bufPos;
    const firstNeedleChar = needle[0];
    while (pos <= end) {
      const ch = data[pos + lastNeedleCharPos];
      if (ch === lastNeedleChar && data[pos] === firstNeedleChar && memcmp(needle, 0, data, pos, lastNeedleCharPos)) {
        ++self2.matches;
        if (pos > 0)
          self2._cb(true, data, self2._bufPos, pos, true);
        else
          self2._cb(true, undefined, 0, 0, true);
        return self2._bufPos = pos + needleLen;
      }
      pos += occ[ch];
    }
    while (pos < len) {
      if (data[pos] !== firstNeedleChar || !memcmp(data, pos, needle, 0, len - pos)) {
        ++pos;
        continue;
      }
      data.copy(lookbehind, 0, pos, len);
      self2._lookbehindSize = len - pos;
      break;
    }
    if (pos > 0)
      self2._cb(false, data, self2._bufPos, pos < len ? pos : len, true);
    self2._bufPos = len;
    return len;
  };
  var matchNeedle = function(self2, data, pos, len) {
    const lb = self2._lookbehind;
    const lbSize = self2._lookbehindSize;
    const needle = self2._needle;
    for (let i = 0;i < len; ++i, ++pos) {
      const ch = pos < 0 ? lb[lbSize + pos] : data[pos];
      if (ch !== needle[i])
        return false;
    }
    return true;
  };

  class SBMH {
    constructor(needle, cb) {
      if (typeof cb !== "function")
        throw new Error("Missing match callback");
      if (typeof needle === "string")
        needle = Buffer.from(needle);
      else if (!Buffer.isBuffer(needle))
        throw new Error(`Expected Buffer for needle, got ${typeof needle}`);
      const needleLen = needle.length;
      this.maxMatches = Infinity;
      this.matches = 0;
      this._cb = cb;
      this._lookbehindSize = 0;
      this._needle = needle;
      this._bufPos = 0;
      this._lookbehind = Buffer.allocUnsafe(needleLen);
      this._occ = [
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen,
        needleLen
      ];
      if (needleLen > 1) {
        for (let i = 0;i < needleLen - 1; ++i)
          this._occ[needle[i]] = needleLen - 1 - i;
      }
    }
    reset() {
      this.matches = 0;
      this._lookbehindSize = 0;
      this._bufPos = 0;
    }
    push(chunk, pos) {
      let result;
      if (!Buffer.isBuffer(chunk))
        chunk = Buffer.from(chunk, "latin1");
      const chunkLen = chunk.length;
      this._bufPos = pos || 0;
      while (result !== chunkLen && this.matches < this.maxMatches)
        result = feed(this, chunk);
      return result;
    }
    destroy() {
      const lbSize = this._lookbehindSize;
      if (lbSize)
        this._cb(false, this._lookbehind, 0, lbSize, false);
      this.reset();
    }
  }
  module.exports = SBMH;
});

// node_modules/busboy/lib/types/multipart.js
var require_multipart = __commonJS((exports, module) => {
  var noop = function() {
  };
  var callAndUnsetCb = function(self2, err) {
    const cb = self2._writecb;
    self2._writecb = null;
    if (err)
      self2.destroy(err);
    else if (cb)
      cb();
  };
  var nullDecoder = function(val, hint) {
    return val;
  };
  var finalcb = function(self2, cb, err) {
    if (err)
      return cb(err);
    err = checkEndState(self2);
    cb(err);
  };
  var checkEndState = function(self2) {
    if (self2._hparser)
      return new Error("Malformed part header");
    const fileStream = self2._fileStream;
    if (fileStream) {
      self2._fileStream = null;
      fileStream.destroy(new Error("Unexpected end of file"));
    }
    if (!self2._complete)
      return new Error("Unexpected end of form");
  };
  var { Readable, Writable } = __require("stream");
  var StreamSearch = require_sbmh();
  var {
    basename,
    convertToUTF8,
    getDecoder,
    parseContentType,
    parseDisposition
  } = require_utils2();
  var BUF_CRLF = Buffer.from("\r\n");
  var BUF_CR = Buffer.from("\r");
  var BUF_DASH = Buffer.from("-");
  var MAX_HEADER_PAIRS = 2000;
  var MAX_HEADER_SIZE = 16 * 1024;
  var HPARSER_NAME = 0;
  var HPARSER_PRE_OWS = 1;
  var HPARSER_VALUE = 2;

  class HeaderParser {
    constructor(cb) {
      this.header = Object.create(null);
      this.pairCount = 0;
      this.byteCount = 0;
      this.state = HPARSER_NAME;
      this.name = "";
      this.value = "";
      this.crlf = 0;
      this.cb = cb;
    }
    reset() {
      this.header = Object.create(null);
      this.pairCount = 0;
      this.byteCount = 0;
      this.state = HPARSER_NAME;
      this.name = "";
      this.value = "";
      this.crlf = 0;
    }
    push(chunk, pos, end) {
      let start = pos;
      while (pos < end) {
        switch (this.state) {
          case HPARSER_NAME: {
            let done = false;
            for (;pos < end; ++pos) {
              if (this.byteCount === MAX_HEADER_SIZE)
                return -1;
              ++this.byteCount;
              const code = chunk[pos];
              if (TOKEN[code] !== 1) {
                if (code !== 58)
                  return -1;
                this.name += chunk.latin1Slice(start, pos);
                if (this.name.length === 0)
                  return -1;
                ++pos;
                done = true;
                this.state = HPARSER_PRE_OWS;
                break;
              }
            }
            if (!done) {
              this.name += chunk.latin1Slice(start, pos);
              break;
            }
          }
          case HPARSER_PRE_OWS: {
            let done = false;
            for (;pos < end; ++pos) {
              if (this.byteCount === MAX_HEADER_SIZE)
                return -1;
              ++this.byteCount;
              const code = chunk[pos];
              if (code !== 32 && code !== 9) {
                start = pos;
                done = true;
                this.state = HPARSER_VALUE;
                break;
              }
            }
            if (!done)
              break;
          }
          case HPARSER_VALUE:
            switch (this.crlf) {
              case 0:
                for (;pos < end; ++pos) {
                  if (this.byteCount === MAX_HEADER_SIZE)
                    return -1;
                  ++this.byteCount;
                  const code = chunk[pos];
                  if (FIELD_VCHAR[code] !== 1) {
                    if (code !== 13)
                      return -1;
                    ++this.crlf;
                    break;
                  }
                }
                this.value += chunk.latin1Slice(start, pos++);
                break;
              case 1:
                if (this.byteCount === MAX_HEADER_SIZE)
                  return -1;
                ++this.byteCount;
                if (chunk[pos++] !== 10)
                  return -1;
                ++this.crlf;
                break;
              case 2: {
                if (this.byteCount === MAX_HEADER_SIZE)
                  return -1;
                ++this.byteCount;
                const code = chunk[pos];
                if (code === 32 || code === 9) {
                  start = pos;
                  this.crlf = 0;
                } else {
                  if (++this.pairCount < MAX_HEADER_PAIRS) {
                    this.name = this.name.toLowerCase();
                    if (this.header[this.name] === undefined)
                      this.header[this.name] = [this.value];
                    else
                      this.header[this.name].push(this.value);
                  }
                  if (code === 13) {
                    ++this.crlf;
                    ++pos;
                  } else {
                    start = pos;
                    this.crlf = 0;
                    this.state = HPARSER_NAME;
                    this.name = "";
                    this.value = "";
                  }
                }
                break;
              }
              case 3: {
                if (this.byteCount === MAX_HEADER_SIZE)
                  return -1;
                ++this.byteCount;
                if (chunk[pos++] !== 10)
                  return -1;
                const header = this.header;
                this.reset();
                this.cb(header);
                return pos;
              }
            }
            break;
        }
      }
      return pos;
    }
  }

  class FileStream extends Readable {
    constructor(opts, owner) {
      super(opts);
      this.truncated = false;
      this._readcb = null;
      this.once("end", () => {
        this._read();
        if (--owner._fileEndsLeft === 0 && owner._finalcb) {
          const cb = owner._finalcb;
          owner._finalcb = null;
          process.nextTick(cb);
        }
      });
    }
    _read(n) {
      const cb = this._readcb;
      if (cb) {
        this._readcb = null;
        cb();
      }
    }
  }
  var ignoreData = {
    push: (chunk, pos) => {
    },
    destroy: () => {
    }
  };

  class Multipart extends Writable {
    constructor(cfg) {
      const streamOpts = {
        autoDestroy: true,
        emitClose: true,
        highWaterMark: typeof cfg.highWaterMark === "number" ? cfg.highWaterMark : undefined
      };
      super(streamOpts);
      if (!cfg.conType.params || typeof cfg.conType.params.boundary !== "string")
        throw new Error("Multipart: Boundary not found");
      const boundary = cfg.conType.params.boundary;
      const paramDecoder = typeof cfg.defParamCharset === "string" && cfg.defParamCharset ? getDecoder(cfg.defParamCharset) : nullDecoder;
      const defCharset = cfg.defCharset || "utf8";
      const preservePath = cfg.preservePath;
      const fileOpts = {
        autoDestroy: true,
        emitClose: true,
        highWaterMark: typeof cfg.fileHwm === "number" ? cfg.fileHwm : undefined
      };
      const limits = cfg.limits;
      const fieldSizeLimit = limits && typeof limits.fieldSize === "number" ? limits.fieldSize : 1 * 1024 * 1024;
      const fileSizeLimit = limits && typeof limits.fileSize === "number" ? limits.fileSize : Infinity;
      const filesLimit = limits && typeof limits.files === "number" ? limits.files : Infinity;
      const fieldsLimit = limits && typeof limits.fields === "number" ? limits.fields : Infinity;
      const partsLimit = limits && typeof limits.parts === "number" ? limits.parts : Infinity;
      let parts = -1;
      let fields = 0;
      let files = 0;
      let skipPart = false;
      this._fileEndsLeft = 0;
      this._fileStream = undefined;
      this._complete = false;
      let fileSize = 0;
      let field;
      let fieldSize = 0;
      let partCharset;
      let partEncoding;
      let partType;
      let partName;
      let partTruncated = false;
      let hitFilesLimit = false;
      let hitFieldsLimit = false;
      this._hparser = null;
      const hparser = new HeaderParser((header) => {
        this._hparser = null;
        skipPart = false;
        partType = "text/plain";
        partCharset = defCharset;
        partEncoding = "7bit";
        partName = undefined;
        partTruncated = false;
        let filename;
        if (!header["content-disposition"]) {
          skipPart = true;
          return;
        }
        const disp = parseDisposition(header["content-disposition"][0], paramDecoder);
        if (!disp || disp.type !== "form-data") {
          skipPart = true;
          return;
        }
        if (disp.params) {
          if (disp.params.name)
            partName = disp.params.name;
          if (disp.params["filename*"])
            filename = disp.params["filename*"];
          else if (disp.params.filename)
            filename = disp.params.filename;
          if (filename !== undefined && !preservePath)
            filename = basename(filename);
        }
        if (header["content-type"]) {
          const conType = parseContentType(header["content-type"][0]);
          if (conType) {
            partType = `${conType.type}/${conType.subtype}`;
            if (conType.params && typeof conType.params.charset === "string")
              partCharset = conType.params.charset.toLowerCase();
          }
        }
        if (header["content-transfer-encoding"])
          partEncoding = header["content-transfer-encoding"][0].toLowerCase();
        if (partType === "application/octet-stream" || filename !== undefined) {
          if (files === filesLimit) {
            if (!hitFilesLimit) {
              hitFilesLimit = true;
              this.emit("filesLimit");
            }
            skipPart = true;
            return;
          }
          ++files;
          if (this.listenerCount("file") === 0) {
            skipPart = true;
            return;
          }
          fileSize = 0;
          this._fileStream = new FileStream(fileOpts, this);
          ++this._fileEndsLeft;
          this.emit("file", partName, this._fileStream, {
            filename,
            encoding: partEncoding,
            mimeType: partType
          });
        } else {
          if (fields === fieldsLimit) {
            if (!hitFieldsLimit) {
              hitFieldsLimit = true;
              this.emit("fieldsLimit");
            }
            skipPart = true;
            return;
          }
          ++fields;
          if (this.listenerCount("field") === 0) {
            skipPart = true;
            return;
          }
          field = [];
          fieldSize = 0;
        }
      });
      let matchPostBoundary = 0;
      const ssCb = (isMatch, data, start, end, isDataSafe) => {
        retrydata:
          while (data) {
            if (this._hparser !== null) {
              const ret = this._hparser.push(data, start, end);
              if (ret === -1) {
                this._hparser = null;
                hparser.reset();
                this.emit("error", new Error("Malformed part header"));
                break;
              }
              start = ret;
            }
            if (start === end)
              break;
            if (matchPostBoundary !== 0) {
              if (matchPostBoundary === 1) {
                switch (data[start]) {
                  case 45:
                    matchPostBoundary = 2;
                    ++start;
                    break;
                  case 13:
                    matchPostBoundary = 3;
                    ++start;
                    break;
                  default:
                    matchPostBoundary = 0;
                }
                if (start === end)
                  return;
              }
              if (matchPostBoundary === 2) {
                matchPostBoundary = 0;
                if (data[start] === 45) {
                  this._complete = true;
                  this._bparser = ignoreData;
                  return;
                }
                const writecb = this._writecb;
                this._writecb = noop;
                ssCb(false, BUF_DASH, 0, 1, false);
                this._writecb = writecb;
              } else if (matchPostBoundary === 3) {
                matchPostBoundary = 0;
                if (data[start] === 10) {
                  ++start;
                  if (parts >= partsLimit)
                    break;
                  this._hparser = hparser;
                  if (start === end)
                    break;
                  continue retrydata;
                } else {
                  const writecb = this._writecb;
                  this._writecb = noop;
                  ssCb(false, BUF_CR, 0, 1, false);
                  this._writecb = writecb;
                }
              }
            }
            if (!skipPart) {
              if (this._fileStream) {
                let chunk;
                const actualLen = Math.min(end - start, fileSizeLimit - fileSize);
                if (!isDataSafe) {
                  chunk = Buffer.allocUnsafe(actualLen);
                  data.copy(chunk, 0, start, start + actualLen);
                } else {
                  chunk = data.slice(start, start + actualLen);
                }
                fileSize += chunk.length;
                if (fileSize === fileSizeLimit) {
                  if (chunk.length > 0)
                    this._fileStream.push(chunk);
                  this._fileStream.emit("limit");
                  this._fileStream.truncated = true;
                  skipPart = true;
                } else if (!this._fileStream.push(chunk)) {
                  if (this._writecb)
                    this._fileStream._readcb = this._writecb;
                  this._writecb = null;
                }
              } else if (field !== undefined) {
                let chunk;
                const actualLen = Math.min(end - start, fieldSizeLimit - fieldSize);
                if (!isDataSafe) {
                  chunk = Buffer.allocUnsafe(actualLen);
                  data.copy(chunk, 0, start, start + actualLen);
                } else {
                  chunk = data.slice(start, start + actualLen);
                }
                fieldSize += actualLen;
                field.push(chunk);
                if (fieldSize === fieldSizeLimit) {
                  skipPart = true;
                  partTruncated = true;
                }
              }
            }
            break;
          }
        if (isMatch) {
          matchPostBoundary = 1;
          if (this._fileStream) {
            this._fileStream.push(null);
            this._fileStream = null;
          } else if (field !== undefined) {
            let data2;
            switch (field.length) {
              case 0:
                data2 = "";
                break;
              case 1:
                data2 = convertToUTF8(field[0], partCharset, 0);
                break;
              default:
                data2 = convertToUTF8(Buffer.concat(field, fieldSize), partCharset, 0);
            }
            field = undefined;
            fieldSize = 0;
            this.emit("field", partName, data2, {
              nameTruncated: false,
              valueTruncated: partTruncated,
              encoding: partEncoding,
              mimeType: partType
            });
          }
          if (++parts === partsLimit)
            this.emit("partsLimit");
        }
      };
      this._bparser = new StreamSearch(`\r\n--${boundary}`, ssCb);
      this._writecb = null;
      this._finalcb = null;
      this.write(BUF_CRLF);
    }
    static detect(conType) {
      return conType.type === "multipart" && conType.subtype === "form-data";
    }
    _write(chunk, enc, cb) {
      this._writecb = cb;
      this._bparser.push(chunk, 0);
      if (this._writecb)
        callAndUnsetCb(this);
    }
    _destroy(err, cb) {
      this._hparser = null;
      this._bparser = ignoreData;
      if (!err)
        err = checkEndState(this);
      const fileStream = this._fileStream;
      if (fileStream) {
        this._fileStream = null;
        fileStream.destroy(err);
      }
      cb(err);
    }
    _final(cb) {
      this._bparser.destroy();
      if (!this._complete)
        return cb(new Error("Unexpected end of form"));
      if (this._fileEndsLeft)
        this._finalcb = finalcb.bind(null, this, cb);
      else
        finalcb(this, cb);
    }
  }
  var TOKEN = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ];
  var FIELD_VCHAR = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  ];
  module.exports = Multipart;
});

// node_modules/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS((exports, module) => {
  var readPctEnc = function(self2, chunk, pos, len) {
    if (pos >= len)
      return len;
    if (self2._byte === -1) {
      const hexUpper = HEX_VALUES[chunk[pos++]];
      if (hexUpper === -1)
        return -1;
      if (hexUpper >= 8)
        self2._encode = 2;
      if (pos < len) {
        const hexLower = HEX_VALUES[chunk[pos++]];
        if (hexLower === -1)
          return -1;
        if (self2._inKey)
          self2._key += String.fromCharCode((hexUpper << 4) + hexLower);
        else
          self2._val += String.fromCharCode((hexUpper << 4) + hexLower);
        self2._byte = -2;
        self2._lastPos = pos;
      } else {
        self2._byte = hexUpper;
      }
    } else {
      const hexLower = HEX_VALUES[chunk[pos++]];
      if (hexLower === -1)
        return -1;
      if (self2._inKey)
        self2._key += String.fromCharCode((self2._byte << 4) + hexLower);
      else
        self2._val += String.fromCharCode((self2._byte << 4) + hexLower);
      self2._byte = -2;
      self2._lastPos = pos;
    }
    return pos;
  };
  var skipKeyBytes = function(self2, chunk, pos, len) {
    if (self2._bytesKey > self2.fieldNameSizeLimit) {
      if (!self2._keyTrunc) {
        if (self2._lastPos < pos)
          self2._key += chunk.latin1Slice(self2._lastPos, pos - 1);
      }
      self2._keyTrunc = true;
      for (;pos < len; ++pos) {
        const code = chunk[pos];
        if (code === 61 || code === 38)
          break;
        ++self2._bytesKey;
      }
      self2._lastPos = pos;
    }
    return pos;
  };
  var skipValBytes = function(self2, chunk, pos, len) {
    if (self2._bytesVal > self2.fieldSizeLimit) {
      if (!self2._valTrunc) {
        if (self2._lastPos < pos)
          self2._val += chunk.latin1Slice(self2._lastPos, pos - 1);
      }
      self2._valTrunc = true;
      for (;pos < len; ++pos) {
        if (chunk[pos] === 38)
          break;
        ++self2._bytesVal;
      }
      self2._lastPos = pos;
    }
    return pos;
  };
  var { Writable } = __require("stream");
  var { getDecoder } = require_utils2();

  class URLEncoded extends Writable {
    constructor(cfg) {
      const streamOpts = {
        autoDestroy: true,
        emitClose: true,
        highWaterMark: typeof cfg.highWaterMark === "number" ? cfg.highWaterMark : undefined
      };
      super(streamOpts);
      let charset = cfg.defCharset || "utf8";
      if (cfg.conType.params && typeof cfg.conType.params.charset === "string")
        charset = cfg.conType.params.charset;
      this.charset = charset;
      const limits = cfg.limits;
      this.fieldSizeLimit = limits && typeof limits.fieldSize === "number" ? limits.fieldSize : 1 * 1024 * 1024;
      this.fieldsLimit = limits && typeof limits.fields === "number" ? limits.fields : Infinity;
      this.fieldNameSizeLimit = limits && typeof limits.fieldNameSize === "number" ? limits.fieldNameSize : 100;
      this._inKey = true;
      this._keyTrunc = false;
      this._valTrunc = false;
      this._bytesKey = 0;
      this._bytesVal = 0;
      this._fields = 0;
      this._key = "";
      this._val = "";
      this._byte = -2;
      this._lastPos = 0;
      this._encode = 0;
      this._decoder = getDecoder(charset);
    }
    static detect(conType) {
      return conType.type === "application" && conType.subtype === "x-www-form-urlencoded";
    }
    _write(chunk, enc, cb) {
      if (this._fields >= this.fieldsLimit)
        return cb();
      let i = 0;
      const len = chunk.length;
      this._lastPos = 0;
      if (this._byte !== -2) {
        i = readPctEnc(this, chunk, i, len);
        if (i === -1)
          return cb(new Error("Malformed urlencoded form"));
        if (i >= len)
          return cb();
        if (this._inKey)
          ++this._bytesKey;
        else
          ++this._bytesVal;
      }
      main:
        while (i < len) {
          if (this._inKey) {
            i = skipKeyBytes(this, chunk, i, len);
            while (i < len) {
              switch (chunk[i]) {
                case 61:
                  if (this._lastPos < i)
                    this._key += chunk.latin1Slice(this._lastPos, i);
                  this._lastPos = ++i;
                  this._key = this._decoder(this._key, this._encode);
                  this._encode = 0;
                  this._inKey = false;
                  continue main;
                case 38:
                  if (this._lastPos < i)
                    this._key += chunk.latin1Slice(this._lastPos, i);
                  this._lastPos = ++i;
                  this._key = this._decoder(this._key, this._encode);
                  this._encode = 0;
                  if (this._bytesKey > 0) {
                    this.emit("field", this._key, "", {
                      nameTruncated: this._keyTrunc,
                      valueTruncated: false,
                      encoding: this.charset,
                      mimeType: "text/plain"
                    });
                  }
                  this._key = "";
                  this._val = "";
                  this._keyTrunc = false;
                  this._valTrunc = false;
                  this._bytesKey = 0;
                  this._bytesVal = 0;
                  if (++this._fields >= this.fieldsLimit) {
                    this.emit("fieldsLimit");
                    return cb();
                  }
                  continue;
                case 43:
                  if (this._lastPos < i)
                    this._key += chunk.latin1Slice(this._lastPos, i);
                  this._key += " ";
                  this._lastPos = i + 1;
                  break;
                case 37:
                  if (this._encode === 0)
                    this._encode = 1;
                  if (this._lastPos < i)
                    this._key += chunk.latin1Slice(this._lastPos, i);
                  this._lastPos = i + 1;
                  this._byte = -1;
                  i = readPctEnc(this, chunk, i + 1, len);
                  if (i === -1)
                    return cb(new Error("Malformed urlencoded form"));
                  if (i >= len)
                    return cb();
                  ++this._bytesKey;
                  i = skipKeyBytes(this, chunk, i, len);
                  continue;
              }
              ++i;
              ++this._bytesKey;
              i = skipKeyBytes(this, chunk, i, len);
            }
            if (this._lastPos < i)
              this._key += chunk.latin1Slice(this._lastPos, i);
          } else {
            i = skipValBytes(this, chunk, i, len);
            while (i < len) {
              switch (chunk[i]) {
                case 38:
                  if (this._lastPos < i)
                    this._val += chunk.latin1Slice(this._lastPos, i);
                  this._lastPos = ++i;
                  this._inKey = true;
                  this._val = this._decoder(this._val, this._encode);
                  this._encode = 0;
                  if (this._bytesKey > 0 || this._bytesVal > 0) {
                    this.emit("field", this._key, this._val, {
                      nameTruncated: this._keyTrunc,
                      valueTruncated: this._valTrunc,
                      encoding: this.charset,
                      mimeType: "text/plain"
                    });
                  }
                  this._key = "";
                  this._val = "";
                  this._keyTrunc = false;
                  this._valTrunc = false;
                  this._bytesKey = 0;
                  this._bytesVal = 0;
                  if (++this._fields >= this.fieldsLimit) {
                    this.emit("fieldsLimit");
                    return cb();
                  }
                  continue main;
                case 43:
                  if (this._lastPos < i)
                    this._val += chunk.latin1Slice(this._lastPos, i);
                  this._val += " ";
                  this._lastPos = i + 1;
                  break;
                case 37:
                  if (this._encode === 0)
                    this._encode = 1;
                  if (this._lastPos < i)
                    this._val += chunk.latin1Slice(this._lastPos, i);
                  this._lastPos = i + 1;
                  this._byte = -1;
                  i = readPctEnc(this, chunk, i + 1, len);
                  if (i === -1)
                    return cb(new Error("Malformed urlencoded form"));
                  if (i >= len)
                    return cb();
                  ++this._bytesVal;
                  i = skipValBytes(this, chunk, i, len);
                  continue;
              }
              ++i;
              ++this._bytesVal;
              i = skipValBytes(this, chunk, i, len);
            }
            if (this._lastPos < i)
              this._val += chunk.latin1Slice(this._lastPos, i);
          }
        }
      cb();
    }
    _final(cb) {
      if (this._byte !== -2)
        return cb(new Error("Malformed urlencoded form"));
      if (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) {
        if (this._inKey)
          this._key = this._decoder(this._key, this._encode);
        else
          this._val = this._decoder(this._val, this._encode);
        this.emit("field", this._key, this._val, {
          nameTruncated: this._keyTrunc,
          valueTruncated: this._valTrunc,
          encoding: this.charset,
          mimeType: "text/plain"
        });
      }
      cb();
    }
  }
  var HEX_VALUES = [
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    10,
    11,
    12,
    13,
    14,
    15,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    10,
    11,
    12,
    13,
    14,
    15,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1
  ];
  module.exports = URLEncoded;
});

// node_modules/busboy/lib/index.js
var require_lib4 = __commonJS((exports, module) => {
  var getInstance = function(cfg) {
    const headers = cfg.headers;
    const conType = parseContentType(headers["content-type"]);
    if (!conType)
      throw new Error("Malformed content type");
    for (const type of TYPES) {
      const matched = type.detect(conType);
      if (!matched)
        continue;
      const instanceCfg = {
        limits: cfg.limits,
        headers,
        conType,
        highWaterMark: undefined,
        fileHwm: undefined,
        defCharset: undefined,
        defParamCharset: undefined,
        preservePath: false
      };
      if (cfg.highWaterMark)
        instanceCfg.highWaterMark = cfg.highWaterMark;
      if (cfg.fileHwm)
        instanceCfg.fileHwm = cfg.fileHwm;
      instanceCfg.defCharset = cfg.defCharset;
      instanceCfg.defParamCharset = cfg.defParamCharset;
      instanceCfg.preservePath = cfg.preservePath;
      return new type(instanceCfg);
    }
    throw new Error(`Unsupported content type: ${headers["content-type"]}`);
  };
  var { parseContentType } = require_utils2();
  var TYPES = [
    require_multipart(),
    require_urlencoded()
  ].filter(function(typemod) {
    return typeof typemod.detect === "function";
  });
  module.exports = (cfg) => {
    if (typeof cfg !== "object" || cfg === null)
      cfg = {};
    if (typeof cfg.headers !== "object" || cfg.headers === null || typeof cfg.headers["content-type"] !== "string") {
      throw new Error("Missing Content-Type");
    }
    return getInstance(cfg);
  };
});

// node_modules/undici/lib/fetch/constants.js
var require_constants = __commonJS((exports, module) => {
  var { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
  var corsSafeListedMethods = ["GET", "HEAD", "POST"];
  var nullBodyStatus = [101, 204, 205, 304];
  var redirectStatus = [301, 302, 303, 307, 308];
  var badPorts = [
    "1",
    "7",
    "9",
    "11",
    "13",
    "15",
    "17",
    "19",
    "20",
    "21",
    "22",
    "23",
    "25",
    "37",
    "42",
    "43",
    "53",
    "69",
    "77",
    "79",
    "87",
    "95",
    "101",
    "102",
    "103",
    "104",
    "109",
    "110",
    "111",
    "113",
    "115",
    "117",
    "119",
    "123",
    "135",
    "137",
    "139",
    "143",
    "161",
    "179",
    "389",
    "427",
    "465",
    "512",
    "513",
    "514",
    "515",
    "526",
    "530",
    "531",
    "532",
    "540",
    "548",
    "554",
    "556",
    "563",
    "587",
    "601",
    "636",
    "989",
    "990",
    "993",
    "995",
    "1719",
    "1720",
    "1723",
    "2049",
    "3659",
    "4045",
    "5060",
    "5061",
    "6000",
    "6566",
    "6665",
    "6666",
    "6667",
    "6668",
    "6669",
    "6697",
    "10080"
  ];
  var referrerPolicy = [
    "",
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
  ];
  var requestRedirect = ["follow", "manual", "error"];
  var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
  var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
  var requestCredentials = ["omit", "same-origin", "include"];
  var requestCache = [
    "default",
    "no-store",
    "reload",
    "no-cache",
    "force-cache",
    "only-if-cached"
  ];
  var requestBodyHeader = [
    "content-encoding",
    "content-language",
    "content-location",
    "content-type",
    "content-length"
  ];
  var requestDuplex = [
    "half"
  ];
  var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
  var subresource = [
    "audio",
    "audioworklet",
    "font",
    "image",
    "manifest",
    "paintworklet",
    "script",
    "style",
    "track",
    "video",
    "xslt",
    ""
  ];
  var DOMException2 = globalThis.DOMException ?? (() => {
    try {
      atob("~");
    } catch (err) {
      return Object.getPrototypeOf(err).constructor;
    }
  })();
  var channel;
  var structuredClone = globalThis.structuredClone ?? function structuredClone(value, options = undefined) {
    if (arguments.length === 0) {
      throw new TypeError("missing argument");
    }
    if (!channel) {
      channel = new MessageChannel;
    }
    channel.port1.unref();
    channel.port2.unref();
    channel.port1.postMessage(value, options?.transfer);
    return receiveMessageOnPort(channel.port2).message;
  };
  module.exports = {
    DOMException: DOMException2,
    structuredClone,
    subresource,
    forbiddenMethods,
    requestBodyHeader,
    referrerPolicy,
    requestRedirect,
    requestMode,
    requestCredentials,
    requestCache,
    redirectStatus,
    corsSafeListedMethods,
    nullBodyStatus,
    safeMethods,
    badPorts,
    requestDuplex
  };
});

// node_modules/undici/lib/fetch/global.js
var require_global2 = __commonJS((exports, module) => {
  var getGlobalOrigin = function() {
    return globalThis[globalOrigin];
  };
  var setGlobalOrigin = function(newOrigin) {
    if (newOrigin !== undefined && typeof newOrigin !== "string" && !(newOrigin instanceof URL)) {
      throw new Error("Invalid base url");
    }
    if (newOrigin === undefined) {
      Object.defineProperty(globalThis, globalOrigin, {
        value: undefined,
        writable: true,
        enumerable: false,
        configurable: false
      });
      return;
    }
    const parsedURL = new URL(newOrigin);
    if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
      throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
    }
    Object.defineProperty(globalThis, globalOrigin, {
      value: parsedURL,
      writable: true,
      enumerable: false,
      configurable: false
    });
  };
  var globalOrigin = Symbol.for("undici.globalOrigin.1");
  module.exports = {
    getGlobalOrigin,
    setGlobalOrigin
  };
});

// node_modules/undici/lib/fetch/util.js
var require_util2 = __commonJS((exports, module) => {
  var responseURL = function(response) {
    const urlList = response.urlList;
    const length = urlList.length;
    return length === 0 ? null : urlList[length - 1].toString();
  };
  var responseLocationURL = function(response, requestFragment) {
    if (!redirectStatus.includes(response.status)) {
      return null;
    }
    let location = response.headersList.get("location");
    if (location !== null && isValidHeaderValue(location)) {
      location = new URL(location, responseURL(response));
    }
    if (location && !location.hash) {
      location.hash = requestFragment;
    }
    return location;
  };
  var requestCurrentURL = function(request) {
    return request.urlList[request.urlList.length - 1];
  };
  var requestBadPort = function(request) {
    const url = requestCurrentURL(request);
    if (urlIsHttpHttpsScheme(url) && badPorts.includes(url.port)) {
      return "blocked";
    }
    return "allowed";
  };
  var isErrorLike = function(object) {
    return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
  };
  var isValidReasonPhrase = function(statusText) {
    for (let i = 0;i < statusText.length; ++i) {
      const c = statusText.charCodeAt(i);
      if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) {
        return false;
      }
    }
    return true;
  };
  var isTokenChar = function(c) {
    return !(c >= 127 || c <= 32 || c === "(" || c === ")" || c === "<" || c === ">" || c === "@" || c === "," || c === ";" || c === ":" || c === "\\" || c === '"' || c === "/" || c === "[" || c === "]" || c === "?" || c === "=" || c === "{" || c === "}");
  };
  var isValidHTTPToken = function(characters) {
    if (!characters || typeof characters !== "string") {
      return false;
    }
    for (let i = 0;i < characters.length; ++i) {
      const c = characters.charCodeAt(i);
      if (c > 127 || !isTokenChar(c)) {
        return false;
      }
    }
    return true;
  };
  var isValidHeaderName = function(potentialValue) {
    if (potentialValue.length === 0) {
      return false;
    }
    return isValidHTTPToken(potentialValue);
  };
  var isValidHeaderValue = function(potentialValue) {
    if (potentialValue.startsWith("\t") || potentialValue.startsWith(" ") || potentialValue.endsWith("\t") || potentialValue.endsWith(" ")) {
      return false;
    }
    if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
      return false;
    }
    return true;
  };
  var setRequestReferrerPolicyOnRedirect = function(request, actualResponse) {
    const { headersList } = actualResponse;
    const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
    let policy = "";
    if (policyHeader.length > 0) {
      for (let i = policyHeader.length;i !== 0; i--) {
        const token = policyHeader[i - 1].trim();
        if (referrerPolicyTokens.includes(token)) {
          policy = token;
          break;
        }
      }
    }
    if (policy !== "") {
      request.referrerPolicy = policy;
    }
  };
  var crossOriginResourcePolicyCheck = function() {
    return "allowed";
  };
  var corsCheck = function() {
    return "success";
  };
  var TAOCheck = function() {
    return "success";
  };
  var appendFetchMetadata = function(httpRequest) {
    let header = null;
    header = httpRequest.mode;
    httpRequest.headersList.set("sec-fetch-mode", header);
  };
  var appendRequestOriginHeader = function(request) {
    let serializedOrigin = request.origin;
    if (request.responseTainting === "cors" || request.mode === "websocket") {
      if (serializedOrigin) {
        request.headersList.append("origin", serializedOrigin);
      }
    } else if (request.method !== "GET" && request.method !== "HEAD") {
      switch (request.referrerPolicy) {
        case "no-referrer":
          serializedOrigin = null;
          break;
        case "no-referrer-when-downgrade":
        case "strict-origin":
        case "strict-origin-when-cross-origin":
          if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
            serializedOrigin = null;
          }
          break;
        case "same-origin":
          if (!sameOrigin(request, requestCurrentURL(request))) {
            serializedOrigin = null;
          }
          break;
        default:
      }
      if (serializedOrigin) {
        request.headersList.append("origin", serializedOrigin);
      }
    }
  };
  var coarsenedSharedCurrentTime = function(crossOriginIsolatedCapability) {
    return performance2.now();
  };
  var createOpaqueTimingInfo = function(timingInfo) {
    return {
      startTime: timingInfo.startTime ?? 0,
      redirectStartTime: 0,
      redirectEndTime: 0,
      postRedirectStartTime: timingInfo.startTime ?? 0,
      finalServiceWorkerStartTime: 0,
      finalNetworkResponseStartTime: 0,
      finalNetworkRequestStartTime: 0,
      endTime: 0,
      encodedBodySize: 0,
      decodedBodySize: 0,
      finalConnectionTimingInfo: null
    };
  };
  var makePolicyContainer = function() {
    return {
      referrerPolicy: "strict-origin-when-cross-origin"
    };
  };
  var clonePolicyContainer = function(policyContainer) {
    return {
      referrerPolicy: policyContainer.referrerPolicy
    };
  };
  var determineRequestsReferrer = function(request) {
    const policy = request.referrerPolicy;
    assert(policy);
    let referrerSource = null;
    if (request.referrer === "client") {
      const globalOrigin = getGlobalOrigin();
      if (!globalOrigin || globalOrigin.origin === "null") {
        return "no-referrer";
      }
      referrerSource = new URL(globalOrigin);
    } else if (request.referrer instanceof URL) {
      referrerSource = request.referrer;
    }
    let referrerURL = stripURLForReferrer(referrerSource);
    const referrerOrigin = stripURLForReferrer(referrerSource, true);
    if (referrerURL.toString().length > 4096) {
      referrerURL = referrerOrigin;
    }
    const areSameOrigin = sameOrigin(request, referrerURL);
    const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);
    switch (policy) {
      case "origin":
        return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
      case "unsafe-url":
        return referrerURL;
      case "same-origin":
        return areSameOrigin ? referrerOrigin : "no-referrer";
      case "origin-when-cross-origin":
        return areSameOrigin ? referrerURL : referrerOrigin;
      case "strict-origin-when-cross-origin": {
        const currentURL = requestCurrentURL(request);
        if (sameOrigin(referrerURL, currentURL)) {
          return referrerURL;
        }
        if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin;
      }
      case "strict-origin":
      case "no-referrer-when-downgrade":
      default:
        return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
    }
  };
  var stripURLForReferrer = function(url, originOnly) {
    assert(url instanceof URL);
    if (url.protocol === "file:" || url.protocol === "about:" || url.protocol === "blank:") {
      return "no-referrer";
    }
    url.username = "";
    url.password = "";
    url.hash = "";
    if (originOnly) {
      url.pathname = "";
      url.search = "";
    }
    return url;
  };
  var isURLPotentiallyTrustworthy = function(url) {
    if (!(url instanceof URL)) {
      return false;
    }
    if (url.href === "about:blank" || url.href === "about:srcdoc") {
      return true;
    }
    if (url.protocol === "data:")
      return true;
    if (url.protocol === "file:")
      return true;
    return isOriginPotentiallyTrustworthy(url.origin);
    function isOriginPotentiallyTrustworthy(origin) {
      if (origin == null || origin === "null")
        return false;
      const originAsURL = new URL(origin);
      if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
        return true;
      }
      if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
        return true;
      }
      return false;
    }
  };
  var bytesMatch = function(bytes, metadataList) {
    if (crypto === undefined) {
      return true;
    }
    const parsedMetadata = parseMetadata(metadataList);
    if (parsedMetadata === "no metadata") {
      return true;
    }
    if (parsedMetadata.length === 0) {
      return true;
    }
    const list = parsedMetadata.sort((c, d) => d.algo.localeCompare(c.algo));
    const strongest = list[0].algo;
    const metadata = list.filter((item) => item.algo === strongest);
    for (const item of metadata) {
      const algorithm = item.algo;
      let expectedValue = item.hash;
      if (expectedValue.endsWith("==")) {
        expectedValue = expectedValue.slice(0, -2);
      }
      let actualValue = crypto.createHash(algorithm).update(bytes).digest("base64");
      if (actualValue.endsWith("==")) {
        actualValue = actualValue.slice(0, -2);
      }
      if (actualValue === expectedValue) {
        return true;
      }
      let actualBase64URL = crypto.createHash(algorithm).update(bytes).digest("base64url");
      if (actualBase64URL.endsWith("==")) {
        actualBase64URL = actualBase64URL.slice(0, -2);
      }
      if (actualBase64URL === expectedValue) {
        return true;
      }
    }
    return false;
  };
  var parseMetadata = function(metadata) {
    const result = [];
    let empty = true;
    const supportedHashes = crypto.getHashes();
    for (const token of metadata.split(" ")) {
      empty = false;
      const parsedToken = parseHashWithOptions.exec(token);
      if (parsedToken === null || parsedToken.groups === undefined) {
        continue;
      }
      const algorithm = parsedToken.groups.algo;
      if (supportedHashes.includes(algorithm.toLowerCase())) {
        result.push(parsedToken.groups);
      }
    }
    if (empty === true) {
      return "no metadata";
    }
    return result;
  };
  var tryUpgradeRequestToAPotentiallyTrustworthyURL = function(request) {
  };
  var sameOrigin = function(A, B) {
    if (A.origin === B.origin && A.origin === "null") {
      return true;
    }
    if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
      return true;
    }
    return false;
  };
  var createDeferredPromise = function() {
    let res;
    let rej;
    const promise = new Promise((resolve, reject) => {
      res = resolve;
      rej = reject;
    });
    return { promise, resolve: res, reject: rej };
  };
  var isAborted = function(fetchParams) {
    return fetchParams.controller.state === "aborted";
  };
  var isCancelled = function(fetchParams) {
    return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
  };
  var normalizeMethod = function(method) {
    return /^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/i.test(method) ? method.toUpperCase() : method;
  };
  var serializeJavascriptValueToJSONString = function(value) {
    const result = JSON.stringify(value);
    if (result === undefined) {
      throw new TypeError("Value is not JSON serializable");
    }
    assert(typeof result === "string");
    return result;
  };
  var makeIterator = function(iterator, name, kind) {
    const object = {
      index: 0,
      kind,
      target: iterator
    };
    const i = {
      next() {
        if (Object.getPrototypeOf(this) !== i) {
          throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
        }
        const { index, kind: kind2, target } = object;
        const values = target();
        const len = values.length;
        if (index >= len) {
          return { value: undefined, done: true };
        }
        const pair = values[index];
        object.index = index + 1;
        return iteratorResult(pair, kind2);
      },
      [Symbol.toStringTag]: `${name} Iterator`
    };
    Object.setPrototypeOf(i, esIteratorPrototype);
    return Object.setPrototypeOf({}, i);
  };
  var iteratorResult = function(pair, kind) {
    let result;
    switch (kind) {
      case "key": {
        result = pair[0];
        break;
      }
      case "value": {
        result = pair[1];
        break;
      }
      case "key+value": {
        result = pair;
        break;
      }
    }
    return { value: result, done: false };
  };
  async function fullyReadBody(body, processBody, processBodyError) {
    const successSteps = processBody;
    const errorSteps = processBodyError;
    let reader;
    try {
      reader = body.stream.getReader();
    } catch (e) {
      errorSteps(e);
      return;
    }
    try {
      const result = await readAllBytes(reader);
      successSteps(result);
    } catch (e) {
      errorSteps(e);
    }
  }
  var isReadableStreamLike = function(stream) {
    if (!ReadableStream2) {
      ReadableStream2 = __require("stream/web").ReadableStream;
    }
    return stream instanceof ReadableStream2 || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
  };
  var isomorphicDecode = function(input) {
    if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
      return String.fromCharCode(...input);
    }
    return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
  };
  var readableStreamClose = function(controller) {
    try {
      controller.close();
    } catch (err) {
      if (!err.message.includes("Controller is already closed")) {
        throw err;
      }
    }
  };
  var isomorphicEncode = function(input) {
    for (let i = 0;i < input.length; i++) {
      assert(input.charCodeAt(i) <= 255);
    }
    return input;
  };
  async function readAllBytes(reader) {
    const bytes = [];
    let byteLength = 0;
    while (true) {
      const { done, value: chunk } = await reader.read();
      if (done) {
        return Buffer.concat(bytes, byteLength);
      }
      if (!isUint8Array(chunk)) {
        throw new TypeError("Received non-Uint8Array chunk");
      }
      bytes.push(chunk);
      byteLength += chunk.length;
    }
  }
  var urlIsLocal = function(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return protocol === "about:" || protocol === "blob:" || protocol === "data:";
  };
  var urlHasHttpsScheme = function(url) {
    if (typeof url === "string") {
      return url.startsWith("https:");
    }
    return url.protocol === "https:";
  };
  var urlIsHttpHttpsScheme = function(url) {
    assert("protocol" in url);
    const protocol = url.protocol;
    return protocol === "http:" || protocol === "https:";
  };
  var { redirectStatus, badPorts, referrerPolicy: referrerPolicyTokens } = require_constants();
  var { getGlobalOrigin } = require_global2();
  var { performance: performance2 } = __require("perf_hooks");
  var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
  var assert = __require("assert");
  var { isUint8Array } = __require("util/types");
  var crypto;
  try {
    crypto = __require("crypto");
  } catch {
  }
  var parseHashWithOptions = /((?<algo>sha256|sha384|sha512)-(?<hash>[A-z0-9+/]{1}.*={0,2}))( +[\x21-\x7e]?)?/i;
  var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  var ReadableStream2 = globalThis.ReadableStream;
  var MAXIMUM_ARGUMENT_LENGTH = 65535;
  var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
  module.exports = {
    isAborted,
    isCancelled,
    createDeferredPromise,
    ReadableStreamFrom,
    toUSVString,
    tryUpgradeRequestToAPotentiallyTrustworthyURL,
    coarsenedSharedCurrentTime,
    determineRequestsReferrer,
    makePolicyContainer,
    clonePolicyContainer,
    appendFetchMetadata,
    appendRequestOriginHeader,
    TAOCheck,
    corsCheck,
    crossOriginResourcePolicyCheck,
    createOpaqueTimingInfo,
    setRequestReferrerPolicyOnRedirect,
    isValidHTTPToken,
    requestBadPort,
    requestCurrentURL,
    responseURL,
    responseLocationURL,
    isBlobLike,
    isURLPotentiallyTrustworthy,
    isValidReasonPhrase,
    sameOrigin,
    normalizeMethod,
    serializeJavascriptValueToJSONString,
    makeIterator,
    isValidHeaderName,
    isValidHeaderValue,
    hasOwn,
    isErrorLike,
    fullyReadBody,
    bytesMatch,
    isReadableStreamLike,
    readableStreamClose,
    isomorphicEncode,
    isomorphicDecode,
    urlIsLocal,
    urlHasHttpsScheme,
    urlIsHttpHttpsScheme,
    readAllBytes
  };
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS((exports, module) => {
  module.exports = {
    kUrl: Symbol("url"),
    kHeaders: Symbol("headers"),
    kSignal: Symbol("signal"),
    kState: Symbol("state"),
    kGuard: Symbol("guard"),
    kRealm: Symbol("realm")
  };
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS((exports, module) => {
  var { types } = __require("util");
  var { hasOwn, toUSVString } = require_util2();
  var webidl = {};
  webidl.converters = {};
  webidl.util = {};
  webidl.errors = {};
  webidl.errors.exception = function(message) {
    return new TypeError(`${message.header}: ${message.message}`);
  };
  webidl.errors.conversionFailed = function(context) {
    const plural = context.types.length === 1 ? "" : " one of";
    const message = `${context.argument} could not be converted to` + `${plural}: ${context.types.join(", ")}.`;
    return webidl.errors.exception({
      header: context.prefix,
      message
    });
  };
  webidl.errors.invalidArgument = function(context) {
    return webidl.errors.exception({
      header: context.prefix,
      message: `"${context.value}" is an invalid ${context.type}.`
    });
  };
  webidl.brandCheck = function(V, I, opts = undefined) {
    if (opts?.strict !== false && !(V instanceof I)) {
      throw new TypeError("Illegal invocation");
    } else {
      return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
    }
  };
  webidl.argumentLengthCheck = function({ length }, min, ctx) {
    if (length < min) {
      throw webidl.errors.exception({
        message: `${min} argument${min !== 1 ? "s" : ""} required, ` + `but${length ? " only" : ""} ${length} found.`,
        ...ctx
      });
    }
  };
  webidl.illegalConstructor = function() {
    throw webidl.errors.exception({
      header: "TypeError",
      message: "Illegal constructor"
    });
  };
  webidl.util.Type = function(V) {
    switch (typeof V) {
      case "undefined":
        return "Undefined";
      case "boolean":
        return "Boolean";
      case "string":
        return "String";
      case "symbol":
        return "Symbol";
      case "number":
        return "Number";
      case "bigint":
        return "BigInt";
      case "function":
      case "object": {
        if (V === null) {
          return "Null";
        }
        return "Object";
      }
    }
  };
  webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
    let upperBound;
    let lowerBound;
    if (bitLength === 64) {
      upperBound = Math.pow(2, 53) - 1;
      if (signedness === "unsigned") {
        lowerBound = 0;
      } else {
        lowerBound = Math.pow(-2, 53) + 1;
      }
    } else if (signedness === "unsigned") {
      lowerBound = 0;
      upperBound = Math.pow(2, bitLength) - 1;
    } else {
      lowerBound = Math.pow(-2, bitLength) - 1;
      upperBound = Math.pow(2, bitLength - 1) - 1;
    }
    let x = Number(V);
    if (x === 0) {
      x = 0;
    }
    if (opts.enforceRange === true) {
      if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
        throw webidl.errors.exception({
          header: "Integer conversion",
          message: `Could not convert ${V} to an integer.`
        });
      }
      x = webidl.util.IntegerPart(x);
      if (x < lowerBound || x > upperBound) {
        throw webidl.errors.exception({
          header: "Integer conversion",
          message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
        });
      }
      return x;
    }
    if (!Number.isNaN(x) && opts.clamp === true) {
      x = Math.min(Math.max(x, lowerBound), upperBound);
      if (Math.floor(x) % 2 === 0) {
        x = Math.floor(x);
      } else {
        x = Math.ceil(x);
      }
      return x;
    }
    if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
      return 0;
    }
    x = webidl.util.IntegerPart(x);
    x = x % Math.pow(2, bitLength);
    if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
      return x - Math.pow(2, bitLength);
    }
    return x;
  };
  webidl.util.IntegerPart = function(n) {
    const r = Math.floor(Math.abs(n));
    if (n < 0) {
      return -1 * r;
    }
    return r;
  };
  webidl.sequenceConverter = function(converter) {
    return (V) => {
      if (webidl.util.Type(V) !== "Object") {
        throw webidl.errors.exception({
          header: "Sequence",
          message: `Value of type ${webidl.util.Type(V)} is not an Object.`
        });
      }
      const method = V?.[Symbol.iterator]?.();
      const seq = [];
      if (method === undefined || typeof method.next !== "function") {
        throw webidl.errors.exception({
          header: "Sequence",
          message: "Object is not an iterator."
        });
      }
      while (true) {
        const { done, value } = method.next();
        if (done) {
          break;
        }
        seq.push(converter(value));
      }
      return seq;
    };
  };
  webidl.recordConverter = function(keyConverter, valueConverter) {
    return (O) => {
      if (webidl.util.Type(O) !== "Object") {
        throw webidl.errors.exception({
          header: "Record",
          message: `Value of type ${webidl.util.Type(O)} is not an Object.`
        });
      }
      const result = {};
      if (!types.isProxy(O)) {
        const keys2 = Object.keys(O);
        for (const key of keys2) {
          const typedKey = keyConverter(key);
          const typedValue = valueConverter(O[key]);
          result[typedKey] = typedValue;
        }
        return result;
      }
      const keys = Reflect.ownKeys(O);
      for (const key of keys) {
        const desc = Reflect.getOwnPropertyDescriptor(O, key);
        if (desc?.enumerable) {
          const typedKey = keyConverter(key);
          const typedValue = valueConverter(O[key]);
          result[typedKey] = typedValue;
        }
      }
      return result;
    };
  };
  webidl.interfaceConverter = function(i) {
    return (V, opts = {}) => {
      if (opts.strict !== false && !(V instanceof i)) {
        throw webidl.errors.exception({
          header: i.name,
          message: `Expected ${V} to be an instance of ${i.name}.`
        });
      }
      return V;
    };
  };
  webidl.dictionaryConverter = function(converters) {
    return (dictionary) => {
      const type = webidl.util.Type(dictionary);
      const dict = {};
      if (type === "Null" || type === "Undefined") {
        return dict;
      } else if (type !== "Object") {
        throw webidl.errors.exception({
          header: "Dictionary",
          message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
        });
      }
      for (const options of converters) {
        const { key, defaultValue, required, converter } = options;
        if (required === true) {
          if (!hasOwn(dictionary, key)) {
            throw webidl.errors.exception({
              header: "Dictionary",
              message: `Missing required key "${key}".`
            });
          }
        }
        let value = dictionary[key];
        const hasDefault = hasOwn(options, "defaultValue");
        if (hasDefault && value !== null) {
          value = value ?? defaultValue;
        }
        if (required || hasDefault || value !== undefined) {
          value = converter(value);
          if (options.allowedValues && !options.allowedValues.includes(value)) {
            throw webidl.errors.exception({
              header: "Dictionary",
              message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
            });
          }
          dict[key] = value;
        }
      }
      return dict;
    };
  };
  webidl.nullableConverter = function(converter) {
    return (V) => {
      if (V === null) {
        return V;
      }
      return converter(V);
    };
  };
  webidl.converters.DOMString = function(V, opts = {}) {
    if (V === null && opts.legacyNullToEmptyString) {
      return "";
    }
    if (typeof V === "symbol") {
      throw new TypeError("Could not convert argument of type symbol to string.");
    }
    return String(V);
  };
  webidl.converters.ByteString = function(V) {
    const x = webidl.converters.DOMString(V);
    for (let index = 0;index < x.length; index++) {
      const charCode = x.charCodeAt(index);
      if (charCode > 255) {
        throw new TypeError("Cannot convert argument to a ByteString because the character at " + `index ${index} has a value of ${charCode} which is greater than 255.`);
      }
    }
    return x;
  };
  webidl.converters.USVString = toUSVString;
  webidl.converters.boolean = function(V) {
    const x = Boolean(V);
    return x;
  };
  webidl.converters.any = function(V) {
    return V;
  };
  webidl.converters["long long"] = function(V) {
    const x = webidl.util.ConvertToInt(V, 64, "signed");
    return x;
  };
  webidl.converters["unsigned long long"] = function(V) {
    const x = webidl.util.ConvertToInt(V, 64, "unsigned");
    return x;
  };
  webidl.converters["unsigned long"] = function(V) {
    const x = webidl.util.ConvertToInt(V, 32, "unsigned");
    return x;
  };
  webidl.converters["unsigned short"] = function(V, opts) {
    const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
    return x;
  };
  webidl.converters.ArrayBuffer = function(V, opts = {}) {
    if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
      throw webidl.errors.conversionFailed({
        prefix: `${V}`,
        argument: `${V}`,
        types: ["ArrayBuffer"]
      });
    }
    if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    return V;
  };
  webidl.converters.TypedArray = function(V, T, opts = {}) {
    if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
      throw webidl.errors.conversionFailed({
        prefix: `${T.name}`,
        argument: `${V}`,
        types: [T.name]
      });
    }
    if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    return V;
  };
  webidl.converters.DataView = function(V, opts = {}) {
    if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
      throw webidl.errors.exception({
        header: "DataView",
        message: "Object is not a DataView."
      });
    }
    if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
      throw webidl.errors.exception({
        header: "ArrayBuffer",
        message: "SharedArrayBuffer is not allowed."
      });
    }
    return V;
  };
  webidl.converters.BufferSource = function(V, opts = {}) {
    if (types.isAnyArrayBuffer(V)) {
      return webidl.converters.ArrayBuffer(V, opts);
    }
    if (types.isTypedArray(V)) {
      return webidl.converters.TypedArray(V, V.constructor);
    }
    if (types.isDataView(V)) {
      return webidl.converters.DataView(V, opts);
    }
    throw new TypeError(`Could not convert ${V} to a BufferSource.`);
  };
  webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(webidl.converters.ByteString);
  webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(webidl.converters["sequence<ByteString>"]);
  webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);
  module.exports = {
    webidl
  };
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS((exports, module) => {
  var dataURLProcessor = function(dataURL) {
    assert(dataURL.protocol === "data:");
    let input = URLSerializer(dataURL, true);
    input = input.slice(5);
    const position = { position: 0 };
    let mimeType = collectASequenceOfCodePointsFast(",", input, position);
    const mimeTypeLength = mimeType.length;
    mimeType = removeASCIIWhitespace(mimeType, true, true);
    if (position.position >= input.length) {
      return "failure";
    }
    position.position++;
    const encodedBody = input.slice(mimeTypeLength + 1);
    let body = stringPercentDecode(encodedBody);
    if (/;(\u0020){0,}base64$/i.test(mimeType)) {
      const stringBody = isomorphicDecode(body);
      body = forgivingBase64(stringBody);
      if (body === "failure") {
        return "failure";
      }
      mimeType = mimeType.slice(0, -6);
      mimeType = mimeType.replace(/(\u0020)+$/, "");
      mimeType = mimeType.slice(0, -1);
    }
    if (mimeType.startsWith(";")) {
      mimeType = "text/plain" + mimeType;
    }
    let mimeTypeRecord = parseMIMEType(mimeType);
    if (mimeTypeRecord === "failure") {
      mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
    }
    return { mimeType: mimeTypeRecord, body };
  };
  var URLSerializer = function(url, excludeFragment = false) {
    const href = url.href;
    if (!excludeFragment) {
      return href;
    }
    const hash = href.lastIndexOf("#");
    if (hash === -1) {
      return href;
    }
    return href.slice(0, hash);
  };
  var collectASequenceOfCodePoints = function(condition, input, position) {
    let result = "";
    while (position.position < input.length && condition(input[position.position])) {
      result += input[position.position];
      position.position++;
    }
    return result;
  };
  var collectASequenceOfCodePointsFast = function(char, input, position) {
    const idx = input.indexOf(char, position.position);
    const start = position.position;
    if (idx === -1) {
      position.position = input.length;
      return input.slice(start);
    }
    position.position = idx;
    return input.slice(start, position.position);
  };
  var stringPercentDecode = function(input) {
    const bytes = encoder.encode(input);
    return percentDecode(bytes);
  };
  var percentDecode = function(input) {
    const output = [];
    for (let i = 0;i < input.length; i++) {
      const byte = input[i];
      if (byte !== 37) {
        output.push(byte);
      } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
        output.push(37);
      } else {
        const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
        const bytePoint = Number.parseInt(nextTwoBytes, 16);
        output.push(bytePoint);
        i += 2;
      }
    }
    return Uint8Array.from(output);
  };
  var parseMIMEType = function(input) {
    input = removeHTTPWhitespace(input, true, true);
    const position = { position: 0 };
    const type = collectASequenceOfCodePointsFast("/", input, position);
    if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
      return "failure";
    }
    if (position.position > input.length) {
      return "failure";
    }
    position.position++;
    let subtype = collectASequenceOfCodePointsFast(";", input, position);
    subtype = removeHTTPWhitespace(subtype, false, true);
    if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
      return "failure";
    }
    const typeLowercase = type.toLowerCase();
    const subtypeLowercase = subtype.toLowerCase();
    const mimeType = {
      type: typeLowercase,
      subtype: subtypeLowercase,
      parameters: new Map,
      essence: `${typeLowercase}/${subtypeLowercase}`
    };
    while (position.position < input.length) {
      position.position++;
      collectASequenceOfCodePoints((char) => HTTP_WHITESPACE_REGEX.test(char), input, position);
      let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position);
      parameterName = parameterName.toLowerCase();
      if (position.position < input.length) {
        if (input[position.position] === ";") {
          continue;
        }
        position.position++;
      }
      if (position.position > input.length) {
        break;
      }
      let parameterValue = null;
      if (input[position.position] === '"') {
        parameterValue = collectAnHTTPQuotedString(input, position, true);
        collectASequenceOfCodePointsFast(";", input, position);
      } else {
        parameterValue = collectASequenceOfCodePointsFast(";", input, position);
        parameterValue = removeHTTPWhitespace(parameterValue, false, true);
        if (parameterValue.length === 0) {
          continue;
        }
      }
      if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
        mimeType.parameters.set(parameterName, parameterValue);
      }
    }
    return mimeType;
  };
  var forgivingBase64 = function(data) {
    data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
    if (data.length % 4 === 0) {
      data = data.replace(/=?=$/, "");
    }
    if (data.length % 4 === 1) {
      return "failure";
    }
    if (/[^+/0-9A-Za-z]/.test(data)) {
      return "failure";
    }
    const binary = atob2(data);
    const bytes = new Uint8Array(binary.length);
    for (let byte = 0;byte < binary.length; byte++) {
      bytes[byte] = binary.charCodeAt(byte);
    }
    return bytes;
  };
  var collectAnHTTPQuotedString = function(input, position, extractValue) {
    const positionStart = position.position;
    let value = "";
    assert(input[position.position] === '"');
    position.position++;
    while (true) {
      value += collectASequenceOfCodePoints((char) => char !== '"' && char !== "\\", input, position);
      if (position.position >= input.length) {
        break;
      }
      const quoteOrBackslash = input[position.position];
      position.position++;
      if (quoteOrBackslash === "\\") {
        if (position.position >= input.length) {
          value += "\\";
          break;
        }
        value += input[position.position];
        position.position++;
      } else {
        assert(quoteOrBackslash === '"');
        break;
      }
    }
    if (extractValue) {
      return value;
    }
    return input.slice(positionStart, position.position);
  };
  var serializeAMimeType = function(mimeType) {
    assert(mimeType !== "failure");
    const { parameters, essence } = mimeType;
    let serialization = essence;
    for (let [name, value] of parameters.entries()) {
      serialization += ";";
      serialization += name;
      serialization += "=";
      if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
        value = value.replace(/(\\|")/g, "\\$1");
        value = '"' + value;
        value += '"';
      }
      serialization += value;
    }
    return serialization;
  };
  var isHTTPWhiteSpace = function(char) {
    return char === "\r" || char === "\n" || char === "\t" || char === " ";
  };
  var removeHTTPWhitespace = function(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
      for (;lead < str.length && isHTTPWhiteSpace(str[lead]); lead++)
        ;
    }
    if (trailing) {
      for (;trail > 0 && isHTTPWhiteSpace(str[trail]); trail--)
        ;
    }
    return str.slice(lead, trail + 1);
  };
  var isASCIIWhitespace = function(char) {
    return char === "\r" || char === "\n" || char === "\t" || char === "\f" || char === " ";
  };
  var removeASCIIWhitespace = function(str, leading = true, trailing = true) {
    let lead = 0;
    let trail = str.length - 1;
    if (leading) {
      for (;lead < str.length && isASCIIWhitespace(str[lead]); lead++)
        ;
    }
    if (trailing) {
      for (;trail > 0 && isASCIIWhitespace(str[trail]); trail--)
        ;
    }
    return str.slice(lead, trail + 1);
  };
  var assert = __require("assert");
  var { atob: atob2 } = __require("buffer");
  var { isomorphicDecode } = require_util2();
  var encoder = new TextEncoder;
  var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
  var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
  var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
  module.exports = {
    dataURLProcessor,
    URLSerializer,
    collectASequenceOfCodePoints,
    collectASequenceOfCodePointsFast,
    stringPercentDecode,
    parseMIMEType,
    collectAnHTTPQuotedString,
    serializeAMimeType
  };
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS((exports, module) => {
  var processBlobParts = function(parts, options) {
    const bytes = [];
    for (const element of parts) {
      if (typeof element === "string") {
        let s = element;
        if (options.endings === "native") {
          s = convertLineEndingsNative(s);
        }
        bytes.push(new TextEncoder().encode(s));
      } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
        if (!element.buffer) {
          bytes.push(new Uint8Array(element));
        } else {
          bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
        }
      } else if (isBlobLike(element)) {
        bytes.push(element);
      }
    }
    return bytes;
  };
  var convertLineEndingsNative = function(s) {
    let nativeLineEnding = "\n";
    if (process.platform === "win32") {
      nativeLineEnding = "\r\n";
    }
    return s.replace(/\r?\n/g, nativeLineEnding);
  };
  var isFileLike = function(object) {
    return NativeFile && object instanceof NativeFile || object instanceof File2 || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
  };
  var { Blob: Blob2, File: NativeFile } = __require("buffer");
  var { types } = __require("util");
  var { kState } = require_symbols2();
  var { isBlobLike } = require_util2();
  var { webidl } = require_webidl();
  var { parseMIMEType, serializeAMimeType } = require_dataURL();
  var { kEnumerableProperty } = require_util();

  class File2 extends Blob2 {
    constructor(fileBits, fileName, options = {}) {
      webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
      fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
      fileName = webidl.converters.USVString(fileName);
      options = webidl.converters.FilePropertyBag(options);
      const n = fileName;
      let t = options.type;
      let d;
      substep: {
        if (t) {
          t = parseMIMEType(t);
          if (t === "failure") {
            t = "";
            break substep;
          }
          t = serializeAMimeType(t).toLowerCase();
        }
        d = options.lastModified;
      }
      super(processBlobParts(fileBits, options), { type: t });
      this[kState] = {
        name: n,
        lastModified: d,
        type: t
      };
    }
    get name() {
      webidl.brandCheck(this, File2);
      return this[kState].name;
    }
    get lastModified() {
      webidl.brandCheck(this, File2);
      return this[kState].lastModified;
    }
    get type() {
      webidl.brandCheck(this, File2);
      return this[kState].type;
    }
  }

  class FileLike {
    constructor(blobLike, fileName, options = {}) {
      const n = fileName;
      const t = options.type;
      const d = options.lastModified ?? Date.now();
      this[kState] = {
        blobLike,
        name: n,
        type: t,
        lastModified: d
      };
    }
    stream(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.stream(...args);
    }
    arrayBuffer(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.arrayBuffer(...args);
    }
    slice(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.slice(...args);
    }
    text(...args) {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.text(...args);
    }
    get size() {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.size;
    }
    get type() {
      webidl.brandCheck(this, FileLike);
      return this[kState].blobLike.type;
    }
    get name() {
      webidl.brandCheck(this, FileLike);
      return this[kState].name;
    }
    get lastModified() {
      webidl.brandCheck(this, FileLike);
      return this[kState].lastModified;
    }
    get [Symbol.toStringTag]() {
      return "File";
    }
  }
  Object.defineProperties(File2.prototype, {
    [Symbol.toStringTag]: {
      value: "File",
      configurable: true
    },
    name: kEnumerableProperty,
    lastModified: kEnumerableProperty
  });
  webidl.converters.Blob = webidl.interfaceConverter(Blob2);
  webidl.converters.BlobPart = function(V, opts) {
    if (webidl.util.Type(V) === "Object") {
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
        return webidl.converters.BufferSource(V, opts);
      }
    }
    return webidl.converters.USVString(V, opts);
  };
  webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(webidl.converters.BlobPart);
  webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
    {
      key: "lastModified",
      converter: webidl.converters["long long"],
      get defaultValue() {
        return Date.now();
      }
    },
    {
      key: "type",
      converter: webidl.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "endings",
      converter: (value) => {
        value = webidl.converters.DOMString(value);
        value = value.toLowerCase();
        if (value !== "native") {
          value = "transparent";
        }
        return value;
      },
      defaultValue: "transparent"
    }
  ]);
  module.exports = { File: File2, FileLike, isFileLike };
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS((exports, module) => {
  var makeEntry = function(name, value, filename) {
    name = Buffer.from(name).toString("utf8");
    if (typeof value === "string") {
      value = Buffer.from(value).toString("utf8");
    } else {
      if (!isFileLike(value)) {
        value = value instanceof Blob2 ? new File2([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
      }
      if (filename !== undefined) {
        const options = {
          type: value.type,
          lastModified: value.lastModified
        };
        value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File2([value], filename, options) : new FileLike(value, filename, options);
      }
    }
    return { name, value };
  };
  var { isBlobLike, toUSVString, makeIterator } = require_util2();
  var { kState } = require_symbols2();
  var { File: UndiciFile, FileLike, isFileLike } = require_file();
  var { webidl } = require_webidl();
  var { Blob: Blob2, File: NativeFile } = __require("buffer");
  var File2 = NativeFile ?? UndiciFile;

  class FormData2 {
    constructor(form) {
      if (form !== undefined) {
        throw webidl.errors.conversionFailed({
          prefix: "FormData constructor",
          argument: "Argument 1",
          types: ["undefined"]
        });
      }
      this[kState] = [];
    }
    append(name, value, filename = undefined) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
      if (arguments.length === 3 && !isBlobLike(value)) {
        throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
      }
      name = webidl.converters.USVString(name);
      value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
      filename = arguments.length === 3 ? webidl.converters.USVString(filename) : undefined;
      const entry = makeEntry(name, value, filename);
      this[kState].push(entry);
    }
    delete(name) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
      name = webidl.converters.USVString(name);
      this[kState] = this[kState].filter((entry) => entry.name !== name);
    }
    get(name) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
      name = webidl.converters.USVString(name);
      const idx = this[kState].findIndex((entry) => entry.name === name);
      if (idx === -1) {
        return null;
      }
      return this[kState][idx].value;
    }
    getAll(name) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
      name = webidl.converters.USVString(name);
      return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
    }
    has(name) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
      name = webidl.converters.USVString(name);
      return this[kState].findIndex((entry) => entry.name === name) !== -1;
    }
    set(name, value, filename = undefined) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
      if (arguments.length === 3 && !isBlobLike(value)) {
        throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
      }
      name = webidl.converters.USVString(name);
      value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
      filename = arguments.length === 3 ? toUSVString(filename) : undefined;
      const entry = makeEntry(name, value, filename);
      const idx = this[kState].findIndex((entry2) => entry2.name === name);
      if (idx !== -1) {
        this[kState] = [
          ...this[kState].slice(0, idx),
          entry,
          ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
        ];
      } else {
        this[kState].push(entry);
      }
    }
    entries() {
      webidl.brandCheck(this, FormData2);
      return makeIterator(() => this[kState].map((pair) => [pair.name, pair.value]), "FormData", "key+value");
    }
    keys() {
      webidl.brandCheck(this, FormData2);
      return makeIterator(() => this[kState].map((pair) => [pair.name, pair.value]), "FormData", "key");
    }
    values() {
      webidl.brandCheck(this, FormData2);
      return makeIterator(() => this[kState].map((pair) => [pair.name, pair.value]), "FormData", "value");
    }
    forEach(callbackFn, thisArg = globalThis) {
      webidl.brandCheck(this, FormData2);
      webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
      if (typeof callbackFn !== "function") {
        throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
      }
      for (const [key, value] of this) {
        callbackFn.apply(thisArg, [value, key, this]);
      }
    }
  }
  FormData2.prototype[Symbol.iterator] = FormData2.prototype.entries;
  Object.defineProperties(FormData2.prototype, {
    [Symbol.toStringTag]: {
      value: "FormData",
      configurable: true
    }
  });
  module.exports = { FormData: FormData2 };
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS((exports, module) => {
  var extractBody = function(object, keepalive = false) {
    if (!ReadableStream2) {
      ReadableStream2 = __require("stream/web").ReadableStream;
    }
    let stream = null;
    if (object instanceof ReadableStream2) {
      stream = object;
    } else if (isBlobLike(object)) {
      stream = object.stream();
    } else {
      stream = new ReadableStream2({
        async pull(controller) {
          controller.enqueue(typeof source === "string" ? new TextEncoder().encode(source) : source);
          queueMicrotask(() => readableStreamClose(controller));
        },
        start() {
        },
        type: undefined
      });
    }
    assert(isReadableStreamLike(stream));
    let action = null;
    let source = null;
    let length = null;
    let type = null;
    if (typeof object === "string") {
      source = object;
      type = "text/plain;charset=UTF-8";
    } else if (object instanceof URLSearchParams) {
      source = object.toString();
      type = "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isArrayBuffer(object)) {
      source = new Uint8Array(object.slice());
    } else if (ArrayBuffer.isView(object)) {
      source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
    } else if (util.isFormDataLike(object)) {
      const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 100000000000)}`.padStart(11, "0")}`;
      const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
      /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
      const escape2 = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
      const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
      const enc = new TextEncoder;
      const blobParts = [];
      const rn = new Uint8Array([13, 10]);
      length = 0;
      let hasUnknownSizeValue = false;
      for (const [name, value] of object) {
        if (typeof value === "string") {
          const chunk2 = enc.encode(prefix + `; name="${escape2(normalizeLinefeeds(name))}"` + `\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
          blobParts.push(chunk2);
          length += chunk2.byteLength;
        } else {
          const chunk2 = enc.encode(`${prefix}; name="${escape2(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape2(value.name)}"` : "") + "\r\n" + `Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
          blobParts.push(chunk2, value, rn);
          if (typeof value.size === "number") {
            length += chunk2.byteLength + value.size + rn.byteLength;
          } else {
            hasUnknownSizeValue = true;
          }
        }
      }
      const chunk = enc.encode(`--${boundary}--`);
      blobParts.push(chunk);
      length += chunk.byteLength;
      if (hasUnknownSizeValue) {
        length = null;
      }
      source = object;
      action = async function* () {
        for (const part of blobParts) {
          if (part.stream) {
            yield* part.stream();
          } else {
            yield part;
          }
        }
      };
      type = "multipart/form-data; boundary=" + boundary;
    } else if (isBlobLike(object)) {
      source = object;
      length = object.size;
      if (object.type) {
        type = object.type;
      }
    } else if (typeof object[Symbol.asyncIterator] === "function") {
      if (keepalive) {
        throw new TypeError("keepalive");
      }
      if (util.isDisturbed(object) || object.locked) {
        throw new TypeError("Response body object should not be disturbed or locked");
      }
      stream = object instanceof ReadableStream2 ? object : ReadableStreamFrom(object);
    }
    if (typeof source === "string" || util.isBuffer(source)) {
      length = Buffer.byteLength(source);
    }
    if (action != null) {
      let iterator;
      stream = new ReadableStream2({
        async start() {
          iterator = action(object)[Symbol.asyncIterator]();
        },
        async pull(controller) {
          const { value, done } = await iterator.next();
          if (done) {
            queueMicrotask(() => {
              controller.close();
            });
          } else {
            if (!isErrored(stream)) {
              controller.enqueue(new Uint8Array(value));
            }
          }
          return controller.desiredSize > 0;
        },
        async cancel(reason) {
          await iterator.return();
        },
        type: undefined
      });
    }
    const body = { stream, source, length };
    return [body, type];
  };
  var safelyExtractBody = function(object, keepalive = false) {
    if (!ReadableStream2) {
      ReadableStream2 = __require("stream/web").ReadableStream;
    }
    if (object instanceof ReadableStream2) {
      assert(!util.isDisturbed(object), "The body has already been consumed.");
      assert(!object.locked, "The stream is locked.");
    }
    return extractBody(object, keepalive);
  };
  var cloneBody = function(body) {
    const [out1, out2] = body.stream.tee();
    const out2Clone = structuredClone(out2, { transfer: [out2] });
    const [, finalClone] = out2Clone.tee();
    body.stream = out1;
    return {
      stream: finalClone,
      length: body.length,
      source: body.source
    };
  };
  async function* consumeBody(body) {
    if (body) {
      if (isUint8Array(body)) {
        yield body;
      } else {
        const stream = body.stream;
        if (util.isDisturbed(stream)) {
          throw new TypeError("The body has already been consumed.");
        }
        if (stream.locked) {
          throw new TypeError("The stream is locked.");
        }
        stream[kBodyUsed] = true;
        yield* stream;
      }
    }
  }
  var throwIfAborted = function(state) {
    if (state.aborted) {
      throw new DOMException2("The operation was aborted.", "AbortError");
    }
  };
  var bodyMixinMethods = function(instance) {
    const methods = {
      blob() {
        return specConsumeBody(this, (bytes) => {
          let mimeType = bodyMimeType(this);
          if (mimeType === "failure") {
            mimeType = "";
          } else if (mimeType) {
            mimeType = serializeAMimeType(mimeType);
          }
          return new Blob2([bytes], { type: mimeType });
        }, instance);
      },
      arrayBuffer() {
        return specConsumeBody(this, (bytes) => {
          return new Uint8Array(bytes).buffer;
        }, instance);
      },
      text() {
        return specConsumeBody(this, utf8DecodeBytes, instance);
      },
      json() {
        return specConsumeBody(this, parseJSONFromBytes, instance);
      },
      async formData() {
        webidl.brandCheck(this, instance);
        throwIfAborted(this[kState]);
        const contentType = this.headers.get("Content-Type");
        if (/multipart\/form-data/.test(contentType)) {
          const headers = {};
          for (const [key, value] of this.headers)
            headers[key.toLowerCase()] = value;
          const responseFormData = new FormData2;
          let busboy;
          try {
            busboy = Busboy({
              headers,
              preservePath: true,
              defParamCharset: "utf8"
            });
          } catch (err) {
            throw new DOMException2(`${err}`, "AbortError");
          }
          busboy.on("field", (name, value) => {
            responseFormData.append(name, value);
          });
          busboy.on("file", (name, value, info) => {
            const { filename, encoding, mimeType } = info;
            const chunks = [];
            if (encoding === "base64" || encoding.toLowerCase() === "base64") {
              let base64chunk = "";
              value.on("data", (chunk) => {
                base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                const end = base64chunk.length - base64chunk.length % 4;
                chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                base64chunk = base64chunk.slice(end);
              });
              value.on("end", () => {
                chunks.push(Buffer.from(base64chunk, "base64"));
                responseFormData.append(name, new File2(chunks, filename, { type: mimeType }));
              });
            } else {
              value.on("data", (chunk) => {
                chunks.push(chunk);
              });
              value.on("end", () => {
                responseFormData.append(name, new File2(chunks, filename, { type: mimeType }));
              });
            }
          });
          const busboyResolve = new Promise((resolve, reject) => {
            busboy.on("finish", resolve);
            busboy.on("error", (err) => reject(new TypeError(err)));
          });
          if (this.body !== null)
            for await (const chunk of consumeBody(this[kState].body))
              busboy.write(chunk);
          busboy.end();
          await busboyResolve;
          return responseFormData;
        } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
          let entries;
          try {
            let text = "";
            const textDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
            for await (const chunk of consumeBody(this[kState].body)) {
              if (!isUint8Array(chunk)) {
                throw new TypeError("Expected Uint8Array chunk");
              }
              text += textDecoder.decode(chunk, { stream: true });
            }
            text += textDecoder.decode();
            entries = new URLSearchParams(text);
          } catch (err) {
            throw Object.assign(new TypeError, { cause: err });
          }
          const formData = new FormData2;
          for (const [name, value] of entries) {
            formData.append(name, value);
          }
          return formData;
        } else {
          await Promise.resolve();
          throwIfAborted(this[kState]);
          throw webidl.errors.exception({
            header: `${instance.name}.formData`,
            message: "Could not parse content as FormData."
          });
        }
      }
    };
    return methods;
  };
  var mixinBody = function(prototype) {
    Object.assign(prototype.prototype, bodyMixinMethods(prototype));
  };
  async function specConsumeBody(object, convertBytesToJSValue, instance) {
    webidl.brandCheck(object, instance);
    throwIfAborted(object[kState]);
    if (bodyUnusable(object[kState].body)) {
      throw new TypeError("Body is unusable");
    }
    const promise = createDeferredPromise();
    const errorSteps = (error) => promise.reject(error);
    const successSteps = (data) => {
      try {
        promise.resolve(convertBytesToJSValue(data));
      } catch (e) {
        errorSteps(e);
      }
    };
    if (object[kState].body == null) {
      successSteps(new Uint8Array);
      return promise.promise;
    }
    await fullyReadBody(object[kState].body, successSteps, errorSteps);
    return promise.promise;
  }
  var bodyUnusable = function(body) {
    return body != null && (body.stream.locked || util.isDisturbed(body.stream));
  };
  var utf8DecodeBytes = function(buffer) {
    if (buffer.length === 0) {
      return "";
    }
    if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
      buffer = buffer.subarray(3);
    }
    const output = new TextDecoder().decode(buffer);
    return output;
  };
  var parseJSONFromBytes = function(bytes) {
    return JSON.parse(utf8DecodeBytes(bytes));
  };
  var bodyMimeType = function(object) {
    const { headersList } = object[kState];
    const contentType = headersList.get("content-type");
    if (contentType === null) {
      return "failure";
    }
    return parseMIMEType(contentType);
  };
  var Busboy = require_lib4();
  var util = require_util();
  var {
    ReadableStreamFrom,
    isBlobLike,
    isReadableStreamLike,
    readableStreamClose,
    createDeferredPromise,
    fullyReadBody
  } = require_util2();
  var { FormData: FormData2 } = require_formdata();
  var { kState } = require_symbols2();
  var { webidl } = require_webidl();
  var { DOMException: DOMException2, structuredClone } = require_constants();
  var { Blob: Blob2, File: NativeFile } = __require("buffer");
  var { kBodyUsed } = require_symbols();
  var assert = __require("assert");
  var { isErrored } = require_util();
  var { isUint8Array, isArrayBuffer } = __require("util/types");
  var { File: UndiciFile } = require_file();
  var { parseMIMEType, serializeAMimeType } = require_dataURL();
  var ReadableStream2 = globalThis.ReadableStream;
  var File2 = NativeFile ?? UndiciFile;
  module.exports = {
    extractBody,
    safelyExtractBody,
    cloneBody,
    mixinBody
  };
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS((exports, module) => {
  var processHeaderValue = function(key, val, skipAppend) {
    if (val && typeof val === "object") {
      throw new InvalidArgumentError(`invalid ${key} header`);
    }
    val = val != null ? `${val}` : "";
    if (headerCharRegex.exec(val) !== null) {
      throw new InvalidArgumentError(`invalid ${key} header`);
    }
    return skipAppend ? val : `${key}: ${val}\r\n`;
  };
  var processHeader = function(request, key, val, skipAppend = false) {
    if (val && (typeof val === "object" && !Array.isArray(val))) {
      throw new InvalidArgumentError(`invalid ${key} header`);
    } else if (val === undefined) {
      return;
    }
    if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      request.host = val;
    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
      request.contentLength = parseInt(val, 10);
      if (!Number.isFinite(request.contentLength)) {
        throw new InvalidArgumentError("invalid content-length header");
      }
    } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
      request.contentType = val;
      request.headers += processHeaderValue(key, val);
    } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
      throw new InvalidArgumentError("invalid transfer-encoding header");
    } else if (key.length === 10 && key.toLowerCase() === "connection") {
      const value = typeof val === "string" ? val.toLowerCase() : null;
      if (value !== "close" && value !== "keep-alive") {
        throw new InvalidArgumentError("invalid connection header");
      } else if (value === "close") {
        request.reset = true;
      }
    } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
      throw new InvalidArgumentError("invalid keep-alive header");
    } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
      throw new InvalidArgumentError("invalid upgrade header");
    } else if (key.length === 6 && key.toLowerCase() === "expect") {
      throw new NotSupportedError("expect header not supported");
    } else if (tokenRegExp.exec(key) === null) {
      throw new InvalidArgumentError("invalid header key");
    } else {
      if (Array.isArray(val)) {
        for (let i = 0;i < val.length; i++) {
          if (skipAppend) {
            if (request.headers[key])
              request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;
            else
              request.headers[key] = processHeaderValue(key, val[i], skipAppend);
          } else {
            request.headers += processHeaderValue(key, val[i]);
          }
        }
      } else {
        if (skipAppend)
          request.headers[key] = processHeaderValue(key, val, skipAppend);
        else
          request.headers += processHeaderValue(key, val);
      }
    }
  };
  var {
    InvalidArgumentError,
    NotSupportedError
  } = require_errors2();
  var assert = __require("assert");
  var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
  var util = require_util();
  var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
  var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  var invalidPathRegex = /[^\u0021-\u00ff]/;
  var kHandler = Symbol("handler");
  var channels = {};
  var extractBody;
  try {
    const diagnosticsChannel = __require("diagnostics_channel");
    channels.create = diagnosticsChannel.channel("undici:request:create");
    channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
    channels.headers = diagnosticsChannel.channel("undici:request:headers");
    channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
    channels.error = diagnosticsChannel.channel("undici:request:error");
  } catch {
    channels.create = { hasSubscribers: false };
    channels.bodySent = { hasSubscribers: false };
    channels.headers = { hasSubscribers: false };
    channels.trailers = { hasSubscribers: false };
    channels.error = { hasSubscribers: false };
  }

  class Request {
    constructor(origin, {
      path,
      method,
      body,
      headers,
      query,
      idempotent,
      blocking,
      upgrade,
      headersTimeout,
      bodyTimeout,
      reset,
      throwOnError,
      expectContinue
    }, handler) {
      if (typeof path !== "string") {
        throw new InvalidArgumentError("path must be a string");
      } else if (path[0] !== "/" && !(path.startsWith("http://") || path.startsWith("https://")) && method !== "CONNECT") {
        throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
      } else if (invalidPathRegex.exec(path) !== null) {
        throw new InvalidArgumentError("invalid request path");
      }
      if (typeof method !== "string") {
        throw new InvalidArgumentError("method must be a string");
      } else if (tokenRegExp.exec(method) === null) {
        throw new InvalidArgumentError("invalid request method");
      }
      if (upgrade && typeof upgrade !== "string") {
        throw new InvalidArgumentError("upgrade must be a string");
      }
      if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
        throw new InvalidArgumentError("invalid headersTimeout");
      }
      if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
        throw new InvalidArgumentError("invalid bodyTimeout");
      }
      if (reset != null && typeof reset !== "boolean") {
        throw new InvalidArgumentError("invalid reset");
      }
      if (expectContinue != null && typeof expectContinue !== "boolean") {
        throw new InvalidArgumentError("invalid expectContinue");
      }
      this.headersTimeout = headersTimeout;
      this.bodyTimeout = bodyTimeout;
      this.throwOnError = throwOnError === true;
      this.method = method;
      if (body == null) {
        this.body = null;
      } else if (util.isStream(body)) {
        this.body = body;
      } else if (util.isBuffer(body)) {
        this.body = body.byteLength ? body : null;
      } else if (ArrayBuffer.isView(body)) {
        this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
      } else if (body instanceof ArrayBuffer) {
        this.body = body.byteLength ? Buffer.from(body) : null;
      } else if (typeof body === "string") {
        this.body = body.length ? Buffer.from(body) : null;
      } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
        this.body = body;
      } else {
        throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
      }
      this.completed = false;
      this.aborted = false;
      this.upgrade = upgrade || null;
      this.path = query ? util.buildURL(path, query) : path;
      this.origin = origin;
      this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
      this.blocking = blocking == null ? false : blocking;
      this.reset = reset == null ? null : reset;
      this.host = null;
      this.contentLength = null;
      this.contentType = null;
      this.headers = "";
      this.expectContinue = expectContinue != null ? expectContinue : false;
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i = 0;i < headers.length; i += 2) {
          processHeader(this, headers[i], headers[i + 1]);
        }
      } else if (headers && typeof headers === "object") {
        const keys = Object.keys(headers);
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          processHeader(this, key, headers[key]);
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      if (util.isFormDataLike(this.body)) {
        if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
          throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
        }
        if (!extractBody) {
          extractBody = require_body().extractBody;
        }
        const [bodyStream, contentType] = extractBody(body);
        if (this.contentType == null) {
          this.contentType = contentType;
          this.headers += `content-type: ${contentType}\r\n`;
        }
        this.body = bodyStream.stream;
        this.contentLength = bodyStream.length;
      } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
        this.contentType = body.type;
        this.headers += `content-type: ${body.type}\r\n`;
      }
      util.validateHandler(handler, method, upgrade);
      this.servername = util.getServerName(this.host);
      this[kHandler] = handler;
      if (channels.create.hasSubscribers) {
        channels.create.publish({ request: this });
      }
    }
    onBodySent(chunk) {
      if (this[kHandler].onBodySent) {
        try {
          this[kHandler].onBodySent(chunk);
        } catch (err) {
          this.onError(err);
        }
      }
    }
    onRequestSent() {
      if (channels.bodySent.hasSubscribers) {
        channels.bodySent.publish({ request: this });
      }
    }
    onConnect(abort) {
      assert(!this.aborted);
      assert(!this.completed);
      return this[kHandler].onConnect(abort);
    }
    onHeaders(statusCode, headers, resume, statusText) {
      assert(!this.aborted);
      assert(!this.completed);
      if (channels.headers.hasSubscribers) {
        channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
      }
      return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
    }
    onData(chunk) {
      assert(!this.aborted);
      assert(!this.completed);
      return this[kHandler].onData(chunk);
    }
    onUpgrade(statusCode, headers, socket) {
      assert(!this.aborted);
      assert(!this.completed);
      return this[kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
      assert(!this.aborted);
      this.completed = true;
      if (channels.trailers.hasSubscribers) {
        channels.trailers.publish({ request: this, trailers });
      }
      return this[kHandler].onComplete(trailers);
    }
    onError(error) {
      if (channels.error.hasSubscribers) {
        channels.error.publish({ request: this, error });
      }
      if (this.aborted) {
        return;
      }
      this.aborted = true;
      return this[kHandler].onError(error);
    }
    addHeader(key, value) {
      processHeader(this, key, value);
      return this;
    }
    static [kHTTP1BuildRequest](origin, opts, handler) {
      return new Request(origin, opts, handler);
    }
    static [kHTTP2BuildRequest](origin, opts, handler) {
      const headers = opts.headers;
      opts = { ...opts, headers: null };
      const request = new Request(origin, opts, handler);
      request.headers = {};
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i = 0;i < headers.length; i += 2) {
          processHeader(request, headers[i], headers[i + 1], true);
        }
      } else if (headers && typeof headers === "object") {
        const keys = Object.keys(headers);
        for (let i = 0;i < keys.length; i++) {
          const key = keys[i];
          processHeader(request, key, headers[key], true);
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      return request;
    }
    static [kHTTP2CopyHeaders](raw) {
      const rawHeaders = raw.split("\r\n");
      const headers = {};
      for (const header of rawHeaders) {
        const [key, value] = header.split(": ");
        if (headers[key])
          headers[key] += `,${value}`;
        else
          headers[key] = value;
      }
      return headers;
    }
  }
  module.exports = Request;
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS((exports, module) => {
  var EventEmitter = __require("events");

  class Dispatcher extends EventEmitter {
    dispatch() {
      throw new Error("not implemented");
    }
    close() {
      throw new Error("not implemented");
    }
    destroy() {
      throw new Error("not implemented");
    }
  }
  module.exports = Dispatcher;
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS((exports, module) => {
  var Dispatcher = require_dispatcher();
  var {
    ClientDestroyedError,
    ClientClosedError,
    InvalidArgumentError
  } = require_errors2();
  var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
  var kDestroyed = Symbol("destroyed");
  var kClosed = Symbol("closed");
  var kOnDestroyed = Symbol("onDestroyed");
  var kOnClosed = Symbol("onClosed");
  var kInterceptedDispatch = Symbol("Intercepted Dispatch");

  class DispatcherBase extends Dispatcher {
    constructor() {
      super();
      this[kDestroyed] = false;
      this[kOnDestroyed] = null;
      this[kClosed] = false;
      this[kOnClosed] = [];
    }
    get destroyed() {
      return this[kDestroyed];
    }
    get closed() {
      return this[kClosed];
    }
    get interceptors() {
      return this[kInterceptors];
    }
    set interceptors(newInterceptors) {
      if (newInterceptors) {
        for (let i = newInterceptors.length - 1;i >= 0; i--) {
          const interceptor = this[kInterceptors][i];
          if (typeof interceptor !== "function") {
            throw new InvalidArgumentError("interceptor must be an function");
          }
        }
      }
      this[kInterceptors] = newInterceptors;
    }
    close(callback) {
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          this.close((err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        queueMicrotask(() => callback(new ClientDestroyedError, null));
        return;
      }
      if (this[kClosed]) {
        if (this[kOnClosed]) {
          this[kOnClosed].push(callback);
        } else {
          queueMicrotask(() => callback(null, null));
        }
        return;
      }
      this[kClosed] = true;
      this[kOnClosed].push(callback);
      const onClosed = () => {
        const callbacks = this[kOnClosed];
        this[kOnClosed] = null;
        for (let i = 0;i < callbacks.length; i++) {
          callbacks[i](null, null);
        }
      };
      this[kClose]().then(() => this.destroy()).then(() => {
        queueMicrotask(onClosed);
      });
    }
    destroy(err, callback) {
      if (typeof err === "function") {
        callback = err;
        err = null;
      }
      if (callback === undefined) {
        return new Promise((resolve, reject) => {
          this.destroy(err, (err2, data) => {
            return err2 ? reject(err2) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        if (this[kOnDestroyed]) {
          this[kOnDestroyed].push(callback);
        } else {
          queueMicrotask(() => callback(null, null));
        }
        return;
      }
      if (!err) {
        err = new ClientDestroyedError;
      }
      this[kDestroyed] = true;
      this[kOnDestroyed] = this[kOnDestroyed] || [];
      this[kOnDestroyed].push(callback);
      const onDestroyed = () => {
        const callbacks = this[kOnDestroyed];
        this[kOnDestroyed] = null;
        for (let i = 0;i < callbacks.length; i++) {
          callbacks[i](null, null);
        }
      };
      this[kDestroy](err).then(() => {
        queueMicrotask(onDestroyed);
      });
    }
    [kInterceptedDispatch](opts, handler) {
      if (!this[kInterceptors] || this[kInterceptors].length === 0) {
        this[kInterceptedDispatch] = this[kDispatch];
        return this[kDispatch](opts, handler);
      }
      let dispatch = this[kDispatch].bind(this);
      for (let i = this[kInterceptors].length - 1;i >= 0; i--) {
        dispatch = this[kInterceptors][i](dispatch);
      }
      this[kInterceptedDispatch] = dispatch;
      return dispatch(opts, handler);
    }
    dispatch(opts, handler) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      try {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object.");
        }
        if (this[kDestroyed] || this[kOnDestroyed]) {
          throw new ClientDestroyedError;
        }
        if (this[kClosed]) {
          throw new ClientClosedError;
        }
        return this[kInterceptedDispatch](opts, handler);
      } catch (err) {
        if (typeof handler.onError !== "function") {
          throw new InvalidArgumentError("invalid onError method");
        }
        handler.onError(err);
        return false;
      }
    }
  }
  module.exports = DispatcherBase;
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS((exports, module) => {
  var buildConnector = function({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
    if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
      throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
    }
    const options = { path: socketPath, ...opts };
    const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
    timeout = timeout == null ? 1e4 : timeout;
    allowH2 = allowH2 != null ? allowH2 : false;
    return function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
      let socket;
      if (protocol === "https:") {
        if (!tls) {
          tls = __require("tls");
        }
        servername = servername || options.servername || util.getServerName(host) || null;
        const sessionKey = servername || hostname;
        const session = sessionCache.get(sessionKey) || null;
        assert(sessionKey);
        socket = tls.connect({
          highWaterMark: 16384,
          ...options,
          servername,
          session,
          localAddress,
          ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
          socket: httpSocket,
          port: port || 443,
          host: hostname
        });
        socket.on("session", function(session2) {
          sessionCache.set(sessionKey, session2);
        });
      } else {
        assert(!httpSocket, "httpSocket can only be sent on TLS update");
        socket = net.connect({
          highWaterMark: 64 * 1024,
          ...options,
          localAddress,
          port: port || 80,
          host: hostname
        });
      }
      if (options.keepAlive == null || options.keepAlive) {
        const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60000 : options.keepAliveInitialDelay;
        socket.setKeepAlive(true, keepAliveInitialDelay);
      }
      const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
      socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
        cancelTimeout();
        if (callback) {
          const cb = callback;
          callback = null;
          cb(null, this);
        }
      }).on("error", function(err) {
        cancelTimeout();
        if (callback) {
          const cb = callback;
          callback = null;
          cb(err);
        }
      });
      return socket;
    };
  };
  var setupTimeout = function(onConnectTimeout2, timeout) {
    if (!timeout) {
      return () => {
      };
    }
    let s1 = null;
    let s2 = null;
    const timeoutId = setTimeout(() => {
      s1 = setImmediate(() => {
        if (process.platform === "win32") {
          s2 = setImmediate(() => onConnectTimeout2());
        } else {
          onConnectTimeout2();
        }
      });
    }, timeout);
    return () => {
      clearTimeout(timeoutId);
      clearImmediate(s1);
      clearImmediate(s2);
    };
  };
  var onConnectTimeout = function(socket) {
    util.destroy(socket, new ConnectTimeoutError);
  };
  var net = __require("net");
  var assert = __require("assert");
  var util = require_util();
  var { InvalidArgumentError, ConnectTimeoutError } = require_errors2();
  var tls;
  var SessionCache;
  if (global.FinalizationRegistry) {
    SessionCache = class WeakSessionCache {
      constructor(maxCachedSessions) {
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map;
        this._sessionRegistry = new global.FinalizationRegistry((key) => {
          if (this._sessionCache.size < this._maxCachedSessions) {
            return;
          }
          const ref = this._sessionCache.get(key);
          if (ref !== undefined && ref.deref() === undefined) {
            this._sessionCache.delete(key);
          }
        });
      }
      get(sessionKey) {
        const ref = this._sessionCache.get(sessionKey);
        return ref ? ref.deref() : null;
      }
      set(sessionKey, session) {
        if (this._maxCachedSessions === 0) {
          return;
        }
        this._sessionCache.set(sessionKey, new WeakRef(session));
        this._sessionRegistry.register(session, sessionKey);
      }
    };
  } else {
    SessionCache = class SimpleSessionCache {
      constructor(maxCachedSessions) {
        this._maxCachedSessions = maxCachedSessions;
        this._sessionCache = new Map;
      }
      get(sessionKey) {
        return this._sessionCache.get(sessionKey);
      }
      set(sessionKey, session) {
        if (this._maxCachedSessions === 0) {
          return;
        }
        if (this._sessionCache.size >= this._maxCachedSessions) {
          const { value: oldestKey } = this._sessionCache.keys().next();
          this._sessionCache.delete(oldestKey);
        }
        this._sessionCache.set(sessionKey, session);
      }
    };
  }
  module.exports = buildConnector;
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils3 = __commonJS((exports) => {
  var enumToMap = function(obj) {
    const res = {};
    Object.keys(obj).forEach((key) => {
      const value = obj[key];
      if (typeof value === "number") {
        res[key] = value;
      }
    });
    return res;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.enumToMap = undefined;
  exports.enumToMap = enumToMap;
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants2 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = undefined;
  var utils_1 = require_utils3();
  var ERROR;
  (function(ERROR2) {
    ERROR2[ERROR2["OK"] = 0] = "OK";
    ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
    ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
    ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
    ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
    ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
    ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
    ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
    ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
    ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
    ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
    ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
    ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
    ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
    ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
    ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
    ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
    ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
    ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
    ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
    ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
    ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
    ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
    ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
    ERROR2[ERROR2["USER"] = 24] = "USER";
  })(ERROR = exports.ERROR || (exports.ERROR = {}));
  var TYPE;
  (function(TYPE2) {
    TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
    TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
    TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
  })(TYPE = exports.TYPE || (exports.TYPE = {}));
  var FLAGS;
  (function(FLAGS2) {
    FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
    FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
    FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
    FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
    FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
    FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
    FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
    FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
    FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
  })(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
  var LENIENT_FLAGS;
  (function(LENIENT_FLAGS2) {
    LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
    LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
    LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
  })(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
  var METHODS;
  (function(METHODS2) {
    METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
    METHODS2[METHODS2["GET"] = 1] = "GET";
    METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
    METHODS2[METHODS2["POST"] = 3] = "POST";
    METHODS2[METHODS2["PUT"] = 4] = "PUT";
    METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
    METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
    METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
    METHODS2[METHODS2["COPY"] = 8] = "COPY";
    METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
    METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
    METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
    METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
    METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
    METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
    METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
    METHODS2[METHODS2["BIND"] = 16] = "BIND";
    METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
    METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
    METHODS2[METHODS2["ACL"] = 19] = "ACL";
    METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
    METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
    METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
    METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
    METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
    METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
    METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
    METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
    METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
    METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
    METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
    METHODS2[METHODS2["LINK"] = 31] = "LINK";
    METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
    METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
    METHODS2[METHODS2["PRI"] = 34] = "PRI";
    METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
    METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
    METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
    METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
    METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
    METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
    METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
    METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
    METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
    METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
    METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
  })(METHODS = exports.METHODS || (exports.METHODS = {}));
  exports.METHODS_HTTP = [
    METHODS.DELETE,
    METHODS.GET,
    METHODS.HEAD,
    METHODS.POST,
    METHODS.PUT,
    METHODS.CONNECT,
    METHODS.OPTIONS,
    METHODS.TRACE,
    METHODS.COPY,
    METHODS.LOCK,
    METHODS.MKCOL,
    METHODS.MOVE,
    METHODS.PROPFIND,
    METHODS.PROPPATCH,
    METHODS.SEARCH,
    METHODS.UNLOCK,
    METHODS.BIND,
    METHODS.REBIND,
    METHODS.UNBIND,
    METHODS.ACL,
    METHODS.REPORT,
    METHODS.MKACTIVITY,
    METHODS.CHECKOUT,
    METHODS.MERGE,
    METHODS["M-SEARCH"],
    METHODS.NOTIFY,
    METHODS.SUBSCRIBE,
    METHODS.UNSUBSCRIBE,
    METHODS.PATCH,
    METHODS.PURGE,
    METHODS.MKCALENDAR,
    METHODS.LINK,
    METHODS.UNLINK,
    METHODS.PRI,
    METHODS.SOURCE
  ];
  exports.METHODS_ICE = [
    METHODS.SOURCE
  ];
  exports.METHODS_RTSP = [
    METHODS.OPTIONS,
    METHODS.DESCRIBE,
    METHODS.ANNOUNCE,
    METHODS.SETUP,
    METHODS.PLAY,
    METHODS.PAUSE,
    METHODS.TEARDOWN,
    METHODS.GET_PARAMETER,
    METHODS.SET_PARAMETER,
    METHODS.REDIRECT,
    METHODS.RECORD,
    METHODS.FLUSH,
    METHODS.GET,
    METHODS.POST
  ];
  exports.METHOD_MAP = utils_1.enumToMap(METHODS);
  exports.H_METHOD_MAP = {};
  Object.keys(exports.METHOD_MAP).forEach((key) => {
    if (/^H/.test(key)) {
      exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
    }
  });
  var FINISH;
  (function(FINISH2) {
    FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
    FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
    FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
  })(FINISH = exports.FINISH || (exports.FINISH = {}));
  exports.ALPHA = [];
  for (let i = "A".charCodeAt(0);i <= "Z".charCodeAt(0); i++) {
    exports.ALPHA.push(String.fromCharCode(i));
    exports.ALPHA.push(String.fromCharCode(i + 32));
  }
  exports.NUM_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9
  };
  exports.HEX_MAP = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
  };
  exports.NUM = [
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
  ];
  exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
  exports.MARK = ["-", "_", ".", "!", "~", "*", "\'", "(", ")"];
  exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
  exports.STRICT_URL_CHAR = [
    "!",
    '"',
    "$",
    "%",
    "&",
    "\'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "{",
    "|",
    "}",
    "~"
  ].concat(exports.ALPHANUM);
  exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["\t", "\f"]);
  for (let i = 128;i <= 255; i++) {
    exports.URL_CHAR.push(i);
  }
  exports.HEX = exports.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
  exports.STRICT_TOKEN = [
    "!",
    "#",
    "$",
    "%",
    "&",
    "\'",
    "*",
    "+",
    "-",
    ".",
    "^",
    "_",
    "`",
    "|",
    "~"
  ].concat(exports.ALPHANUM);
  exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
  exports.HEADER_CHARS = ["\t"];
  for (let i = 32;i <= 255; i++) {
    if (i !== 127) {
      exports.HEADER_CHARS.push(i);
    }
  }
  exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
  exports.MAJOR = exports.NUM_MAP;
  exports.MINOR = exports.MAJOR;
  var HEADER_STATE;
  (function(HEADER_STATE2) {
    HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
    HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
    HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
    HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
    HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
    HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
    HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
    HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
    HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
  })(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
  exports.SPECIAL_HEADERS = {
    connection: HEADER_STATE.CONNECTION,
    "content-length": HEADER_STATE.CONTENT_LENGTH,
    "proxy-connection": HEADER_STATE.CONNECTION,
    "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
    upgrade: HEADER_STATE.UPGRADE
  };
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS((exports, module) => {
  var parseLocation = function(statusCode, headers) {
    if (redirectableStatusCodes.indexOf(statusCode) === -1) {
      return null;
    }
    for (let i = 0;i < headers.length; i += 2) {
      if (headers[i].toString().toLowerCase() === "location") {
        return headers[i + 1];
      }
    }
  };
  var shouldRemoveHeader = function(header, removeContent, unknownOrigin) {
    return header.length === 4 && header.toString().toLowerCase() === "host" || removeContent && header.toString().toLowerCase().indexOf("content-") === 0 || unknownOrigin && header.length === 13 && header.toString().toLowerCase() === "authorization" || unknownOrigin && header.length === 6 && header.toString().toLowerCase() === "cookie";
  };
  var cleanRequestHeaders = function(headers, removeContent, unknownOrigin) {
    const ret = [];
    if (Array.isArray(headers)) {
      for (let i = 0;i < headers.length; i += 2) {
        if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
          ret.push(headers[i], headers[i + 1]);
        }
      }
    } else if (headers && typeof headers === "object") {
      for (const key of Object.keys(headers)) {
        if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
          ret.push(key, headers[key]);
        }
      }
    } else {
      assert(headers == null, "headers must be an object or an array");
    }
    return ret;
  };
  var util = require_util();
  var { kBodyUsed } = require_symbols();
  var assert = __require("assert");
  var { InvalidArgumentError } = require_errors2();
  var EE = __require("events");
  var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
  var kBody = Symbol("body");

  class BodyAsyncIterable {
    constructor(body) {
      this[kBody] = body;
      this[kBodyUsed] = false;
    }
    async* [Symbol.asyncIterator]() {
      assert(!this[kBodyUsed], "disturbed");
      this[kBodyUsed] = true;
      yield* this[kBody];
    }
  }

  class RedirectHandler {
    constructor(dispatch, maxRedirections, opts, handler) {
      if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      util.validateHandler(handler, opts.method, opts.upgrade);
      this.dispatch = dispatch;
      this.location = null;
      this.abort = null;
      this.opts = { ...opts, maxRedirections: 0 };
      this.maxRedirections = maxRedirections;
      this.handler = handler;
      this.history = [];
      if (util.isStream(this.opts.body)) {
        if (util.bodyLength(this.opts.body) === 0) {
          this.opts.body.on("data", function() {
            assert(false);
          });
        }
        if (typeof this.opts.body.readableDidRead !== "boolean") {
          this.opts.body[kBodyUsed] = false;
          EE.prototype.on.call(this.opts.body, "data", function() {
            this[kBodyUsed] = true;
          });
        }
      } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
        this.opts.body = new BodyAsyncIterable(this.opts.body);
      } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
        this.opts.body = new BodyAsyncIterable(this.opts.body);
      }
    }
    onConnect(abort) {
      this.abort = abort;
      this.handler.onConnect(abort, { history: this.history });
    }
    onUpgrade(statusCode, headers, socket) {
      this.handler.onUpgrade(statusCode, headers, socket);
    }
    onError(error) {
      this.handler.onError(error);
    }
    onHeaders(statusCode, headers, resume, statusText) {
      this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
      if (this.opts.origin) {
        this.history.push(new URL(this.opts.path, this.opts.origin));
      }
      if (!this.location) {
        return this.handler.onHeaders(statusCode, headers, resume, statusText);
      }
      const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
      const path = search ? `${pathname}${search}` : pathname;
      this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
      this.opts.path = path;
      this.opts.origin = origin;
      this.opts.maxRedirections = 0;
      this.opts.query = null;
      if (statusCode === 303 && this.opts.method !== "HEAD") {
        this.opts.method = "GET";
        this.opts.body = null;
      }
    }
    onData(chunk) {
      if (this.location) {
      } else {
        return this.handler.onData(chunk);
      }
    }
    onComplete(trailers) {
      if (this.location) {
        this.location = null;
        this.abort = null;
        this.dispatch(this.opts, this);
      } else {
        this.handler.onComplete(trailers);
      }
    }
    onBodySent(chunk) {
      if (this.handler.onBodySent) {
        this.handler.onBodySent(chunk);
      }
    }
  }
  module.exports = RedirectHandler;
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS((exports, module) => {
  var createRedirectInterceptor = function({ maxRedirections: defaultMaxRedirections }) {
    return (dispatch) => {
      return function Intercept(opts, handler) {
        const { maxRedirections = defaultMaxRedirections } = opts;
        if (!maxRedirections) {
          return dispatch(opts, handler);
        }
        const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
        opts = { ...opts, maxRedirections: 0 };
        return dispatch(opts, redirectHandler);
      };
    };
  };
  var RedirectHandler = require_RedirectHandler();
  module.exports = createRedirectInterceptor;
});

// node_modules/undici/lib/client.js
var require_client = __commonJS((exports, module) => {
  var onHttp2SessionError = function(err) {
    assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    this[kSocket][kError] = err;
    onError(this[kClient], err);
  };
  var onHttp2FrameError = function(type, code, id) {
    const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
    if (id === 0) {
      this[kSocket][kError] = err;
      onError(this[kClient], err);
    }
  };
  var onHttp2SessionEnd = function() {
    util.destroy(this, new SocketError("other side closed"));
    util.destroy(this[kSocket], new SocketError("other side closed"));
  };
  var onHTTP2GoAway = function(code) {
    const client = this[kClient];
    const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
    client[kSocket] = null;
    client[kHTTP2Session] = null;
    if (client.destroyed) {
      assert(this[kPending] === 0);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i = 0;i < requests.length; i++) {
        const request = requests[i];
        errorRequest(this, request, err);
      }
    } else if (client[kRunning] > 0) {
      const request = client[kQueue][client[kRunningIdx]];
      client[kQueue][client[kRunningIdx]++] = null;
      errorRequest(client, request, err);
    }
    client[kPendingIdx] = client[kRunningIdx];
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err);
    resume(client);
  };
  async function lazyllhttp() {
    const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : undefined;
    let mod;
    try {
      mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
    } catch (e) {
      mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
    }
    return await WebAssembly.instantiate(mod, {
      env: {
        wasm_on_url: (p, at, len) => {
          return 0;
        },
        wasm_on_status: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_message_begin: (p) => {
          assert.strictEqual(currentParser.ptr, p);
          return currentParser.onMessageBegin() || 0;
        },
        wasm_on_header_field: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_header_value: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
          assert.strictEqual(currentParser.ptr, p);
          return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
        },
        wasm_on_body: (p, at, len) => {
          assert.strictEqual(currentParser.ptr, p);
          const start = at - currentBufferPtr + currentBufferRef.byteOffset;
          return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
        },
        wasm_on_message_complete: (p) => {
          assert.strictEqual(currentParser.ptr, p);
          return currentParser.onMessageComplete() || 0;
        }
      }
    });
  }
  var onParserTimeout = function(parser) {
    const { socket, timeoutType, client } = parser;
    if (timeoutType === TIMEOUT_HEADERS) {
      if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
        assert(!parser.paused, "cannot be paused while waiting for headers");
        util.destroy(socket, new HeadersTimeoutError);
      }
    } else if (timeoutType === TIMEOUT_BODY) {
      if (!parser.paused) {
        util.destroy(socket, new BodyTimeoutError);
      }
    } else if (timeoutType === TIMEOUT_IDLE) {
      assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
      util.destroy(socket, new InformationalError("socket idle timeout"));
    }
  };
  var onSocketReadable = function() {
    const { [kParser]: parser } = this;
    parser.readMore();
  };
  var onSocketError = function(err) {
    const { [kClient]: client, [kParser]: parser } = this;
    assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
    if (client[kHTTPConnVersion] !== "h2") {
      if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
        return;
      }
    }
    this[kError] = err;
    onError(this[kClient], err);
  };
  var onError = function(client, err) {
    if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
      assert(client[kPendingIdx] === client[kRunningIdx]);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i = 0;i < requests.length; i++) {
        const request = requests[i];
        errorRequest(client, request, err);
      }
      assert(client[kSize] === 0);
    }
  };
  var onSocketEnd = function() {
    const { [kParser]: parser, [kClient]: client } = this;
    if (client[kHTTPConnVersion] !== "h2") {
      if (parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
        return;
      }
    }
    util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this)));
  };
  var onSocketClose = function() {
    const { [kClient]: client, [kParser]: parser } = this;
    if (client[kHTTPConnVersion] === "h1" && parser) {
      if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
        parser.onMessageComplete();
      }
      this[kParser].destroy();
      this[kParser] = null;
    }
    const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
    client[kSocket] = null;
    if (client.destroyed) {
      assert(client[kPending] === 0);
      const requests = client[kQueue].splice(client[kRunningIdx]);
      for (let i = 0;i < requests.length; i++) {
        const request = requests[i];
        errorRequest(client, request, err);
      }
    } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
      const request = client[kQueue][client[kRunningIdx]];
      client[kQueue][client[kRunningIdx]++] = null;
      errorRequest(client, request, err);
    }
    client[kPendingIdx] = client[kRunningIdx];
    assert(client[kRunning] === 0);
    client.emit("disconnect", client[kUrl], [client], err);
    resume(client);
  };
  async function connect(client) {
    assert(!client[kConnecting]);
    assert(!client[kSocket]);
    let { host, hostname, protocol, port } = client[kUrl];
    if (hostname[0] === "[") {
      const idx = hostname.indexOf("]");
      assert(idx !== -1);
      const ip = hostname.substr(1, idx - 1);
      assert(net.isIP(ip));
      hostname = ip;
    }
    client[kConnecting] = true;
    if (channels.beforeConnect.hasSubscribers) {
      channels.beforeConnect.publish({
        connectParams: {
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        },
        connector: client[kConnector]
      });
    }
    try {
      const socket = await new Promise((resolve, reject) => {
        client[kConnector]({
          host,
          hostname,
          protocol,
          port,
          servername: client[kServerName],
          localAddress: client[kLocalAddress]
        }, (err, socket2) => {
          if (err) {
            reject(err);
          } else {
            resolve(socket2);
          }
        });
      });
      if (client.destroyed) {
        util.destroy(socket.on("error", () => {
        }), new ClientDestroyedError);
        return;
      }
      client[kConnecting] = false;
      assert(socket);
      const isH2 = socket.alpnProtocol === "h2";
      if (isH2) {
        if (!h2ExperimentalWarned) {
          h2ExperimentalWarned = true;
          process.emitWarning("H2 support is experimental, expect them to change at any time.", {
            code: "UNDICI-H2"
          });
        }
        const session = http2.connect(client[kUrl], {
          createConnection: () => socket,
          peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
        });
        client[kHTTPConnVersion] = "h2";
        session[kClient] = client;
        session[kSocket] = socket;
        session.on("error", onHttp2SessionError);
        session.on("frameError", onHttp2FrameError);
        session.on("end", onHttp2SessionEnd);
        session.on("goaway", onHTTP2GoAway);
        session.on("close", onSocketClose);
        session.unref();
        client[kHTTP2Session] = session;
        socket[kHTTP2Session] = session;
      } else {
        if (!llhttpInstance) {
          llhttpInstance = await llhttpPromise;
          llhttpPromise = null;
        }
        socket[kNoRef] = false;
        socket[kWriting] = false;
        socket[kReset] = false;
        socket[kBlocking] = false;
        socket[kParser] = new Parser(client, socket, llhttpInstance);
      }
      socket[kCounter] = 0;
      socket[kMaxRequests] = client[kMaxRequests];
      socket[kClient] = client;
      socket[kError] = null;
      socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
      client[kSocket] = socket;
      if (channels.connected.hasSubscribers) {
        channels.connected.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector],
          socket
        });
      }
      client.emit("connect", client[kUrl], [client]);
    } catch (err) {
      if (client.destroyed) {
        return;
      }
      client[kConnecting] = false;
      if (channels.connectError.hasSubscribers) {
        channels.connectError.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector],
          error: err
        });
      }
      if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
        assert(client[kRunning] === 0);
        while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
          const request = client[kQueue][client[kPendingIdx]++];
          errorRequest(client, request, err);
        }
      } else {
        onError(client, err);
      }
      client.emit("connectionError", client[kUrl], [client], err);
    }
    resume(client);
  }
  var emitDrain = function(client) {
    client[kNeedDrain] = 0;
    client.emit("drain", client[kUrl], [client]);
  };
  var resume = function(client, sync) {
    if (client[kResuming] === 2) {
      return;
    }
    client[kResuming] = 2;
    _resume(client, sync);
    client[kResuming] = 0;
    if (client[kRunningIdx] > 256) {
      client[kQueue].splice(0, client[kRunningIdx]);
      client[kPendingIdx] -= client[kRunningIdx];
      client[kRunningIdx] = 0;
    }
  };
  var _resume = function(client, sync) {
    while (true) {
      if (client.destroyed) {
        assert(client[kPending] === 0);
        return;
      }
      if (client[kClosedResolve] && !client[kSize]) {
        client[kClosedResolve]();
        client[kClosedResolve] = null;
        return;
      }
      const socket = client[kSocket];
      if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
        if (client[kSize] === 0) {
          if (!socket[kNoRef] && socket.unref) {
            socket.unref();
            socket[kNoRef] = true;
          }
        } else if (socket[kNoRef] && socket.ref) {
          socket.ref();
          socket[kNoRef] = false;
        }
        if (client[kSize] === 0) {
          if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
            socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
          }
        } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
          if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
            const request2 = client[kQueue][client[kRunningIdx]];
            const headersTimeout = request2.headersTimeout != null ? request2.headersTimeout : client[kHeadersTimeout];
            socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
          }
        }
      }
      if (client[kBusy]) {
        client[kNeedDrain] = 2;
      } else if (client[kNeedDrain] === 2) {
        if (sync) {
          client[kNeedDrain] = 1;
          process.nextTick(emitDrain, client);
        } else {
          emitDrain(client);
        }
        continue;
      }
      if (client[kPending] === 0) {
        return;
      }
      if (client[kRunning] >= (client[kPipelining] || 1)) {
        return;
      }
      const request = client[kQueue][client[kPendingIdx]];
      if (client[kUrl].protocol === "https:" && client[kServerName] !== request.servername) {
        if (client[kRunning] > 0) {
          return;
        }
        client[kServerName] = request.servername;
        if (socket && socket.servername !== request.servername) {
          util.destroy(socket, new InformationalError("servername changed"));
          return;
        }
      }
      if (client[kConnecting]) {
        return;
      }
      if (!socket && !client[kHTTP2Session]) {
        connect(client);
        return;
      }
      if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
        return;
      }
      if (client[kRunning] > 0 && !request.idempotent) {
        return;
      }
      if (client[kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) {
        return;
      }
      if (util.isStream(request.body) && util.bodyLength(request.body) === 0) {
        request.body.on("data", function() {
          assert(false);
        }).on("error", function(err) {
          errorRequest(client, request, err);
        }).on("end", function() {
          util.destroy(this);
        });
        request.body = null;
      }
      if (client[kRunning] > 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
        return;
      }
      if (!request.aborted && write(client, request)) {
        client[kPendingIdx]++;
      } else {
        client[kQueue].splice(client[kPendingIdx], 1);
      }
    }
  };
  var write = function(client, request) {
    if (client[kHTTPConnVersion] === "h2") {
      writeH2(client, client[kHTTP2Session], request);
      return;
    }
    const { body, method, path, host, upgrade, headers, blocking, reset } = request;
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    let contentLength = util.bodyLength(body);
    if (contentLength === null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 && !expectsPayload) {
      contentLength = null;
    }
    if (request.contentLength !== null && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) {
        errorRequest(client, request, new RequestContentLengthMismatchError);
        return false;
      }
      process.emitWarning(new RequestContentLengthMismatchError);
    }
    const socket = client[kSocket];
    try {
      request.onConnect((err) => {
        if (request.aborted || request.completed) {
          return;
        }
        errorRequest(client, request, err || new RequestAbortedError);
        util.destroy(socket, new InformationalError("aborted"));
      });
    } catch (err) {
      errorRequest(client, request, err);
    }
    if (request.aborted) {
      return false;
    }
    if (method === "HEAD") {
      socket[kReset] = true;
    }
    if (upgrade || method === "CONNECT") {
      socket[kReset] = true;
    }
    if (reset != null) {
      socket[kReset] = reset;
    }
    if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
      socket[kReset] = true;
    }
    if (blocking) {
      socket[kBlocking] = true;
    }
    let header = `${method} ${path} HTTP/1.1\r\n`;
    if (typeof host === "string") {
      header += `host: ${host}\r\n`;
    } else {
      header += client[kHostHeader];
    }
    if (upgrade) {
      header += `connection: upgrade\r\nupgrade: ${upgrade}\r\n`;
    } else if (client[kPipelining] && !socket[kReset]) {
      header += "connection: keep-alive\r\n";
    } else {
      header += "connection: close\r\n";
    }
    if (headers) {
      header += headers;
    }
    if (channels.sendHeaders.hasSubscribers) {
      channels.sendHeaders.publish({ request, headers: header, socket });
    }
    if (!body) {
      if (contentLength === 0) {
        socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
      } else {
        assert(contentLength === null, "no body must not have content length");
        socket.write(`${header}\r\n`, "latin1");
      }
      request.onRequestSent();
    } else if (util.isBuffer(body)) {
      assert(contentLength === body.byteLength, "buffer body must have content length");
      socket.cork();
      socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
      socket.write(body);
      socket.uncork();
      request.onBodySent(body);
      request.onRequestSent();
      if (!expectsPayload) {
        socket[kReset] = true;
      }
    } else if (util.isBlobLike(body)) {
      if (typeof body.stream === "function") {
        writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload });
      } else {
        writeBlob({ body, client, request, socket, contentLength, header, expectsPayload });
      }
    } else if (util.isStream(body)) {
      writeStream({ body, client, request, socket, contentLength, header, expectsPayload });
    } else if (util.isIterable(body)) {
      writeIterable({ body, client, request, socket, contentLength, header, expectsPayload });
    } else {
      assert(false);
    }
    return true;
  };
  var writeH2 = function(client, session, request) {
    const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;
    let headers;
    if (typeof reqHeaders === "string")
      headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());
    else
      headers = reqHeaders;
    if (upgrade) {
      errorRequest(client, request, new Error("Upgrade not supported for H2"));
      return false;
    }
    try {
      request.onConnect((err) => {
        if (request.aborted || request.completed) {
          return;
        }
        errorRequest(client, request, err || new RequestAbortedError);
      });
    } catch (err) {
      errorRequest(client, request, err);
    }
    if (request.aborted) {
      return false;
    }
    let stream;
    const h2State = client[kHTTP2SessionState];
    headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
    headers[HTTP2_HEADER_PATH] = path;
    if (method === "CONNECT") {
      session.ref();
      stream = session.request(headers, { endStream: false, signal });
      if (stream.id && !stream.pending) {
        request.onUpgrade(null, null, stream);
        ++h2State.openStreams;
      } else {
        stream.once("ready", () => {
          request.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        });
      }
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0)
          session.unref();
      });
      return true;
    } else {
      headers[HTTP2_HEADER_METHOD] = method;
    }
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    let contentLength = util.bodyLength(body);
    if (contentLength == null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 || !expectsPayload) {
      contentLength = null;
    }
    if (request.contentLength != null && request.contentLength !== contentLength) {
      if (client[kStrictContentLength]) {
        errorRequest(client, request, new RequestContentLengthMismatchError);
        return false;
      }
      process.emitWarning(new RequestContentLengthMismatchError);
    }
    if (contentLength != null) {
      assert(body, "no body must not have content length");
      headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
    }
    session.ref();
    if (expectContinue) {
      headers[HTTP2_HEADER_EXPECT] = "100-continue";
      stream = session.request(headers, { endStream: false, signal });
      stream.once("continue", writeBodyH2);
    } else {
      stream = session.request(headers, { endStream: false, signal });
      writeBodyH2();
    }
    ++h2State.openStreams;
    stream.once("response", (headers2) => {
      if (request.onHeaders(Number(headers2[HTTP2_HEADER_STATUS]), headers2, stream.resume.bind(stream), "") === false) {
        stream.pause();
      }
    });
    stream.once("end", () => {
      request.onComplete([]);
    });
    stream.on("data", (chunk) => {
      if (request.onData(chunk) === false)
        stream.pause();
    });
    stream.once("close", () => {
      h2State.openStreams -= 1;
      if (h2State.openStreams === 0)
        session.unref();
    });
    stream.once("error", function(err) {
      if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
        h2State.streams -= 1;
        util.destroy(stream, err);
      }
    });
    stream.once("frameError", (type, code) => {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      errorRequest(client, request, err);
      if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
        h2State.streams -= 1;
        util.destroy(stream, err);
      }
    });
    return true;
    function writeBodyH2() {
      if (!body) {
        request.onRequestSent();
      } else if (util.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        stream.cork();
        stream.write(body);
        stream.uncork();
        request.onBodySent(body);
        request.onRequestSent();
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable({
            client,
            request,
            contentLength,
            h2stream: stream,
            expectsPayload,
            body: body.stream(),
            socket: client[kSocket],
            header: ""
          });
        } else {
          writeBlob({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            h2stream: stream,
            header: "",
            socket: client[kSocket]
          });
        }
      } else if (util.isStream(body)) {
        writeStream({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          socket: client[kSocket],
          h2stream: stream,
          header: ""
        });
      } else if (util.isIterable(body)) {
        writeIterable({
          body,
          client,
          request,
          contentLength,
          expectsPayload,
          header: "",
          h2stream: stream,
          socket: client[kSocket]
        });
      } else {
        assert(false);
      }
    }
  };
  var writeStream = function({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
    assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
    if (client[kHTTPConnVersion] === "h2") {
      let onPipeData = function(chunk) {
        request.onBodySent(chunk);
      };
      const pipe = pipeline(body, h2stream, (err) => {
        if (err) {
          util.destroy(body, err);
          util.destroy(h2stream, err);
        } else {
          request.onRequestSent();
        }
      });
      pipe.on("data", onPipeData);
      pipe.once("end", () => {
        pipe.removeListener("data", onPipeData);
        util.destroy(pipe);
      });
      return;
    }
    let finished = false;
    const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
    const onData = function(chunk) {
      if (finished) {
        return;
      }
      try {
        if (!writer.write(chunk) && this.pause) {
          this.pause();
        }
      } catch (err) {
        util.destroy(this, err);
      }
    };
    const onDrain = function() {
      if (finished) {
        return;
      }
      if (body.resume) {
        body.resume();
      }
    };
    const onAbort = function() {
      onFinished(new RequestAbortedError);
    };
    const onFinished = function(err) {
      if (finished) {
        return;
      }
      finished = true;
      assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
      socket.off("drain", onDrain).off("error", onFinished);
      body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
      if (!err) {
        try {
          writer.end();
        } catch (er) {
          err = er;
        }
      }
      writer.destroy(err);
      if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
        util.destroy(body, err);
      } else {
        util.destroy(body);
      }
    };
    body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
    if (body.resume) {
      body.resume();
    }
    socket.on("drain", onDrain).on("error", onFinished);
  };
  async function writeBlob({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
    assert(contentLength === body.size, "blob body must have content length");
    const isH2 = client[kHTTPConnVersion] === "h2";
    try {
      if (contentLength != null && contentLength !== body.size) {
        throw new RequestContentLengthMismatchError;
      }
      const buffer = Buffer.from(await body.arrayBuffer());
      if (isH2) {
        h2stream.cork();
        h2stream.write(buffer);
        h2stream.uncork();
      } else {
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
        socket.write(buffer);
        socket.uncork();
      }
      request.onBodySent(buffer);
      request.onRequestSent();
      if (!expectsPayload) {
        socket[kReset] = true;
      }
      resume(client);
    } catch (err) {
      util.destroy(isH2 ? h2stream : socket, err);
    }
  }
  async function writeIterable({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
    assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
    let callback = null;
    function onDrain() {
      if (callback) {
        const cb = callback;
        callback = null;
        cb();
      }
    }
    const waitForDrain = () => new Promise((resolve, reject) => {
      assert(callback === null);
      if (socket[kError]) {
        reject(socket[kError]);
      } else {
        callback = resolve;
      }
    });
    if (client[kHTTPConnVersion] === "h2") {
      h2stream.on("close", onDrain).on("drain", onDrain);
      try {
        for await (const chunk of body) {
          if (socket[kError]) {
            throw socket[kError];
          }
          if (!h2stream.write(chunk)) {
            await waitForDrain();
          }
        }
      } catch (err) {
        h2stream.destroy(err);
      } finally {
        h2stream.off("close", onDrain).off("drain", onDrain);
      }
      return;
    }
    socket.on("close", onDrain).on("drain", onDrain);
    const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
    try {
      for await (const chunk of body) {
        if (socket[kError]) {
          throw socket[kError];
        }
        if (!writer.write(chunk)) {
          await waitForDrain();
        }
      }
      writer.end();
    } catch (err) {
      writer.destroy(err);
    } finally {
      socket.off("close", onDrain).off("drain", onDrain);
    }
  }
  var errorRequest = function(client, request, err) {
    try {
      request.onError(err);
      assert(request.aborted);
    } catch (err2) {
      client.emit("error", err2);
    }
  };
  var assert = __require("assert");
  var net = __require("net");
  var http2 = __require("http2");
  var { pipeline } = __require("stream");
  var util = require_util();
  var timers = require_timers();
  var Request = require_request();
  var DispatcherBase = require_dispatcher_base();
  var {
    RequestContentLengthMismatchError,
    ResponseContentLengthMismatchError,
    InvalidArgumentError,
    RequestAbortedError,
    HeadersTimeoutError,
    HeadersOverflowError,
    SocketError,
    InformationalError,
    BodyTimeoutError,
    HTTPParserError,
    ResponseExceededMaxSizeError,
    ClientDestroyedError
  } = require_errors2();
  var buildConnector = require_connect();
  var {
    kUrl,
    kReset,
    kServerName,
    kClient,
    kBusy,
    kParser,
    kConnect,
    kBlocking,
    kResuming,
    kRunning,
    kPending,
    kSize,
    kWriting,
    kQueue,
    kConnected,
    kConnecting,
    kNeedDrain,
    kNoRef,
    kKeepAliveDefaultTimeout,
    kHostHeader,
    kPendingIdx,
    kRunningIdx,
    kError,
    kPipelining,
    kSocket,
    kKeepAliveTimeoutValue,
    kMaxHeadersSize,
    kKeepAliveMaxTimeout,
    kKeepAliveTimeoutThreshold,
    kHeadersTimeout,
    kBodyTimeout,
    kStrictContentLength,
    kConnector,
    kMaxRedirections,
    kMaxRequests,
    kCounter,
    kClose,
    kDestroy,
    kDispatch,
    kInterceptors,
    kLocalAddress,
    kMaxResponseSize,
    kHTTPConnVersion,
    kHost,
    kHTTP2Session,
    kHTTP2SessionState,
    kHTTP2BuildRequest,
    kHTTP2CopyHeaders,
    kHTTP1BuildRequest
  } = require_symbols();
  var {
    constants: {
      HTTP2_HEADER_AUTHORITY,
      HTTP2_HEADER_METHOD,
      HTTP2_HEADER_PATH,
      HTTP2_HEADER_CONTENT_LENGTH,
      HTTP2_HEADER_EXPECT,
      HTTP2_HEADER_STATUS
    }
  } = http2;
  var h2ExperimentalWarned = false;
  var FastBuffer = Buffer[Symbol.species];
  var kClosedResolve = Symbol("kClosedResolve");
  var channels = {};
  try {
    const diagnosticsChannel = __require("diagnostics_channel");
    channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
    channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
    channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
    channels.connected = diagnosticsChannel.channel("undici:client:connected");
  } catch {
    channels.sendHeaders = { hasSubscribers: false };
    channels.beforeConnect = { hasSubscribers: false };
    channels.connectError = { hasSubscribers: false };
    channels.connected = { hasSubscribers: false };
  }

  class Client extends DispatcherBase {
    constructor(url, {
      interceptors,
      maxHeaderSize,
      headersTimeout,
      socketTimeout,
      requestTimeout,
      connectTimeout,
      bodyTimeout,
      idleTimeout,
      keepAlive,
      keepAliveTimeout,
      maxKeepAliveTimeout,
      keepAliveMaxTimeout,
      keepAliveTimeoutThreshold,
      socketPath,
      pipelining,
      tls,
      strictContentLength,
      maxCachedSessions,
      maxRedirections,
      connect: connect2,
      maxRequestsPerClient,
      localAddress,
      maxResponseSize,
      autoSelectFamily,
      autoSelectFamilyAttemptTimeout,
      allowH2,
      maxConcurrentStreams
    } = {}) {
      super();
      if (keepAlive !== undefined) {
        throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
      }
      if (socketTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
      }
      if (requestTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
      }
      if (idleTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
      }
      if (maxKeepAliveTimeout !== undefined) {
        throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
      }
      if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
        throw new InvalidArgumentError("invalid maxHeaderSize");
      }
      if (socketPath != null && typeof socketPath !== "string") {
        throw new InvalidArgumentError("invalid socketPath");
      }
      if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
        throw new InvalidArgumentError("invalid connectTimeout");
      }
      if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveTimeout");
      }
      if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
      }
      if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
        throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
      }
      if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
        throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
      }
      if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
        throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
      }
      if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
        throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
      }
      if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
        throw new InvalidArgumentError("localAddress must be valid string IP address");
      }
      if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
        throw new InvalidArgumentError("maxResponseSize must be a positive number");
      }
      if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
        throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
      }
      if (allowH2 != null && typeof allowH2 !== "boolean") {
        throw new InvalidArgumentError("allowH2 must be a valid boolean value");
      }
      if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
        throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
      }
      if (typeof connect2 !== "function") {
        connect2 = buildConnector({
          ...tls,
          maxCachedSessions,
          allowH2,
          socketPath,
          timeout: connectTimeout,
          ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined,
          ...connect2
        });
      }
      this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
      this[kUrl] = util.parseOrigin(url);
      this[kConnector] = connect2;
      this[kSocket] = null;
      this[kPipelining] = pipelining != null ? pipelining : 1;
      this[kMaxHeadersSize] = maxHeaderSize || 16384;
      this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4000 : keepAliveTimeout;
      this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600000 : keepAliveMaxTimeout;
      this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1000 : keepAliveTimeoutThreshold;
      this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
      this[kServerName] = null;
      this[kLocalAddress] = localAddress != null ? localAddress : null;
      this[kResuming] = 0;
      this[kNeedDrain] = 0;
      this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r\n`;
      this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300000;
      this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300000;
      this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
      this[kMaxRedirections] = maxRedirections;
      this[kMaxRequests] = maxRequestsPerClient;
      this[kClosedResolve] = null;
      this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
      this[kHTTPConnVersion] = "h1";
      this[kHTTP2Session] = null;
      this[kHTTP2SessionState] = !allowH2 ? null : {
        openStreams: 0,
        maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
      };
      this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
      this[kQueue] = [];
      this[kRunningIdx] = 0;
      this[kPendingIdx] = 0;
    }
    get pipelining() {
      return this[kPipelining];
    }
    set pipelining(value) {
      this[kPipelining] = value;
      resume(this, true);
    }
    get [kPending]() {
      return this[kQueue].length - this[kPendingIdx];
    }
    get [kRunning]() {
      return this[kPendingIdx] - this[kRunningIdx];
    }
    get [kSize]() {
      return this[kQueue].length - this[kRunningIdx];
    }
    get [kConnected]() {
      return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
    }
    get [kBusy]() {
      const socket = this[kSocket];
      return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
    }
    [kConnect](cb) {
      connect(this);
      this.once("connect", cb);
    }
    [kDispatch](opts, handler) {
      const origin = opts.origin || this[kUrl].origin;
      const request = this[kHTTPConnVersion] === "h2" ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
      this[kQueue].push(request);
      if (this[kResuming]) {
      } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
        this[kResuming] = 1;
        process.nextTick(resume, this);
      } else {
        resume(this, true);
      }
      if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
        this[kNeedDrain] = 2;
      }
      return this[kNeedDrain] < 2;
    }
    async[kClose]() {
      return new Promise((resolve) => {
        if (!this[kSize]) {
          resolve(null);
        } else {
          this[kClosedResolve] = resolve;
        }
      });
    }
    async[kDestroy](err) {
      return new Promise((resolve) => {
        const requests = this[kQueue].splice(this[kPendingIdx]);
        for (let i = 0;i < requests.length; i++) {
          const request = requests[i];
          errorRequest(this, request, err);
        }
        const callback = () => {
          if (this[kClosedResolve]) {
            this[kClosedResolve]();
            this[kClosedResolve] = null;
          }
          resolve();
        };
        if (this[kHTTP2Session] != null) {
          util.destroy(this[kHTTP2Session], err);
          this[kHTTP2Session] = null;
          this[kHTTP2SessionState] = null;
        }
        if (!this[kSocket]) {
          queueMicrotask(callback);
        } else {
          util.destroy(this[kSocket].on("close", callback), err);
        }
        resume(this);
      });
    }
  }
  var constants = require_constants2();
  var createRedirectInterceptor = require_redirectInterceptor();
  var EMPTY_BUF = Buffer.alloc(0);
  var llhttpInstance = null;
  var llhttpPromise = lazyllhttp();
  llhttpPromise.catch();
  var currentParser = null;
  var currentBufferRef = null;
  var currentBufferSize = 0;
  var currentBufferPtr = null;
  var TIMEOUT_HEADERS = 1;
  var TIMEOUT_BODY = 2;
  var TIMEOUT_IDLE = 3;

  class Parser {
    constructor(client, socket, { exports: exports2 }) {
      assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
      this.llhttp = exports2;
      this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
      this.client = client;
      this.socket = socket;
      this.timeout = null;
      this.timeoutValue = null;
      this.timeoutType = null;
      this.statusCode = null;
      this.statusText = "";
      this.upgrade = false;
      this.headers = [];
      this.headersSize = 0;
      this.headersMaxSize = client[kMaxHeadersSize];
      this.shouldKeepAlive = false;
      this.paused = false;
      this.resume = this.resume.bind(this);
      this.bytesRead = 0;
      this.keepAlive = "";
      this.contentLength = "";
      this.connection = "";
      this.maxResponseSize = client[kMaxResponseSize];
    }
    setTimeout(value, type) {
      this.timeoutType = type;
      if (value !== this.timeoutValue) {
        timers.clearTimeout(this.timeout);
        if (value) {
          this.timeout = timers.setTimeout(onParserTimeout, value, this);
          if (this.timeout.unref) {
            this.timeout.unref();
          }
        } else {
          this.timeout = null;
        }
        this.timeoutValue = value;
      } else if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
    }
    resume() {
      if (this.socket.destroyed || !this.paused) {
        return;
      }
      assert(this.ptr != null);
      assert(currentParser == null);
      this.llhttp.llhttp_resume(this.ptr);
      assert(this.timeoutType === TIMEOUT_BODY);
      if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      this.paused = false;
      this.execute(this.socket.read() || EMPTY_BUF);
      this.readMore();
    }
    readMore() {
      while (!this.paused && this.ptr) {
        const chunk = this.socket.read();
        if (chunk === null) {
          break;
        }
        this.execute(chunk);
      }
    }
    execute(data) {
      assert(this.ptr != null);
      assert(currentParser == null);
      assert(!this.paused);
      const { socket, llhttp } = this;
      if (data.length > currentBufferSize) {
        if (currentBufferPtr) {
          llhttp.free(currentBufferPtr);
        }
        currentBufferSize = Math.ceil(data.length / 4096) * 4096;
        currentBufferPtr = llhttp.malloc(currentBufferSize);
      }
      new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
      try {
        let ret;
        try {
          currentBufferRef = data;
          currentParser = this;
          ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
        } catch (err) {
          throw err;
        } finally {
          currentParser = null;
          currentBufferRef = null;
        }
        const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
        if (ret === constants.ERROR.PAUSED_UPGRADE) {
          this.onUpgrade(data.slice(offset));
        } else if (ret === constants.ERROR.PAUSED) {
          this.paused = true;
          socket.unshift(data.slice(offset));
        } else if (ret !== constants.ERROR.OK) {
          const ptr = llhttp.llhttp_get_error_reason(this.ptr);
          let message = "";
          if (ptr) {
            const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
            message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
          }
          throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
        }
      } catch (err) {
        util.destroy(socket, err);
      }
    }
    destroy() {
      assert(this.ptr != null);
      assert(currentParser == null);
      this.llhttp.llhttp_free(this.ptr);
      this.ptr = null;
      timers.clearTimeout(this.timeout);
      this.timeout = null;
      this.timeoutValue = null;
      this.timeoutType = null;
      this.paused = false;
    }
    onStatus(buf) {
      this.statusText = buf.toString();
    }
    onMessageBegin() {
      const { socket, client } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      if (!request) {
        return -1;
      }
    }
    onHeaderField(buf) {
      const len = this.headers.length;
      if ((len & 1) === 0) {
        this.headers.push(buf);
      } else {
        this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
      }
      this.trackHeader(buf.length);
    }
    onHeaderValue(buf) {
      let len = this.headers.length;
      if ((len & 1) === 1) {
        this.headers.push(buf);
        len += 1;
      } else {
        this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
      }
      const key = this.headers[len - 2];
      if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
        this.keepAlive += buf.toString();
      } else if (key.length === 10 && key.toString().toLowerCase() === "connection") {
        this.connection += buf.toString();
      } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
        this.contentLength += buf.toString();
      }
      this.trackHeader(buf.length);
    }
    trackHeader(len) {
      this.headersSize += len;
      if (this.headersSize >= this.headersMaxSize) {
        util.destroy(this.socket, new HeadersOverflowError);
      }
    }
    onUpgrade(head) {
      const { upgrade, client, socket, headers, statusCode } = this;
      assert(upgrade);
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert(!socket.destroyed);
      assert(socket === client[kSocket]);
      assert(!this.paused);
      assert(request.upgrade || request.method === "CONNECT");
      this.statusCode = null;
      this.statusText = "";
      this.shouldKeepAlive = null;
      assert(this.headers.length % 2 === 0);
      this.headers = [];
      this.headersSize = 0;
      socket.unshift(head);
      socket[kParser].destroy();
      socket[kParser] = null;
      socket[kClient] = null;
      socket[kError] = null;
      socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
      client[kSocket] = null;
      client[kQueue][client[kRunningIdx]++] = null;
      client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
      try {
        request.onUpgrade(statusCode, headers, socket);
      } catch (err) {
        util.destroy(socket, err);
      }
      resume(client);
    }
    onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
      const { client, socket, headers, statusText } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      if (!request) {
        return -1;
      }
      assert(!this.upgrade);
      assert(this.statusCode < 200);
      if (statusCode === 100) {
        util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket)));
        return -1;
      }
      if (upgrade && !request.upgrade) {
        util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket)));
        return -1;
      }
      assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
      this.statusCode = statusCode;
      this.shouldKeepAlive = shouldKeepAlive || request.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
      if (this.statusCode >= 200) {
        const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];
        this.setTimeout(bodyTimeout, TIMEOUT_BODY);
      } else if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      if (request.method === "CONNECT") {
        assert(client[kRunning] === 1);
        this.upgrade = true;
        return 2;
      }
      if (upgrade) {
        assert(client[kRunning] === 1);
        this.upgrade = true;
        return 2;
      }
      assert(this.headers.length % 2 === 0);
      this.headers = [];
      this.headersSize = 0;
      if (this.shouldKeepAlive && client[kPipelining]) {
        const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
        if (keepAliveTimeout != null) {
          const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
          if (timeout <= 0) {
            socket[kReset] = true;
          } else {
            client[kKeepAliveTimeoutValue] = timeout;
          }
        } else {
          client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
        }
      } else {
        socket[kReset] = true;
      }
      let pause;
      try {
        pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
      } catch (err) {
        util.destroy(socket, err);
        return -1;
      }
      if (request.method === "HEAD") {
        return 1;
      }
      if (statusCode < 200) {
        return 1;
      }
      if (socket[kBlocking]) {
        socket[kBlocking] = false;
        resume(client);
      }
      return pause ? constants.ERROR.PAUSED : 0;
    }
    onBody(buf) {
      const { client, socket, statusCode, maxResponseSize } = this;
      if (socket.destroyed) {
        return -1;
      }
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
      if (this.timeout) {
        if (this.timeout.refresh) {
          this.timeout.refresh();
        }
      }
      assert(statusCode >= 200);
      if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
        util.destroy(socket, new ResponseExceededMaxSizeError);
        return -1;
      }
      this.bytesRead += buf.length;
      try {
        if (request.onData(buf) === false) {
          return constants.ERROR.PAUSED;
        }
      } catch (err) {
        util.destroy(socket, err);
        return -1;
      }
    }
    onMessageComplete() {
      const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
      if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
        return -1;
      }
      if (upgrade) {
        return;
      }
      const request = client[kQueue][client[kRunningIdx]];
      assert(request);
      assert(statusCode >= 100);
      this.statusCode = null;
      this.statusText = "";
      this.bytesRead = 0;
      this.contentLength = "";
      this.keepAlive = "";
      this.connection = "";
      assert(this.headers.length % 2 === 0);
      this.headers = [];
      this.headersSize = 0;
      if (statusCode < 200) {
        return;
      }
      if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
        util.destroy(socket, new ResponseContentLengthMismatchError);
        return -1;
      }
      try {
        request.onComplete(headers);
      } catch (err) {
        errorRequest(client, request, err);
      }
      client[kQueue][client[kRunningIdx]++] = null;
      if (socket[kWriting]) {
        assert.strictEqual(client[kRunning], 0);
        util.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (!shouldKeepAlive) {
        util.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (socket[kReset] && client[kRunning] === 0) {
        util.destroy(socket, new InformationalError("reset"));
        return constants.ERROR.PAUSED;
      } else if (client[kPipelining] === 1) {
        setImmediate(resume, client);
      } else {
        resume(client);
      }
    }
  }

  class AsyncWriter {
    constructor({ socket, request, contentLength, client, expectsPayload, header }) {
      this.socket = socket;
      this.request = request;
      this.contentLength = contentLength;
      this.client = client;
      this.bytesWritten = 0;
      this.expectsPayload = expectsPayload;
      this.header = header;
      socket[kWriting] = true;
    }
    write(chunk) {
      const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;
      if (socket[kError]) {
        throw socket[kError];
      }
      if (socket.destroyed) {
        return false;
      }
      const len = Buffer.byteLength(chunk);
      if (!len) {
        return true;
      }
      if (contentLength !== null && bytesWritten + len > contentLength) {
        if (client[kStrictContentLength]) {
          throw new RequestContentLengthMismatchError;
        }
        process.emitWarning(new RequestContentLengthMismatchError);
      }
      socket.cork();
      if (bytesWritten === 0) {
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        if (contentLength === null) {
          socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
        } else {
          socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
        }
      }
      if (contentLength === null) {
        socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
      }
      this.bytesWritten += len;
      const ret = socket.write(chunk);
      socket.uncork();
      request.onBodySent(chunk);
      if (!ret) {
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
      }
      return ret;
    }
    end() {
      const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;
      request.onRequestSent();
      socket[kWriting] = false;
      if (socket[kError]) {
        throw socket[kError];
      }
      if (socket.destroyed) {
        return;
      }
      if (bytesWritten === 0) {
        if (expectsPayload) {
          socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
        } else {
          socket.write(`${header}\r\n`, "latin1");
        }
      } else if (contentLength === null) {
        socket.write("\r\n0\r\n\r\n", "latin1");
      }
      if (contentLength !== null && bytesWritten !== contentLength) {
        if (client[kStrictContentLength]) {
          throw new RequestContentLengthMismatchError;
        } else {
          process.emitWarning(new RequestContentLengthMismatchError);
        }
      }
      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
        if (socket[kParser].timeout.refresh) {
          socket[kParser].timeout.refresh();
        }
      }
      resume(client);
    }
    destroy(err) {
      const { socket, client } = this;
      socket[kWriting] = false;
      if (err) {
        assert(client[kRunning] <= 1, "pipeline should only contain this request");
        util.destroy(socket, err);
      }
    }
  }
  module.exports = Client;
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS((exports, module) => {
  var kSize = 2048;
  var kMask = kSize - 1;

  class FixedCircularBuffer {
    constructor() {
      this.bottom = 0;
      this.top = 0;
      this.list = new Array(kSize);
      this.next = null;
    }
    isEmpty() {
      return this.top === this.bottom;
    }
    isFull() {
      return (this.top + 1 & kMask) === this.bottom;
    }
    push(data) {
      this.list[this.top] = data;
      this.top = this.top + 1 & kMask;
    }
    shift() {
      const nextItem = this.list[this.bottom];
      if (nextItem === undefined)
        return null;
      this.list[this.bottom] = undefined;
      this.bottom = this.bottom + 1 & kMask;
      return nextItem;
    }
  }
  module.exports = class FixedQueue {
    constructor() {
      this.head = this.tail = new FixedCircularBuffer;
    }
    isEmpty() {
      return this.head.isEmpty();
    }
    push(data) {
      if (this.head.isFull()) {
        this.head = this.head.next = new FixedCircularBuffer;
      }
      this.head.push(data);
    }
    shift() {
      const tail = this.tail;
      const next = tail.shift();
      if (tail.isEmpty() && tail.next !== null) {
        this.tail = tail.next;
      }
      return next;
    }
  };
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS((exports, module) => {
  var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
  var kPool = Symbol("pool");

  class PoolStats {
    constructor(pool) {
      this[kPool] = pool;
    }
    get connected() {
      return this[kPool][kConnected];
    }
    get free() {
      return this[kPool][kFree];
    }
    get pending() {
      return this[kPool][kPending];
    }
    get queued() {
      return this[kPool][kQueued];
    }
    get running() {
      return this[kPool][kRunning];
    }
    get size() {
      return this[kPool][kSize];
    }
  }
  module.exports = PoolStats;
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS((exports, module) => {
  var DispatcherBase = require_dispatcher_base();
  var FixedQueue = require_fixed_queue();
  var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
  var PoolStats = require_pool_stats();
  var kClients = Symbol("clients");
  var kNeedDrain = Symbol("needDrain");
  var kQueue = Symbol("queue");
  var kClosedResolve = Symbol("closed resolve");
  var kOnDrain = Symbol("onDrain");
  var kOnConnect = Symbol("onConnect");
  var kOnDisconnect = Symbol("onDisconnect");
  var kOnConnectionError = Symbol("onConnectionError");
  var kGetDispatcher = Symbol("get dispatcher");
  var kAddClient = Symbol("add client");
  var kRemoveClient = Symbol("remove client");
  var kStats = Symbol("stats");

  class PoolBase extends DispatcherBase {
    constructor() {
      super();
      this[kQueue] = new FixedQueue;
      this[kClients] = [];
      this[kQueued] = 0;
      const pool = this;
      this[kOnDrain] = function onDrain(origin, targets) {
        const queue = pool[kQueue];
        let needDrain = false;
        while (!needDrain) {
          const item = queue.shift();
          if (!item) {
            break;
          }
          pool[kQueued]--;
          needDrain = !this.dispatch(item.opts, item.handler);
        }
        this[kNeedDrain] = needDrain;
        if (!this[kNeedDrain] && pool[kNeedDrain]) {
          pool[kNeedDrain] = false;
          pool.emit("drain", origin, [pool, ...targets]);
        }
        if (pool[kClosedResolve] && queue.isEmpty()) {
          Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
        }
      };
      this[kOnConnect] = (origin, targets) => {
        pool.emit("connect", origin, [pool, ...targets]);
      };
      this[kOnDisconnect] = (origin, targets, err) => {
        pool.emit("disconnect", origin, [pool, ...targets], err);
      };
      this[kOnConnectionError] = (origin, targets, err) => {
        pool.emit("connectionError", origin, [pool, ...targets], err);
      };
      this[kStats] = new PoolStats(this);
    }
    get [kBusy]() {
      return this[kNeedDrain];
    }
    get [kConnected]() {
      return this[kClients].filter((client) => client[kConnected]).length;
    }
    get [kFree]() {
      return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
    }
    get [kPending]() {
      let ret = this[kQueued];
      for (const { [kPending]: pending } of this[kClients]) {
        ret += pending;
      }
      return ret;
    }
    get [kRunning]() {
      let ret = 0;
      for (const { [kRunning]: running } of this[kClients]) {
        ret += running;
      }
      return ret;
    }
    get [kSize]() {
      let ret = this[kQueued];
      for (const { [kSize]: size } of this[kClients]) {
        ret += size;
      }
      return ret;
    }
    get stats() {
      return this[kStats];
    }
    async[kClose]() {
      if (this[kQueue].isEmpty()) {
        return Promise.all(this[kClients].map((c) => c.close()));
      } else {
        return new Promise((resolve) => {
          this[kClosedResolve] = resolve;
        });
      }
    }
    async[kDestroy](err) {
      while (true) {
        const item = this[kQueue].shift();
        if (!item) {
          break;
        }
        item.handler.onError(err);
      }
      return Promise.all(this[kClients].map((c) => c.destroy(err)));
    }
    [kDispatch](opts, handler) {
      const dispatcher = this[kGetDispatcher]();
      if (!dispatcher) {
        this[kNeedDrain] = true;
        this[kQueue].push({ opts, handler });
        this[kQueued]++;
      } else if (!dispatcher.dispatch(opts, handler)) {
        dispatcher[kNeedDrain] = true;
        this[kNeedDrain] = !this[kGetDispatcher]();
      }
      return !this[kNeedDrain];
    }
    [kAddClient](client) {
      client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
      this[kClients].push(client);
      if (this[kNeedDrain]) {
        process.nextTick(() => {
          if (this[kNeedDrain]) {
            this[kOnDrain](client[kUrl], [this, client]);
          }
        });
      }
      return this;
    }
    [kRemoveClient](client) {
      client.close(() => {
        const idx = this[kClients].indexOf(client);
        if (idx !== -1) {
          this[kClients].splice(idx, 1);
        }
      });
      this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
    }
  }
  module.exports = {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
  };
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS((exports, module) => {
  var defaultFactory = function(origin, opts) {
    return new Client(origin, opts);
  };
  var {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kGetDispatcher
  } = require_pool_base();
  var Client = require_client();
  var {
    InvalidArgumentError
  } = require_errors2();
  var util = require_util();
  var { kUrl, kInterceptors } = require_symbols();
  var buildConnector = require_connect();
  var kOptions = Symbol("options");
  var kConnections = Symbol("connections");
  var kFactory = Symbol("factory");

  class Pool extends PoolBase {
    constructor(origin, {
      connections,
      factory = defaultFactory,
      connect,
      connectTimeout,
      tls,
      maxCachedSessions,
      socketPath,
      autoSelectFamily,
      autoSelectFamilyAttemptTimeout,
      ...options
    } = {}) {
      super();
      if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
        throw new InvalidArgumentError("invalid connections");
      }
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (typeof connect !== "function") {
        connect = buildConnector({
          ...tls,
          maxCachedSessions,
          socketPath,
          timeout: connectTimeout == null ? 1e4 : connectTimeout,
          ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined,
          ...connect
        });
      }
      this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
      this[kConnections] = connections || null;
      this[kUrl] = util.parseOrigin(origin);
      this[kOptions] = { ...util.deepClone(options), connect };
      this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
      this[kFactory] = factory;
    }
    [kGetDispatcher]() {
      let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
      if (dispatcher) {
        return dispatcher;
      }
      if (!this[kConnections] || this[kClients].length < this[kConnections]) {
        dispatcher = this[kFactory](this[kUrl], this[kOptions]);
        this[kAddClient](dispatcher);
      }
      return dispatcher;
    }
  }
  module.exports = Pool;
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS((exports, module) => {
  var getGreatestCommonDivisor = function(a, b) {
    if (b === 0)
      return a;
    return getGreatestCommonDivisor(b, a % b);
  };
  var defaultFactory = function(origin, opts) {
    return new Pool(origin, opts);
  };
  var {
    BalancedPoolMissingUpstreamError,
    InvalidArgumentError
  } = require_errors2();
  var {
    PoolBase,
    kClients,
    kNeedDrain,
    kAddClient,
    kRemoveClient,
    kGetDispatcher
  } = require_pool_base();
  var Pool = require_pool();
  var { kUrl, kInterceptors } = require_symbols();
  var { parseOrigin } = require_util();
  var kFactory = Symbol("factory");
  var kOptions = Symbol("options");
  var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
  var kCurrentWeight = Symbol("kCurrentWeight");
  var kIndex = Symbol("kIndex");
  var kWeight = Symbol("kWeight");
  var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
  var kErrorPenalty = Symbol("kErrorPenalty");

  class BalancedPool extends PoolBase {
    constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
      super();
      this[kOptions] = opts;
      this[kIndex] = -1;
      this[kCurrentWeight] = 0;
      this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
      this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
      if (!Array.isArray(upstreams)) {
        upstreams = [upstreams];
      }
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
      this[kFactory] = factory;
      for (const upstream of upstreams) {
        this.addUpstream(upstream);
      }
      this._updateBalancedPoolStats();
    }
    addUpstream(upstream) {
      const upstreamOrigin = parseOrigin(upstream).origin;
      if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
        return this;
      }
      const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
      this[kAddClient](pool);
      pool.on("connect", () => {
        pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
      });
      pool.on("connectionError", () => {
        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
        this._updateBalancedPoolStats();
      });
      pool.on("disconnect", (...args) => {
        const err = args[2];
        if (err && err.code === "UND_ERR_SOCKET") {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        }
      });
      for (const client of this[kClients]) {
        client[kWeight] = this[kMaxWeightPerServer];
      }
      this._updateBalancedPoolStats();
      return this;
    }
    _updateBalancedPoolStats() {
      this[kGreatestCommonDivisor] = this[kClients].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
    }
    removeUpstream(upstream) {
      const upstreamOrigin = parseOrigin(upstream).origin;
      const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
      if (pool) {
        this[kRemoveClient](pool);
      }
      return this;
    }
    get upstreams() {
      return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
    }
    [kGetDispatcher]() {
      if (this[kClients].length === 0) {
        throw new BalancedPoolMissingUpstreamError;
      }
      const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
      if (!dispatcher) {
        return;
      }
      const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
      if (allClientsBusy) {
        return;
      }
      let counter = 0;
      let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
      while (counter++ < this[kClients].length) {
        this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
        const pool = this[kClients][this[kIndex]];
        if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
          maxWeightIndex = this[kIndex];
        }
        if (this[kIndex] === 0) {
          this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
          if (this[kCurrentWeight] <= 0) {
            this[kCurrentWeight] = this[kMaxWeightPerServer];
          }
        }
        if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
          return pool;
        }
      }
      this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
      this[kIndex] = maxWeightIndex;
      return this[kClients][maxWeightIndex];
    }
  }
  module.exports = BalancedPool;
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS((exports, module) => {
  var { kConnected, kSize } = require_symbols();

  class CompatWeakRef {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value[kConnected] === 0 && this.value[kSize] === 0 ? undefined : this.value;
    }
  }

  class CompatFinalizer {
    constructor(finalizer) {
      this.finalizer = finalizer;
    }
    register(dispatcher, key) {
      dispatcher.on("disconnect", () => {
        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
          this.finalizer(key);
        }
      });
    }
  }
  module.exports = function() {
    return {
      WeakRef: global.WeakRef || CompatWeakRef,
      FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
    };
  };
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS((exports, module) => {
  var defaultFactory = function(origin, opts) {
    return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
  };
  var { InvalidArgumentError } = require_errors2();
  var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
  var DispatcherBase = require_dispatcher_base();
  var Pool = require_pool();
  var Client = require_client();
  var util = require_util();
  var createRedirectInterceptor = require_redirectInterceptor();
  var { WeakRef: WeakRef2, FinalizationRegistry: FinalizationRegistry2 } = require_dispatcher_weakref()();
  var kOnConnect = Symbol("onConnect");
  var kOnDisconnect = Symbol("onDisconnect");
  var kOnConnectionError = Symbol("onConnectionError");
  var kMaxRedirections = Symbol("maxRedirections");
  var kOnDrain = Symbol("onDrain");
  var kFactory = Symbol("factory");
  var kFinalizer = Symbol("finalizer");
  var kOptions = Symbol("options");

  class Agent extends DispatcherBase {
    constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
      super();
      if (typeof factory !== "function") {
        throw new InvalidArgumentError("factory must be a function.");
      }
      if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
        throw new InvalidArgumentError("connect must be a function or an object");
      }
      if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
        throw new InvalidArgumentError("maxRedirections must be a positive number");
      }
      if (connect && typeof connect !== "function") {
        connect = { ...connect };
      }
      this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
      this[kOptions] = { ...util.deepClone(options), connect };
      this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : undefined;
      this[kMaxRedirections] = maxRedirections;
      this[kFactory] = factory;
      this[kClients] = new Map;
      this[kFinalizer] = new FinalizationRegistry2((key) => {
        const ref = this[kClients].get(key);
        if (ref !== undefined && ref.deref() === undefined) {
          this[kClients].delete(key);
        }
      });
      const agent = this;
      this[kOnDrain] = (origin, targets) => {
        agent.emit("drain", origin, [agent, ...targets]);
      };
      this[kOnConnect] = (origin, targets) => {
        agent.emit("connect", origin, [agent, ...targets]);
      };
      this[kOnDisconnect] = (origin, targets, err) => {
        agent.emit("disconnect", origin, [agent, ...targets], err);
      };
      this[kOnConnectionError] = (origin, targets, err) => {
        agent.emit("connectionError", origin, [agent, ...targets], err);
      };
    }
    get [kRunning]() {
      let ret = 0;
      for (const ref of this[kClients].values()) {
        const client = ref.deref();
        if (client) {
          ret += client[kRunning];
        }
      }
      return ret;
    }
    [kDispatch](opts, handler) {
      let key;
      if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
        key = String(opts.origin);
      } else {
        throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
      }
      const ref = this[kClients].get(key);
      let dispatcher = ref ? ref.deref() : null;
      if (!dispatcher) {
        dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].set(key, new WeakRef2(dispatcher));
        this[kFinalizer].register(dispatcher, key);
      }
      return dispatcher.dispatch(opts, handler);
    }
    async[kClose]() {
      const closePromises = [];
      for (const ref of this[kClients].values()) {
        const client = ref.deref();
        if (client) {
          closePromises.push(client.close());
        }
      }
      await Promise.all(closePromises);
    }
    async[kDestroy](err) {
      const destroyPromises = [];
      for (const ref of this[kClients].values()) {
        const client = ref.deref();
        if (client) {
          destroyPromises.push(client.destroy(err));
        }
      }
      await Promise.all(destroyPromises);
    }
  }
  module.exports = Agent;
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS((exports, module) => {
  var isLocked = function(self2) {
    return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
  };
  var isUnusable = function(self2) {
    return util.isDisturbed(self2) || isLocked(self2);
  };
  async function consume(stream, type) {
    if (isUnusable(stream)) {
      throw new TypeError("unusable");
    }
    assert(!stream[kConsume]);
    return new Promise((resolve, reject) => {
      stream[kConsume] = {
        type,
        stream,
        resolve,
        reject,
        length: 0,
        body: []
      };
      stream.on("error", function(err) {
        consumeFinish(this[kConsume], err);
      }).on("close", function() {
        if (this[kConsume].body !== null) {
          consumeFinish(this[kConsume], new RequestAbortedError);
        }
      });
      process.nextTick(consumeStart, stream[kConsume]);
    });
  }
  var consumeStart = function(consume2) {
    if (consume2.body === null) {
      return;
    }
    const { _readableState: state } = consume2.stream;
    for (const chunk of state.buffer) {
      consumePush(consume2, chunk);
    }
    if (state.endEmitted) {
      consumeEnd(this[kConsume]);
    } else {
      consume2.stream.on("end", function() {
        consumeEnd(this[kConsume]);
      });
    }
    consume2.stream.resume();
    while (consume2.stream.read() != null) {
    }
  };
  var consumeEnd = function(consume2) {
    const { type, body, resolve, stream, length } = consume2;
    try {
      if (type === "text") {
        resolve(toUSVString(Buffer.concat(body)));
      } else if (type === "json") {
        resolve(JSON.parse(Buffer.concat(body)));
      } else if (type === "arrayBuffer") {
        const dst = new Uint8Array(length);
        let pos = 0;
        for (const buf of body) {
          dst.set(buf, pos);
          pos += buf.byteLength;
        }
        resolve(dst);
      } else if (type === "blob") {
        if (!Blob2) {
          Blob2 = __require("buffer").Blob;
        }
        resolve(new Blob2(body, { type: stream[kContentType] }));
      }
      consumeFinish(consume2);
    } catch (err) {
      stream.destroy(err);
    }
  };
  var consumePush = function(consume2, chunk) {
    consume2.length += chunk.length;
    consume2.body.push(chunk);
  };
  var consumeFinish = function(consume2, err) {
    if (consume2.body === null) {
      return;
    }
    if (err) {
      consume2.reject(err);
    } else {
      consume2.resolve();
    }
    consume2.type = null;
    consume2.stream = null;
    consume2.resolve = null;
    consume2.reject = null;
    consume2.length = 0;
    consume2.body = null;
  };
  var assert = __require("assert");
  var { Readable } = __require("stream");
  var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors2();
  var util = require_util();
  var { ReadableStreamFrom, toUSVString } = require_util();
  var Blob2;
  var kConsume = Symbol("kConsume");
  var kReading = Symbol("kReading");
  var kBody = Symbol("kBody");
  var kAbort = Symbol("abort");
  var kContentType = Symbol("kContentType");
  module.exports = class BodyReadable extends Readable {
    constructor({
      resume,
      abort,
      contentType = "",
      highWaterMark = 64 * 1024
    }) {
      super({
        autoDestroy: true,
        read: resume,
        highWaterMark
      });
      this._readableState.dataEmitted = false;
      this[kAbort] = abort;
      this[kConsume] = null;
      this[kBody] = null;
      this[kContentType] = contentType;
      this[kReading] = false;
    }
    destroy(err) {
      if (this.destroyed) {
        return this;
      }
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError;
      }
      if (err) {
        this[kAbort]();
      }
      return super.destroy(err);
    }
    emit(ev, ...args) {
      if (ev === "data") {
        this._readableState.dataEmitted = true;
      } else if (ev === "error") {
        this._readableState.errorEmitted = true;
      }
      return super.emit(ev, ...args);
    }
    on(ev, ...args) {
      if (ev === "data" || ev === "readable") {
        this[kReading] = true;
      }
      return super.on(ev, ...args);
    }
    addListener(ev, ...args) {
      return this.on(ev, ...args);
    }
    off(ev, ...args) {
      const ret = super.off(ev, ...args);
      if (ev === "data" || ev === "readable") {
        this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
      }
      return ret;
    }
    removeListener(ev, ...args) {
      return this.off(ev, ...args);
    }
    push(chunk) {
      if (this[kConsume] && chunk !== null && this.readableLength === 0) {
        consumePush(this[kConsume], chunk);
        return this[kReading] ? super.push(chunk) : true;
      }
      return super.push(chunk);
    }
    async text() {
      return consume(this, "text");
    }
    async json() {
      return consume(this, "json");
    }
    async blob() {
      return consume(this, "blob");
    }
    async arrayBuffer() {
      return consume(this, "arrayBuffer");
    }
    async formData() {
      throw new NotSupportedError;
    }
    get bodyUsed() {
      return util.isDisturbed(this);
    }
    get body() {
      if (!this[kBody]) {
        this[kBody] = ReadableStreamFrom(this);
        if (this[kConsume]) {
          this[kBody].getReader();
          assert(this[kBody].locked);
        }
      }
      return this[kBody];
    }
    async dump(opts) {
      let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
      const signal = opts && opts.signal;
      const abortFn = () => {
        this.destroy();
      };
      let signalListenerCleanup;
      if (signal) {
        if (typeof signal !== "object" || !("aborted" in signal)) {
          throw new InvalidArgumentError("signal must be an AbortSignal");
        }
        util.throwIfAborted(signal);
        signalListenerCleanup = util.addAbortListener(signal, abortFn);
      }
      try {
        for await (const chunk of this) {
          util.throwIfAborted(signal);
          limit -= Buffer.byteLength(chunk);
          if (limit < 0) {
            return;
          }
        }
      } catch {
        util.throwIfAborted(signal);
      } finally {
        if (typeof signalListenerCleanup === "function") {
          signalListenerCleanup();
        } else if (signalListenerCleanup) {
          signalListenerCleanup[Symbol.dispose]();
        }
      }
    }
  };
});

// node_modules/undici/lib/api/util.js
var require_util3 = __commonJS((exports, module) => {
  async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
    assert(body);
    let chunks = [];
    let limit = 0;
    for await (const chunk of body) {
      chunks.push(chunk);
      limit += chunk.length;
      if (limit > 128 * 1024) {
        chunks = null;
        break;
      }
    }
    if (statusCode === 204 || !contentType || !chunks) {
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
      return;
    }
    try {
      if (contentType.startsWith("application/json")) {
        const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
        return;
      }
      if (contentType.startsWith("text/")) {
        const payload = toUSVString(Buffer.concat(chunks));
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
        return;
      }
    } catch (err) {
    }
    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
  }
  var assert = __require("assert");
  var {
    ResponseStatusCodeError
  } = require_errors2();
  var { toUSVString } = require_util();
  module.exports = { getResolveErrorBodyCallback };
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS((exports, module) => {
  var abort = function(self2) {
    if (self2.abort) {
      self2.abort();
    } else {
      self2.onError(new RequestAbortedError);
    }
  };
  var addSignal = function(self2, signal) {
    self2[kSignal] = null;
    self2[kListener] = null;
    if (!signal) {
      return;
    }
    if (signal.aborted) {
      abort(self2);
      return;
    }
    self2[kSignal] = signal;
    self2[kListener] = () => {
      abort(self2);
    };
    addAbortListener(self2[kSignal], self2[kListener]);
  };
  var removeSignal = function(self2) {
    if (!self2[kSignal]) {
      return;
    }
    if ("removeEventListener" in self2[kSignal]) {
      self2[kSignal].removeEventListener("abort", self2[kListener]);
    } else {
      self2[kSignal].removeListener("abort", self2[kListener]);
    }
    self2[kSignal] = null;
    self2[kListener] = null;
  };
  var { addAbortListener } = require_util();
  var { RequestAbortedError } = require_errors2();
  var kListener = Symbol("kListener");
  var kSignal = Symbol("kSignal");
  module.exports = {
    addSignal,
    removeSignal
  };
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS((exports, module) => {
  var request = function(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        request.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new RequestHandler(opts, callback));
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  };
  var Readable = require_readable();
  var {
    InvalidArgumentError,
    RequestAbortedError
  } = require_errors2();
  var util = require_util();
  var { getResolveErrorBodyCallback } = require_util3();
  var { AsyncResource } = __require("async_hooks");
  var { addSignal, removeSignal } = require_abort_signal();

  class RequestHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
          throw new InvalidArgumentError("invalid highWaterMark");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_REQUEST");
      } catch (err) {
        if (util.isStream(body)) {
          util.destroy(body.on("error", util.nop), err);
        }
        throw err;
      }
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.body = body;
      this.trailers = {};
      this.context = null;
      this.onInfo = onInfo || null;
      this.throwOnError = throwOnError;
      this.highWaterMark = highWaterMark;
      if (util.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;
      const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      if (statusCode < 200) {
        if (this.onInfo) {
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
      const contentType = parsedHeaders["content-type"];
      const body = new Readable({ resume, abort, contentType, highWaterMark });
      this.callback = null;
      this.res = body;
      if (callback !== null) {
        if (this.throwOnError && statusCode >= 400) {
          this.runInAsyncScope(getResolveErrorBodyCallback, null, { callback, body, contentType, statusCode, statusMessage, headers });
        } else {
          this.runInAsyncScope(callback, null, null, {
            statusCode,
            headers,
            trailers: this.trailers,
            opaque,
            body,
            context
          });
        }
      }
    }
    onData(chunk) {
      const { res } = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const { res } = this;
      removeSignal(this);
      util.parseHeaders(trailers, this.trailers);
      res.push(null);
    }
    onError(err) {
      const { res, callback, body, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
      if (res) {
        this.res = null;
        queueMicrotask(() => {
          util.destroy(res, err);
        });
      }
      if (body) {
        this.body = null;
        util.destroy(body, err);
      }
    }
  }
  module.exports = request;
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS((exports, module) => {
  var stream = function(opts, factory, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        stream.call(this, opts, factory, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new StreamHandler(opts, factory, callback));
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  };
  var { finished, PassThrough } = __require("stream");
  var {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors2();
  var util = require_util();
  var { getResolveErrorBodyCallback } = require_util3();
  var { AsyncResource } = __require("async_hooks");
  var { addSignal, removeSignal } = require_abort_signal();

  class StreamHandler extends AsyncResource {
    constructor(opts, factory, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("invalid factory");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_STREAM");
      } catch (err) {
        if (util.isStream(body)) {
          util.destroy(body.on("error", util.nop), err);
        }
        throw err;
      }
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.factory = factory;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.context = null;
      this.trailers = null;
      this.body = body;
      this.onInfo = onInfo || null;
      this.throwOnError = throwOnError || false;
      if (util.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume, statusMessage) {
      const { factory, opaque, context, callback, responseHeaders } = this;
      const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      if (statusCode < 200) {
        if (this.onInfo) {
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      this.factory = null;
      let res;
      if (this.throwOnError && statusCode >= 400) {
        const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        res = new PassThrough;
        this.callback = null;
        this.runInAsyncScope(getResolveErrorBodyCallback, null, { callback, body: res, contentType, statusCode, statusMessage, headers });
      } else {
        res = this.runInAsyncScope(factory, null, {
          statusCode,
          headers,
          opaque,
          context
        });
        if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
          throw new InvalidReturnValueError("expected Writable");
        }
        finished(res, { readable: false }, (err) => {
          const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
          this.res = null;
          if (err || !res2.readable) {
            util.destroy(res2, err);
          }
          this.callback = null;
          this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
          if (err) {
            abort();
          }
        });
      }
      res.on("drain", resume);
      this.res = res;
      const needDrain = res.writableNeedDrain !== undefined ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
      return needDrain !== true;
    }
    onData(chunk) {
      const { res } = this;
      return res.write(chunk);
    }
    onComplete(trailers) {
      const { res } = this;
      removeSignal(this);
      this.trailers = util.parseHeaders(trailers);
      res.end();
    }
    onError(err) {
      const { res, callback, opaque, body } = this;
      removeSignal(this);
      this.factory = null;
      if (res) {
        this.res = null;
        util.destroy(res, err);
      } else if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
      if (body) {
        this.body = null;
        util.destroy(body, err);
      }
    }
  }
  module.exports = stream;
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS((exports, module) => {
  var pipeline = function(opts, handler) {
    try {
      const pipelineHandler = new PipelineHandler(opts, handler);
      this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
      return pipelineHandler.ret;
    } catch (err) {
      return new PassThrough().destroy(err);
    }
  };
  var {
    Readable,
    Duplex,
    PassThrough
  } = __require("stream");
  var {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors2();
  var util = require_util();
  var { AsyncResource } = __require("async_hooks");
  var { addSignal, removeSignal } = require_abort_signal();
  var assert = __require("assert");
  var kResume = Symbol("resume");

  class PipelineRequest extends Readable {
    constructor() {
      super({ autoDestroy: true });
      this[kResume] = null;
    }
    _read() {
      const { [kResume]: resume } = this;
      if (resume) {
        this[kResume] = null;
        resume();
      }
    }
    _destroy(err, callback) {
      this._read();
      callback(err);
    }
  }

  class PipelineResponse extends Readable {
    constructor(resume) {
      super({ autoDestroy: true });
      this[kResume] = resume;
    }
    _read() {
      this[kResume]();
    }
    _destroy(err, callback) {
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError;
      }
      callback(err);
    }
  }

  class PipelineHandler extends AsyncResource {
    constructor(opts, handler) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof handler !== "function") {
        throw new InvalidArgumentError("invalid handler");
      }
      const { signal, method, opaque, onInfo, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      if (method === "CONNECT") {
        throw new InvalidArgumentError("invalid method");
      }
      if (onInfo && typeof onInfo !== "function") {
        throw new InvalidArgumentError("invalid onInfo callback");
      }
      super("UNDICI_PIPELINE");
      this.opaque = opaque || null;
      this.responseHeaders = responseHeaders || null;
      this.handler = handler;
      this.abort = null;
      this.context = null;
      this.onInfo = onInfo || null;
      this.req = new PipelineRequest().on("error", util.nop);
      this.ret = new Duplex({
        readableObjectMode: opts.objectMode,
        autoDestroy: true,
        read: () => {
          const { body } = this;
          if (body && body.resume) {
            body.resume();
          }
        },
        write: (chunk, encoding, callback) => {
          const { req } = this;
          if (req.push(chunk, encoding) || req._readableState.destroyed) {
            callback();
          } else {
            req[kResume] = callback;
          }
        },
        destroy: (err, callback) => {
          const { body, req, res, ret, abort } = this;
          if (!err && !ret._readableState.endEmitted) {
            err = new RequestAbortedError;
          }
          if (abort && err) {
            abort();
          }
          util.destroy(body, err);
          util.destroy(req, err);
          util.destroy(res, err);
          removeSignal(this);
          callback(err);
        }
      }).on("prefinish", () => {
        const { req } = this;
        req.push(null);
      });
      this.res = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      const { ret, res } = this;
      assert(!res, "pipeline cannot be retried");
      if (ret.destroyed) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders(statusCode, rawHeaders, resume) {
      const { opaque, handler, context } = this;
      if (statusCode < 200) {
        if (this.onInfo) {
          const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
          this.onInfo({ statusCode, headers });
        }
        return;
      }
      this.res = new PipelineResponse(resume);
      let body;
      try {
        this.handler = null;
        const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        body = this.runInAsyncScope(handler, null, {
          statusCode,
          headers,
          opaque,
          body: this.res,
          context
        });
      } catch (err) {
        this.res.on("error", util.nop);
        throw err;
      }
      if (!body || typeof body.on !== "function") {
        throw new InvalidReturnValueError("expected Readable");
      }
      body.on("data", (chunk) => {
        const { ret, body: body2 } = this;
        if (!ret.push(chunk) && body2.pause) {
          body2.pause();
        }
      }).on("error", (err) => {
        const { ret } = this;
        util.destroy(ret, err);
      }).on("end", () => {
        const { ret } = this;
        ret.push(null);
      }).on("close", () => {
        const { ret } = this;
        if (!ret._readableState.ended) {
          util.destroy(ret, new RequestAbortedError);
        }
      });
      this.body = body;
    }
    onData(chunk) {
      const { res } = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const { res } = this;
      res.push(null);
    }
    onError(err) {
      const { ret } = this;
      this.handler = null;
      util.destroy(ret, err);
    }
  }
  module.exports = pipeline;
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS((exports, module) => {
  var upgrade = function(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        upgrade.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      const upgradeHandler = new UpgradeHandler(opts, callback);
      this.dispatch({
        ...opts,
        method: opts.method || "GET",
        upgrade: opts.protocol || "Websocket"
      }, upgradeHandler);
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  };
  var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors2();
  var { AsyncResource } = __require("async_hooks");
  var util = require_util();
  var { addSignal, removeSignal } = require_abort_signal();
  var assert = __require("assert");

  class UpgradeHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      const { signal, opaque, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_UPGRADE");
      this.responseHeaders = responseHeaders || null;
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      this.context = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = null;
    }
    onHeaders() {
      throw new SocketError("bad upgrade", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      const { callback, opaque, context } = this;
      assert.strictEqual(statusCode, 101);
      removeSignal(this);
      this.callback = null;
      const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      this.runInAsyncScope(callback, null, null, {
        headers,
        socket,
        opaque,
        context
      });
    }
    onError(err) {
      const { callback, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
    }
  }
  module.exports = upgrade;
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS((exports, module) => {
  var connect = function(opts, callback) {
    if (callback === undefined) {
      return new Promise((resolve, reject) => {
        connect.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      const connectHandler = new ConnectHandler(opts, callback);
      this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
    } catch (err) {
      if (typeof callback !== "function") {
        throw err;
      }
      const opaque = opts && opts.opaque;
      queueMicrotask(() => callback(err, { opaque }));
    }
  };
  var { AsyncResource } = __require("async_hooks");
  var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors2();
  var util = require_util();
  var { addSignal, removeSignal } = require_abort_signal();

  class ConnectHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      const { signal, opaque, responseHeaders } = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_CONNECT");
      this.opaque = opaque || null;
      this.responseHeaders = responseHeaders || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort, context) {
      if (!this.callback) {
        throw new RequestAbortedError;
      }
      this.abort = abort;
      this.context = context;
    }
    onHeaders() {
      throw new SocketError("bad connect", null);
    }
    onUpgrade(statusCode, rawHeaders, socket) {
      const { callback, opaque, context } = this;
      removeSignal(this);
      this.callback = null;
      let headers = rawHeaders;
      if (headers != null) {
        headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
      }
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers,
        socket,
        opaque,
        context
      });
    }
    onError(err) {
      const { callback, opaque } = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        queueMicrotask(() => {
          this.runInAsyncScope(callback, null, err, { opaque });
        });
      }
    }
  }
  module.exports = connect;
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS((exports, module) => {
  exports.request = require_api_request();
  exports.stream = require_api_stream();
  exports.pipeline = require_api_pipeline();
  exports.upgrade = require_api_upgrade();
  exports.connect = require_api_connect();
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS((exports, module) => {
  var { UndiciError } = require_errors2();

  class MockNotMatchedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, MockNotMatchedError);
      this.name = "MockNotMatchedError";
      this.message = message || "The request does not match any registered mock dispatches";
      this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
    }
  }
  module.exports = {
    MockNotMatchedError
  };
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS((exports, module) => {
  module.exports = {
    kAgent: Symbol("agent"),
    kOptions: Symbol("options"),
    kFactory: Symbol("factory"),
    kDispatches: Symbol("dispatches"),
    kDispatchKey: Symbol("dispatch key"),
    kDefaultHeaders: Symbol("default headers"),
    kDefaultTrailers: Symbol("default trailers"),
    kContentLength: Symbol("content length"),
    kMockAgent: Symbol("mock agent"),
    kMockAgentSet: Symbol("mock agent set"),
    kMockAgentGet: Symbol("mock agent get"),
    kMockDispatch: Symbol("mock dispatch"),
    kClose: Symbol("close"),
    kOriginalClose: Symbol("original agent close"),
    kOrigin: Symbol("origin"),
    kIsMockActive: Symbol("is mock active"),
    kNetConnect: Symbol("net connect"),
    kGetNetConnect: Symbol("get net connect"),
    kConnected: Symbol("connected")
  };
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS((exports, module) => {
  var matchValue = function(match, value) {
    if (typeof match === "string") {
      return match === value;
    }
    if (match instanceof RegExp) {
      return match.test(value);
    }
    if (typeof match === "function") {
      return match(value) === true;
    }
    return false;
  };
  var lowerCaseEntries = function(headers) {
    return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
      return [headerName.toLocaleLowerCase(), headerValue];
    }));
  };
  var getHeaderByName = function(headers, key) {
    if (Array.isArray(headers)) {
      for (let i = 0;i < headers.length; i += 2) {
        if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
          return headers[i + 1];
        }
      }
      return;
    } else if (typeof headers.get === "function") {
      return headers.get(key);
    } else {
      return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
    }
  };
  var buildHeadersFromArray = function(headers) {
    const clone = headers.slice();
    const entries = [];
    for (let index = 0;index < clone.length; index += 2) {
      entries.push([clone[index], clone[index + 1]]);
    }
    return Object.fromEntries(entries);
  };
  var matchHeaders = function(mockDispatch2, headers) {
    if (typeof mockDispatch2.headers === "function") {
      if (Array.isArray(headers)) {
        headers = buildHeadersFromArray(headers);
      }
      return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
    }
    if (typeof mockDispatch2.headers === "undefined") {
      return true;
    }
    if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
      return false;
    }
    for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
      const headerValue = getHeaderByName(headers, matchHeaderName);
      if (!matchValue(matchHeaderValue, headerValue)) {
        return false;
      }
    }
    return true;
  };
  var safeUrl = function(path) {
    if (typeof path !== "string") {
      return path;
    }
    const pathSegments = path.split("?");
    if (pathSegments.length !== 2) {
      return path;
    }
    const qp = new URLSearchParams(pathSegments.pop());
    qp.sort();
    return [...pathSegments, qp.toString()].join("?");
  };
  var matchKey = function(mockDispatch2, { path, method, body, headers }) {
    const pathMatch = matchValue(mockDispatch2.path, path);
    const methodMatch = matchValue(mockDispatch2.method, method);
    const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
    const headersMatch = matchHeaders(mockDispatch2, headers);
    return pathMatch && methodMatch && bodyMatch && headersMatch;
  };
  var getResponseData = function(data) {
    if (Buffer.isBuffer(data)) {
      return data;
    } else if (typeof data === "object") {
      return JSON.stringify(data);
    } else {
      return data.toString();
    }
  };
  var getMockDispatch = function(mockDispatches, key) {
    const basePath = key.query ? buildURL(key.path, key.query) : key.path;
    const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
    let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
    }
    matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
    if (matchedMockDispatches.length === 0) {
      throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
    }
    return matchedMockDispatches[0];
  };
  var addMockDispatch = function(mockDispatches, key, data) {
    const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
    const replyData = typeof data === "function" ? { callback: data } : { ...data };
    const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
    mockDispatches.push(newMockDispatch);
    return newMockDispatch;
  };
  var deleteMockDispatch = function(mockDispatches, key) {
    const index = mockDispatches.findIndex((dispatch) => {
      if (!dispatch.consumed) {
        return false;
      }
      return matchKey(dispatch, key);
    });
    if (index !== -1) {
      mockDispatches.splice(index, 1);
    }
  };
  var buildKey = function(opts) {
    const { path, method, body, headers, query } = opts;
    return {
      path,
      method,
      body,
      headers,
      query
    };
  };
  var generateKeyValues = function(data) {
    return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
      ...keyValuePairs,
      Buffer.from(`${key}`),
      Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
    ], []);
  };
  var getStatusText = function(statusCode) {
    return STATUS_CODES[statusCode] || "unknown";
  };
  async function getResponse(body) {
    const buffers = [];
    for await (const data of body) {
      buffers.push(data);
    }
    return Buffer.concat(buffers).toString("utf8");
  }
  var mockDispatch = function(opts, handler) {
    const key = buildKey(opts);
    const mockDispatch2 = getMockDispatch(this[kDispatches], key);
    mockDispatch2.timesInvoked++;
    if (mockDispatch2.data.callback) {
      mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
    }
    const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch2;
    const { timesInvoked, times } = mockDispatch2;
    mockDispatch2.consumed = !persist && timesInvoked >= times;
    mockDispatch2.pending = timesInvoked < times;
    if (error !== null) {
      deleteMockDispatch(this[kDispatches], key);
      handler.onError(error);
      return true;
    }
    if (typeof delay === "number" && delay > 0) {
      setTimeout(() => {
        handleReply(this[kDispatches]);
      }, delay);
    } else {
      handleReply(this[kDispatches]);
    }
    function handleReply(mockDispatches, _data = data) {
      const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
      const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
      if (isPromise(body)) {
        body.then((newData) => handleReply(mockDispatches, newData));
        return;
      }
      const responseData = getResponseData(body);
      const responseHeaders = generateKeyValues(headers);
      const responseTrailers = generateKeyValues(trailers);
      handler.abort = nop;
      handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
      handler.onData(Buffer.from(responseData));
      handler.onComplete(responseTrailers);
      deleteMockDispatch(mockDispatches, key);
    }
    function resume() {
    }
    return true;
  };
  var buildMockDispatch = function() {
    const agent = this[kMockAgent];
    const origin = this[kOrigin];
    const originalDispatch = this[kOriginalDispatch];
    return function dispatch(opts, handler) {
      if (agent.isMockActive) {
        try {
          mockDispatch.call(this, opts, handler);
        } catch (error) {
          if (error instanceof MockNotMatchedError) {
            const netConnect = agent[kGetNetConnect]();
            if (netConnect === false) {
              throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
            }
            if (checkNetConnect(netConnect, origin)) {
              originalDispatch.call(this, opts, handler);
            } else {
              throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
            }
          } else {
            throw error;
          }
        }
      } else {
        originalDispatch.call(this, opts, handler);
      }
    };
  };
  var checkNetConnect = function(netConnect, origin) {
    const url = new URL(origin);
    if (netConnect === true) {
      return true;
    } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
      return true;
    }
    return false;
  };
  var buildMockOptions = function(opts) {
    if (opts) {
      const { agent, ...mockOptions } = opts;
      return mockOptions;
    }
  };
  var { MockNotMatchedError } = require_mock_errors();
  var {
    kDispatches,
    kMockAgent,
    kOriginalDispatch,
    kOrigin,
    kGetNetConnect
  } = require_mock_symbols();
  var { buildURL, nop } = require_util();
  var { STATUS_CODES } = __require("http");
  var {
    types: {
      isPromise
    }
  } = __require("util");
  module.exports = {
    getResponseData,
    getMockDispatch,
    addMockDispatch,
    deleteMockDispatch,
    buildKey,
    generateKeyValues,
    matchValue,
    getResponse,
    getStatusText,
    mockDispatch,
    buildMockDispatch,
    checkNetConnect,
    buildMockOptions,
    getHeaderByName
  };
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS((exports, module) => {
  var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kDispatchKey,
    kDefaultHeaders,
    kDefaultTrailers,
    kContentLength,
    kMockDispatch
  } = require_mock_symbols();
  var { InvalidArgumentError } = require_errors2();
  var { buildURL } = require_util();

  class MockScope {
    constructor(mockDispatch) {
      this[kMockDispatch] = mockDispatch;
    }
    delay(waitInMs) {
      if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
        throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
      }
      this[kMockDispatch].delay = waitInMs;
      return this;
    }
    persist() {
      this[kMockDispatch].persist = true;
      return this;
    }
    times(repeatTimes) {
      if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
        throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
      }
      this[kMockDispatch].times = repeatTimes;
      return this;
    }
  }

  class MockInterceptor {
    constructor(opts, mockDispatches) {
      if (typeof opts !== "object") {
        throw new InvalidArgumentError("opts must be an object");
      }
      if (typeof opts.path === "undefined") {
        throw new InvalidArgumentError("opts.path must be defined");
      }
      if (typeof opts.method === "undefined") {
        opts.method = "GET";
      }
      if (typeof opts.path === "string") {
        if (opts.query) {
          opts.path = buildURL(opts.path, opts.query);
        } else {
          const parsedURL = new URL(opts.path, "data://");
          opts.path = parsedURL.pathname + parsedURL.search;
        }
      }
      if (typeof opts.method === "string") {
        opts.method = opts.method.toUpperCase();
      }
      this[kDispatchKey] = buildKey(opts);
      this[kDispatches] = mockDispatches;
      this[kDefaultHeaders] = {};
      this[kDefaultTrailers] = {};
      this[kContentLength] = false;
    }
    createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
      const responseData = getResponseData(data);
      const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
      const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
      const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
      return { statusCode, data, headers, trailers };
    }
    validateReplyParameters(statusCode, data, responseOptions) {
      if (typeof statusCode === "undefined") {
        throw new InvalidArgumentError("statusCode must be defined");
      }
      if (typeof data === "undefined") {
        throw new InvalidArgumentError("data must be defined");
      }
      if (typeof responseOptions !== "object") {
        throw new InvalidArgumentError("responseOptions must be an object");
      }
    }
    reply(replyData) {
      if (typeof replyData === "function") {
        const wrappedDefaultsCallback = (opts) => {
          const resolvedData = replyData(opts);
          if (typeof resolvedData !== "object") {
            throw new InvalidArgumentError("reply options callback must return an object");
          }
          const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
          this.validateReplyParameters(statusCode2, data2, responseOptions2);
          return {
            ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
          };
        };
        const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
        return new MockScope(newMockDispatch2);
      }
      const [statusCode, data = "", responseOptions = {}] = [...arguments];
      this.validateReplyParameters(statusCode, data, responseOptions);
      const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
      return new MockScope(newMockDispatch);
    }
    replyWithError(error) {
      if (typeof error === "undefined") {
        throw new InvalidArgumentError("error must be defined");
      }
      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
      return new MockScope(newMockDispatch);
    }
    defaultReplyHeaders(headers) {
      if (typeof headers === "undefined") {
        throw new InvalidArgumentError("headers must be defined");
      }
      this[kDefaultHeaders] = headers;
      return this;
    }
    defaultReplyTrailers(trailers) {
      if (typeof trailers === "undefined") {
        throw new InvalidArgumentError("trailers must be defined");
      }
      this[kDefaultTrailers] = trailers;
      return this;
    }
    replyContentLength() {
      this[kContentLength] = true;
      return this;
    }
  }
  exports.MockInterceptor = MockInterceptor;
  exports.MockScope = MockScope;
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS((exports, module) => {
  var { promisify } = __require("util");
  var Client = require_client();
  var { buildMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kMockAgent,
    kClose,
    kOriginalClose,
    kOrigin,
    kOriginalDispatch,
    kConnected
  } = require_mock_symbols();
  var { MockInterceptor } = require_mock_interceptor();
  var Symbols = require_symbols();
  var { InvalidArgumentError } = require_errors2();

  class MockClient extends Client {
    constructor(origin, opts) {
      super(origin, opts);
      if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      this[kMockAgent] = opts.agent;
      this[kOrigin] = origin;
      this[kDispatches] = [];
      this[kConnected] = 1;
      this[kOriginalDispatch] = this.dispatch;
      this[kOriginalClose] = this.close.bind(this);
      this.dispatch = buildMockDispatch.call(this);
      this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
      return this[kConnected];
    }
    intercept(opts) {
      return new MockInterceptor(opts, this[kDispatches]);
    }
    async[kClose]() {
      await promisify(this[kOriginalClose])();
      this[kConnected] = 0;
      this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
  }
  module.exports = MockClient;
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS((exports, module) => {
  var { promisify } = __require("util");
  var Pool = require_pool();
  var { buildMockDispatch } = require_mock_utils();
  var {
    kDispatches,
    kMockAgent,
    kClose,
    kOriginalClose,
    kOrigin,
    kOriginalDispatch,
    kConnected
  } = require_mock_symbols();
  var { MockInterceptor } = require_mock_interceptor();
  var Symbols = require_symbols();
  var { InvalidArgumentError } = require_errors2();

  class MockPool extends Pool {
    constructor(origin, opts) {
      super(origin, opts);
      if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      this[kMockAgent] = opts.agent;
      this[kOrigin] = origin;
      this[kDispatches] = [];
      this[kConnected] = 1;
      this[kOriginalDispatch] = this.dispatch;
      this[kOriginalClose] = this.close.bind(this);
      this.dispatch = buildMockDispatch.call(this);
      this.close = this[kClose];
    }
    get [Symbols.kConnected]() {
      return this[kConnected];
    }
    intercept(opts) {
      return new MockInterceptor(opts, this[kDispatches]);
    }
    async[kClose]() {
      await promisify(this[kOriginalClose])();
      this[kConnected] = 0;
      this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
    }
  }
  module.exports = MockPool;
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS((exports, module) => {
  var singulars = {
    pronoun: "it",
    is: "is",
    was: "was",
    this: "this"
  };
  var plurals = {
    pronoun: "they",
    is: "are",
    was: "were",
    this: "these"
  };
  module.exports = class Pluralizer {
    constructor(singular, plural) {
      this.singular = singular;
      this.plural = plural;
    }
    pluralize(count) {
      const one = count === 1;
      const keys = one ? singulars : plurals;
      const noun = one ? this.singular : this.plural;
      return { ...keys, count, noun };
    }
  };
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS((exports, module) => {
  var { Transform } = __require("stream");
  var { Console } = __require("console");
  module.exports = class PendingInterceptorsFormatter {
    constructor({ disableColors } = {}) {
      this.transform = new Transform({
        transform(chunk, _enc, cb) {
          cb(null, chunk);
        }
      });
      this.logger = new Console({
        stdout: this.transform,
        inspectOptions: {
          colors: !disableColors && !process.env.CI
        }
      });
    }
    format(pendingInterceptors) {
      const withPrettyHeaders = pendingInterceptors.map(({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
        Method: method,
        Origin: origin,
        Path: path,
        "Status code": statusCode,
        Persistent: persist ? "\u2705" : "\u274C",
        Invocations: timesInvoked,
        Remaining: persist ? Infinity : times - timesInvoked
      }));
      this.logger.table(withPrettyHeaders);
      return this.transform.read().toString();
    }
  };
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS((exports, module) => {
  var { kClients } = require_symbols();
  var Agent = require_agent();
  var {
    kAgent,
    kMockAgentSet,
    kMockAgentGet,
    kDispatches,
    kIsMockActive,
    kNetConnect,
    kGetNetConnect,
    kOptions,
    kFactory
  } = require_mock_symbols();
  var MockClient = require_mock_client();
  var MockPool = require_mock_pool();
  var { matchValue, buildMockOptions } = require_mock_utils();
  var { InvalidArgumentError, UndiciError } = require_errors2();
  var Dispatcher = require_dispatcher();
  var Pluralizer = require_pluralizer();
  var PendingInterceptorsFormatter = require_pending_interceptors_formatter();

  class FakeWeakRef {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value;
    }
  }

  class MockAgent extends Dispatcher {
    constructor(opts) {
      super(opts);
      this[kNetConnect] = true;
      this[kIsMockActive] = true;
      if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument opts.agent must implement Agent");
      }
      const agent = opts && opts.agent ? opts.agent : new Agent(opts);
      this[kAgent] = agent;
      this[kClients] = agent[kClients];
      this[kOptions] = buildMockOptions(opts);
    }
    get(origin) {
      let dispatcher = this[kMockAgentGet](origin);
      if (!dispatcher) {
        dispatcher = this[kFactory](origin);
        this[kMockAgentSet](origin, dispatcher);
      }
      return dispatcher;
    }
    dispatch(opts, handler) {
      this.get(opts.origin);
      return this[kAgent].dispatch(opts, handler);
    }
    async close() {
      await this[kAgent].close();
      this[kClients].clear();
    }
    deactivate() {
      this[kIsMockActive] = false;
    }
    activate() {
      this[kIsMockActive] = true;
    }
    enableNetConnect(matcher) {
      if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
        if (Array.isArray(this[kNetConnect])) {
          this[kNetConnect].push(matcher);
        } else {
          this[kNetConnect] = [matcher];
        }
      } else if (typeof matcher === "undefined") {
        this[kNetConnect] = true;
      } else {
        throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
      }
    }
    disableNetConnect() {
      this[kNetConnect] = false;
    }
    get isMockActive() {
      return this[kIsMockActive];
    }
    [kMockAgentSet](origin, dispatcher) {
      this[kClients].set(origin, new FakeWeakRef(dispatcher));
    }
    [kFactory](origin) {
      const mockOptions = Object.assign({ agent: this }, this[kOptions]);
      return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
    }
    [kMockAgentGet](origin) {
      const ref = this[kClients].get(origin);
      if (ref) {
        return ref.deref();
      }
      if (typeof origin !== "string") {
        const dispatcher = this[kFactory]("http://localhost:9999");
        this[kMockAgentSet](origin, dispatcher);
        return dispatcher;
      }
      for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
        const nonExplicitDispatcher = nonExplicitRef.deref();
        if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
          const dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
          dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
          return dispatcher;
        }
      }
    }
    [kGetNetConnect]() {
      return this[kNetConnect];
    }
    pendingInterceptors() {
      const mockAgentClients = this[kClients];
      return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
    }
    assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter } = {}) {
      const pending = this.pendingInterceptors();
      if (pending.length === 0) {
        return;
      }
      const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
      throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
    }
  }
  module.exports = MockAgent;
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS((exports, module) => {
  var defaultProtocolPort = function(protocol) {
    return protocol === "https:" ? 443 : 80;
  };
  var buildProxyOptions = function(opts) {
    if (typeof opts === "string") {
      opts = { uri: opts };
    }
    if (!opts || !opts.uri) {
      throw new InvalidArgumentError("Proxy opts.uri is mandatory");
    }
    return {
      uri: opts.uri,
      protocol: opts.protocol || "https"
    };
  };
  var defaultFactory = function(origin, opts) {
    return new Pool(origin, opts);
  };
  var buildHeaders = function(headers) {
    if (Array.isArray(headers)) {
      const headersPair = {};
      for (let i = 0;i < headers.length; i += 2) {
        headersPair[headers[i]] = headers[i + 1];
      }
      return headersPair;
    }
    return headers;
  };
  var throwIfProxyAuthIsSent = function(headers) {
    const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
    if (existProxyAuth) {
      throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
    }
  };
  var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
  var { URL: URL2 } = __require("url");
  var Agent = require_agent();
  var Pool = require_pool();
  var DispatcherBase = require_dispatcher_base();
  var { InvalidArgumentError, RequestAbortedError } = require_errors2();
  var buildConnector = require_connect();
  var kAgent = Symbol("proxy agent");
  var kClient = Symbol("proxy client");
  var kProxyHeaders = Symbol("proxy headers");
  var kRequestTls = Symbol("request tls settings");
  var kProxyTls = Symbol("proxy tls settings");
  var kConnectEndpoint = Symbol("connect endpoint function");

  class ProxyAgent extends DispatcherBase {
    constructor(opts) {
      super(opts);
      this[kProxy] = buildProxyOptions(opts);
      this[kAgent] = new Agent(opts);
      this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      const { clientFactory = defaultFactory } = opts;
      if (typeof clientFactory !== "function") {
        throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
      }
      this[kRequestTls] = opts.requestTls;
      this[kProxyTls] = opts.proxyTls;
      this[kProxyHeaders] = opts.headers || {};
      if (opts.auth && opts.token) {
        throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
      } else if (opts.auth) {
        this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
      } else if (opts.token) {
        this[kProxyHeaders]["proxy-authorization"] = opts.token;
      }
      const resolvedUrl = new URL2(opts.uri);
      const { origin, port, host } = resolvedUrl;
      const connect = buildConnector({ ...opts.proxyTls });
      this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
      this[kClient] = clientFactory(resolvedUrl, { connect });
      this[kAgent] = new Agent({
        ...opts,
        connect: async (opts2, callback) => {
          let requestedHost = opts2.host;
          if (!opts2.port) {
            requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
          }
          try {
            const { socket, statusCode } = await this[kClient].connect({
              origin,
              port,
              path: requestedHost,
              signal: opts2.signal,
              headers: {
                ...this[kProxyHeaders],
                host
              }
            });
            if (statusCode !== 200) {
              socket.on("error", () => {
              }).destroy();
              callback(new RequestAbortedError("Proxy response !== 200 when HTTP Tunneling"));
            }
            if (opts2.protocol !== "https:") {
              callback(null, socket);
              return;
            }
            let servername;
            if (this[kRequestTls]) {
              servername = this[kRequestTls].servername;
            } else {
              servername = opts2.servername;
            }
            this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
          } catch (err) {
            callback(err);
          }
        }
      });
    }
    dispatch(opts, handler) {
      const { host } = new URL2(opts.origin);
      const headers = buildHeaders(opts.headers);
      throwIfProxyAuthIsSent(headers);
      return this[kAgent].dispatch({
        ...opts,
        headers: {
          ...headers,
          host
        }
      }, handler);
    }
    async[kClose]() {
      await this[kAgent].close();
      await this[kClient].close();
    }
    async[kDestroy]() {
      await this[kAgent].destroy();
      await this[kClient].destroy();
    }
  }
  module.exports = ProxyAgent;
});

// node_modules/undici/lib/global.js
var require_global3 = __commonJS((exports, module) => {
  var setGlobalDispatcher = function(agent) {
    if (!agent || typeof agent.dispatch !== "function") {
      throw new InvalidArgumentError("Argument agent must implement Agent");
    }
    Object.defineProperty(globalThis, globalDispatcher, {
      value: agent,
      writable: true,
      enumerable: false,
      configurable: false
    });
  };
  var getGlobalDispatcher = function() {
    return globalThis[globalDispatcher];
  };
  var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
  var { InvalidArgumentError } = require_errors2();
  var Agent = require_agent();
  if (getGlobalDispatcher() === undefined) {
    setGlobalDispatcher(new Agent);
  }
  module.exports = {
    setGlobalDispatcher,
    getGlobalDispatcher
  };
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS((exports, module) => {
  module.exports = class DecoratorHandler {
    constructor(handler) {
      this.handler = handler;
    }
    onConnect(...args) {
      return this.handler.onConnect(...args);
    }
    onError(...args) {
      return this.handler.onError(...args);
    }
    onUpgrade(...args) {
      return this.handler.onUpgrade(...args);
    }
    onHeaders(...args) {
      return this.handler.onHeaders(...args);
    }
    onData(...args) {
      return this.handler.onData(...args);
    }
    onComplete(...args) {
      return this.handler.onComplete(...args);
    }
    onBodySent(...args) {
      return this.handler.onBodySent(...args);
    }
  };
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS((exports, module) => {
  var headerValueNormalize = function(potentialValue) {
    let i = potentialValue.length;
    while (/[\r\n\t ]/.test(potentialValue.charAt(--i)))
      ;
    return potentialValue.slice(0, i + 1).replace(/^[\r\n\t ]+/, "");
  };
  var fill = function(headers, object) {
    if (Array.isArray(object)) {
      for (const header of object) {
        if (header.length !== 2) {
          throw webidl.errors.exception({
            header: "Headers constructor",
            message: `expected name/value pair to be length 2, found ${header.length}.`
          });
        }
        headers.append(header[0], header[1]);
      }
    } else if (typeof object === "object" && object !== null) {
      for (const [key, value] of Object.entries(object)) {
        headers.append(key, value);
      }
    } else {
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    }
  };
  var { kHeadersList } = require_symbols();
  var { kGuard } = require_symbols2();
  var { kEnumerableProperty } = require_util();
  var {
    makeIterator,
    isValidHeaderName,
    isValidHeaderValue
  } = require_util2();
  var { webidl } = require_webidl();
  var assert = __require("assert");
  var kHeadersMap = Symbol("headers map");
  var kHeadersSortedMap = Symbol("headers map sorted");

  class HeadersList {
    cookies = null;
    constructor(init) {
      if (init instanceof HeadersList) {
        this[kHeadersMap] = new Map(init[kHeadersMap]);
        this[kHeadersSortedMap] = init[kHeadersSortedMap];
        this.cookies = init.cookies;
      } else {
        this[kHeadersMap] = new Map(init);
        this[kHeadersSortedMap] = null;
      }
    }
    contains(name) {
      name = name.toLowerCase();
      return this[kHeadersMap].has(name);
    }
    clear() {
      this[kHeadersMap].clear();
      this[kHeadersSortedMap] = null;
      this.cookies = null;
    }
    append(name, value) {
      this[kHeadersSortedMap] = null;
      const lowercaseName = name.toLowerCase();
      const exists = this[kHeadersMap].get(lowercaseName);
      if (exists) {
        const delimiter = lowercaseName === "cookie" ? "; " : ", ";
        this[kHeadersMap].set(lowercaseName, {
          name: exists.name,
          value: `${exists.value}${delimiter}${value}`
        });
      } else {
        this[kHeadersMap].set(lowercaseName, { name, value });
      }
      if (lowercaseName === "set-cookie") {
        this.cookies ??= [];
        this.cookies.push(value);
      }
    }
    set(name, value) {
      this[kHeadersSortedMap] = null;
      const lowercaseName = name.toLowerCase();
      if (lowercaseName === "set-cookie") {
        this.cookies = [value];
      }
      return this[kHeadersMap].set(lowercaseName, { name, value });
    }
    delete(name) {
      this[kHeadersSortedMap] = null;
      name = name.toLowerCase();
      if (name === "set-cookie") {
        this.cookies = null;
      }
      return this[kHeadersMap].delete(name);
    }
    get(name) {
      if (!this.contains(name)) {
        return null;
      }
      return this[kHeadersMap].get(name.toLowerCase())?.value ?? null;
    }
    *[Symbol.iterator]() {
      for (const [name, { value }] of this[kHeadersMap]) {
        yield [name, value];
      }
    }
    get entries() {
      const headers = {};
      if (this[kHeadersMap].size) {
        for (const { name, value } of this[kHeadersMap].values()) {
          headers[name] = value;
        }
      }
      return headers;
    }
  }

  class Headers2 {
    constructor(init = undefined) {
      this[kHeadersList] = new HeadersList;
      this[kGuard] = "none";
      if (init !== undefined) {
        init = webidl.converters.HeadersInit(init);
        fill(this, init);
      }
    }
    append(name, value) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
      name = webidl.converters.ByteString(name);
      value = webidl.converters.ByteString(value);
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value,
          type: "header value"
        });
      }
      if (this[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (this[kGuard] === "request-no-cors") {
      }
      return this[kHeadersList].append(name, value);
    }
    delete(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
      name = webidl.converters.ByteString(name);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.delete",
          value: name,
          type: "header name"
        });
      }
      if (this[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (this[kGuard] === "request-no-cors") {
      }
      if (!this[kHeadersList].contains(name)) {
        return;
      }
      return this[kHeadersList].delete(name);
    }
    get(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
      name = webidl.converters.ByteString(name);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.get",
          value: name,
          type: "header name"
        });
      }
      return this[kHeadersList].get(name);
    }
    has(name) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
      name = webidl.converters.ByteString(name);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.has",
          value: name,
          type: "header name"
        });
      }
      return this[kHeadersList].contains(name);
    }
    set(name, value) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
      name = webidl.converters.ByteString(name);
      value = webidl.converters.ByteString(value);
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.set",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.set",
          value,
          type: "header value"
        });
      }
      if (this[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (this[kGuard] === "request-no-cors") {
      }
      return this[kHeadersList].set(name, value);
    }
    getSetCookie() {
      webidl.brandCheck(this, Headers2);
      const list = this[kHeadersList].cookies;
      if (list) {
        return [...list];
      }
      return [];
    }
    get [kHeadersSortedMap]() {
      if (this[kHeadersList][kHeadersSortedMap]) {
        return this[kHeadersList][kHeadersSortedMap];
      }
      const headers = [];
      const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
      const cookies = this[kHeadersList].cookies;
      for (const [name, value] of names) {
        if (name === "set-cookie") {
          for (const value2 of cookies) {
            headers.push([name, value2]);
          }
        } else {
          assert(value !== null);
          headers.push([name, value]);
        }
      }
      this[kHeadersList][kHeadersSortedMap] = headers;
      return headers;
    }
    keys() {
      webidl.brandCheck(this, Headers2);
      return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key");
    }
    values() {
      webidl.brandCheck(this, Headers2);
      return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "value");
    }
    entries() {
      webidl.brandCheck(this, Headers2);
      return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key+value");
    }
    forEach(callbackFn, thisArg = globalThis) {
      webidl.brandCheck(this, Headers2);
      webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
      if (typeof callbackFn !== "function") {
        throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
      }
      for (const [key, value] of this) {
        callbackFn.apply(thisArg, [value, key, this]);
      }
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      webidl.brandCheck(this, Headers2);
      return this[kHeadersList];
    }
  }
  Headers2.prototype[Symbol.iterator] = Headers2.prototype.entries;
  Object.defineProperties(Headers2.prototype, {
    append: kEnumerableProperty,
    delete: kEnumerableProperty,
    get: kEnumerableProperty,
    has: kEnumerableProperty,
    set: kEnumerableProperty,
    getSetCookie: kEnumerableProperty,
    keys: kEnumerableProperty,
    values: kEnumerableProperty,
    entries: kEnumerableProperty,
    forEach: kEnumerableProperty,
    [Symbol.iterator]: { enumerable: false },
    [Symbol.toStringTag]: {
      value: "Headers",
      configurable: true
    }
  });
  webidl.converters.HeadersInit = function(V) {
    if (webidl.util.Type(V) === "Object") {
      if (V[Symbol.iterator]) {
        return webidl.converters["sequence<sequence<ByteString>>"](V);
      }
      return webidl.converters["record<ByteString, ByteString>"](V);
    }
    throw webidl.errors.conversionFailed({
      prefix: "Headers constructor",
      argument: "Argument 1",
      types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
    });
  };
  module.exports = {
    fill,
    Headers: Headers2,
    HeadersList
  };
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS((exports, module) => {
  var cloneResponse = function(response) {
    if (response.internalResponse) {
      return filterResponse(cloneResponse(response.internalResponse), response.type);
    }
    const newResponse = makeResponse({ ...response, body: null });
    if (response.body != null) {
      newResponse.body = cloneBody(response.body);
    }
    return newResponse;
  };
  var makeResponse = function(init) {
    return {
      aborted: false,
      rangeRequested: false,
      timingAllowPassed: false,
      requestIncludesCredentials: false,
      type: "default",
      status: 200,
      timingInfo: null,
      cacheState: "",
      statusText: "",
      ...init,
      headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList,
      urlList: init.urlList ? [...init.urlList] : []
    };
  };
  var makeNetworkError = function(reason) {
    const isError = isErrorLike(reason);
    return makeResponse({
      type: "error",
      status: 0,
      error: isError ? reason : new Error(reason ? String(reason) : reason),
      aborted: reason && reason.name === "AbortError"
    });
  };
  var makeFilteredResponse = function(response, state) {
    state = {
      internalResponse: response,
      ...state
    };
    return new Proxy(response, {
      get(target, p) {
        return p in state ? state[p] : target[p];
      },
      set(target, p, value) {
        assert(!(p in state));
        target[p] = value;
        return true;
      }
    });
  };
  var filterResponse = function(response, type) {
    if (type === "basic") {
      return makeFilteredResponse(response, {
        type: "basic",
        headersList: response.headersList
      });
    } else if (type === "cors") {
      return makeFilteredResponse(response, {
        type: "cors",
        headersList: response.headersList
      });
    } else if (type === "opaque") {
      return makeFilteredResponse(response, {
        type: "opaque",
        urlList: Object.freeze([]),
        status: 0,
        statusText: "",
        body: null
      });
    } else if (type === "opaqueredirect") {
      return makeFilteredResponse(response, {
        type: "opaqueredirect",
        status: 0,
        statusText: "",
        headersList: [],
        body: null
      });
    } else {
      assert(false);
    }
  };
  var makeAppropriateNetworkError = function(fetchParams, err = null) {
    assert(isCancelled(fetchParams));
    return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
  };
  var initializeResponse = function(response, init, body) {
    if (init.status !== null && (init.status < 200 || init.status > 599)) {
      throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
    }
    if (("statusText" in init) && init.statusText != null) {
      if (!isValidReasonPhrase(String(init.statusText))) {
        throw new TypeError("Invalid statusText");
      }
    }
    if (("status" in init) && init.status != null) {
      response[kState].status = init.status;
    }
    if (("statusText" in init) && init.statusText != null) {
      response[kState].statusText = init.statusText;
    }
    if (("headers" in init) && init.headers != null) {
      fill(response[kHeaders], init.headers);
    }
    if (body) {
      if (nullBodyStatus.includes(response.status)) {
        throw webidl.errors.exception({
          header: "Response constructor",
          message: "Invalid response status code " + response.status
        });
      }
      response[kState].body = body.body;
      if (body.type != null && !response[kState].headersList.contains("Content-Type")) {
        response[kState].headersList.append("content-type", body.type);
      }
    }
  };
  var { Headers: Headers2, HeadersList, fill } = require_headers();
  var { extractBody, cloneBody, mixinBody } = require_body();
  var util = require_util();
  var { kEnumerableProperty } = util;
  var {
    isValidReasonPhrase,
    isCancelled,
    isAborted,
    isBlobLike,
    serializeJavascriptValueToJSONString,
    isErrorLike,
    isomorphicEncode
  } = require_util2();
  var {
    redirectStatus,
    nullBodyStatus,
    DOMException: DOMException2
  } = require_constants();
  var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
  var { webidl } = require_webidl();
  var { FormData: FormData2 } = require_formdata();
  var { getGlobalOrigin } = require_global2();
  var { URLSerializer } = require_dataURL();
  var { kHeadersList } = require_symbols();
  var assert = __require("assert");
  var { types } = __require("util");
  var ReadableStream2 = globalThis.ReadableStream || __require("stream/web").ReadableStream;

  class Response2 {
    static error() {
      const relevantRealm = { settingsObject: {} };
      const responseObject = new Response2;
      responseObject[kState] = makeNetworkError();
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
      responseObject[kHeaders][kGuard] = "immutable";
      responseObject[kHeaders][kRealm] = relevantRealm;
      return responseObject;
    }
    static json(data, init = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
      if (init !== null) {
        init = webidl.converters.ResponseInit(init);
      }
      const bytes = new TextEncoder("utf-8").encode(serializeJavascriptValueToJSONString(data));
      const body = extractBody(bytes);
      const relevantRealm = { settingsObject: {} };
      const responseObject = new Response2;
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kGuard] = "response";
      responseObject[kHeaders][kRealm] = relevantRealm;
      initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
      return responseObject;
    }
    static redirect(url, status = 302) {
      const relevantRealm = { settingsObject: {} };
      webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
      url = webidl.converters.USVString(url);
      status = webidl.converters["unsigned short"](status);
      let parsedURL;
      try {
        parsedURL = new URL(url, getGlobalOrigin());
      } catch (err) {
        throw Object.assign(new TypeError("Failed to parse URL from " + url), {
          cause: err
        });
      }
      if (!redirectStatus.includes(status)) {
        throw new RangeError("Invalid status code " + status);
      }
      const responseObject = new Response2;
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kGuard] = "immutable";
      responseObject[kHeaders][kRealm] = relevantRealm;
      responseObject[kState].status = status;
      const value = isomorphicEncode(URLSerializer(parsedURL));
      responseObject[kState].headersList.append("location", value);
      return responseObject;
    }
    constructor(body = null, init = {}) {
      if (body !== null) {
        body = webidl.converters.BodyInit(body);
      }
      init = webidl.converters.ResponseInit(init);
      this[kRealm] = { settingsObject: {} };
      this[kState] = makeResponse({});
      this[kHeaders] = new Headers2;
      this[kHeaders][kGuard] = "response";
      this[kHeaders][kHeadersList] = this[kState].headersList;
      this[kHeaders][kRealm] = this[kRealm];
      let bodyWithType = null;
      if (body != null) {
        const [extractedBody, type] = extractBody(body);
        bodyWithType = { body: extractedBody, type };
      }
      initializeResponse(this, init, bodyWithType);
    }
    get type() {
      webidl.brandCheck(this, Response2);
      return this[kState].type;
    }
    get url() {
      webidl.brandCheck(this, Response2);
      const urlList = this[kState].urlList;
      const url = urlList[urlList.length - 1] ?? null;
      if (url === null) {
        return "";
      }
      return URLSerializer(url, true);
    }
    get redirected() {
      webidl.brandCheck(this, Response2);
      return this[kState].urlList.length > 1;
    }
    get status() {
      webidl.brandCheck(this, Response2);
      return this[kState].status;
    }
    get ok() {
      webidl.brandCheck(this, Response2);
      return this[kState].status >= 200 && this[kState].status <= 299;
    }
    get statusText() {
      webidl.brandCheck(this, Response2);
      return this[kState].statusText;
    }
    get headers() {
      webidl.brandCheck(this, Response2);
      return this[kHeaders];
    }
    get body() {
      webidl.brandCheck(this, Response2);
      return this[kState].body ? this[kState].body.stream : null;
    }
    get bodyUsed() {
      webidl.brandCheck(this, Response2);
      return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
    }
    clone() {
      webidl.brandCheck(this, Response2);
      if (this.bodyUsed || this.body && this.body.locked) {
        throw webidl.errors.exception({
          header: "Response.clone",
          message: "Body has already been consumed."
        });
      }
      const clonedResponse = cloneResponse(this[kState]);
      const clonedResponseObject = new Response2;
      clonedResponseObject[kState] = clonedResponse;
      clonedResponseObject[kRealm] = this[kRealm];
      clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
      clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
      clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
      return clonedResponseObject;
    }
  }
  mixinBody(Response2);
  Object.defineProperties(Response2.prototype, {
    type: kEnumerableProperty,
    url: kEnumerableProperty,
    status: kEnumerableProperty,
    ok: kEnumerableProperty,
    redirected: kEnumerableProperty,
    statusText: kEnumerableProperty,
    headers: kEnumerableProperty,
    clone: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Response",
      configurable: true
    }
  });
  Object.defineProperties(Response2, {
    json: kEnumerableProperty,
    redirect: kEnumerableProperty,
    error: kEnumerableProperty
  });
  webidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream2);
  webidl.converters.FormData = webidl.interfaceConverter(FormData2);
  webidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);
  webidl.converters.XMLHttpRequestBodyInit = function(V) {
    if (typeof V === "string") {
      return webidl.converters.USVString(V);
    }
    if (isBlobLike(V)) {
      return webidl.converters.Blob(V, { strict: false });
    }
    if (types.isAnyArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
      return webidl.converters.BufferSource(V);
    }
    if (util.isFormDataLike(V)) {
      return webidl.converters.FormData(V, { strict: false });
    }
    if (V instanceof URLSearchParams) {
      return webidl.converters.URLSearchParams(V);
    }
    return webidl.converters.DOMString(V);
  };
  webidl.converters.BodyInit = function(V) {
    if (V instanceof ReadableStream2) {
      return webidl.converters.ReadableStream(V);
    }
    if (V?.[Symbol.asyncIterator]) {
      return V;
    }
    return webidl.converters.XMLHttpRequestBodyInit(V);
  };
  webidl.converters.ResponseInit = webidl.dictionaryConverter([
    {
      key: "status",
      converter: webidl.converters["unsigned short"],
      defaultValue: 200
    },
    {
      key: "statusText",
      converter: webidl.converters.ByteString,
      defaultValue: ""
    },
    {
      key: "headers",
      converter: webidl.converters.HeadersInit
    }
  ]);
  module.exports = {
    makeNetworkError,
    makeResponse,
    makeAppropriateNetworkError,
    filterResponse,
    Response: Response2,
    cloneResponse
  };
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS((exports, module) => {
  var makeRequest = function(init) {
    const request = {
      method: "GET",
      localURLsOnly: false,
      unsafeRequest: false,
      body: null,
      client: null,
      reservedClient: null,
      replacesClientId: "",
      window: "client",
      keepalive: false,
      serviceWorkers: "all",
      initiator: "",
      destination: "",
      priority: null,
      origin: "client",
      policyContainer: "client",
      referrer: "client",
      referrerPolicy: "",
      mode: "no-cors",
      useCORSPreflightFlag: false,
      credentials: "same-origin",
      useCredentials: false,
      cache: "default",
      redirect: "follow",
      integrity: "",
      cryptoGraphicsNonceMetadata: "",
      parserMetadata: "",
      reloadNavigation: false,
      historyNavigation: false,
      userActivation: false,
      taintedOrigin: false,
      redirectCount: 0,
      responseTainting: "basic",
      preventNoCacheCacheControlHeaderModification: false,
      done: false,
      timingAllowFailed: false,
      ...init,
      headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList
    };
    request.url = request.urlList[0];
    return request;
  };
  var cloneRequest = function(request) {
    const newRequest = makeRequest({ ...request, body: null });
    if (request.body != null) {
      newRequest.body = cloneBody(request.body);
    }
    return newRequest;
  };
  var { extractBody, mixinBody, cloneBody } = require_body();
  var { Headers: Headers2, fill: fillHeaders, HeadersList } = require_headers();
  var { FinalizationRegistry: FinalizationRegistry2 } = require_dispatcher_weakref()();
  var util = require_util();
  var {
    isValidHTTPToken,
    sameOrigin,
    normalizeMethod,
    makePolicyContainer
  } = require_util2();
  var {
    forbiddenMethods,
    corsSafeListedMethods,
    referrerPolicy,
    requestRedirect,
    requestMode,
    requestCredentials,
    requestCache,
    requestDuplex
  } = require_constants();
  var { kEnumerableProperty } = util;
  var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
  var { webidl } = require_webidl();
  var { getGlobalOrigin } = require_global2();
  var { URLSerializer } = require_dataURL();
  var { kHeadersList } = require_symbols();
  var assert = __require("assert");
  var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __require("events");
  var TransformStream = globalThis.TransformStream;
  var kInit = Symbol("init");
  var kAbortController = Symbol("abortController");
  var requestFinalizer = new FinalizationRegistry2(({ signal, abort }) => {
    signal.removeEventListener("abort", abort);
  });

  class Request {
    constructor(input, init = {}) {
      if (input === kInit) {
        return;
      }
      webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
      input = webidl.converters.RequestInfo(input);
      init = webidl.converters.RequestInit(init);
      this[kRealm] = {
        settingsObject: {
          baseUrl: getGlobalOrigin(),
          get origin() {
            return this.baseUrl?.origin;
          },
          policyContainer: makePolicyContainer()
        }
      };
      let request = null;
      let fallbackMode = null;
      const baseUrl = this[kRealm].settingsObject.baseUrl;
      let signal = null;
      if (typeof input === "string") {
        let parsedURL;
        try {
          parsedURL = new URL(input, baseUrl);
        } catch (err) {
          throw new TypeError("Failed to parse URL from " + input, { cause: err });
        }
        if (parsedURL.username || parsedURL.password) {
          throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
        }
        request = makeRequest({ urlList: [parsedURL] });
        fallbackMode = "cors";
      } else {
        assert(input instanceof Request);
        request = input[kState];
        signal = input[kSignal];
      }
      const origin = this[kRealm].settingsObject.origin;
      let window2 = "client";
      if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
        window2 = request.window;
      }
      if (init.window != null) {
        throw new TypeError(`'window' option '${window2}' must be null`);
      }
      if ("window" in init) {
        window2 = "no-window";
      }
      request = makeRequest({
        method: request.method,
        headersList: request.headersList,
        unsafeRequest: request.unsafeRequest,
        client: this[kRealm].settingsObject,
        window: window2,
        priority: request.priority,
        origin: request.origin,
        referrer: request.referrer,
        referrerPolicy: request.referrerPolicy,
        mode: request.mode,
        credentials: request.credentials,
        cache: request.cache,
        redirect: request.redirect,
        integrity: request.integrity,
        keepalive: request.keepalive,
        reloadNavigation: request.reloadNavigation,
        historyNavigation: request.historyNavigation,
        urlList: [...request.urlList]
      });
      if (Object.keys(init).length > 0) {
        if (request.mode === "navigate") {
          request.mode = "same-origin";
        }
        request.reloadNavigation = false;
        request.historyNavigation = false;
        request.origin = "client";
        request.referrer = "client";
        request.referrerPolicy = "";
        request.url = request.urlList[request.urlList.length - 1];
        request.urlList = [request.url];
      }
      if (init.referrer !== undefined) {
        const referrer = init.referrer;
        if (referrer === "") {
          request.referrer = "no-referrer";
        } else {
          let parsedReferrer;
          try {
            parsedReferrer = new URL(referrer, baseUrl);
          } catch (err) {
            throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
          }
          if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
            request.referrer = "client";
          } else {
            request.referrer = parsedReferrer;
          }
        }
      }
      if (init.referrerPolicy !== undefined) {
        request.referrerPolicy = init.referrerPolicy;
      }
      let mode;
      if (init.mode !== undefined) {
        mode = init.mode;
      } else {
        mode = fallbackMode;
      }
      if (mode === "navigate") {
        throw webidl.errors.exception({
          header: "Request constructor",
          message: "invalid request mode navigate."
        });
      }
      if (mode != null) {
        request.mode = mode;
      }
      if (init.credentials !== undefined) {
        request.credentials = init.credentials;
      }
      if (init.cache !== undefined) {
        request.cache = init.cache;
      }
      if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
        throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
      }
      if (init.redirect !== undefined) {
        request.redirect = init.redirect;
      }
      if (init.integrity !== undefined && init.integrity != null) {
        request.integrity = String(init.integrity);
      }
      if (init.keepalive !== undefined) {
        request.keepalive = Boolean(init.keepalive);
      }
      if (init.method !== undefined) {
        let method = init.method;
        if (!isValidHTTPToken(init.method)) {
          throw TypeError(`'${init.method}' is not a valid HTTP method.`);
        }
        if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {
          throw TypeError(`'${init.method}' HTTP method is unsupported.`);
        }
        method = normalizeMethod(init.method);
        request.method = method;
      }
      if (init.signal !== undefined) {
        signal = init.signal;
      }
      this[kState] = request;
      const ac = new AbortController;
      this[kSignal] = ac.signal;
      this[kSignal][kRealm] = this[kRealm];
      if (signal != null) {
        if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
          throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
        }
        if (signal.aborted) {
          ac.abort(signal.reason);
        } else {
          this[kAbortController] = ac;
          const acRef = new WeakRef(ac);
          const abort = function() {
            const ac2 = acRef.deref();
            if (ac2 !== undefined) {
              ac2.abort(this.reason);
            }
          };
          try {
            if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
              setMaxListeners(100, signal);
            } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
              setMaxListeners(100, signal);
            }
          } catch {
          }
          util.addAbortListener(signal, abort);
          requestFinalizer.register(ac, { signal, abort });
        }
      }
      this[kHeaders] = new Headers2;
      this[kHeaders][kHeadersList] = request.headersList;
      this[kHeaders][kGuard] = "request";
      this[kHeaders][kRealm] = this[kRealm];
      if (mode === "no-cors") {
        if (!corsSafeListedMethods.includes(request.method)) {
          throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);
        }
        this[kHeaders][kGuard] = "request-no-cors";
      }
      if (Object.keys(init).length !== 0) {
        let headers = new Headers2(this[kHeaders]);
        if (init.headers !== undefined) {
          headers = init.headers;
        }
        this[kHeaders][kHeadersList].clear();
        if (headers.constructor.name === "Headers") {
          for (const [key, val] of headers) {
            this[kHeaders].append(key, val);
          }
        } else {
          fillHeaders(this[kHeaders], headers);
        }
      }
      const inputBody = input instanceof Request ? input[kState].body : null;
      if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body.");
      }
      let initBody = null;
      if (init.body != null) {
        const [extractedBody, contentType] = extractBody(init.body, request.keepalive);
        initBody = extractedBody;
        if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
          this[kHeaders].append("content-type", contentType);
        }
      }
      const inputOrInitBody = initBody ?? inputBody;
      if (inputOrInitBody != null && inputOrInitBody.source == null) {
        if (initBody != null && init.duplex == null) {
          throw new TypeError("RequestInit: duplex option is required when sending a body.");
        }
        if (request.mode !== "same-origin" && request.mode !== "cors") {
          throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
        }
        request.useCORSPreflightFlag = true;
      }
      let finalBody = inputOrInitBody;
      if (initBody == null && inputBody != null) {
        if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
          throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
        }
        if (!TransformStream) {
          TransformStream = __require("stream/web").TransformStream;
        }
        const identityTransform = new TransformStream;
        inputBody.stream.pipeThrough(identityTransform);
        finalBody = {
          source: inputBody.source,
          length: inputBody.length,
          stream: identityTransform.readable
        };
      }
      this[kState].body = finalBody;
    }
    get method() {
      webidl.brandCheck(this, Request);
      return this[kState].method;
    }
    get url() {
      webidl.brandCheck(this, Request);
      return URLSerializer(this[kState].url);
    }
    get headers() {
      webidl.brandCheck(this, Request);
      return this[kHeaders];
    }
    get destination() {
      webidl.brandCheck(this, Request);
      return this[kState].destination;
    }
    get referrer() {
      webidl.brandCheck(this, Request);
      if (this[kState].referrer === "no-referrer") {
        return "";
      }
      if (this[kState].referrer === "client") {
        return "about:client";
      }
      return this[kState].referrer.toString();
    }
    get referrerPolicy() {
      webidl.brandCheck(this, Request);
      return this[kState].referrerPolicy;
    }
    get mode() {
      webidl.brandCheck(this, Request);
      return this[kState].mode;
    }
    get credentials() {
      return this[kState].credentials;
    }
    get cache() {
      webidl.brandCheck(this, Request);
      return this[kState].cache;
    }
    get redirect() {
      webidl.brandCheck(this, Request);
      return this[kState].redirect;
    }
    get integrity() {
      webidl.brandCheck(this, Request);
      return this[kState].integrity;
    }
    get keepalive() {
      webidl.brandCheck(this, Request);
      return this[kState].keepalive;
    }
    get isReloadNavigation() {
      webidl.brandCheck(this, Request);
      return this[kState].reloadNavigation;
    }
    get isHistoryNavigation() {
      webidl.brandCheck(this, Request);
      return this[kState].historyNavigation;
    }
    get signal() {
      webidl.brandCheck(this, Request);
      return this[kSignal];
    }
    get body() {
      webidl.brandCheck(this, Request);
      return this[kState].body ? this[kState].body.stream : null;
    }
    get bodyUsed() {
      webidl.brandCheck(this, Request);
      return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
    }
    get duplex() {
      webidl.brandCheck(this, Request);
      return "half";
    }
    clone() {
      webidl.brandCheck(this, Request);
      if (this.bodyUsed || this.body?.locked) {
        throw new TypeError("unusable");
      }
      const clonedRequest = cloneRequest(this[kState]);
      const clonedRequestObject = new Request(kInit);
      clonedRequestObject[kState] = clonedRequest;
      clonedRequestObject[kRealm] = this[kRealm];
      clonedRequestObject[kHeaders] = new Headers2;
      clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
      clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
      clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
      const ac = new AbortController;
      if (this.signal.aborted) {
        ac.abort(this.signal.reason);
      } else {
        util.addAbortListener(this.signal, () => {
          ac.abort(this.signal.reason);
        });
      }
      clonedRequestObject[kSignal] = ac.signal;
      return clonedRequestObject;
    }
  }
  mixinBody(Request);
  Object.defineProperties(Request.prototype, {
    method: kEnumerableProperty,
    url: kEnumerableProperty,
    headers: kEnumerableProperty,
    redirect: kEnumerableProperty,
    clone: kEnumerableProperty,
    signal: kEnumerableProperty,
    duplex: kEnumerableProperty,
    destination: kEnumerableProperty,
    body: kEnumerableProperty,
    bodyUsed: kEnumerableProperty,
    isHistoryNavigation: kEnumerableProperty,
    isReloadNavigation: kEnumerableProperty,
    keepalive: kEnumerableProperty,
    integrity: kEnumerableProperty,
    cache: kEnumerableProperty,
    credentials: kEnumerableProperty,
    attribute: kEnumerableProperty,
    referrerPolicy: kEnumerableProperty,
    referrer: kEnumerableProperty,
    mode: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "Request",
      configurable: true
    }
  });
  webidl.converters.Request = webidl.interfaceConverter(Request);
  webidl.converters.RequestInfo = function(V) {
    if (typeof V === "string") {
      return webidl.converters.USVString(V);
    }
    if (V instanceof Request) {
      return webidl.converters.Request(V);
    }
    return webidl.converters.USVString(V);
  };
  webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);
  webidl.converters.RequestInit = webidl.dictionaryConverter([
    {
      key: "method",
      converter: webidl.converters.ByteString
    },
    {
      key: "headers",
      converter: webidl.converters.HeadersInit
    },
    {
      key: "body",
      converter: webidl.nullableConverter(webidl.converters.BodyInit)
    },
    {
      key: "referrer",
      converter: webidl.converters.USVString
    },
    {
      key: "referrerPolicy",
      converter: webidl.converters.DOMString,
      allowedValues: referrerPolicy
    },
    {
      key: "mode",
      converter: webidl.converters.DOMString,
      allowedValues: requestMode
    },
    {
      key: "credentials",
      converter: webidl.converters.DOMString,
      allowedValues: requestCredentials
    },
    {
      key: "cache",
      converter: webidl.converters.DOMString,
      allowedValues: requestCache
    },
    {
      key: "redirect",
      converter: webidl.converters.DOMString,
      allowedValues: requestRedirect
    },
    {
      key: "integrity",
      converter: webidl.converters.DOMString
    },
    {
      key: "keepalive",
      converter: webidl.converters.boolean
    },
    {
      key: "signal",
      converter: webidl.nullableConverter((signal) => webidl.converters.AbortSignal(signal, { strict: false }))
    },
    {
      key: "window",
      converter: webidl.converters.any
    },
    {
      key: "duplex",
      converter: webidl.converters.DOMString,
      allowedValues: requestDuplex
    }
  ]);
  module.exports = { Request, makeRequest };
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS((exports, module) => {
  async function fetch2(input, init = {}) {
    webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
    const p = createDeferredPromise();
    let requestObject;
    try {
      requestObject = new Request(input, init);
    } catch (e) {
      p.reject(e);
      return p.promise;
    }
    const request = requestObject[kState];
    if (requestObject.signal.aborted) {
      abortFetch(p, request, null, requestObject.signal.reason);
      return p.promise;
    }
    const globalObject = request.client.globalObject;
    if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
      request.serviceWorkers = "none";
    }
    let responseObject = null;
    const relevantRealm = null;
    let locallyAborted = false;
    let controller = null;
    addAbortListener(requestObject.signal, () => {
      locallyAborted = true;
      assert(controller != null);
      controller.abort(requestObject.signal.reason);
      abortFetch(p, request, responseObject, requestObject.signal.reason);
    });
    const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
    const processResponse = (response) => {
      if (locallyAborted) {
        return;
      }
      if (response.aborted) {
        abortFetch(p, request, responseObject, controller.serializedAbortReason);
        return;
      }
      if (response.type === "error") {
        p.reject(Object.assign(new TypeError("fetch failed"), { cause: response.error }));
        return;
      }
      responseObject = new Response2;
      responseObject[kState] = response;
      responseObject[kRealm] = relevantRealm;
      responseObject[kHeaders][kHeadersList] = response.headersList;
      responseObject[kHeaders][kGuard] = "immutable";
      responseObject[kHeaders][kRealm] = relevantRealm;
      p.resolve(responseObject);
    };
    controller = fetching({
      request,
      processResponseEndOfBody: handleFetchDone,
      processResponse,
      dispatcher: init.dispatcher ?? getGlobalDispatcher()
    });
    return p.promise;
  }
  var finalizeAndReportTiming = function(response, initiatorType = "other") {
    if (response.type === "error" && response.aborted) {
      return;
    }
    if (!response.urlList?.length) {
      return;
    }
    const originalURL = response.urlList[0];
    let timingInfo = response.timingInfo;
    let cacheState = response.cacheState;
    if (!urlIsHttpHttpsScheme(originalURL)) {
      return;
    }
    if (timingInfo === null) {
      return;
    }
    if (!timingInfo.timingAllowPassed) {
      timingInfo = createOpaqueTimingInfo({
        startTime: timingInfo.startTime
      });
      cacheState = "";
    }
    timingInfo.endTime = coarsenedSharedCurrentTime();
    response.timingInfo = timingInfo;
    markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
  };
  var markResourceTiming = function(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
    if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
      performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
    }
  };
  var abortFetch = function(p, request, responseObject, error) {
    if (!error) {
      error = new DOMException2("The operation was aborted.", "AbortError");
    }
    p.reject(error);
    if (request.body != null && isReadable(request.body?.stream)) {
      request.body.stream.cancel(error).catch((err) => {
        if (err.code === "ERR_INVALID_STATE") {
          return;
        }
        throw err;
      });
    }
    if (responseObject == null) {
      return;
    }
    const response = responseObject[kState];
    if (response.body != null && isReadable(response.body?.stream)) {
      response.body.stream.cancel(error).catch((err) => {
        if (err.code === "ERR_INVALID_STATE") {
          return;
        }
        throw err;
      });
    }
  };
  var fetching = function({
    request,
    processRequestBodyChunkLength,
    processRequestEndOfBody,
    processResponse,
    processResponseEndOfBody,
    processResponseConsumeBody,
    useParallelQueue = false,
    dispatcher
  }) {
    let taskDestination = null;
    let crossOriginIsolatedCapability = false;
    if (request.client != null) {
      taskDestination = request.client.globalObject;
      crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
    }
    const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
    const timingInfo = createOpaqueTimingInfo({
      startTime: currenTime
    });
    const fetchParams = {
      controller: new Fetch(dispatcher),
      request,
      timingInfo,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseConsumeBody,
      processResponseEndOfBody,
      taskDestination,
      crossOriginIsolatedCapability
    };
    assert(!request.body || request.body.stream);
    if (request.window === "client") {
      request.window = request.client?.globalObject?.constructor?.name === "Window" ? request.client : "no-window";
    }
    if (request.origin === "client") {
      request.origin = request.client?.origin;
    }
    if (request.policyContainer === "client") {
      if (request.client != null) {
        request.policyContainer = clonePolicyContainer(request.client.policyContainer);
      } else {
        request.policyContainer = makePolicyContainer();
      }
    }
    if (!request.headersList.contains("accept")) {
      const value = "*/*";
      request.headersList.append("accept", value);
    }
    if (!request.headersList.contains("accept-language")) {
      request.headersList.append("accept-language", "*");
    }
    if (request.priority === null) {
    }
    if (subresource.includes(request.destination)) {
    }
    mainFetch(fetchParams).catch((err) => {
      fetchParams.controller.terminate(err);
    });
    return fetchParams.controller;
  };
  async function mainFetch(fetchParams, recursive = false) {
    const request = fetchParams.request;
    let response = null;
    if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
      response = makeNetworkError("local URLs only");
    }
    tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
    if (requestBadPort(request) === "blocked") {
      response = makeNetworkError("bad port");
    }
    if (request.referrerPolicy === "") {
      request.referrerPolicy = request.policyContainer.referrerPolicy;
    }
    if (request.referrer !== "no-referrer") {
      request.referrer = determineRequestsReferrer(request);
    }
    if (response === null) {
      response = await (async () => {
        const currentURL = requestCurrentURL(request);
        if (sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || currentURL.protocol === "data:" || (request.mode === "navigate" || request.mode === "websocket")) {
          request.responseTainting = "basic";
          return await schemeFetch(fetchParams);
        }
        if (request.mode === "same-origin") {
          return makeNetworkError('request mode cannot be "same-origin"');
        }
        if (request.mode === "no-cors") {
          if (request.redirect !== "follow") {
            return makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
          }
          request.responseTainting = "opaque";
          return await schemeFetch(fetchParams);
        }
        if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
          return makeNetworkError("URL scheme must be a HTTP(S) scheme");
        }
        request.responseTainting = "cors";
        return await httpFetch(fetchParams);
      })();
    }
    if (recursive) {
      return response;
    }
    if (response.status !== 0 && !response.internalResponse) {
      if (request.responseTainting === "cors") {
      }
      if (request.responseTainting === "basic") {
        response = filterResponse(response, "basic");
      } else if (request.responseTainting === "cors") {
        response = filterResponse(response, "cors");
      } else if (request.responseTainting === "opaque") {
        response = filterResponse(response, "opaque");
      } else {
        assert(false);
      }
    }
    let internalResponse = response.status === 0 ? response : response.internalResponse;
    if (internalResponse.urlList.length === 0) {
      internalResponse.urlList.push(...request.urlList);
    }
    if (!request.timingAllowFailed) {
      response.timingAllowPassed = true;
    }
    if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) {
      response = internalResponse = makeNetworkError();
    }
    if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
      internalResponse.body = null;
      fetchParams.controller.dump = true;
    }
    if (request.integrity) {
      const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
      if (request.responseTainting === "opaque" || response.body == null) {
        processBodyError(response.error);
        return;
      }
      const processBody = (bytes) => {
        if (!bytesMatch(bytes, request.integrity)) {
          processBodyError("integrity mismatch");
          return;
        }
        response.body = safelyExtractBody(bytes)[0];
        fetchFinale(fetchParams, response);
      };
      await fullyReadBody(response.body, processBody, processBodyError);
    } else {
      fetchFinale(fetchParams, response);
    }
  }
  async function schemeFetch(fetchParams) {
    if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
      return makeAppropriateNetworkError(fetchParams);
    }
    const { request } = fetchParams;
    const { protocol: scheme } = requestCurrentURL(request);
    switch (scheme) {
      case "about:": {
        return makeNetworkError("about scheme is not supported");
      }
      case "blob:": {
        if (!resolveObjectURL) {
          resolveObjectURL = __require("buffer").resolveObjectURL;
        }
        const blobURLEntry = requestCurrentURL(request);
        if (blobURLEntry.search.length !== 0) {
          return makeNetworkError("NetworkError when attempting to fetch resource.");
        }
        const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
        if (request.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
          return makeNetworkError("invalid method");
        }
        const bodyWithType = safelyExtractBody(blobURLEntryObject);
        const body = bodyWithType[0];
        const length = isomorphicEncode(`${body.length}`);
        const type = bodyWithType[1] ?? "";
        const response = makeResponse({
          statusText: "OK",
          headersList: [
            ["content-length", { name: "Content-Length", value: length }],
            ["content-type", { name: "Content-Type", value: type }]
          ]
        });
        response.body = body;
        return response;
      }
      case "data:": {
        const currentURL = requestCurrentURL(request);
        const dataURLStruct = dataURLProcessor(currentURL);
        if (dataURLStruct === "failure") {
          return makeNetworkError("failed to fetch the data URL");
        }
        const mimeType = serializeAMimeType(dataURLStruct.mimeType);
        return makeResponse({
          statusText: "OK",
          headersList: [
            ["content-type", { name: "Content-Type", value: mimeType }]
          ],
          body: safelyExtractBody(dataURLStruct.body)[0]
        });
      }
      case "file:": {
        return makeNetworkError("not implemented... yet...");
      }
      case "http:":
      case "https:": {
        return await httpFetch(fetchParams).catch((err) => makeNetworkError(err));
      }
      default: {
        return makeNetworkError("unknown scheme");
      }
    }
  }
  var finalizeResponse = function(fetchParams, response) {
    fetchParams.request.done = true;
    if (fetchParams.processResponseDone != null) {
      queueMicrotask(() => fetchParams.processResponseDone(response));
    }
  };
  async function fetchFinale(fetchParams, response) {
    if (response.type === "error") {
      response.urlList = [fetchParams.request.urlList[0]];
      response.timingInfo = createOpaqueTimingInfo({
        startTime: fetchParams.timingInfo.startTime
      });
    }
    const processResponseEndOfBody = () => {
      fetchParams.request.done = true;
      if (fetchParams.processResponseEndOfBody != null) {
        queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
      }
    };
    if (fetchParams.processResponse != null) {
      queueMicrotask(() => fetchParams.processResponse(response));
    }
    if (response.body == null) {
      processResponseEndOfBody();
    } else {
      const identityTransformAlgorithm = (chunk, controller) => {
        controller.enqueue(chunk);
      };
      const transformStream = new TransformStream({
        start() {
        },
        transform: identityTransformAlgorithm,
        flush: processResponseEndOfBody
      }, {
        size() {
          return 1;
        }
      }, {
        size() {
          return 1;
        }
      });
      response.body = { stream: response.body.stream.pipeThrough(transformStream) };
    }
    if (fetchParams.processResponseConsumeBody != null) {
      const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
      const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
      if (response.body == null) {
        queueMicrotask(() => processBody(null));
      } else {
        await fullyReadBody(response.body, processBody, processBodyError);
      }
    }
  }
  async function httpFetch(fetchParams) {
    const request = fetchParams.request;
    let response = null;
    let actualResponse = null;
    const timingInfo = fetchParams.timingInfo;
    if (request.serviceWorkers === "all") {
    }
    if (response === null) {
      if (request.redirect === "follow") {
        request.serviceWorkers = "none";
      }
      actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
      if (request.responseTainting === "cors" && corsCheck(request, response) === "failure") {
        return makeNetworkError("cors failure");
      }
      if (TAOCheck(request, response) === "failure") {
        request.timingAllowFailed = true;
      }
    }
    if ((request.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request.origin, request.client, request.destination, actualResponse) === "blocked") {
      return makeNetworkError("blocked");
    }
    if (redirectStatus.includes(actualResponse.status)) {
      if (request.redirect !== "manual") {
        fetchParams.controller.connection.destroy();
      }
      if (request.redirect === "error") {
        response = makeNetworkError("unexpected redirect");
      } else if (request.redirect === "manual") {
        response = actualResponse;
      } else if (request.redirect === "follow") {
        response = await httpRedirectFetch(fetchParams, response);
      } else {
        assert(false);
      }
    }
    response.timingInfo = timingInfo;
    return response;
  }
  async function httpRedirectFetch(fetchParams, response) {
    const request = fetchParams.request;
    const actualResponse = response.internalResponse ? response.internalResponse : response;
    let locationURL;
    try {
      locationURL = responseLocationURL(actualResponse, requestCurrentURL(request).hash);
      if (locationURL == null) {
        return response;
      }
    } catch (err) {
      return makeNetworkError(err);
    }
    if (!urlIsHttpHttpsScheme(locationURL)) {
      return makeNetworkError("URL scheme must be a HTTP(S) scheme");
    }
    if (request.redirectCount === 20) {
      return makeNetworkError("redirect count exceeded");
    }
    request.redirectCount += 1;
    if (request.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
      return makeNetworkError('cross origin not allowed for request mode "cors"');
    }
    if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
      return makeNetworkError('URL cannot contain credentials for request mode "cors"');
    }
    if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
      return makeNetworkError();
    }
    if ([301, 302].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !["GET", "HEAD"].includes(request.method)) {
      request.method = "GET";
      request.body = null;
      for (const headerName of requestBodyHeader) {
        request.headersList.delete(headerName);
      }
    }
    if (!sameOrigin(requestCurrentURL(request), locationURL)) {
      request.headersList.delete("authorization");
    }
    if (request.body != null) {
      assert(request.body.source != null);
      request.body = safelyExtractBody(request.body.source)[0];
    }
    const timingInfo = fetchParams.timingInfo;
    timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
    if (timingInfo.redirectStartTime === 0) {
      timingInfo.redirectStartTime = timingInfo.startTime;
    }
    request.urlList.push(locationURL);
    setRequestReferrerPolicyOnRedirect(request, actualResponse);
    return mainFetch(fetchParams, true);
  }
  async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
    const request = fetchParams.request;
    let httpFetchParams = null;
    let httpRequest = null;
    let response = null;
    const httpCache = null;
    const revalidatingFlag = false;
    if (request.window === "no-window" && request.redirect === "error") {
      httpFetchParams = fetchParams;
      httpRequest = request;
    } else {
      httpRequest = makeRequest(request);
      httpFetchParams = { ...fetchParams };
      httpFetchParams.request = httpRequest;
    }
    const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
    const contentLength = httpRequest.body ? httpRequest.body.length : null;
    let contentLengthHeaderValue = null;
    if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
      contentLengthHeaderValue = "0";
    }
    if (contentLength != null) {
      contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
    }
    if (contentLengthHeaderValue != null) {
      httpRequest.headersList.append("content-length", contentLengthHeaderValue);
    }
    if (contentLength != null && httpRequest.keepalive) {
    }
    if (httpRequest.referrer instanceof URL) {
      httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
    }
    appendRequestOriginHeader(httpRequest);
    appendFetchMetadata(httpRequest);
    if (!httpRequest.headersList.contains("user-agent")) {
      httpRequest.headersList.append("user-agent", "undici");
    }
    if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
      httpRequest.cache = "no-store";
    }
    if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
      httpRequest.headersList.append("cache-control", "max-age=0");
    }
    if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
      if (!httpRequest.headersList.contains("pragma")) {
        httpRequest.headersList.append("pragma", "no-cache");
      }
      if (!httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "no-cache");
      }
    }
    if (httpRequest.headersList.contains("range")) {
      httpRequest.headersList.append("accept-encoding", "identity");
    }
    if (!httpRequest.headersList.contains("accept-encoding")) {
      if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
        httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
      } else {
        httpRequest.headersList.append("accept-encoding", "gzip, deflate");
      }
    }
    if (includeCredentials) {
    }
    if (httpCache == null) {
      httpRequest.cache = "no-store";
    }
    if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
    }
    if (response == null) {
      if (httpRequest.mode === "only-if-cached") {
        return makeNetworkError("only if cached");
      }
      const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
      if (!safeMethods.includes(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
      }
      if (revalidatingFlag && forwardResponse.status === 304) {
      }
      if (response == null) {
        response = forwardResponse;
      }
    }
    response.urlList = [...httpRequest.urlList];
    if (httpRequest.headersList.contains("range")) {
      response.rangeRequested = true;
    }
    response.requestIncludesCredentials = includeCredentials;
    if (response.status === 407) {
      if (request.window === "no-window") {
        return makeNetworkError();
      }
      if (isCancelled(fetchParams)) {
        return makeAppropriateNetworkError(fetchParams);
      }
      return makeNetworkError("proxy authentication required");
    }
    if (response.status === 421 && !isNewConnectionFetch && (request.body == null || request.body.source != null)) {
      if (isCancelled(fetchParams)) {
        return makeAppropriateNetworkError(fetchParams);
      }
      fetchParams.controller.connection.destroy();
      response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
    }
    if (isAuthenticationFetch) {
    }
    return response;
  }
  async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
    assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
    fetchParams.controller.connection = {
      abort: null,
      destroyed: false,
      destroy(err) {
        if (!this.destroyed) {
          this.destroyed = true;
          this.abort?.(err ?? new DOMException2("The operation was aborted.", "AbortError"));
        }
      }
    };
    const request = fetchParams.request;
    let response = null;
    const timingInfo = fetchParams.timingInfo;
    const httpCache = null;
    if (httpCache == null) {
      request.cache = "no-store";
    }
    const newConnection = forceNewConnection ? "yes" : "no";
    if (request.mode === "websocket") {
    } else {
    }
    let requestBody = null;
    if (request.body == null && fetchParams.processRequestEndOfBody) {
      queueMicrotask(() => fetchParams.processRequestEndOfBody());
    } else if (request.body != null) {
      const processBodyChunk = async function* (bytes) {
        if (isCancelled(fetchParams)) {
          return;
        }
        yield bytes;
        fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
      };
      const processEndOfBody = () => {
        if (isCancelled(fetchParams)) {
          return;
        }
        if (fetchParams.processRequestEndOfBody) {
          fetchParams.processRequestEndOfBody();
        }
      };
      const processBodyError = (e) => {
        if (isCancelled(fetchParams)) {
          return;
        }
        if (e.name === "AbortError") {
          fetchParams.controller.abort();
        } else {
          fetchParams.controller.terminate(e);
        }
      };
      requestBody = async function* () {
        try {
          for await (const bytes of request.body.stream) {
            yield* processBodyChunk(bytes);
          }
          processEndOfBody();
        } catch (err) {
          processBodyError(err);
        }
      }();
    }
    try {
      const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
      if (socket) {
        response = makeResponse({ status, statusText, headersList, socket });
      } else {
        const iterator = body[Symbol.asyncIterator]();
        fetchParams.controller.next = () => iterator.next();
        response = makeResponse({ status, statusText, headersList });
      }
    } catch (err) {
      if (err.name === "AbortError") {
        fetchParams.controller.connection.destroy();
        return makeAppropriateNetworkError(fetchParams, err);
      }
      return makeNetworkError(err);
    }
    const pullAlgorithm = () => {
      fetchParams.controller.resume();
    };
    const cancelAlgorithm = (reason) => {
      fetchParams.controller.abort(reason);
    };
    if (!ReadableStream2) {
      ReadableStream2 = __require("stream/web").ReadableStream;
    }
    const stream = new ReadableStream2({
      async start(controller) {
        fetchParams.controller.controller = controller;
      },
      async pull(controller) {
        await pullAlgorithm(controller);
      },
      async cancel(reason) {
        await cancelAlgorithm(reason);
      }
    }, {
      highWaterMark: 0,
      size() {
        return 1;
      }
    });
    response.body = { stream };
    fetchParams.controller.on("terminated", onAborted);
    fetchParams.controller.resume = async () => {
      while (true) {
        let bytes;
        let isFailure;
        try {
          const { done, value } = await fetchParams.controller.next();
          if (isAborted(fetchParams)) {
            break;
          }
          bytes = done ? undefined : value;
        } catch (err) {
          if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
            bytes = undefined;
          } else {
            bytes = err;
            isFailure = true;
          }
        }
        if (bytes === undefined) {
          readableStreamClose(fetchParams.controller.controller);
          finalizeResponse(fetchParams, response);
          return;
        }
        timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
        if (isFailure) {
          fetchParams.controller.terminate(bytes);
          return;
        }
        fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
        if (isErrored(stream)) {
          fetchParams.controller.terminate();
          return;
        }
        if (!fetchParams.controller.controller.desiredSize) {
          return;
        }
      }
    };
    function onAborted(reason) {
      if (isAborted(fetchParams)) {
        response.aborted = true;
        if (isReadable(stream)) {
          fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
        }
      } else {
        if (isReadable(stream)) {
          fetchParams.controller.controller.error(new TypeError("terminated", {
            cause: isErrorLike(reason) ? reason : undefined
          }));
        }
      }
      fetchParams.controller.connection.destroy();
    }
    return response;
    async function dispatch({ body }) {
      const url = requestCurrentURL(request);
      const agent = fetchParams.controller.dispatcher;
      return new Promise((resolve, reject) => agent.dispatch({
        path: url.pathname + url.search,
        origin: url.origin,
        method: request.method,
        body: fetchParams.controller.dispatcher.isMockActive ? request.body && request.body.source : body,
        headers: request.headersList.entries,
        maxRedirections: 0,
        upgrade: request.mode === "websocket" ? "websocket" : undefined
      }, {
        body: null,
        abort: null,
        onConnect(abort) {
          const { connection } = fetchParams.controller;
          if (connection.destroyed) {
            abort(new DOMException2("The operation was aborted.", "AbortError"));
          } else {
            fetchParams.controller.on("terminated", abort);
            this.abort = connection.abort = abort;
          }
        },
        onHeaders(status, headersList, resume, statusText) {
          if (status < 200) {
            return;
          }
          let codings = [];
          let location = "";
          const headers = new Headers2;
          if (Array.isArray(headersList)) {
            for (let n = 0;n < headersList.length; n += 2) {
              const key = headersList[n + 0].toString("latin1");
              const val = headersList[n + 1].toString("latin1");
              if (key.toLowerCase() === "content-encoding") {
                codings = val.toLowerCase().split(",").map((x) => x.trim());
              } else if (key.toLowerCase() === "location") {
                location = val;
              }
              headers.append(key, val);
            }
          } else {
            const keys = Object.keys(headersList);
            for (const key of keys) {
              const val = headersList[key];
              if (key.toLowerCase() === "content-encoding") {
                codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
              } else if (key.toLowerCase() === "location") {
                location = val;
              }
              headers.append(key, val);
            }
          }
          this.body = new Readable({ read: resume });
          const decoders = [];
          const willFollow = request.redirect === "follow" && location && redirectStatus.includes(status);
          if (request.method !== "HEAD" && request.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
            for (const coding of codings) {
              if (coding === "x-gzip" || coding === "gzip") {
                decoders.push(zlib.createGunzip({
                  flush: zlib.constants.Z_SYNC_FLUSH,
                  finishFlush: zlib.constants.Z_SYNC_FLUSH
                }));
              } else if (coding === "deflate") {
                decoders.push(zlib.createInflate());
              } else if (coding === "br") {
                decoders.push(zlib.createBrotliDecompress());
              } else {
                decoders.length = 0;
                break;
              }
            }
          }
          resolve({
            status,
            statusText,
            headersList: headers[kHeadersList],
            body: decoders.length ? pipeline(this.body, ...decoders, () => {
            }) : this.body.on("error", () => {
            })
          });
          return true;
        },
        onData(chunk) {
          if (fetchParams.controller.dump) {
            return;
          }
          const bytes = chunk;
          timingInfo.encodedBodySize += bytes.byteLength;
          return this.body.push(bytes);
        },
        onComplete() {
          if (this.abort) {
            fetchParams.controller.off("terminated", this.abort);
          }
          fetchParams.controller.ended = true;
          this.body.push(null);
        },
        onError(error) {
          if (this.abort) {
            fetchParams.controller.off("terminated", this.abort);
          }
          this.body?.destroy(error);
          fetchParams.controller.terminate(error);
          reject(error);
        },
        onUpgrade(status, headersList, socket) {
          if (status !== 101) {
            return;
          }
          const headers = new Headers2;
          for (let n = 0;n < headersList.length; n += 2) {
            const key = headersList[n + 0].toString("latin1");
            const val = headersList[n + 1].toString("latin1");
            headers.append(key, val);
          }
          resolve({
            status,
            statusText: STATUS_CODES[status],
            headersList: headers[kHeadersList],
            socket
          });
          return true;
        }
      }));
    }
  }
  var {
    Response: Response2,
    makeNetworkError,
    makeAppropriateNetworkError,
    filterResponse,
    makeResponse
  } = require_response();
  var { Headers: Headers2 } = require_headers();
  var { Request, makeRequest } = require_request2();
  var zlib = __require("zlib");
  var {
    bytesMatch,
    makePolicyContainer,
    clonePolicyContainer,
    requestBadPort,
    TAOCheck,
    appendRequestOriginHeader,
    responseLocationURL,
    requestCurrentURL,
    setRequestReferrerPolicyOnRedirect,
    tryUpgradeRequestToAPotentiallyTrustworthyURL,
    createOpaqueTimingInfo,
    appendFetchMetadata,
    corsCheck,
    crossOriginResourcePolicyCheck,
    determineRequestsReferrer,
    coarsenedSharedCurrentTime,
    createDeferredPromise,
    isBlobLike,
    sameOrigin,
    isCancelled,
    isAborted,
    isErrorLike,
    fullyReadBody,
    readableStreamClose,
    isomorphicEncode,
    urlIsLocal,
    urlIsHttpHttpsScheme,
    urlHasHttpsScheme
  } = require_util2();
  var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
  var assert = __require("assert");
  var { safelyExtractBody } = require_body();
  var {
    redirectStatus,
    nullBodyStatus,
    safeMethods,
    requestBodyHeader,
    subresource,
    DOMException: DOMException2
  } = require_constants();
  var { kHeadersList } = require_symbols();
  var EE = __require("events");
  var { Readable, pipeline } = __require("stream");
  var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util();
  var { dataURLProcessor, serializeAMimeType } = require_dataURL();
  var { TransformStream } = __require("stream/web");
  var { getGlobalDispatcher } = require_global3();
  var { webidl } = require_webidl();
  var { STATUS_CODES } = __require("http");
  var resolveObjectURL;
  var ReadableStream2 = globalThis.ReadableStream;

  class Fetch extends EE {
    constructor(dispatcher) {
      super();
      this.dispatcher = dispatcher;
      this.connection = null;
      this.dump = false;
      this.state = "ongoing";
      this.setMaxListeners(21);
    }
    terminate(reason) {
      if (this.state !== "ongoing") {
        return;
      }
      this.state = "terminated";
      this.connection?.destroy(reason);
      this.emit("terminated", reason);
    }
    abort(error) {
      if (this.state !== "ongoing") {
        return;
      }
      this.state = "aborted";
      if (!error) {
        error = new DOMException2("The operation was aborted.", "AbortError");
      }
      this.serializedAbortReason = error;
      this.connection?.destroy(error);
      this.emit("terminated", error);
    }
  }
  module.exports = {
    fetch: fetch2,
    Fetch,
    fetching,
    finalizeAndReportTiming
  };
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS((exports, module) => {
  module.exports = {
    kState: Symbol("FileReader state"),
    kResult: Symbol("FileReader result"),
    kError: Symbol("FileReader error"),
    kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
    kEvents: Symbol("FileReader events"),
    kAborted: Symbol("FileReader aborted")
  };
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS((exports, module) => {
  var { webidl } = require_webidl();
  var kState = Symbol("ProgressEvent state");

  class ProgressEvent extends Event {
    constructor(type, eventInitDict = {}) {
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
      super(type, eventInitDict);
      this[kState] = {
        lengthComputable: eventInitDict.lengthComputable,
        loaded: eventInitDict.loaded,
        total: eventInitDict.total
      };
    }
    get lengthComputable() {
      webidl.brandCheck(this, ProgressEvent);
      return this[kState].lengthComputable;
    }
    get loaded() {
      webidl.brandCheck(this, ProgressEvent);
      return this[kState].loaded;
    }
    get total() {
      webidl.brandCheck(this, ProgressEvent);
      return this[kState].total;
    }
  }
  webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
    {
      key: "lengthComputable",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "loaded",
      converter: webidl.converters["unsigned long long"],
      defaultValue: 0
    },
    {
      key: "total",
      converter: webidl.converters["unsigned long long"],
      defaultValue: 0
    },
    {
      key: "bubbles",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "cancelable",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "composed",
      converter: webidl.converters.boolean,
      defaultValue: false
    }
  ]);
  module.exports = {
    ProgressEvent
  };
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS((exports, module) => {
  var getEncoding = function(label) {
    if (!label) {
      return "failure";
    }
    switch (label.trim().toLowerCase()) {
      case "unicode-1-1-utf-8":
      case "unicode11utf8":
      case "unicode20utf8":
      case "utf-8":
      case "utf8":
      case "x-unicode20utf8":
        return "UTF-8";
      case "866":
      case "cp866":
      case "csibm866":
      case "ibm866":
        return "IBM866";
      case "csisolatin2":
      case "iso-8859-2":
      case "iso-ir-101":
      case "iso8859-2":
      case "iso88592":
      case "iso_8859-2":
      case "iso_8859-2:1987":
      case "l2":
      case "latin2":
        return "ISO-8859-2";
      case "csisolatin3":
      case "iso-8859-3":
      case "iso-ir-109":
      case "iso8859-3":
      case "iso88593":
      case "iso_8859-3":
      case "iso_8859-3:1988":
      case "l3":
      case "latin3":
        return "ISO-8859-3";
      case "csisolatin4":
      case "iso-8859-4":
      case "iso-ir-110":
      case "iso8859-4":
      case "iso88594":
      case "iso_8859-4":
      case "iso_8859-4:1988":
      case "l4":
      case "latin4":
        return "ISO-8859-4";
      case "csisolatincyrillic":
      case "cyrillic":
      case "iso-8859-5":
      case "iso-ir-144":
      case "iso8859-5":
      case "iso88595":
      case "iso_8859-5":
      case "iso_8859-5:1988":
        return "ISO-8859-5";
      case "arabic":
      case "asmo-708":
      case "csiso88596e":
      case "csiso88596i":
      case "csisolatinarabic":
      case "ecma-114":
      case "iso-8859-6":
      case "iso-8859-6-e":
      case "iso-8859-6-i":
      case "iso-ir-127":
      case "iso8859-6":
      case "iso88596":
      case "iso_8859-6":
      case "iso_8859-6:1987":
        return "ISO-8859-6";
      case "csisolatingreek":
      case "ecma-118":
      case "elot_928":
      case "greek":
      case "greek8":
      case "iso-8859-7":
      case "iso-ir-126":
      case "iso8859-7":
      case "iso88597":
      case "iso_8859-7":
      case "iso_8859-7:1987":
      case "sun_eu_greek":
        return "ISO-8859-7";
      case "csiso88598e":
      case "csisolatinhebrew":
      case "hebrew":
      case "iso-8859-8":
      case "iso-8859-8-e":
      case "iso-ir-138":
      case "iso8859-8":
      case "iso88598":
      case "iso_8859-8":
      case "iso_8859-8:1988":
      case "visual":
        return "ISO-8859-8";
      case "csiso88598i":
      case "iso-8859-8-i":
      case "logical":
        return "ISO-8859-8-I";
      case "csisolatin6":
      case "iso-8859-10":
      case "iso-ir-157":
      case "iso8859-10":
      case "iso885910":
      case "l6":
      case "latin6":
        return "ISO-8859-10";
      case "iso-8859-13":
      case "iso8859-13":
      case "iso885913":
        return "ISO-8859-13";
      case "iso-8859-14":
      case "iso8859-14":
      case "iso885914":
        return "ISO-8859-14";
      case "csisolatin9":
      case "iso-8859-15":
      case "iso8859-15":
      case "iso885915":
      case "iso_8859-15":
      case "l9":
        return "ISO-8859-15";
      case "iso-8859-16":
        return "ISO-8859-16";
      case "cskoi8r":
      case "koi":
      case "koi8":
      case "koi8-r":
      case "koi8_r":
        return "KOI8-R";
      case "koi8-ru":
      case "koi8-u":
        return "KOI8-U";
      case "csmacintosh":
      case "mac":
      case "macintosh":
      case "x-mac-roman":
        return "macintosh";
      case "iso-8859-11":
      case "iso8859-11":
      case "iso885911":
      case "tis-620":
      case "windows-874":
        return "windows-874";
      case "cp1250":
      case "windows-1250":
      case "x-cp1250":
        return "windows-1250";
      case "cp1251":
      case "windows-1251":
      case "x-cp1251":
        return "windows-1251";
      case "ansi_x3.4-1968":
      case "ascii":
      case "cp1252":
      case "cp819":
      case "csisolatin1":
      case "ibm819":
      case "iso-8859-1":
      case "iso-ir-100":
      case "iso8859-1":
      case "iso88591":
      case "iso_8859-1":
      case "iso_8859-1:1987":
      case "l1":
      case "latin1":
      case "us-ascii":
      case "windows-1252":
      case "x-cp1252":
        return "windows-1252";
      case "cp1253":
      case "windows-1253":
      case "x-cp1253":
        return "windows-1253";
      case "cp1254":
      case "csisolatin5":
      case "iso-8859-9":
      case "iso-ir-148":
      case "iso8859-9":
      case "iso88599":
      case "iso_8859-9":
      case "iso_8859-9:1989":
      case "l5":
      case "latin5":
      case "windows-1254":
      case "x-cp1254":
        return "windows-1254";
      case "cp1255":
      case "windows-1255":
      case "x-cp1255":
        return "windows-1255";
      case "cp1256":
      case "windows-1256":
      case "x-cp1256":
        return "windows-1256";
      case "cp1257":
      case "windows-1257":
      case "x-cp1257":
        return "windows-1257";
      case "cp1258":
      case "windows-1258":
      case "x-cp1258":
        return "windows-1258";
      case "x-mac-cyrillic":
      case "x-mac-ukrainian":
        return "x-mac-cyrillic";
      case "chinese":
      case "csgb2312":
      case "csiso58gb231280":
      case "gb2312":
      case "gb_2312":
      case "gb_2312-80":
      case "gbk":
      case "iso-ir-58":
      case "x-gbk":
        return "GBK";
      case "gb18030":
        return "gb18030";
      case "big5":
      case "big5-hkscs":
      case "cn-big5":
      case "csbig5":
      case "x-x-big5":
        return "Big5";
      case "cseucpkdfmtjapanese":
      case "euc-jp":
      case "x-euc-jp":
        return "EUC-JP";
      case "csiso2022jp":
      case "iso-2022-jp":
        return "ISO-2022-JP";
      case "csshiftjis":
      case "ms932":
      case "ms_kanji":
      case "shift-jis":
      case "shift_jis":
      case "sjis":
      case "windows-31j":
      case "x-sjis":
        return "Shift_JIS";
      case "cseuckr":
      case "csksc56011987":
      case "euc-kr":
      case "iso-ir-149":
      case "korean":
      case "ks_c_5601-1987":
      case "ks_c_5601-1989":
      case "ksc5601":
      case "ksc_5601":
      case "windows-949":
        return "EUC-KR";
      case "csiso2022kr":
      case "hz-gb-2312":
      case "iso-2022-cn":
      case "iso-2022-cn-ext":
      case "iso-2022-kr":
      case "replacement":
        return "replacement";
      case "unicodefffe":
      case "utf-16be":
        return "UTF-16BE";
      case "csunicode":
      case "iso-10646-ucs-2":
      case "ucs-2":
      case "unicode":
      case "unicodefeff":
      case "utf-16":
      case "utf-16le":
        return "UTF-16LE";
      case "x-user-defined":
        return "x-user-defined";
      default:
        return "failure";
    }
  };
  module.exports = {
    getEncoding
  };
});

// node_modules/undici/lib/fileapi/util.js
var require_util4 = __commonJS((exports, module) => {
  var readOperation = function(fr, blob, type, encodingName) {
    if (fr[kState] === "loading") {
      throw new DOMException2("Invalid state", "InvalidStateError");
    }
    fr[kState] = "loading";
    fr[kResult] = null;
    fr[kError] = null;
    const stream = blob.stream();
    const reader = stream.getReader();
    const bytes = [];
    let chunkPromise = reader.read();
    let isFirstChunk = true;
    (async () => {
      while (!fr[kAborted]) {
        try {
          const { done, value } = await chunkPromise;
          if (isFirstChunk && !fr[kAborted]) {
            queueMicrotask(() => {
              fireAProgressEvent("loadstart", fr);
            });
          }
          isFirstChunk = false;
          if (!done && types.isUint8Array(value)) {
            bytes.push(value);
            if ((fr[kLastProgressEventFired] === undefined || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
              fr[kLastProgressEventFired] = Date.now();
              queueMicrotask(() => {
                fireAProgressEvent("progress", fr);
              });
            }
            chunkPromise = reader.read();
          } else if (done) {
            queueMicrotask(() => {
              fr[kState] = "done";
              try {
                const result = packageData(bytes, type, blob.type, encodingName);
                if (fr[kAborted]) {
                  return;
                }
                fr[kResult] = result;
                fireAProgressEvent("load", fr);
              } catch (error) {
                fr[kError] = error;
                fireAProgressEvent("error", fr);
              }
              if (fr[kState] !== "loading") {
                fireAProgressEvent("loadend", fr);
              }
            });
            break;
          }
        } catch (error) {
          if (fr[kAborted]) {
            return;
          }
          queueMicrotask(() => {
            fr[kState] = "done";
            fr[kError] = error;
            fireAProgressEvent("error", fr);
            if (fr[kState] !== "loading") {
              fireAProgressEvent("loadend", fr);
            }
          });
          break;
        }
      }
    })();
  };
  var fireAProgressEvent = function(e, reader) {
    const event = new ProgressEvent(e, {
      bubbles: false,
      cancelable: false
    });
    reader.dispatchEvent(event);
  };
  var packageData = function(bytes, type, mimeType, encodingName) {
    switch (type) {
      case "DataURL": {
        let dataURL = "data:";
        const parsed = parseMIMEType(mimeType || "application/octet-stream");
        if (parsed !== "failure") {
          dataURL += serializeAMimeType(parsed);
        }
        dataURL += ";base64,";
        const decoder = new StringDecoder("latin1");
        for (const chunk of bytes) {
          dataURL += btoa2(decoder.write(chunk));
        }
        dataURL += btoa2(decoder.end());
        return dataURL;
      }
      case "Text": {
        let encoding = "failure";
        if (encodingName) {
          encoding = getEncoding(encodingName);
        }
        if (encoding === "failure" && mimeType) {
          const type2 = parseMIMEType(mimeType);
          if (type2 !== "failure") {
            encoding = getEncoding(type2.parameters.get("charset"));
          }
        }
        if (encoding === "failure") {
          encoding = "UTF-8";
        }
        return decode(bytes, encoding);
      }
      case "ArrayBuffer": {
        const sequence = combineByteSequences(bytes);
        return sequence.buffer;
      }
      case "BinaryString": {
        let binaryString = "";
        const decoder = new StringDecoder("latin1");
        for (const chunk of bytes) {
          binaryString += decoder.write(chunk);
        }
        binaryString += decoder.end();
        return binaryString;
      }
    }
  };
  var decode = function(ioQueue, encoding) {
    const bytes = combineByteSequences(ioQueue);
    const BOMEncoding = BOMSniffing(bytes);
    let slice = 0;
    if (BOMEncoding !== null) {
      encoding = BOMEncoding;
      slice = BOMEncoding === "UTF-8" ? 3 : 2;
    }
    const sliced = bytes.slice(slice);
    return new TextDecoder(encoding).decode(sliced);
  };
  var BOMSniffing = function(ioQueue) {
    const [a, b, c] = ioQueue;
    if (a === 239 && b === 187 && c === 191) {
      return "UTF-8";
    } else if (a === 254 && b === 255) {
      return "UTF-16BE";
    } else if (a === 255 && b === 254) {
      return "UTF-16LE";
    }
    return null;
  };
  var combineByteSequences = function(sequences) {
    const size = sequences.reduce((a, b) => {
      return a + b.byteLength;
    }, 0);
    let offset = 0;
    return sequences.reduce((a, b) => {
      a.set(b, offset);
      offset += b.byteLength;
      return a;
    }, new Uint8Array(size));
  };
  var {
    kState,
    kError,
    kResult,
    kAborted,
    kLastProgressEventFired
  } = require_symbols3();
  var { ProgressEvent } = require_progressevent();
  var { getEncoding } = require_encoding();
  var { DOMException: DOMException2 } = require_constants();
  var { serializeAMimeType, parseMIMEType } = require_dataURL();
  var { types } = __require("util");
  var { StringDecoder } = __require("string_decoder");
  var { btoa: btoa2 } = __require("buffer");
  var staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
  };
  module.exports = {
    staticPropertyDescriptors,
    readOperation,
    fireAProgressEvent
  };
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS((exports, module) => {
  var {
    staticPropertyDescriptors,
    readOperation,
    fireAProgressEvent
  } = require_util4();
  var {
    kState,
    kError,
    kResult,
    kEvents,
    kAborted
  } = require_symbols3();
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();

  class FileReader extends EventTarget {
    constructor() {
      super();
      this[kState] = "empty";
      this[kResult] = null;
      this[kError] = null;
      this[kEvents] = {
        loadend: null,
        error: null,
        abort: null,
        load: null,
        progress: null,
        loadstart: null
      };
    }
    readAsArrayBuffer(blob) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
      blob = webidl.converters.Blob(blob, { strict: false });
      readOperation(this, blob, "ArrayBuffer");
    }
    readAsBinaryString(blob) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
      blob = webidl.converters.Blob(blob, { strict: false });
      readOperation(this, blob, "BinaryString");
    }
    readAsText(blob, encoding = undefined) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
      blob = webidl.converters.Blob(blob, { strict: false });
      if (encoding !== undefined) {
        encoding = webidl.converters.DOMString(encoding);
      }
      readOperation(this, blob, "Text", encoding);
    }
    readAsDataURL(blob) {
      webidl.brandCheck(this, FileReader);
      webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
      blob = webidl.converters.Blob(blob, { strict: false });
      readOperation(this, blob, "DataURL");
    }
    abort() {
      if (this[kState] === "empty" || this[kState] === "done") {
        this[kResult] = null;
        return;
      }
      if (this[kState] === "loading") {
        this[kState] = "done";
        this[kResult] = null;
      }
      this[kAborted] = true;
      fireAProgressEvent("abort", this);
      if (this[kState] !== "loading") {
        fireAProgressEvent("loadend", this);
      }
    }
    get readyState() {
      webidl.brandCheck(this, FileReader);
      switch (this[kState]) {
        case "empty":
          return this.EMPTY;
        case "loading":
          return this.LOADING;
        case "done":
          return this.DONE;
      }
    }
    get result() {
      webidl.brandCheck(this, FileReader);
      return this[kResult];
    }
    get error() {
      webidl.brandCheck(this, FileReader);
      return this[kError];
    }
    get onloadend() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].loadend;
    }
    set onloadend(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].loadend) {
        this.removeEventListener("loadend", this[kEvents].loadend);
      }
      if (typeof fn === "function") {
        this[kEvents].loadend = fn;
        this.addEventListener("loadend", fn);
      } else {
        this[kEvents].loadend = null;
      }
    }
    get onerror() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].error;
    }
    set onerror(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].error) {
        this.removeEventListener("error", this[kEvents].error);
      }
      if (typeof fn === "function") {
        this[kEvents].error = fn;
        this.addEventListener("error", fn);
      } else {
        this[kEvents].error = null;
      }
    }
    get onloadstart() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].loadstart;
    }
    set onloadstart(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].loadstart) {
        this.removeEventListener("loadstart", this[kEvents].loadstart);
      }
      if (typeof fn === "function") {
        this[kEvents].loadstart = fn;
        this.addEventListener("loadstart", fn);
      } else {
        this[kEvents].loadstart = null;
      }
    }
    get onprogress() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].progress;
    }
    set onprogress(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].progress) {
        this.removeEventListener("progress", this[kEvents].progress);
      }
      if (typeof fn === "function") {
        this[kEvents].progress = fn;
        this.addEventListener("progress", fn);
      } else {
        this[kEvents].progress = null;
      }
    }
    get onload() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].load;
    }
    set onload(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].load) {
        this.removeEventListener("load", this[kEvents].load);
      }
      if (typeof fn === "function") {
        this[kEvents].load = fn;
        this.addEventListener("load", fn);
      } else {
        this[kEvents].load = null;
      }
    }
    get onabort() {
      webidl.brandCheck(this, FileReader);
      return this[kEvents].abort;
    }
    set onabort(fn) {
      webidl.brandCheck(this, FileReader);
      if (this[kEvents].abort) {
        this.removeEventListener("abort", this[kEvents].abort);
      }
      if (typeof fn === "function") {
        this[kEvents].abort = fn;
        this.addEventListener("abort", fn);
      } else {
        this[kEvents].abort = null;
      }
    }
  }
  FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
  FileReader.LOADING = FileReader.prototype.LOADING = 1;
  FileReader.DONE = FileReader.prototype.DONE = 2;
  Object.defineProperties(FileReader.prototype, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors,
    readAsArrayBuffer: kEnumerableProperty,
    readAsBinaryString: kEnumerableProperty,
    readAsText: kEnumerableProperty,
    readAsDataURL: kEnumerableProperty,
    abort: kEnumerableProperty,
    readyState: kEnumerableProperty,
    result: kEnumerableProperty,
    error: kEnumerableProperty,
    onloadstart: kEnumerableProperty,
    onprogress: kEnumerableProperty,
    onload: kEnumerableProperty,
    onabort: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onloadend: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "FileReader",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  Object.defineProperties(FileReader, {
    EMPTY: staticPropertyDescriptors,
    LOADING: staticPropertyDescriptors,
    DONE: staticPropertyDescriptors
  });
  module.exports = {
    FileReader
  };
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS((exports, module) => {
  module.exports = {
    kConstruct: Symbol("constructable")
  };
});

// node_modules/undici/lib/cache/util.js
var require_util5 = __commonJS((exports, module) => {
  var urlEquals = function(A, B, excludeFragment = false) {
    const serializedA = URLSerializer(A, excludeFragment);
    const serializedB = URLSerializer(B, excludeFragment);
    return serializedA === serializedB;
  };
  var fieldValues = function(header) {
    assert(header !== null);
    const values = [];
    for (let value of header.split(",")) {
      value = value.trim();
      if (!value.length) {
        continue;
      } else if (!isValidHeaderName(value)) {
        continue;
      }
      values.push(value);
    }
    return values;
  };
  var assert = __require("assert");
  var { URLSerializer } = require_dataURL();
  var { isValidHeaderName } = require_util2();
  module.exports = {
    urlEquals,
    fieldValues
  };
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS((exports, module) => {
  var { kConstruct } = require_symbols4();
  var { urlEquals, fieldValues: getFieldValues } = require_util5();
  var { kEnumerableProperty, isDisturbed } = require_util();
  var { kHeadersList } = require_symbols();
  var { webidl } = require_webidl();
  var { Response: Response2, cloneResponse } = require_response();
  var { Request } = require_request2();
  var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
  var { fetching } = require_fetch();
  var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();
  var assert = __require("assert");
  var { getGlobalDispatcher } = require_global3();

  class Cache {
    #relevantRequestResponseList;
    constructor() {
      if (arguments[0] !== kConstruct) {
        webidl.illegalConstructor();
      }
      this.#relevantRequestResponseList = arguments[1];
    }
    async match(request, options = {}) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      const p = await this.matchAll(request, options);
      if (p.length === 0) {
        return;
      }
      return p[0];
    }
    async matchAll(request = undefined, options = {}) {
      webidl.brandCheck(this, Cache);
      if (request !== undefined)
        request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      let r = null;
      if (request !== undefined) {
        if (request instanceof Request) {
          r = request[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return [];
          }
        } else if (typeof request === "string") {
          r = new Request(request)[kState];
        }
      }
      const responses = [];
      if (request === undefined) {
        for (const requestResponse of this.#relevantRequestResponseList) {
          responses.push(requestResponse[1]);
        }
      } else {
        const requestResponses = this.#queryCache(r, options);
        for (const requestResponse of requestResponses) {
          responses.push(requestResponse[1]);
        }
      }
      const responseList = [];
      for (const response of responses) {
        const responseObject = new Response2(response.body?.source ?? null);
        const body = responseObject[kState].body;
        responseObject[kState] = response;
        responseObject[kState].body = body;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseList.push(responseObject);
      }
      return Object.freeze(responseList);
    }
    async add(request) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
      request = webidl.converters.RequestInfo(request);
      const requests = [request];
      const responseArrayPromise = this.addAll(requests);
      return await responseArrayPromise;
    }
    async addAll(requests) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
      requests = webidl.converters["sequence<RequestInfo>"](requests);
      const responsePromises = [];
      const requestList = [];
      for (const request of requests) {
        if (typeof request === "string") {
          continue;
        }
        const r = request[kState];
        if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.addAll",
            message: "Expected http/s scheme when method is not GET."
          });
        }
      }
      const fetchControllers = [];
      for (const request of requests) {
        const r = new Request(request)[kState];
        if (!urlIsHttpHttpsScheme(r.url)) {
          throw webidl.errors.exception({
            header: "Cache.addAll",
            message: "Expected http/s scheme."
          });
        }
        r.initiator = "fetch";
        r.destination = "subresource";
        requestList.push(r);
        const responsePromise = createDeferredPromise();
        fetchControllers.push(fetching({
          request: r,
          dispatcher: getGlobalDispatcher(),
          processResponse(response) {
            if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
              responsePromise.reject(webidl.errors.exception({
                header: "Cache.addAll",
                message: "Received an invalid status code or the request failed."
              }));
            } else if (response.headersList.contains("vary")) {
              const fieldValues = getFieldValues(response.headersList.get("vary"));
              for (const fieldValue of fieldValues) {
                if (fieldValue === "*") {
                  responsePromise.reject(webidl.errors.exception({
                    header: "Cache.addAll",
                    message: "invalid vary field value"
                  }));
                  for (const controller of fetchControllers) {
                    controller.abort();
                  }
                  return;
                }
              }
            }
          },
          processResponseEndOfBody(response) {
            if (response.aborted) {
              responsePromise.reject(new DOMException("aborted", "AbortError"));
              return;
            }
            responsePromise.resolve(response);
          }
        }));
        responsePromises.push(responsePromise.promise);
      }
      const p = Promise.all(responsePromises);
      const responses = await p;
      const operations = [];
      let index = 0;
      for (const response of responses) {
        const operation = {
          type: "put",
          request: requestList[index],
          response
        };
        operations.push(operation);
        index++;
      }
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      try {
        this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve(undefined);
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async put(request, response) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
      request = webidl.converters.RequestInfo(request);
      response = webidl.converters.Response(response);
      let innerRequest = null;
      if (request instanceof Request) {
        innerRequest = request[kState];
      } else {
        innerRequest = new Request(request)[kState];
      }
      if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
        throw webidl.errors.exception({
          header: "Cache.put",
          message: "Expected an http/s scheme when method is not GET"
        });
      }
      const innerResponse = response[kState];
      if (innerResponse.status === 206) {
        throw webidl.errors.exception({
          header: "Cache.put",
          message: "Got 206 status"
        });
      }
      if (innerResponse.headersList.contains("vary")) {
        const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            throw webidl.errors.exception({
              header: "Cache.put",
              message: "Got * vary field value"
            });
          }
        }
      }
      if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
        throw webidl.errors.exception({
          header: "Cache.put",
          message: "Response body is locked or disturbed"
        });
      }
      const clonedResponse = cloneResponse(innerResponse);
      const bodyReadPromise = createDeferredPromise();
      if (innerResponse.body != null) {
        const stream = innerResponse.body.stream;
        const reader = stream.getReader();
        readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
      } else {
        bodyReadPromise.resolve(undefined);
      }
      const operations = [];
      const operation = {
        type: "put",
        request: innerRequest,
        response: clonedResponse
      };
      operations.push(operation);
      const bytes = await bodyReadPromise.promise;
      if (clonedResponse.body != null) {
        clonedResponse.body.source = bytes;
      }
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      try {
        this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve();
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async delete(request, options = {}) {
      webidl.brandCheck(this, Cache);
      webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      let r = null;
      if (request instanceof Request) {
        r = request[kState];
        if (r.method !== "GET" && !options.ignoreMethod) {
          return false;
        }
      } else {
        assert(typeof request === "string");
        r = new Request(request)[kState];
      }
      const operations = [];
      const operation = {
        type: "delete",
        request: r,
        options
      };
      operations.push(operation);
      const cacheJobPromise = createDeferredPromise();
      let errorData = null;
      let requestResponses;
      try {
        requestResponses = this.#batchCacheOperations(operations);
      } catch (e) {
        errorData = e;
      }
      queueMicrotask(() => {
        if (errorData === null) {
          cacheJobPromise.resolve(!!requestResponses?.length);
        } else {
          cacheJobPromise.reject(errorData);
        }
      });
      return cacheJobPromise.promise;
    }
    async keys(request = undefined, options = {}) {
      webidl.brandCheck(this, Cache);
      if (request !== undefined)
        request = webidl.converters.RequestInfo(request);
      options = webidl.converters.CacheQueryOptions(options);
      let r = null;
      if (request !== undefined) {
        if (request instanceof Request) {
          r = request[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return [];
          }
        } else if (typeof request === "string") {
          r = new Request(request)[kState];
        }
      }
      const promise = createDeferredPromise();
      const requests = [];
      if (request === undefined) {
        for (const requestResponse of this.#relevantRequestResponseList) {
          requests.push(requestResponse[0]);
        }
      } else {
        const requestResponses = this.#queryCache(r, options);
        for (const requestResponse of requestResponses) {
          requests.push(requestResponse[0]);
        }
      }
      queueMicrotask(() => {
        const requestList = [];
        for (const request2 of requests) {
          const requestObject = new Request("https://a");
          requestObject[kState] = request2;
          requestObject[kHeaders][kHeadersList] = request2.headersList;
          requestObject[kHeaders][kGuard] = "immutable";
          requestObject[kRealm] = request2.client;
          requestList.push(requestObject);
        }
        promise.resolve(Object.freeze(requestList));
      });
      return promise.promise;
    }
    #batchCacheOperations(operations) {
      const cache = this.#relevantRequestResponseList;
      const backupCache = [...cache];
      const addedItems = [];
      const resultList = [];
      try {
        for (const operation of operations) {
          if (operation.type !== "delete" && operation.type !== "put") {
            throw webidl.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: 'operation type does not match "delete" or "put"'
            });
          }
          if (operation.type === "delete" && operation.response != null) {
            throw webidl.errors.exception({
              header: "Cache.#batchCacheOperations",
              message: "delete operation should not have an associated response"
            });
          }
          if (this.#queryCache(operation.request, operation.options, addedItems).length) {
            throw new DOMException("???", "InvalidStateError");
          }
          let requestResponses;
          if (operation.type === "delete") {
            requestResponses = this.#queryCache(operation.request, operation.options);
            if (requestResponses.length === 0) {
              return [];
            }
            for (const requestResponse of requestResponses) {
              const idx = cache.indexOf(requestResponse);
              assert(idx !== -1);
              cache.splice(idx, 1);
            }
          } else if (operation.type === "put") {
            if (operation.response == null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "put operation should have an associated response"
              });
            }
            const r = operation.request;
            if (!urlIsHttpHttpsScheme(r.url)) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "expected http or https scheme"
              });
            }
            if (r.method !== "GET") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "not get method"
              });
            }
            if (operation.options != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "options must not be defined"
              });
            }
            requestResponses = this.#queryCache(operation.request);
            for (const requestResponse of requestResponses) {
              const idx = cache.indexOf(requestResponse);
              assert(idx !== -1);
              cache.splice(idx, 1);
            }
            cache.push([operation.request, operation.response]);
            addedItems.push([operation.request, operation.response]);
          }
          resultList.push([operation.request, operation.response]);
        }
        return resultList;
      } catch (e) {
        this.#relevantRequestResponseList.length = 0;
        this.#relevantRequestResponseList = backupCache;
        throw e;
      }
    }
    #queryCache(requestQuery, options, targetStorage) {
      const resultList = [];
      const storage = targetStorage ?? this.#relevantRequestResponseList;
      for (const requestResponse of storage) {
        const [cachedRequest, cachedResponse] = requestResponse;
        if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
          resultList.push(requestResponse);
        }
      }
      return resultList;
    }
    #requestMatchesCachedItem(requestQuery, request, response = null, options) {
      const queryURL = new URL(requestQuery.url);
      const cachedURL = new URL(request.url);
      if (options?.ignoreSearch) {
        cachedURL.search = "";
        queryURL.search = "";
      }
      if (!urlEquals(queryURL, cachedURL, true)) {
        return false;
      }
      if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
        return true;
      }
      const fieldValues = getFieldValues(response.headersList.get("vary"));
      for (const fieldValue of fieldValues) {
        if (fieldValue === "*") {
          return false;
        }
        const requestValue = request.headersList.get(fieldValue);
        const queryValue = requestQuery.headersList.get(fieldValue);
        if (requestValue !== queryValue) {
          return false;
        }
      }
      return true;
    }
  }
  Object.defineProperties(Cache.prototype, {
    [Symbol.toStringTag]: {
      value: "Cache",
      configurable: true
    },
    match: kEnumerableProperty,
    matchAll: kEnumerableProperty,
    add: kEnumerableProperty,
    addAll: kEnumerableProperty,
    put: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
  });
  var cacheQueryOptionConverters = [
    {
      key: "ignoreSearch",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "ignoreMethod",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "ignoreVary",
      converter: webidl.converters.boolean,
      defaultValue: false
    }
  ];
  webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
  webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
    ...cacheQueryOptionConverters,
    {
      key: "cacheName",
      converter: webidl.converters.DOMString
    }
  ]);
  webidl.converters.Response = webidl.interfaceConverter(Response2);
  webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(webidl.converters.RequestInfo);
  module.exports = {
    Cache
  };
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS((exports, module) => {
  var { kConstruct } = require_symbols4();
  var { Cache } = require_cache();
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();

  class CacheStorage {
    #caches = new Map;
    constructor() {
      if (arguments[0] !== kConstruct) {
        webidl.illegalConstructor();
      }
    }
    async match(request, options = {}) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
      request = webidl.converters.RequestInfo(request);
      options = webidl.converters.MultiCacheQueryOptions(options);
      if (options.cacheName != null) {
        if (this.#caches.has(options.cacheName)) {
          const cacheList = this.#caches.get(options.cacheName);
          const cache = new Cache(kConstruct, cacheList);
          return await cache.match(request, options);
        }
      } else {
        for (const cacheList of this.#caches.values()) {
          const cache = new Cache(kConstruct, cacheList);
          const response = await cache.match(request, options);
          if (response !== undefined) {
            return response;
          }
        }
      }
    }
    async has(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
      cacheName = webidl.converters.DOMString(cacheName);
      return this.#caches.has(cacheName);
    }
    async open(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
      cacheName = webidl.converters.DOMString(cacheName);
      if (this.#caches.has(cacheName)) {
        const cache2 = this.#caches.get(cacheName);
        return new Cache(kConstruct, cache2);
      }
      const cache = [];
      this.#caches.set(cacheName, cache);
      return new Cache(kConstruct, cache);
    }
    async delete(cacheName) {
      webidl.brandCheck(this, CacheStorage);
      webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
      cacheName = webidl.converters.DOMString(cacheName);
      return this.#caches.delete(cacheName);
    }
    async keys() {
      webidl.brandCheck(this, CacheStorage);
      const keys = this.#caches.keys();
      return [...keys];
    }
  }
  Object.defineProperties(CacheStorage.prototype, {
    [Symbol.toStringTag]: {
      value: "CacheStorage",
      configurable: true
    },
    match: kEnumerableProperty,
    has: kEnumerableProperty,
    open: kEnumerableProperty,
    delete: kEnumerableProperty,
    keys: kEnumerableProperty
  });
  module.exports = {
    CacheStorage
  };
});

// node_modules/undici/lib/cookies/constants.js
var require_constants3 = __commonJS((exports, module) => {
  var maxAttributeValueSize = 1024;
  var maxNameValuePairSize = 4096;
  module.exports = {
    maxAttributeValueSize,
    maxNameValuePairSize
  };
});

// node_modules/undici/lib/cookies/util.js
var require_util6 = __commonJS((exports, module) => {
  var isCTLExcludingHtab = function(value) {
    if (value.length === 0) {
      return false;
    }
    for (const char of value) {
      const code = char.charCodeAt(0);
      if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
        return false;
      }
    }
  };
  var validateCookieName = function(name) {
    for (const char of name) {
      const code = char.charCodeAt(0);
      if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
        throw new Error("Invalid cookie name");
      }
    }
  };
  var validateCookieValue = function(value) {
    for (const char of value) {
      const code = char.charCodeAt(0);
      if (code < 33 || code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
        throw new Error("Invalid header value");
      }
    }
  };
  var validateCookiePath = function(path) {
    for (const char of path) {
      const code = char.charCodeAt(0);
      if (code < 33 || char === ";") {
        throw new Error("Invalid cookie path");
      }
    }
  };
  var validateCookieDomain = function(domain) {
    if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
      throw new Error("Invalid cookie domain");
    }
  };
  var toIMFDate = function(date) {
    if (typeof date === "number") {
      date = new Date(date);
    }
    const days = [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ];
    const months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    const dayName = days[date.getUTCDay()];
    const day = date.getUTCDate().toString().padStart(2, "0");
    const month = months[date.getUTCMonth()];
    const year = date.getUTCFullYear();
    const hour = date.getUTCHours().toString().padStart(2, "0");
    const minute = date.getUTCMinutes().toString().padStart(2, "0");
    const second = date.getUTCSeconds().toString().padStart(2, "0");
    return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
  };
  var validateCookieMaxAge = function(maxAge) {
    if (maxAge < 0) {
      throw new Error("Invalid cookie max-age");
    }
  };
  var stringify = function(cookie) {
    if (cookie.name.length === 0) {
      return null;
    }
    validateCookieName(cookie.name);
    validateCookieValue(cookie.value);
    const out = [`${cookie.name}=${cookie.value}`];
    if (cookie.name.startsWith("__Secure-")) {
      cookie.secure = true;
    }
    if (cookie.name.startsWith("__Host-")) {
      cookie.secure = true;
      cookie.domain = null;
      cookie.path = "/";
    }
    if (cookie.secure) {
      out.push("Secure");
    }
    if (cookie.httpOnly) {
      out.push("HttpOnly");
    }
    if (typeof cookie.maxAge === "number") {
      validateCookieMaxAge(cookie.maxAge);
      out.push(`Max-Age=${cookie.maxAge}`);
    }
    if (cookie.domain) {
      validateCookieDomain(cookie.domain);
      out.push(`Domain=${cookie.domain}`);
    }
    if (cookie.path) {
      validateCookiePath(cookie.path);
      out.push(`Path=${cookie.path}`);
    }
    if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
      out.push(`Expires=${toIMFDate(cookie.expires)}`);
    }
    if (cookie.sameSite) {
      out.push(`SameSite=${cookie.sameSite}`);
    }
    for (const part of cookie.unparsed) {
      if (!part.includes("=")) {
        throw new Error("Invalid unparsed");
      }
      const [key, ...value] = part.split("=");
      out.push(`${key.trim()}=${value.join("=")}`);
    }
    return out.join("; ");
  };
  var getHeadersList = function(headers) {
    if (headers[kHeadersList]) {
      return headers[kHeadersList];
    }
    if (!kHeadersListNode) {
      kHeadersListNode = Object.getOwnPropertySymbols(headers).find((symbol) => symbol.description === "headers list");
      assert(kHeadersListNode, "Headers cannot be parsed");
    }
    const headersList = headers[kHeadersListNode];
    assert(headersList);
    return headersList;
  };
  var assert = __require("assert");
  var { kHeadersList } = require_symbols();
  var kHeadersListNode;
  module.exports = {
    isCTLExcludingHtab,
    stringify,
    getHeadersList
  };
});

// node_modules/undici/lib/cookies/parse.js
var require_parse2 = __commonJS((exports, module) => {
  var parseSetCookie = function(header) {
    if (isCTLExcludingHtab(header)) {
      return null;
    }
    let nameValuePair = "";
    let unparsedAttributes = "";
    let name = "";
    let value = "";
    if (header.includes(";")) {
      const position = { position: 0 };
      nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
      unparsedAttributes = header.slice(position.position);
    } else {
      nameValuePair = header;
    }
    if (!nameValuePair.includes("=")) {
      value = nameValuePair;
    } else {
      const position = { position: 0 };
      name = collectASequenceOfCodePointsFast("=", nameValuePair, position);
      value = nameValuePair.slice(position.position + 1);
    }
    name = name.trim();
    value = value.trim();
    if (name.length + value.length > maxNameValuePairSize) {
      return null;
    }
    return {
      name,
      value,
      ...parseUnparsedAttributes(unparsedAttributes)
    };
  };
  var parseUnparsedAttributes = function(unparsedAttributes, cookieAttributeList = {}) {
    if (unparsedAttributes.length === 0) {
      return cookieAttributeList;
    }
    assert(unparsedAttributes[0] === ";");
    unparsedAttributes = unparsedAttributes.slice(1);
    let cookieAv = "";
    if (unparsedAttributes.includes(";")) {
      cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, { position: 0 });
      unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
    } else {
      cookieAv = unparsedAttributes;
      unparsedAttributes = "";
    }
    let attributeName = "";
    let attributeValue = "";
    if (cookieAv.includes("=")) {
      const position = { position: 0 };
      attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position);
      attributeValue = cookieAv.slice(position.position + 1);
    } else {
      attributeName = cookieAv;
    }
    attributeName = attributeName.trim();
    attributeValue = attributeValue.trim();
    if (attributeValue.length > maxAttributeValueSize) {
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    const attributeNameLowercase = attributeName.toLowerCase();
    if (attributeNameLowercase === "expires") {
      const expiryTime = new Date(attributeValue);
      cookieAttributeList.expires = expiryTime;
    } else if (attributeNameLowercase === "max-age") {
      const charCode = attributeValue.charCodeAt(0);
      if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      if (!/^\d+$/.test(attributeValue)) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const deltaSeconds = Number(attributeValue);
      cookieAttributeList.maxAge = deltaSeconds;
    } else if (attributeNameLowercase === "domain") {
      let cookieDomain = attributeValue;
      if (cookieDomain[0] === ".") {
        cookieDomain = cookieDomain.slice(1);
      }
      cookieDomain = cookieDomain.toLowerCase();
      cookieAttributeList.domain = cookieDomain;
    } else if (attributeNameLowercase === "path") {
      let cookiePath = "";
      if (attributeValue.length === 0 || attributeValue[0] !== "/") {
        cookiePath = "/";
      } else {
        cookiePath = attributeValue;
      }
      cookieAttributeList.path = cookiePath;
    } else if (attributeNameLowercase === "secure") {
      cookieAttributeList.secure = true;
    } else if (attributeNameLowercase === "httponly") {
      cookieAttributeList.httpOnly = true;
    } else if (attributeNameLowercase === "samesite") {
      let enforcement = "Default";
      const attributeValueLowercase = attributeValue.toLowerCase();
      if (attributeValueLowercase.includes("none")) {
        enforcement = "None";
      }
      if (attributeValueLowercase.includes("strict")) {
        enforcement = "Strict";
      }
      if (attributeValueLowercase.includes("lax")) {
        enforcement = "Lax";
      }
      cookieAttributeList.sameSite = enforcement;
    } else {
      cookieAttributeList.unparsed ??= [];
      cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
    }
    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
  };
  var { maxNameValuePairSize, maxAttributeValueSize } = require_constants3();
  var { isCTLExcludingHtab } = require_util6();
  var { collectASequenceOfCodePointsFast } = require_dataURL();
  var assert = __require("assert");
  module.exports = {
    parseSetCookie,
    parseUnparsedAttributes
  };
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS((exports, module) => {
  var getCookies = function(headers) {
    webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    const cookie = headers.get("cookie");
    const out = {};
    if (!cookie) {
      return out;
    }
    for (const piece of cookie.split(";")) {
      const [name, ...value] = piece.split("=");
      out[name.trim()] = value.join("=");
    }
    return out;
  };
  var deleteCookie = function(headers, name, attributes) {
    webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    name = webidl.converters.DOMString(name);
    attributes = webidl.converters.DeleteCookieAttributes(attributes);
    setCookie(headers, {
      name,
      value: "",
      expires: new Date(0),
      ...attributes
    });
  };
  var getSetCookies = function(headers) {
    webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    const cookies = getHeadersList(headers).cookies;
    if (!cookies) {
      return [];
    }
    return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
  };
  var setCookie = function(headers, cookie) {
    webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
    webidl.brandCheck(headers, Headers2, { strict: false });
    cookie = webidl.converters.Cookie(cookie);
    const str = stringify(cookie);
    if (str) {
      headers.append("Set-Cookie", stringify(cookie));
    }
  };
  var { parseSetCookie } = require_parse2();
  var { stringify, getHeadersList } = require_util6();
  var { webidl } = require_webidl();
  var { Headers: Headers2 } = require_headers();
  webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "path",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "domain",
      defaultValue: null
    }
  ]);
  webidl.converters.Cookie = webidl.dictionaryConverter([
    {
      converter: webidl.converters.DOMString,
      key: "name"
    },
    {
      converter: webidl.converters.DOMString,
      key: "value"
    },
    {
      converter: webidl.nullableConverter((value) => {
        if (typeof value === "number") {
          return webidl.converters["unsigned long long"](value);
        }
        return new Date(value);
      }),
      key: "expires",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters["long long"]),
      key: "maxAge",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "domain",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.DOMString),
      key: "path",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.boolean),
      key: "secure",
      defaultValue: null
    },
    {
      converter: webidl.nullableConverter(webidl.converters.boolean),
      key: "httpOnly",
      defaultValue: null
    },
    {
      converter: webidl.converters.USVString,
      key: "sameSite",
      allowedValues: ["Strict", "Lax", "None"]
    },
    {
      converter: webidl.sequenceConverter(webidl.converters.DOMString),
      key: "unparsed",
      defaultValue: []
    }
  ]);
  module.exports = {
    getCookies,
    deleteCookie,
    getSetCookies,
    setCookie
  };
});

// node_modules/undici/lib/websocket/constants.js
var require_constants4 = __commonJS((exports, module) => {
  var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
  var staticPropertyDescriptors = {
    enumerable: true,
    writable: false,
    configurable: false
  };
  var states = {
    CONNECTING: 0,
    OPEN: 1,
    CLOSING: 2,
    CLOSED: 3
  };
  var opcodes = {
    CONTINUATION: 0,
    TEXT: 1,
    BINARY: 2,
    CLOSE: 8,
    PING: 9,
    PONG: 10
  };
  var maxUnsigned16Bit = 2 ** 16 - 1;
  var parserStates = {
    INFO: 0,
    PAYLOADLENGTH_16: 2,
    PAYLOADLENGTH_64: 3,
    READ_DATA: 4
  };
  var emptyBuffer = Buffer.allocUnsafe(0);
  module.exports = {
    uid,
    staticPropertyDescriptors,
    states,
    opcodes,
    maxUnsigned16Bit,
    parserStates,
    emptyBuffer
  };
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS((exports, module) => {
  module.exports = {
    kWebSocketURL: Symbol("url"),
    kReadyState: Symbol("ready state"),
    kController: Symbol("controller"),
    kResponse: Symbol("response"),
    kBinaryType: Symbol("binary type"),
    kSentClose: Symbol("sent close"),
    kReceivedClose: Symbol("received close"),
    kByteParser: Symbol("byte parser")
  };
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS((exports, module) => {
  var { webidl } = require_webidl();
  var { kEnumerableProperty } = require_util();
  var { MessagePort } = __require("worker_threads");

  class MessageEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
      super(type, eventInitDict);
      this.#eventInit = eventInitDict;
    }
    get data() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.data;
    }
    get origin() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.origin;
    }
    get lastEventId() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.lastEventId;
    }
    get source() {
      webidl.brandCheck(this, MessageEvent);
      return this.#eventInit.source;
    }
    get ports() {
      webidl.brandCheck(this, MessageEvent);
      if (!Object.isFrozen(this.#eventInit.ports)) {
        Object.freeze(this.#eventInit.ports);
      }
      return this.#eventInit.ports;
    }
    initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
      webidl.brandCheck(this, MessageEvent);
      webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
      return new MessageEvent(type, {
        bubbles,
        cancelable,
        data,
        origin,
        lastEventId,
        source,
        ports
      });
    }
  }

  class CloseEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
      super(type, eventInitDict);
      this.#eventInit = eventInitDict;
    }
    get wasClean() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.wasClean;
    }
    get code() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.code;
    }
    get reason() {
      webidl.brandCheck(this, CloseEvent);
      return this.#eventInit.reason;
    }
  }

  class ErrorEvent extends Event {
    #eventInit;
    constructor(type, eventInitDict) {
      webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
      super(type, eventInitDict);
      type = webidl.converters.DOMString(type);
      eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
      this.#eventInit = eventInitDict;
    }
    get message() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.message;
    }
    get filename() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.filename;
    }
    get lineno() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.lineno;
    }
    get colno() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.colno;
    }
    get error() {
      webidl.brandCheck(this, ErrorEvent);
      return this.#eventInit.error;
    }
  }
  Object.defineProperties(MessageEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "MessageEvent",
      configurable: true
    },
    data: kEnumerableProperty,
    origin: kEnumerableProperty,
    lastEventId: kEnumerableProperty,
    source: kEnumerableProperty,
    ports: kEnumerableProperty,
    initMessageEvent: kEnumerableProperty
  });
  Object.defineProperties(CloseEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "CloseEvent",
      configurable: true
    },
    reason: kEnumerableProperty,
    code: kEnumerableProperty,
    wasClean: kEnumerableProperty
  });
  Object.defineProperties(ErrorEvent.prototype, {
    [Symbol.toStringTag]: {
      value: "ErrorEvent",
      configurable: true
    },
    message: kEnumerableProperty,
    filename: kEnumerableProperty,
    lineno: kEnumerableProperty,
    colno: kEnumerableProperty,
    error: kEnumerableProperty
  });
  webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
  webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(webidl.converters.MessagePort);
  var eventInit = [
    {
      key: "bubbles",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "cancelable",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "composed",
      converter: webidl.converters.boolean,
      defaultValue: false
    }
  ];
  webidl.converters.MessageEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "data",
      converter: webidl.converters.any,
      defaultValue: null
    },
    {
      key: "origin",
      converter: webidl.converters.USVString,
      defaultValue: ""
    },
    {
      key: "lastEventId",
      converter: webidl.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "source",
      converter: webidl.nullableConverter(webidl.converters.MessagePort),
      defaultValue: null
    },
    {
      key: "ports",
      converter: webidl.converters["sequence<MessagePort>"],
      get defaultValue() {
        return [];
      }
    }
  ]);
  webidl.converters.CloseEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "wasClean",
      converter: webidl.converters.boolean,
      defaultValue: false
    },
    {
      key: "code",
      converter: webidl.converters["unsigned short"],
      defaultValue: 0
    },
    {
      key: "reason",
      converter: webidl.converters.USVString,
      defaultValue: ""
    }
  ]);
  webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
    ...eventInit,
    {
      key: "message",
      converter: webidl.converters.DOMString,
      defaultValue: ""
    },
    {
      key: "filename",
      converter: webidl.converters.USVString,
      defaultValue: ""
    },
    {
      key: "lineno",
      converter: webidl.converters["unsigned long"],
      defaultValue: 0
    },
    {
      key: "colno",
      converter: webidl.converters["unsigned long"],
      defaultValue: 0
    },
    {
      key: "error",
      converter: webidl.converters.any
    }
  ]);
  module.exports = {
    MessageEvent,
    CloseEvent,
    ErrorEvent
  };
});

// node_modules/undici/lib/websocket/util.js
var require_util7 = __commonJS((exports, module) => {
  var isEstablished = function(ws) {
    return ws[kReadyState] === states.OPEN;
  };
  var isClosing = function(ws) {
    return ws[kReadyState] === states.CLOSING;
  };
  var isClosed = function(ws) {
    return ws[kReadyState] === states.CLOSED;
  };
  var fireEvent = function(e, target, eventConstructor = Event, eventInitDict) {
    const event = new eventConstructor(e, eventInitDict);
    target.dispatchEvent(event);
  };
  var websocketMessageReceived = function(ws, type, data) {
    if (ws[kReadyState] !== states.OPEN) {
      return;
    }
    let dataForEvent;
    if (type === opcodes.TEXT) {
      try {
        dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
      } catch {
        failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
        return;
      }
    } else if (type === opcodes.BINARY) {
      if (ws[kBinaryType] === "blob") {
        dataForEvent = new Blob([data]);
      } else {
        dataForEvent = new Uint8Array(data).buffer;
      }
    }
    fireEvent("message", ws, MessageEvent, {
      origin: ws[kWebSocketURL].origin,
      data: dataForEvent
    });
  };
  var isValidSubprotocol = function(protocol) {
    if (protocol.length === 0) {
      return false;
    }
    for (const char of protocol) {
      const code = char.charCodeAt(0);
      if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || code === 9) {
        return false;
      }
    }
    return true;
  };
  var isValidStatusCode = function(code) {
    if (code >= 1000 && code < 1015) {
      return code !== 1004 && code !== 1005 && code !== 1006;
    }
    return code >= 3000 && code <= 4999;
  };
  var failWebsocketConnection = function(ws, reason) {
    const { [kController]: controller, [kResponse]: response } = ws;
    controller.abort();
    if (response?.socket && !response.socket.destroyed) {
      response.socket.destroy();
    }
    if (reason) {
      fireEvent("error", ws, ErrorEvent, {
        error: new Error(reason)
      });
    }
  };
  var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
  var { states, opcodes } = require_constants4();
  var { MessageEvent, ErrorEvent } = require_events();
  module.exports = {
    isEstablished,
    isClosing,
    isClosed,
    fireEvent,
    isValidSubprotocol,
    isValidStatusCode,
    failWebsocketConnection,
    websocketMessageReceived
  };
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS((exports, module) => {
  var establishWebSocketConnection = function(url, protocols, ws, onEstablish, options) {
    const requestURL = url;
    requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
    const request = makeRequest({
      urlList: [requestURL],
      serviceWorkers: "none",
      referrer: "no-referrer",
      mode: "websocket",
      credentials: "include",
      cache: "no-store",
      redirect: "error"
    });
    if (options.headers) {
      const headersList = new Headers2(options.headers)[kHeadersList];
      request.headersList = headersList;
    }
    const keyValue = randomBytes(16).toString("base64");
    request.headersList.append("sec-websocket-key", keyValue);
    request.headersList.append("sec-websocket-version", "13");
    for (const protocol of protocols) {
      request.headersList.append("sec-websocket-protocol", protocol);
    }
    const permessageDeflate = "";
    const controller = fetching({
      request,
      useParallelQueue: true,
      dispatcher: options.dispatcher ?? getGlobalDispatcher(),
      processResponse(response) {
        if (response.type === "error" || response.status !== 101) {
          failWebsocketConnection(ws, "Received network error or non-101 status code.");
          return;
        }
        if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
          failWebsocketConnection(ws, "Server did not respond with sent protocols.");
          return;
        }
        if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
          failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
          return;
        }
        if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
          failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
          return;
        }
        const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
        const digest = createHash("sha1").update(keyValue + uid).digest("base64");
        if (secWSAccept !== digest) {
          failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
          return;
        }
        const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
        if (secExtension !== null && secExtension !== permessageDeflate) {
          failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
          return;
        }
        const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
        if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
          failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
          return;
        }
        response.socket.on("data", onSocketData);
        response.socket.on("close", onSocketClose);
        response.socket.on("error", onSocketError);
        if (channels.open.hasSubscribers) {
          channels.open.publish({
            address: response.socket.address(),
            protocol: secProtocol,
            extensions: secExtension
          });
        }
        onEstablish(response);
      }
    });
    return controller;
  };
  var onSocketData = function(chunk) {
    if (!this.ws[kByteParser].write(chunk)) {
      this.pause();
    }
  };
  var onSocketClose = function() {
    const { ws } = this;
    const wasClean = ws[kSentClose] && ws[kReceivedClose];
    let code = 1005;
    let reason = "";
    const result = ws[kByteParser].closingInfo;
    if (result) {
      code = result.code ?? 1005;
      reason = result.reason;
    } else if (!ws[kSentClose]) {
      code = 1006;
    }
    ws[kReadyState] = states.CLOSED;
    fireEvent("close", ws, CloseEvent, {
      wasClean,
      code,
      reason
    });
    if (channels.close.hasSubscribers) {
      channels.close.publish({
        websocket: ws,
        code,
        reason
      });
    }
  };
  var onSocketError = function(error) {
    const { ws } = this;
    ws[kReadyState] = states.CLOSING;
    if (channels.socketError.hasSubscribers) {
      channels.socketError.publish(error);
    }
    this.destroy();
  };
  var { randomBytes, createHash } = __require("crypto");
  var diagnosticsChannel = __require("diagnostics_channel");
  var { uid, states } = require_constants4();
  var {
    kReadyState,
    kSentClose,
    kByteParser,
    kReceivedClose
  } = require_symbols5();
  var { fireEvent, failWebsocketConnection } = require_util7();
  var { CloseEvent } = require_events();
  var { makeRequest } = require_request2();
  var { fetching } = require_fetch();
  var { Headers: Headers2 } = require_headers();
  var { getGlobalDispatcher } = require_global3();
  var { kHeadersList } = require_symbols();
  var channels = {};
  channels.open = diagnosticsChannel.channel("undici:websocket:open");
  channels.close = diagnosticsChannel.channel("undici:websocket:close");
  channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
  module.exports = {
    establishWebSocketConnection
  };
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS((exports, module) => {
  var { randomBytes } = __require("crypto");
  var { maxUnsigned16Bit } = require_constants4();

  class WebsocketFrameSend {
    constructor(data) {
      this.frameData = data;
      this.maskKey = randomBytes(4);
    }
    createFrame(opcode) {
      const bodyLength = this.frameData?.byteLength ?? 0;
      let payloadLength = bodyLength;
      let offset = 6;
      if (bodyLength > maxUnsigned16Bit) {
        offset += 8;
        payloadLength = 127;
      } else if (bodyLength > 125) {
        offset += 2;
        payloadLength = 126;
      }
      const buffer = Buffer.allocUnsafe(bodyLength + offset);
      buffer[0] = buffer[1] = 0;
      buffer[0] |= 128;
      buffer[0] = (buffer[0] & 240) + opcode;
      /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
      buffer[offset - 4] = this.maskKey[0];
      buffer[offset - 3] = this.maskKey[1];
      buffer[offset - 2] = this.maskKey[2];
      buffer[offset - 1] = this.maskKey[3];
      buffer[1] = payloadLength;
      if (payloadLength === 126) {
        buffer.writeUInt16BE(bodyLength, 2);
      } else if (payloadLength === 127) {
        buffer[2] = buffer[3] = 0;
        buffer.writeUIntBE(bodyLength, 4, 6);
      }
      buffer[1] |= 128;
      for (let i = 0;i < bodyLength; i++) {
        buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
      }
      return buffer;
    }
  }
  module.exports = {
    WebsocketFrameSend
  };
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS((exports, module) => {
  var { Writable } = __require("stream");
  var diagnosticsChannel = __require("diagnostics_channel");
  var { parserStates, opcodes, states, emptyBuffer } = require_constants4();
  var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
  var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util7();
  var { WebsocketFrameSend } = require_frame();
  var channels = {};
  channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
  channels.pong = diagnosticsChannel.channel("undici:websocket:pong");

  class ByteParser extends Writable {
    #buffers = [];
    #byteOffset = 0;
    #state = parserStates.INFO;
    #info = {};
    #fragments = [];
    constructor(ws) {
      super();
      this.ws = ws;
    }
    _write(chunk, _, callback) {
      this.#buffers.push(chunk);
      this.#byteOffset += chunk.length;
      this.run(callback);
    }
    run(callback) {
      while (true) {
        if (this.#state === parserStates.INFO) {
          if (this.#byteOffset < 2) {
            return callback();
          }
          const buffer = this.consume(2);
          this.#info.fin = (buffer[0] & 128) !== 0;
          this.#info.opcode = buffer[0] & 15;
          this.#info.originalOpcode ??= this.#info.opcode;
          this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
          if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
            failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
            return;
          }
          const payloadLength = buffer[1] & 127;
          if (payloadLength <= 125) {
            this.#info.payloadLength = payloadLength;
            this.#state = parserStates.READ_DATA;
          } else if (payloadLength === 126) {
            this.#state = parserStates.PAYLOADLENGTH_16;
          } else if (payloadLength === 127) {
            this.#state = parserStates.PAYLOADLENGTH_64;
          }
          if (this.#info.fragmented && payloadLength > 125) {
            failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
            return;
          } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
            failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
            return;
          } else if (this.#info.opcode === opcodes.CLOSE) {
            if (payloadLength === 1) {
              failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
              return;
            }
            const body = this.consume(payloadLength);
            this.#info.closeInfo = this.parseCloseBody(false, body);
            if (!this.ws[kSentClose]) {
              const body2 = Buffer.allocUnsafe(2);
              body2.writeUInt16BE(this.#info.closeInfo.code, 0);
              const closeFrame = new WebsocketFrameSend(body2);
              this.ws[kResponse].socket.write(closeFrame.createFrame(opcodes.CLOSE), (err) => {
                if (!err) {
                  this.ws[kSentClose] = true;
                }
              });
            }
            this.ws[kReadyState] = states.CLOSING;
            this.ws[kReceivedClose] = true;
            this.end();
            return;
          } else if (this.#info.opcode === opcodes.PING) {
            const body = this.consume(payloadLength);
            if (!this.ws[kReceivedClose]) {
              const frame = new WebsocketFrameSend(body);
              this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
              if (channels.ping.hasSubscribers) {
                channels.ping.publish({
                  payload: body
                });
              }
            }
            this.#state = parserStates.INFO;
            if (this.#byteOffset > 0) {
              continue;
            } else {
              callback();
              return;
            }
          } else if (this.#info.opcode === opcodes.PONG) {
            const body = this.consume(payloadLength);
            if (channels.pong.hasSubscribers) {
              channels.pong.publish({
                payload: body
              });
            }
            if (this.#byteOffset > 0) {
              continue;
            } else {
              callback();
              return;
            }
          }
        } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
          if (this.#byteOffset < 2) {
            return callback();
          }
          const buffer = this.consume(2);
          this.#info.payloadLength = buffer.readUInt16BE(0);
          this.#state = parserStates.READ_DATA;
        } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
          if (this.#byteOffset < 8) {
            return callback();
          }
          const buffer = this.consume(8);
          const upper = buffer.readUInt32BE(0);
          if (upper > 2 ** 31 - 1) {
            failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
            return;
          }
          const lower = buffer.readUInt32BE(4);
          this.#info.payloadLength = (upper << 8) + lower;
          this.#state = parserStates.READ_DATA;
        } else if (this.#state === parserStates.READ_DATA) {
          if (this.#byteOffset < this.#info.payloadLength) {
            return callback();
          } else if (this.#byteOffset >= this.#info.payloadLength) {
            const body = this.consume(this.#info.payloadLength);
            this.#fragments.push(body);
            if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
              const fullMessage = Buffer.concat(this.#fragments);
              websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
              this.#info = {};
              this.#fragments.length = 0;
            }
            this.#state = parserStates.INFO;
          }
        }
        if (this.#byteOffset > 0) {
          continue;
        } else {
          callback();
          break;
        }
      }
    }
    consume(n) {
      if (n > this.#byteOffset) {
        return null;
      } else if (n === 0) {
        return emptyBuffer;
      }
      if (this.#buffers[0].length === n) {
        this.#byteOffset -= this.#buffers[0].length;
        return this.#buffers.shift();
      }
      const buffer = Buffer.allocUnsafe(n);
      let offset = 0;
      while (offset !== n) {
        const next = this.#buffers[0];
        const { length } = next;
        if (length + offset === n) {
          buffer.set(this.#buffers.shift(), offset);
          break;
        } else if (length + offset > n) {
          buffer.set(next.subarray(0, n - offset), offset);
          this.#buffers[0] = next.subarray(n - offset);
          break;
        } else {
          buffer.set(this.#buffers.shift(), offset);
          offset += next.length;
        }
      }
      this.#byteOffset -= n;
      return buffer;
    }
    parseCloseBody(onlyCode, data) {
      let code;
      if (data.length >= 2) {
        code = data.readUInt16BE(0);
      }
      if (onlyCode) {
        if (!isValidStatusCode(code)) {
          return null;
        }
        return { code };
      }
      let reason = data.subarray(2);
      if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
        reason = reason.subarray(3);
      }
      if (code !== undefined && !isValidStatusCode(code)) {
        return null;
      }
      try {
        reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
      } catch {
        return null;
      }
      return { code, reason };
    }
    get closingInfo() {
      return this.#info.closeInfo;
    }
  }
  module.exports = {
    ByteParser
  };
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS((exports, module) => {
  var { webidl } = require_webidl();
  var { DOMException: DOMException2 } = require_constants();
  var { URLSerializer } = require_dataURL();
  var { getGlobalOrigin } = require_global2();
  var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants4();
  var {
    kWebSocketURL,
    kReadyState,
    kController,
    kBinaryType,
    kResponse,
    kSentClose,
    kByteParser
  } = require_symbols5();
  var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util7();
  var { establishWebSocketConnection } = require_connection();
  var { WebsocketFrameSend } = require_frame();
  var { ByteParser } = require_receiver();
  var { kEnumerableProperty, isBlobLike } = require_util();
  var { getGlobalDispatcher } = require_global3();
  var { types } = __require("util");
  var experimentalWarned = false;

  class WebSocket extends EventTarget {
    #events = {
      open: null,
      error: null,
      close: null,
      message: null
    };
    #bufferedAmount = 0;
    #protocol = "";
    #extensions = "";
    constructor(url, protocols = []) {
      super();
      webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
      if (!experimentalWarned) {
        experimentalWarned = true;
        process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
          code: "UNDICI-WS"
        });
      }
      const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
      url = webidl.converters.USVString(url);
      protocols = options.protocols;
      const baseURL = getGlobalOrigin();
      let urlRecord;
      try {
        urlRecord = new URL(url, baseURL);
      } catch (e) {
        throw new DOMException2(e, "SyntaxError");
      }
      if (urlRecord.protocol === "http:") {
        urlRecord.protocol = "ws:";
      } else if (urlRecord.protocol === "https:") {
        urlRecord.protocol = "wss:";
      }
      if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
        throw new DOMException2(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
      }
      if (urlRecord.hash || urlRecord.href.endsWith("#")) {
        throw new DOMException2("Got fragment", "SyntaxError");
      }
      if (typeof protocols === "string") {
        protocols = [protocols];
      }
      if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
        throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
        throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
      }
      this[kWebSocketURL] = new URL(urlRecord.href);
      this[kController] = establishWebSocketConnection(urlRecord, protocols, this, (response) => this.#onConnectionEstablished(response), options);
      this[kReadyState] = WebSocket.CONNECTING;
      this[kBinaryType] = "blob";
    }
    close(code = undefined, reason = undefined) {
      webidl.brandCheck(this, WebSocket);
      if (code !== undefined) {
        code = webidl.converters["unsigned short"](code, { clamp: true });
      }
      if (reason !== undefined) {
        reason = webidl.converters.USVString(reason);
      }
      if (code !== undefined) {
        if (code !== 1000 && (code < 3000 || code > 4999)) {
          throw new DOMException2("invalid code", "InvalidAccessError");
        }
      }
      let reasonByteLength = 0;
      if (reason !== undefined) {
        reasonByteLength = Buffer.byteLength(reason);
        if (reasonByteLength > 123) {
          throw new DOMException2(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
        }
      }
      if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {
      } else if (!isEstablished(this)) {
        failWebsocketConnection(this, "Connection was closed before it was established.");
        this[kReadyState] = WebSocket.CLOSING;
      } else if (!isClosing(this)) {
        const frame = new WebsocketFrameSend;
        if (code !== undefined && reason === undefined) {
          frame.frameData = Buffer.allocUnsafe(2);
          frame.frameData.writeUInt16BE(code, 0);
        } else if (code !== undefined && reason !== undefined) {
          frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
          frame.frameData.writeUInt16BE(code, 0);
          frame.frameData.write(reason, 2, "utf-8");
        } else {
          frame.frameData = emptyBuffer;
        }
        const socket = this[kResponse].socket;
        socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
          if (!err) {
            this[kSentClose] = true;
          }
        });
        this[kReadyState] = states.CLOSING;
      } else {
        this[kReadyState] = WebSocket.CLOSING;
      }
    }
    send(data) {
      webidl.brandCheck(this, WebSocket);
      webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
      data = webidl.converters.WebSocketSendData(data);
      if (this[kReadyState] === WebSocket.CONNECTING) {
        throw new DOMException2("Sent before connected.", "InvalidStateError");
      }
      if (!isEstablished(this) || isClosing(this)) {
        return;
      }
      const socket = this[kResponse].socket;
      if (typeof data === "string") {
        const value = Buffer.from(data);
        const frame = new WebsocketFrameSend(value);
        const buffer = frame.createFrame(opcodes.TEXT);
        this.#bufferedAmount += value.byteLength;
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength;
        });
      } else if (types.isArrayBuffer(data)) {
        const value = Buffer.from(data);
        const frame = new WebsocketFrameSend(value);
        const buffer = frame.createFrame(opcodes.BINARY);
        this.#bufferedAmount += value.byteLength;
        socket.write(buffer, () => {
          this.#bufferedAmount -= value.byteLength;
        });
      } else if (ArrayBuffer.isView(data)) {
        const ab = Buffer.from(data, data.byteOffset, data.byteLength);
        const frame = new WebsocketFrameSend(ab);
        const buffer = frame.createFrame(opcodes.BINARY);
        this.#bufferedAmount += ab.byteLength;
        socket.write(buffer, () => {
          this.#bufferedAmount -= ab.byteLength;
        });
      } else if (isBlobLike(data)) {
        const frame = new WebsocketFrameSend;
        data.arrayBuffer().then((ab) => {
          const value = Buffer.from(ab);
          frame.frameData = value;
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        });
      }
    }
    get readyState() {
      webidl.brandCheck(this, WebSocket);
      return this[kReadyState];
    }
    get bufferedAmount() {
      webidl.brandCheck(this, WebSocket);
      return this.#bufferedAmount;
    }
    get url() {
      webidl.brandCheck(this, WebSocket);
      return URLSerializer(this[kWebSocketURL]);
    }
    get extensions() {
      webidl.brandCheck(this, WebSocket);
      return this.#extensions;
    }
    get protocol() {
      webidl.brandCheck(this, WebSocket);
      return this.#protocol;
    }
    get onopen() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.open;
    }
    set onopen(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.open) {
        this.removeEventListener("open", this.#events.open);
      }
      if (typeof fn === "function") {
        this.#events.open = fn;
        this.addEventListener("open", fn);
      } else {
        this.#events.open = null;
      }
    }
    get onerror() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.error;
    }
    set onerror(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.error) {
        this.removeEventListener("error", this.#events.error);
      }
      if (typeof fn === "function") {
        this.#events.error = fn;
        this.addEventListener("error", fn);
      } else {
        this.#events.error = null;
      }
    }
    get onclose() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.close;
    }
    set onclose(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.close) {
        this.removeEventListener("close", this.#events.close);
      }
      if (typeof fn === "function") {
        this.#events.close = fn;
        this.addEventListener("close", fn);
      } else {
        this.#events.close = null;
      }
    }
    get onmessage() {
      webidl.brandCheck(this, WebSocket);
      return this.#events.message;
    }
    set onmessage(fn) {
      webidl.brandCheck(this, WebSocket);
      if (this.#events.message) {
        this.removeEventListener("message", this.#events.message);
      }
      if (typeof fn === "function") {
        this.#events.message = fn;
        this.addEventListener("message", fn);
      } else {
        this.#events.message = null;
      }
    }
    get binaryType() {
      webidl.brandCheck(this, WebSocket);
      return this[kBinaryType];
    }
    set binaryType(type) {
      webidl.brandCheck(this, WebSocket);
      if (type !== "blob" && type !== "arraybuffer") {
        this[kBinaryType] = "blob";
      } else {
        this[kBinaryType] = type;
      }
    }
    #onConnectionEstablished(response) {
      this[kResponse] = response;
      const parser = new ByteParser(this);
      parser.on("drain", function onParserDrain() {
        this.ws[kResponse].socket.resume();
      });
      response.socket.ws = this;
      this[kByteParser] = parser;
      this[kReadyState] = states.OPEN;
      const extensions = response.headersList.get("sec-websocket-extensions");
      if (extensions !== null) {
        this.#extensions = extensions;
      }
      const protocol = response.headersList.get("sec-websocket-protocol");
      if (protocol !== null) {
        this.#protocol = protocol;
      }
      fireEvent("open", this);
    }
  }
  WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
  WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
  WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
  WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
  Object.defineProperties(WebSocket.prototype, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors,
    url: kEnumerableProperty,
    readyState: kEnumerableProperty,
    bufferedAmount: kEnumerableProperty,
    onopen: kEnumerableProperty,
    onerror: kEnumerableProperty,
    onclose: kEnumerableProperty,
    close: kEnumerableProperty,
    onmessage: kEnumerableProperty,
    binaryType: kEnumerableProperty,
    send: kEnumerableProperty,
    extensions: kEnumerableProperty,
    protocol: kEnumerableProperty,
    [Symbol.toStringTag]: {
      value: "WebSocket",
      writable: false,
      enumerable: false,
      configurable: true
    }
  });
  Object.defineProperties(WebSocket, {
    CONNECTING: staticPropertyDescriptors,
    OPEN: staticPropertyDescriptors,
    CLOSING: staticPropertyDescriptors,
    CLOSED: staticPropertyDescriptors
  });
  webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString);
  webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
    if (webidl.util.Type(V) === "Object" && (Symbol.iterator in V)) {
      return webidl.converters["sequence<DOMString>"](V);
    }
    return webidl.converters.DOMString(V);
  };
  webidl.converters.WebSocketInit = webidl.dictionaryConverter([
    {
      key: "protocols",
      converter: webidl.converters["DOMString or sequence<DOMString>"],
      get defaultValue() {
        return [];
      }
    },
    {
      key: "dispatcher",
      converter: (V) => V,
      get defaultValue() {
        return getGlobalDispatcher();
      }
    },
    {
      key: "headers",
      converter: webidl.nullableConverter(webidl.converters.HeadersInit)
    }
  ]);
  webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
    if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
      return webidl.converters.WebSocketInit(V);
    }
    return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
  };
  webidl.converters.WebSocketSendData = function(V) {
    if (webidl.util.Type(V) === "Object") {
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
        return webidl.converters.BufferSource(V);
      }
    }
    return webidl.converters.USVString(V);
  };
  module.exports = {
    WebSocket
  };
});

// node_modules/undici/index.js
var require_undici = __commonJS((exports, module) => {
  var makeDispatcher = function(fn) {
    return (url, opts, handler) => {
      if (typeof opts === "function") {
        handler = opts;
        opts = null;
      }
      if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
        throw new InvalidArgumentError("invalid url");
      }
      if (opts != null && typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (opts && opts.path != null) {
        if (typeof opts.path !== "string") {
          throw new InvalidArgumentError("invalid opts.path");
        }
        let path = opts.path;
        if (!opts.path.startsWith("/")) {
          path = `/${path}`;
        }
        url = new URL(util.parseOrigin(url).origin + path);
      } else {
        if (!opts) {
          opts = typeof url === "object" ? url : {};
        }
        url = util.parseURL(url);
      }
      const { agent, dispatcher = getGlobalDispatcher() } = opts;
      if (agent) {
        throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
      }
      return fn.call(dispatcher, {
        ...opts,
        origin: url.origin,
        path: url.search ? `${url.pathname}${url.search}` : url.pathname,
        method: opts.method || (opts.body ? "PUT" : "GET")
      }, handler);
    };
  };
  var Client = require_client();
  var Dispatcher = require_dispatcher();
  var errors = require_errors2();
  var Pool = require_pool();
  var BalancedPool = require_balanced_pool();
  var Agent = require_agent();
  var util = require_util();
  var { InvalidArgumentError } = errors;
  var api = require_api();
  var buildConnector = require_connect();
  var MockClient = require_mock_client();
  var MockAgent = require_mock_agent();
  var MockPool = require_mock_pool();
  var mockErrors = require_mock_errors();
  var ProxyAgent = require_proxy_agent();
  var { getGlobalDispatcher, setGlobalDispatcher } = require_global3();
  var DecoratorHandler = require_DecoratorHandler();
  var RedirectHandler = require_RedirectHandler();
  var createRedirectInterceptor = require_redirectInterceptor();
  var hasCrypto;
  try {
    __require("crypto");
    hasCrypto = true;
  } catch {
    hasCrypto = false;
  }
  Object.assign(Dispatcher.prototype, api);
  exports.Dispatcher = Dispatcher;
  exports.Client = Client;
  exports.Pool = Pool;
  exports.BalancedPool = BalancedPool;
  exports.Agent = Agent;
  exports.ProxyAgent = ProxyAgent;
  exports.DecoratorHandler = DecoratorHandler;
  exports.RedirectHandler = RedirectHandler;
  exports.createRedirectInterceptor = createRedirectInterceptor;
  exports.buildConnector = buildConnector;
  exports.errors = errors;
  exports.setGlobalDispatcher = setGlobalDispatcher;
  exports.getGlobalDispatcher = getGlobalDispatcher;
  if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
    let fetchImpl = null;
    exports.fetch = async function fetch(resource) {
      if (!fetchImpl) {
        fetchImpl = require_fetch().fetch;
      }
      try {
        return await fetchImpl(...arguments);
      } catch (err) {
        if (typeof err === "object") {
          Error.captureStackTrace(err, this);
        }
        throw err;
      }
    };
    exports.Headers = require_headers().Headers;
    exports.Response = require_response().Response;
    exports.Request = require_request2().Request;
    exports.FormData = require_formdata().FormData;
    exports.File = require_file().File;
    exports.FileReader = require_filereader().FileReader;
    const { setGlobalOrigin, getGlobalOrigin } = require_global2();
    exports.setGlobalOrigin = setGlobalOrigin;
    exports.getGlobalOrigin = getGlobalOrigin;
    const { CacheStorage } = require_cachestorage();
    const { kConstruct } = require_symbols4();
    exports.caches = new CacheStorage(kConstruct);
  }
  if (util.nodeMajor >= 16) {
    const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
    exports.deleteCookie = deleteCookie;
    exports.getCookies = getCookies;
    exports.getSetCookies = getSetCookies;
    exports.setCookie = setCookie;
    const { parseMIMEType, serializeAMimeType } = require_dataURL();
    exports.parseMIMEType = parseMIMEType;
    exports.serializeAMimeType = serializeAMimeType;
  }
  if (util.nodeMajor >= 18 && hasCrypto) {
    const { WebSocket } = require_websocket();
    exports.WebSocket = WebSocket;
  }
  exports.request = makeDispatcher(api.request);
  exports.stream = makeDispatcher(api.stream);
  exports.pipeline = makeDispatcher(api.pipeline);
  exports.connect = makeDispatcher(api.connect);
  exports.upgrade = makeDispatcher(api.upgrade);
  exports.MockClient = MockClient;
  exports.MockPool = MockPool;
  exports.MockAgent = MockAgent;
  exports.mockErrors = mockErrors;
});

// node_modules/swagger-client/lib/helpers/fetch-ponyfill-undici.node.js
var require_fetch_ponyfill_undici_node = __commonJS((exports) => {
  exports.__esModule = true;
  exports.Blob = undefined;
  var _buffer = __require("buffer");
  var _undici = require_undici();
  exports.fetch = _undici.fetch;
  exports.Response = _undici.Response;
  exports.Headers = _undici.Headers;
  exports.Request = _undici.Request;
  exports.FormData = _undici.FormData;
  exports.File = _undici.File;
  var BlobU = typeof _undici.fetch === "undefined" ? undefined : _buffer.Blob;
  exports.Blob = BlobU;
});

// node_modules/node-domexception/index.js
var require_node_domexception = __commonJS((exports, module) => {
  /*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
  if (!globalThis.DOMException) {
    try {
      const { MessageChannel } = __require("worker_threads"), port = new MessageChannel().port1, ab = new ArrayBuffer;
      port.postMessage(ab, [ab, ab]);
    } catch (err) {
      err.constructor.name === "DOMException" && (globalThis.DOMException = err.constructor);
    }
  }
  module.exports = globalThis.DOMException;
});

// node_modules/web-streams-polyfill/dist/ponyfill.es2018.js
var require_ponyfill_es2018 = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.WebStreamsPolyfill = {}));
  })(exports, function(exports2) {
    const SymbolPolyfill = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol : (description) => `Symbol(${description})`;
    function noop() {
      return;
    }
    function getGlobals() {
      if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else if (typeof global !== "undefined") {
        return global;
      }
      return;
    }
    const globals = getGlobals();
    function typeIsObject(x) {
      return typeof x === "object" && x !== null || typeof x === "function";
    }
    const rethrowAssertionErrorRejection = noop;
    const originalPromise = Promise;
    const originalPromiseThen = Promise.prototype.then;
    const originalPromiseResolve = Promise.resolve.bind(originalPromise);
    const originalPromiseReject = Promise.reject.bind(originalPromise);
    function newPromise(executor) {
      return new originalPromise(executor);
    }
    function promiseResolvedWith(value) {
      return originalPromiseResolve(value);
    }
    function promiseRejectedWith(reason) {
      return originalPromiseReject(reason);
    }
    function PerformPromiseThen(promise, onFulfilled, onRejected) {
      return originalPromiseThen.call(promise, onFulfilled, onRejected);
    }
    function uponPromise(promise, onFulfilled, onRejected) {
      PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);
    }
    function uponFulfillment(promise, onFulfilled) {
      uponPromise(promise, onFulfilled);
    }
    function uponRejection(promise, onRejected) {
      uponPromise(promise, undefined, onRejected);
    }
    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
      return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
    }
    function setPromiseIsHandledToTrue(promise) {
      PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);
    }
    const queueMicrotask2 = (() => {
      const globalQueueMicrotask = globals && globals.queueMicrotask;
      if (typeof globalQueueMicrotask === "function") {
        return globalQueueMicrotask;
      }
      const resolvedPromise = promiseResolvedWith(undefined);
      return (fn) => PerformPromiseThen(resolvedPromise, fn);
    })();
    function reflectCall(F, V, args) {
      if (typeof F !== "function") {
        throw new TypeError("Argument is not a function");
      }
      return Function.prototype.apply.call(F, V, args);
    }
    function promiseCall(F, V, args) {
      try {
        return promiseResolvedWith(reflectCall(F, V, args));
      } catch (value) {
        return promiseRejectedWith(value);
      }
    }
    const QUEUE_MAX_ARRAY_SIZE = 16384;

    class SimpleQueue {
      constructor() {
        this._cursor = 0;
        this._size = 0;
        this._front = {
          _elements: [],
          _next: undefined
        };
        this._back = this._front;
        this._cursor = 0;
        this._size = 0;
      }
      get length() {
        return this._size;
      }
      push(element) {
        const oldBack = this._back;
        let newBack = oldBack;
        if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
          newBack = {
            _elements: [],
            _next: undefined
          };
        }
        oldBack._elements.push(element);
        if (newBack !== oldBack) {
          this._back = newBack;
          oldBack._next = newBack;
        }
        ++this._size;
      }
      shift() {
        const oldFront = this._front;
        let newFront = oldFront;
        const oldCursor = this._cursor;
        let newCursor = oldCursor + 1;
        const elements = oldFront._elements;
        const element = elements[oldCursor];
        if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
          newFront = oldFront._next;
          newCursor = 0;
        }
        --this._size;
        this._cursor = newCursor;
        if (oldFront !== newFront) {
          this._front = newFront;
        }
        elements[oldCursor] = undefined;
        return element;
      }
      forEach(callback) {
        let i = this._cursor;
        let node = this._front;
        let elements = node._elements;
        while (i !== elements.length || node._next !== undefined) {
          if (i === elements.length) {
            node = node._next;
            elements = node._elements;
            i = 0;
            if (elements.length === 0) {
              break;
            }
          }
          callback(elements[i]);
          ++i;
        }
      }
      peek() {
        const front = this._front;
        const cursor = this._cursor;
        return front._elements[cursor];
      }
    }
    function ReadableStreamReaderGenericInitialize(reader, stream) {
      reader._ownerReadableStream = stream;
      stream._reader = reader;
      if (stream._state === "readable") {
        defaultReaderClosedPromiseInitialize(reader);
      } else if (stream._state === "closed") {
        defaultReaderClosedPromiseInitializeAsResolved(reader);
      } else {
        defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
      }
    }
    function ReadableStreamReaderGenericCancel(reader, reason) {
      const stream = reader._ownerReadableStream;
      return ReadableStreamCancel(stream, reason);
    }
    function ReadableStreamReaderGenericRelease(reader) {
      if (reader._ownerReadableStream._state === "readable") {
        defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
      } else {
        defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
      }
      reader._ownerReadableStream._reader = undefined;
      reader._ownerReadableStream = undefined;
    }
    function readerLockException(name) {
      return new TypeError("Cannot " + name + " a stream using a released reader");
    }
    function defaultReaderClosedPromiseInitialize(reader) {
      reader._closedPromise = newPromise((resolve, reject) => {
        reader._closedPromise_resolve = resolve;
        reader._closedPromise_reject = reject;
      });
    }
    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
      defaultReaderClosedPromiseInitialize(reader);
      defaultReaderClosedPromiseReject(reader, reason);
    }
    function defaultReaderClosedPromiseInitializeAsResolved(reader) {
      defaultReaderClosedPromiseInitialize(reader);
      defaultReaderClosedPromiseResolve(reader);
    }
    function defaultReaderClosedPromiseReject(reader, reason) {
      if (reader._closedPromise_reject === undefined) {
        return;
      }
      setPromiseIsHandledToTrue(reader._closedPromise);
      reader._closedPromise_reject(reason);
      reader._closedPromise_resolve = undefined;
      reader._closedPromise_reject = undefined;
    }
    function defaultReaderClosedPromiseResetToRejected(reader, reason) {
      defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
    }
    function defaultReaderClosedPromiseResolve(reader) {
      if (reader._closedPromise_resolve === undefined) {
        return;
      }
      reader._closedPromise_resolve(undefined);
      reader._closedPromise_resolve = undefined;
      reader._closedPromise_reject = undefined;
    }
    const AbortSteps = SymbolPolyfill("[[AbortSteps]]");
    const ErrorSteps = SymbolPolyfill("[[ErrorSteps]]");
    const CancelSteps = SymbolPolyfill("[[CancelSteps]]");
    const PullSteps = SymbolPolyfill("[[PullSteps]]");
    const NumberIsFinite = Number.isFinite || function(x) {
      return typeof x === "number" && isFinite(x);
    };
    const MathTrunc = Math.trunc || function(v) {
      return v < 0 ? Math.ceil(v) : Math.floor(v);
    };
    function isDictionary(x) {
      return typeof x === "object" || typeof x === "function";
    }
    function assertDictionary(obj, context) {
      if (obj !== undefined && !isDictionary(obj)) {
        throw new TypeError(`${context} is not an object.`);
      }
    }
    function assertFunction(x, context) {
      if (typeof x !== "function") {
        throw new TypeError(`${context} is not a function.`);
      }
    }
    function isObject(x) {
      return typeof x === "object" && x !== null || typeof x === "function";
    }
    function assertObject(x, context) {
      if (!isObject(x)) {
        throw new TypeError(`${context} is not an object.`);
      }
    }
    function assertRequiredArgument(x, position, context) {
      if (x === undefined) {
        throw new TypeError(`Parameter ${position} is required in '${context}'.`);
      }
    }
    function assertRequiredField(x, field, context) {
      if (x === undefined) {
        throw new TypeError(`${field} is required in '${context}'.`);
      }
    }
    function convertUnrestrictedDouble(value) {
      return Number(value);
    }
    function censorNegativeZero(x) {
      return x === 0 ? 0 : x;
    }
    function integerPart(x) {
      return censorNegativeZero(MathTrunc(x));
    }
    function convertUnsignedLongLongWithEnforceRange(value, context) {
      const lowerBound = 0;
      const upperBound = Number.MAX_SAFE_INTEGER;
      let x = Number(value);
      x = censorNegativeZero(x);
      if (!NumberIsFinite(x)) {
        throw new TypeError(`${context} is not a finite number`);
      }
      x = integerPart(x);
      if (x < lowerBound || x > upperBound) {
        throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
      }
      if (!NumberIsFinite(x) || x === 0) {
        return 0;
      }
      return x;
    }
    function assertReadableStream(x, context) {
      if (!IsReadableStream(x)) {
        throw new TypeError(`${context} is not a ReadableStream.`);
      }
    }
    function AcquireReadableStreamDefaultReader(stream) {
      return new ReadableStreamDefaultReader(stream);
    }
    function ReadableStreamAddReadRequest(stream, readRequest) {
      stream._reader._readRequests.push(readRequest);
    }
    function ReadableStreamFulfillReadRequest(stream, chunk, done) {
      const reader = stream._reader;
      const readRequest = reader._readRequests.shift();
      if (done) {
        readRequest._closeSteps();
      } else {
        readRequest._chunkSteps(chunk);
      }
    }
    function ReadableStreamGetNumReadRequests(stream) {
      return stream._reader._readRequests.length;
    }
    function ReadableStreamHasDefaultReader(stream) {
      const reader = stream._reader;
      if (reader === undefined) {
        return false;
      }
      if (!IsReadableStreamDefaultReader(reader)) {
        return false;
      }
      return true;
    }

    class ReadableStreamDefaultReader {
      constructor(stream) {
        assertRequiredArgument(stream, 1, "ReadableStreamDefaultReader");
        assertReadableStream(stream, "First parameter");
        if (IsReadableStreamLocked(stream)) {
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        }
        ReadableStreamReaderGenericInitialize(this, stream);
        this._readRequests = new SimpleQueue;
      }
      get closed() {
        if (!IsReadableStreamDefaultReader(this)) {
          return promiseRejectedWith(defaultReaderBrandCheckException("closed"));
        }
        return this._closedPromise;
      }
      cancel(reason = undefined) {
        if (!IsReadableStreamDefaultReader(this)) {
          return promiseRejectedWith(defaultReaderBrandCheckException("cancel"));
        }
        if (this._ownerReadableStream === undefined) {
          return promiseRejectedWith(readerLockException("cancel"));
        }
        return ReadableStreamReaderGenericCancel(this, reason);
      }
      read() {
        if (!IsReadableStreamDefaultReader(this)) {
          return promiseRejectedWith(defaultReaderBrandCheckException("read"));
        }
        if (this._ownerReadableStream === undefined) {
          return promiseRejectedWith(readerLockException("read from"));
        }
        let resolvePromise;
        let rejectPromise;
        const promise = newPromise((resolve, reject) => {
          resolvePromise = resolve;
          rejectPromise = reject;
        });
        const readRequest = {
          _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
          _closeSteps: () => resolvePromise({ value: undefined, done: true }),
          _errorSteps: (e) => rejectPromise(e)
        };
        ReadableStreamDefaultReaderRead(this, readRequest);
        return promise;
      }
      releaseLock() {
        if (!IsReadableStreamDefaultReader(this)) {
          throw defaultReaderBrandCheckException("releaseLock");
        }
        if (this._ownerReadableStream === undefined) {
          return;
        }
        if (this._readRequests.length > 0) {
          throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
        }
        ReadableStreamReaderGenericRelease(this);
      }
    }
    Object.defineProperties(ReadableStreamDefaultReader.prototype, {
      cancel: { enumerable: true },
      read: { enumerable: true },
      releaseLock: { enumerable: true },
      closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamDefaultReader",
        configurable: true
      });
    }
    function IsReadableStreamDefaultReader(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_readRequests")) {
        return false;
      }
      return x instanceof ReadableStreamDefaultReader;
    }
    function ReadableStreamDefaultReaderRead(reader, readRequest) {
      const stream = reader._ownerReadableStream;
      stream._disturbed = true;
      if (stream._state === "closed") {
        readRequest._closeSteps();
      } else if (stream._state === "errored") {
        readRequest._errorSteps(stream._storedError);
      } else {
        stream._readableStreamController[PullSteps](readRequest);
      }
    }
    function defaultReaderBrandCheckException(name) {
      return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
    }
    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
    }).prototype);

    class ReadableStreamAsyncIteratorImpl {
      constructor(reader, preventCancel) {
        this._ongoingPromise = undefined;
        this._isFinished = false;
        this._reader = reader;
        this._preventCancel = preventCancel;
      }
      next() {
        const nextSteps = () => this._nextSteps();
        this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();
        return this._ongoingPromise;
      }
      return(value) {
        const returnSteps = () => this._returnSteps(value);
        return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();
      }
      _nextSteps() {
        if (this._isFinished) {
          return Promise.resolve({ value: undefined, done: true });
        }
        const reader = this._reader;
        if (reader._ownerReadableStream === undefined) {
          return promiseRejectedWith(readerLockException("iterate"));
        }
        let resolvePromise;
        let rejectPromise;
        const promise = newPromise((resolve, reject) => {
          resolvePromise = resolve;
          rejectPromise = reject;
        });
        const readRequest = {
          _chunkSteps: (chunk) => {
            this._ongoingPromise = undefined;
            queueMicrotask2(() => resolvePromise({ value: chunk, done: false }));
          },
          _closeSteps: () => {
            this._ongoingPromise = undefined;
            this._isFinished = true;
            ReadableStreamReaderGenericRelease(reader);
            resolvePromise({ value: undefined, done: true });
          },
          _errorSteps: (reason) => {
            this._ongoingPromise = undefined;
            this._isFinished = true;
            ReadableStreamReaderGenericRelease(reader);
            rejectPromise(reason);
          }
        };
        ReadableStreamDefaultReaderRead(reader, readRequest);
        return promise;
      }
      _returnSteps(value) {
        if (this._isFinished) {
          return Promise.resolve({ value, done: true });
        }
        this._isFinished = true;
        const reader = this._reader;
        if (reader._ownerReadableStream === undefined) {
          return promiseRejectedWith(readerLockException("finish iterating"));
        }
        if (!this._preventCancel) {
          const result = ReadableStreamReaderGenericCancel(reader, value);
          ReadableStreamReaderGenericRelease(reader);
          return transformPromiseWith(result, () => ({ value, done: true }));
        }
        ReadableStreamReaderGenericRelease(reader);
        return promiseResolvedWith({ value, done: true });
      }
    }
    const ReadableStreamAsyncIteratorPrototype = {
      next() {
        if (!IsReadableStreamAsyncIterator(this)) {
          return promiseRejectedWith(streamAsyncIteratorBrandCheckException("next"));
        }
        return this._asyncIteratorImpl.next();
      },
      return(value) {
        if (!IsReadableStreamAsyncIterator(this)) {
          return promiseRejectedWith(streamAsyncIteratorBrandCheckException("return"));
        }
        return this._asyncIteratorImpl.return(value);
      }
    };
    if (AsyncIteratorPrototype !== undefined) {
      Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
    }
    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
      const reader = AcquireReadableStreamDefaultReader(stream);
      const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
      const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
      iterator._asyncIteratorImpl = impl;
      return iterator;
    }
    function IsReadableStreamAsyncIterator(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_asyncIteratorImpl")) {
        return false;
      }
      try {
        return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
      } catch (_a) {
        return false;
      }
    }
    function streamAsyncIteratorBrandCheckException(name) {
      return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
    }
    const NumberIsNaN = Number.isNaN || function(x) {
      return x !== x;
    };
    function CreateArrayFromList(elements) {
      return elements.slice();
    }
    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
      new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
    }
    function TransferArrayBuffer(O) {
      return O;
    }
    function IsDetachedBuffer(O) {
      return false;
    }
    function ArrayBufferSlice(buffer, begin, end) {
      if (buffer.slice) {
        return buffer.slice(begin, end);
      }
      const length = end - begin;
      const slice = new ArrayBuffer(length);
      CopyDataBlockBytes(slice, 0, buffer, begin, length);
      return slice;
    }
    function IsNonNegativeNumber(v) {
      if (typeof v !== "number") {
        return false;
      }
      if (NumberIsNaN(v)) {
        return false;
      }
      if (v < 0) {
        return false;
      }
      return true;
    }
    function CloneAsUint8Array(O) {
      const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
      return new Uint8Array(buffer);
    }
    function DequeueValue(container) {
      const pair = container._queue.shift();
      container._queueTotalSize -= pair.size;
      if (container._queueTotalSize < 0) {
        container._queueTotalSize = 0;
      }
      return pair.value;
    }
    function EnqueueValueWithSize(container, value, size) {
      if (!IsNonNegativeNumber(size) || size === Infinity) {
        throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
      }
      container._queue.push({ value, size });
      container._queueTotalSize += size;
    }
    function PeekQueueValue(container) {
      const pair = container._queue.peek();
      return pair.value;
    }
    function ResetQueue(container) {
      container._queue = new SimpleQueue;
      container._queueTotalSize = 0;
    }

    class ReadableStreamBYOBRequest {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get view() {
        if (!IsReadableStreamBYOBRequest(this)) {
          throw byobRequestBrandCheckException("view");
        }
        return this._view;
      }
      respond(bytesWritten) {
        if (!IsReadableStreamBYOBRequest(this)) {
          throw byobRequestBrandCheckException("respond");
        }
        assertRequiredArgument(bytesWritten, 1, "respond");
        bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, "First parameter");
        if (this._associatedReadableByteStreamController === undefined) {
          throw new TypeError("This BYOB request has been invalidated");
        }
        if (IsDetachedBuffer(this._view.buffer))
          ;
        ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
      }
      respondWithNewView(view) {
        if (!IsReadableStreamBYOBRequest(this)) {
          throw byobRequestBrandCheckException("respondWithNewView");
        }
        assertRequiredArgument(view, 1, "respondWithNewView");
        if (!ArrayBuffer.isView(view)) {
          throw new TypeError("You can only respond with array buffer views");
        }
        if (this._associatedReadableByteStreamController === undefined) {
          throw new TypeError("This BYOB request has been invalidated");
        }
        if (IsDetachedBuffer(view.buffer))
          ;
        ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
      }
    }
    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
      respond: { enumerable: true },
      respondWithNewView: { enumerable: true },
      view: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamBYOBRequest",
        configurable: true
      });
    }

    class ReadableByteStreamController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get byobRequest() {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("byobRequest");
        }
        return ReadableByteStreamControllerGetBYOBRequest(this);
      }
      get desiredSize() {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("desiredSize");
        }
        return ReadableByteStreamControllerGetDesiredSize(this);
      }
      close() {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("close");
        }
        if (this._closeRequested) {
          throw new TypeError("The stream has already been closed; do not close it again!");
        }
        const state = this._controlledReadableByteStream._state;
        if (state !== "readable") {
          throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
        }
        ReadableByteStreamControllerClose(this);
      }
      enqueue(chunk) {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("enqueue");
        }
        assertRequiredArgument(chunk, 1, "enqueue");
        if (!ArrayBuffer.isView(chunk)) {
          throw new TypeError("chunk must be an array buffer view");
        }
        if (chunk.byteLength === 0) {
          throw new TypeError("chunk must have non-zero byteLength");
        }
        if (chunk.buffer.byteLength === 0) {
          throw new TypeError(`chunk's buffer must have non-zero byteLength`);
        }
        if (this._closeRequested) {
          throw new TypeError("stream is closed or draining");
        }
        const state = this._controlledReadableByteStream._state;
        if (state !== "readable") {
          throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
        }
        ReadableByteStreamControllerEnqueue(this, chunk);
      }
      error(e = undefined) {
        if (!IsReadableByteStreamController(this)) {
          throw byteStreamControllerBrandCheckException("error");
        }
        ReadableByteStreamControllerError(this, e);
      }
      [CancelSteps](reason) {
        ReadableByteStreamControllerClearPendingPullIntos(this);
        ResetQueue(this);
        const result = this._cancelAlgorithm(reason);
        ReadableByteStreamControllerClearAlgorithms(this);
        return result;
      }
      [PullSteps](readRequest) {
        const stream = this._controlledReadableByteStream;
        if (this._queueTotalSize > 0) {
          const entry = this._queue.shift();
          this._queueTotalSize -= entry.byteLength;
          ReadableByteStreamControllerHandleQueueDrain(this);
          const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
          readRequest._chunkSteps(view);
          return;
        }
        const autoAllocateChunkSize = this._autoAllocateChunkSize;
        if (autoAllocateChunkSize !== undefined) {
          let buffer;
          try {
            buffer = new ArrayBuffer(autoAllocateChunkSize);
          } catch (bufferE) {
            readRequest._errorSteps(bufferE);
            return;
          }
          const pullIntoDescriptor = {
            buffer,
            bufferByteLength: autoAllocateChunkSize,
            byteOffset: 0,
            byteLength: autoAllocateChunkSize,
            bytesFilled: 0,
            elementSize: 1,
            viewConstructor: Uint8Array,
            readerType: "default"
          };
          this._pendingPullIntos.push(pullIntoDescriptor);
        }
        ReadableStreamAddReadRequest(stream, readRequest);
        ReadableByteStreamControllerCallPullIfNeeded(this);
      }
    }
    Object.defineProperties(ReadableByteStreamController.prototype, {
      close: { enumerable: true },
      enqueue: { enumerable: true },
      error: { enumerable: true },
      byobRequest: { enumerable: true },
      desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableByteStreamController",
        configurable: true
      });
    }
    function IsReadableByteStreamController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableByteStream")) {
        return false;
      }
      return x instanceof ReadableByteStreamController;
    }
    function IsReadableStreamBYOBRequest(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_associatedReadableByteStreamController")) {
        return false;
      }
      return x instanceof ReadableStreamBYOBRequest;
    }
    function ReadableByteStreamControllerCallPullIfNeeded(controller) {
      const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
      if (!shouldPull) {
        return;
      }
      if (controller._pulling) {
        controller._pullAgain = true;
        return;
      }
      controller._pulling = true;
      const pullPromise = controller._pullAlgorithm();
      uponPromise(pullPromise, () => {
        controller._pulling = false;
        if (controller._pullAgain) {
          controller._pullAgain = false;
          ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
      }, (e) => {
        ReadableByteStreamControllerError(controller, e);
      });
    }
    function ReadableByteStreamControllerClearPendingPullIntos(controller) {
      ReadableByteStreamControllerInvalidateBYOBRequest(controller);
      controller._pendingPullIntos = new SimpleQueue;
    }
    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
      let done = false;
      if (stream._state === "closed") {
        done = true;
      }
      const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
      if (pullIntoDescriptor.readerType === "default") {
        ReadableStreamFulfillReadRequest(stream, filledView, done);
      } else {
        ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
      }
    }
    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
      const bytesFilled = pullIntoDescriptor.bytesFilled;
      const elementSize = pullIntoDescriptor.elementSize;
      return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
    }
    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
      controller._queue.push({ buffer, byteOffset, byteLength });
      controller._queueTotalSize += byteLength;
    }
    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
      const elementSize = pullIntoDescriptor.elementSize;
      const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
      const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
      const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
      const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
      let totalBytesToCopyRemaining = maxBytesToCopy;
      let ready = false;
      if (maxAlignedBytes > currentAlignedBytes) {
        totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
        ready = true;
      }
      const queue = controller._queue;
      while (totalBytesToCopyRemaining > 0) {
        const headOfQueue = queue.peek();
        const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
        const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
        CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
        if (headOfQueue.byteLength === bytesToCopy) {
          queue.shift();
        } else {
          headOfQueue.byteOffset += bytesToCopy;
          headOfQueue.byteLength -= bytesToCopy;
        }
        controller._queueTotalSize -= bytesToCopy;
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
        totalBytesToCopyRemaining -= bytesToCopy;
      }
      return ready;
    }
    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
      pullIntoDescriptor.bytesFilled += size;
    }
    function ReadableByteStreamControllerHandleQueueDrain(controller) {
      if (controller._queueTotalSize === 0 && controller._closeRequested) {
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(controller._controlledReadableByteStream);
      } else {
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }
    }
    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
      if (controller._byobRequest === null) {
        return;
      }
      controller._byobRequest._associatedReadableByteStreamController = undefined;
      controller._byobRequest._view = null;
      controller._byobRequest = null;
    }
    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
      while (controller._pendingPullIntos.length > 0) {
        if (controller._queueTotalSize === 0) {
          return;
        }
        const pullIntoDescriptor = controller._pendingPullIntos.peek();
        if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
          ReadableByteStreamControllerShiftPendingPullInto(controller);
          ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        }
      }
    }
    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
      const stream = controller._controlledReadableByteStream;
      let elementSize = 1;
      if (view.constructor !== DataView) {
        elementSize = view.constructor.BYTES_PER_ELEMENT;
      }
      const ctor = view.constructor;
      const buffer = TransferArrayBuffer(view.buffer);
      const pullIntoDescriptor = {
        buffer,
        bufferByteLength: buffer.byteLength,
        byteOffset: view.byteOffset,
        byteLength: view.byteLength,
        bytesFilled: 0,
        elementSize,
        viewConstructor: ctor,
        readerType: "byob"
      };
      if (controller._pendingPullIntos.length > 0) {
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        return;
      }
      if (stream._state === "closed") {
        const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
        readIntoRequest._closeSteps(emptyView);
        return;
      }
      if (controller._queueTotalSize > 0) {
        if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
          const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
          ReadableByteStreamControllerHandleQueueDrain(controller);
          readIntoRequest._chunkSteps(filledView);
          return;
        }
        if (controller._closeRequested) {
          const e = new TypeError("Insufficient bytes to fill elements in the given buffer");
          ReadableByteStreamControllerError(controller, e);
          readIntoRequest._errorSteps(e);
          return;
        }
      }
      controller._pendingPullIntos.push(pullIntoDescriptor);
      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
      ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
      const stream = controller._controlledReadableByteStream;
      if (ReadableStreamHasBYOBReader(stream)) {
        while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
          const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
          ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
        }
      }
    }
    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
      if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
        return;
      }
      ReadableByteStreamControllerShiftPendingPullInto(controller);
      const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
      if (remainderSize > 0) {
        const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
        const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
      }
      pullIntoDescriptor.bytesFilled -= remainderSize;
      ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
    }
    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
      const firstDescriptor = controller._pendingPullIntos.peek();
      ReadableByteStreamControllerInvalidateBYOBRequest(controller);
      const state = controller._controlledReadableByteStream._state;
      if (state === "closed") {
        ReadableByteStreamControllerRespondInClosedState(controller);
      } else {
        ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
      }
      ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerShiftPendingPullInto(controller) {
      const descriptor = controller._pendingPullIntos.shift();
      return descriptor;
    }
    function ReadableByteStreamControllerShouldCallPull(controller) {
      const stream = controller._controlledReadableByteStream;
      if (stream._state !== "readable") {
        return false;
      }
      if (controller._closeRequested) {
        return false;
      }
      if (!controller._started) {
        return false;
      }
      if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
        return true;
      }
      if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
        return true;
      }
      const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
      if (desiredSize > 0) {
        return true;
      }
      return false;
    }
    function ReadableByteStreamControllerClearAlgorithms(controller) {
      controller._pullAlgorithm = undefined;
      controller._cancelAlgorithm = undefined;
    }
    function ReadableByteStreamControllerClose(controller) {
      const stream = controller._controlledReadableByteStream;
      if (controller._closeRequested || stream._state !== "readable") {
        return;
      }
      if (controller._queueTotalSize > 0) {
        controller._closeRequested = true;
        return;
      }
      if (controller._pendingPullIntos.length > 0) {
        const firstPendingPullInto = controller._pendingPullIntos.peek();
        if (firstPendingPullInto.bytesFilled > 0) {
          const e = new TypeError("Insufficient bytes to fill elements in the given buffer");
          ReadableByteStreamControllerError(controller, e);
          throw e;
        }
      }
      ReadableByteStreamControllerClearAlgorithms(controller);
      ReadableStreamClose(stream);
    }
    function ReadableByteStreamControllerEnqueue(controller, chunk) {
      const stream = controller._controlledReadableByteStream;
      if (controller._closeRequested || stream._state !== "readable") {
        return;
      }
      const buffer = chunk.buffer;
      const byteOffset = chunk.byteOffset;
      const byteLength = chunk.byteLength;
      const transferredBuffer = TransferArrayBuffer(buffer);
      if (controller._pendingPullIntos.length > 0) {
        const firstPendingPullInto = controller._pendingPullIntos.peek();
        if (IsDetachedBuffer(firstPendingPullInto.buffer))
          ;
        firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
      }
      ReadableByteStreamControllerInvalidateBYOBRequest(controller);
      if (ReadableStreamHasDefaultReader(stream)) {
        if (ReadableStreamGetNumReadRequests(stream) === 0) {
          ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        } else {
          if (controller._pendingPullIntos.length > 0) {
            ReadableByteStreamControllerShiftPendingPullInto(controller);
          }
          const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
          ReadableStreamFulfillReadRequest(stream, transferredView, false);
        }
      } else if (ReadableStreamHasBYOBReader(stream)) {
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
      } else {
        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
      }
      ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerError(controller, e) {
      const stream = controller._controlledReadableByteStream;
      if (stream._state !== "readable") {
        return;
      }
      ReadableByteStreamControllerClearPendingPullIntos(controller);
      ResetQueue(controller);
      ReadableByteStreamControllerClearAlgorithms(controller);
      ReadableStreamError(stream, e);
    }
    function ReadableByteStreamControllerGetBYOBRequest(controller) {
      if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
        const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
        SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
        controller._byobRequest = byobRequest;
      }
      return controller._byobRequest;
    }
    function ReadableByteStreamControllerGetDesiredSize(controller) {
      const state = controller._controlledReadableByteStream._state;
      if (state === "errored") {
        return null;
      }
      if (state === "closed") {
        return 0;
      }
      return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableByteStreamControllerRespond(controller, bytesWritten) {
      const firstDescriptor = controller._pendingPullIntos.peek();
      const state = controller._controlledReadableByteStream._state;
      if (state === "closed") {
        if (bytesWritten !== 0) {
          throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
        }
      } else {
        if (bytesWritten === 0) {
          throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
        }
        if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
          throw new RangeError("bytesWritten out of range");
        }
      }
      firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
      ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
    }
    function ReadableByteStreamControllerRespondWithNewView(controller, view) {
      const firstDescriptor = controller._pendingPullIntos.peek();
      const state = controller._controlledReadableByteStream._state;
      if (state === "closed") {
        if (view.byteLength !== 0) {
          throw new TypeError("The view\'s length must be 0 when calling respondWithNewView() on a closed stream");
        }
      } else {
        if (view.byteLength === 0) {
          throw new TypeError("The view\'s length must be greater than 0 when calling respondWithNewView() on a readable stream");
        }
      }
      if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
        throw new RangeError("The region specified by view does not match byobRequest");
      }
      if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
        throw new RangeError("The buffer of view has different capacity than byobRequest");
      }
      if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
        throw new RangeError("The region specified by view is larger than byobRequest");
      }
      const viewByteLength = view.byteLength;
      firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
      ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
    }
    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
      controller._controlledReadableByteStream = stream;
      controller._pullAgain = false;
      controller._pulling = false;
      controller._byobRequest = null;
      controller._queue = controller._queueTotalSize = undefined;
      ResetQueue(controller);
      controller._closeRequested = false;
      controller._started = false;
      controller._strategyHWM = highWaterMark;
      controller._pullAlgorithm = pullAlgorithm;
      controller._cancelAlgorithm = cancelAlgorithm;
      controller._autoAllocateChunkSize = autoAllocateChunkSize;
      controller._pendingPullIntos = new SimpleQueue;
      stream._readableStreamController = controller;
      const startResult = startAlgorithm();
      uponPromise(promiseResolvedWith(startResult), () => {
        controller._started = true;
        ReadableByteStreamControllerCallPullIfNeeded(controller);
      }, (r) => {
        ReadableByteStreamControllerError(controller, r);
      });
    }
    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
      const controller = Object.create(ReadableByteStreamController.prototype);
      let startAlgorithm = () => {
        return;
      };
      let pullAlgorithm = () => promiseResolvedWith(undefined);
      let cancelAlgorithm = () => promiseResolvedWith(undefined);
      if (underlyingByteSource.start !== undefined) {
        startAlgorithm = () => underlyingByteSource.start(controller);
      }
      if (underlyingByteSource.pull !== undefined) {
        pullAlgorithm = () => underlyingByteSource.pull(controller);
      }
      if (underlyingByteSource.cancel !== undefined) {
        cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
      }
      const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
      if (autoAllocateChunkSize === 0) {
        throw new TypeError("autoAllocateChunkSize must be greater than 0");
      }
      SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
    }
    function SetUpReadableStreamBYOBRequest(request, controller, view) {
      request._associatedReadableByteStreamController = controller;
      request._view = view;
    }
    function byobRequestBrandCheckException(name) {
      return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
    }
    function byteStreamControllerBrandCheckException(name) {
      return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
    }
    function AcquireReadableStreamBYOBReader(stream) {
      return new ReadableStreamBYOBReader(stream);
    }
    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
      stream._reader._readIntoRequests.push(readIntoRequest);
    }
    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
      const reader = stream._reader;
      const readIntoRequest = reader._readIntoRequests.shift();
      if (done) {
        readIntoRequest._closeSteps(chunk);
      } else {
        readIntoRequest._chunkSteps(chunk);
      }
    }
    function ReadableStreamGetNumReadIntoRequests(stream) {
      return stream._reader._readIntoRequests.length;
    }
    function ReadableStreamHasBYOBReader(stream) {
      const reader = stream._reader;
      if (reader === undefined) {
        return false;
      }
      if (!IsReadableStreamBYOBReader(reader)) {
        return false;
      }
      return true;
    }

    class ReadableStreamBYOBReader {
      constructor(stream) {
        assertRequiredArgument(stream, 1, "ReadableStreamBYOBReader");
        assertReadableStream(stream, "First parameter");
        if (IsReadableStreamLocked(stream)) {
          throw new TypeError("This stream has already been locked for exclusive reading by another reader");
        }
        if (!IsReadableByteStreamController(stream._readableStreamController)) {
          throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
        }
        ReadableStreamReaderGenericInitialize(this, stream);
        this._readIntoRequests = new SimpleQueue;
      }
      get closed() {
        if (!IsReadableStreamBYOBReader(this)) {
          return promiseRejectedWith(byobReaderBrandCheckException("closed"));
        }
        return this._closedPromise;
      }
      cancel(reason = undefined) {
        if (!IsReadableStreamBYOBReader(this)) {
          return promiseRejectedWith(byobReaderBrandCheckException("cancel"));
        }
        if (this._ownerReadableStream === undefined) {
          return promiseRejectedWith(readerLockException("cancel"));
        }
        return ReadableStreamReaderGenericCancel(this, reason);
      }
      read(view) {
        if (!IsReadableStreamBYOBReader(this)) {
          return promiseRejectedWith(byobReaderBrandCheckException("read"));
        }
        if (!ArrayBuffer.isView(view)) {
          return promiseRejectedWith(new TypeError("view must be an array buffer view"));
        }
        if (view.byteLength === 0) {
          return promiseRejectedWith(new TypeError("view must have non-zero byteLength"));
        }
        if (view.buffer.byteLength === 0) {
          return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
        }
        if (IsDetachedBuffer(view.buffer))
          ;
        if (this._ownerReadableStream === undefined) {
          return promiseRejectedWith(readerLockException("read from"));
        }
        let resolvePromise;
        let rejectPromise;
        const promise = newPromise((resolve, reject) => {
          resolvePromise = resolve;
          rejectPromise = reject;
        });
        const readIntoRequest = {
          _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
          _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
          _errorSteps: (e) => rejectPromise(e)
        };
        ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
        return promise;
      }
      releaseLock() {
        if (!IsReadableStreamBYOBReader(this)) {
          throw byobReaderBrandCheckException("releaseLock");
        }
        if (this._ownerReadableStream === undefined) {
          return;
        }
        if (this._readIntoRequests.length > 0) {
          throw new TypeError("Tried to release a reader lock when that reader has pending read() calls un-settled");
        }
        ReadableStreamReaderGenericRelease(this);
      }
    }
    Object.defineProperties(ReadableStreamBYOBReader.prototype, {
      cancel: { enumerable: true },
      read: { enumerable: true },
      releaseLock: { enumerable: true },
      closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamBYOBReader",
        configurable: true
      });
    }
    function IsReadableStreamBYOBReader(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_readIntoRequests")) {
        return false;
      }
      return x instanceof ReadableStreamBYOBReader;
    }
    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
      const stream = reader._ownerReadableStream;
      stream._disturbed = true;
      if (stream._state === "errored") {
        readIntoRequest._errorSteps(stream._storedError);
      } else {
        ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
      }
    }
    function byobReaderBrandCheckException(name) {
      return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
    }
    function ExtractHighWaterMark(strategy, defaultHWM) {
      const { highWaterMark } = strategy;
      if (highWaterMark === undefined) {
        return defaultHWM;
      }
      if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
        throw new RangeError("Invalid highWaterMark");
      }
      return highWaterMark;
    }
    function ExtractSizeAlgorithm(strategy) {
      const { size } = strategy;
      if (!size) {
        return () => 1;
      }
      return size;
    }
    function convertQueuingStrategy(init, context) {
      assertDictionary(init, context);
      const highWaterMark = init === null || init === undefined ? undefined : init.highWaterMark;
      const size = init === null || init === undefined ? undefined : init.size;
      return {
        highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),
        size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)
      };
    }
    function convertQueuingStrategySize(fn, context) {
      assertFunction(fn, context);
      return (chunk) => convertUnrestrictedDouble(fn(chunk));
    }
    function convertUnderlyingSink(original, context) {
      assertDictionary(original, context);
      const abort = original === null || original === undefined ? undefined : original.abort;
      const close = original === null || original === undefined ? undefined : original.close;
      const start = original === null || original === undefined ? undefined : original.start;
      const type = original === null || original === undefined ? undefined : original.type;
      const write = original === null || original === undefined ? undefined : original.write;
      return {
        abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
        close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
        start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
        write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
        type
      };
    }
    function convertUnderlyingSinkAbortCallback(fn, original, context) {
      assertFunction(fn, context);
      return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSinkCloseCallback(fn, original, context) {
      assertFunction(fn, context);
      return () => promiseCall(fn, original, []);
    }
    function convertUnderlyingSinkStartCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertUnderlyingSinkWriteCallback(fn, original, context) {
      assertFunction(fn, context);
      return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }
    function assertWritableStream(x, context) {
      if (!IsWritableStream(x)) {
        throw new TypeError(`${context} is not a WritableStream.`);
      }
    }
    function isAbortSignal(value) {
      if (typeof value !== "object" || value === null) {
        return false;
      }
      try {
        return typeof value.aborted === "boolean";
      } catch (_a) {
        return false;
      }
    }
    const supportsAbortController = typeof AbortController === "function";
    function createAbortController() {
      if (supportsAbortController) {
        return new AbortController;
      }
      return;
    }

    class WritableStream {
      constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
        if (rawUnderlyingSink === undefined) {
          rawUnderlyingSink = null;
        } else {
          assertObject(rawUnderlyingSink, "First parameter");
        }
        const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
        const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, "First parameter");
        InitializeWritableStream(this);
        const type = underlyingSink.type;
        if (type !== undefined) {
          throw new RangeError("Invalid type is specified");
        }
        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
        const highWaterMark = ExtractHighWaterMark(strategy, 1);
        SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
      }
      get locked() {
        if (!IsWritableStream(this)) {
          throw streamBrandCheckException$2("locked");
        }
        return IsWritableStreamLocked(this);
      }
      abort(reason = undefined) {
        if (!IsWritableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$2("abort"));
        }
        if (IsWritableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("Cannot abort a stream that already has a writer"));
        }
        return WritableStreamAbort(this, reason);
      }
      close() {
        if (!IsWritableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$2("close"));
        }
        if (IsWritableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("Cannot close a stream that already has a writer"));
        }
        if (WritableStreamCloseQueuedOrInFlight(this)) {
          return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
        }
        return WritableStreamClose(this);
      }
      getWriter() {
        if (!IsWritableStream(this)) {
          throw streamBrandCheckException$2("getWriter");
        }
        return AcquireWritableStreamDefaultWriter(this);
      }
    }
    Object.defineProperties(WritableStream.prototype, {
      abort: { enumerable: true },
      close: { enumerable: true },
      getWriter: { enumerable: true },
      locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStream",
        configurable: true
      });
    }
    function AcquireWritableStreamDefaultWriter(stream) {
      return new WritableStreamDefaultWriter(stream);
    }
    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
      const stream = Object.create(WritableStream.prototype);
      InitializeWritableStream(stream);
      const controller = Object.create(WritableStreamDefaultController.prototype);
      SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
      return stream;
    }
    function InitializeWritableStream(stream) {
      stream._state = "writable";
      stream._storedError = undefined;
      stream._writer = undefined;
      stream._writableStreamController = undefined;
      stream._writeRequests = new SimpleQueue;
      stream._inFlightWriteRequest = undefined;
      stream._closeRequest = undefined;
      stream._inFlightCloseRequest = undefined;
      stream._pendingAbortRequest = undefined;
      stream._backpressure = false;
    }
    function IsWritableStream(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_writableStreamController")) {
        return false;
      }
      return x instanceof WritableStream;
    }
    function IsWritableStreamLocked(stream) {
      if (stream._writer === undefined) {
        return false;
      }
      return true;
    }
    function WritableStreamAbort(stream, reason) {
      var _a;
      if (stream._state === "closed" || stream._state === "errored") {
        return promiseResolvedWith(undefined);
      }
      stream._writableStreamController._abortReason = reason;
      (_a = stream._writableStreamController._abortController) === null || _a === undefined || _a.abort();
      const state = stream._state;
      if (state === "closed" || state === "errored") {
        return promiseResolvedWith(undefined);
      }
      if (stream._pendingAbortRequest !== undefined) {
        return stream._pendingAbortRequest._promise;
      }
      let wasAlreadyErroring = false;
      if (state === "erroring") {
        wasAlreadyErroring = true;
        reason = undefined;
      }
      const promise = newPromise((resolve, reject) => {
        stream._pendingAbortRequest = {
          _promise: undefined,
          _resolve: resolve,
          _reject: reject,
          _reason: reason,
          _wasAlreadyErroring: wasAlreadyErroring
        };
      });
      stream._pendingAbortRequest._promise = promise;
      if (!wasAlreadyErroring) {
        WritableStreamStartErroring(stream, reason);
      }
      return promise;
    }
    function WritableStreamClose(stream) {
      const state = stream._state;
      if (state === "closed" || state === "errored") {
        return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
      }
      const promise = newPromise((resolve, reject) => {
        const closeRequest = {
          _resolve: resolve,
          _reject: reject
        };
        stream._closeRequest = closeRequest;
      });
      const writer = stream._writer;
      if (writer !== undefined && stream._backpressure && state === "writable") {
        defaultWriterReadyPromiseResolve(writer);
      }
      WritableStreamDefaultControllerClose(stream._writableStreamController);
      return promise;
    }
    function WritableStreamAddWriteRequest(stream) {
      const promise = newPromise((resolve, reject) => {
        const writeRequest = {
          _resolve: resolve,
          _reject: reject
        };
        stream._writeRequests.push(writeRequest);
      });
      return promise;
    }
    function WritableStreamDealWithRejection(stream, error) {
      const state = stream._state;
      if (state === "writable") {
        WritableStreamStartErroring(stream, error);
        return;
      }
      WritableStreamFinishErroring(stream);
    }
    function WritableStreamStartErroring(stream, reason) {
      const controller = stream._writableStreamController;
      stream._state = "erroring";
      stream._storedError = reason;
      const writer = stream._writer;
      if (writer !== undefined) {
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
      }
      if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
        WritableStreamFinishErroring(stream);
      }
    }
    function WritableStreamFinishErroring(stream) {
      stream._state = "errored";
      stream._writableStreamController[ErrorSteps]();
      const storedError = stream._storedError;
      stream._writeRequests.forEach((writeRequest) => {
        writeRequest._reject(storedError);
      });
      stream._writeRequests = new SimpleQueue;
      if (stream._pendingAbortRequest === undefined) {
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        return;
      }
      const abortRequest = stream._pendingAbortRequest;
      stream._pendingAbortRequest = undefined;
      if (abortRequest._wasAlreadyErroring) {
        abortRequest._reject(storedError);
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        return;
      }
      const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
      uponPromise(promise, () => {
        abortRequest._resolve();
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
      }, (reason) => {
        abortRequest._reject(reason);
        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
      });
    }
    function WritableStreamFinishInFlightWrite(stream) {
      stream._inFlightWriteRequest._resolve(undefined);
      stream._inFlightWriteRequest = undefined;
    }
    function WritableStreamFinishInFlightWriteWithError(stream, error) {
      stream._inFlightWriteRequest._reject(error);
      stream._inFlightWriteRequest = undefined;
      WritableStreamDealWithRejection(stream, error);
    }
    function WritableStreamFinishInFlightClose(stream) {
      stream._inFlightCloseRequest._resolve(undefined);
      stream._inFlightCloseRequest = undefined;
      const state = stream._state;
      if (state === "erroring") {
        stream._storedError = undefined;
        if (stream._pendingAbortRequest !== undefined) {
          stream._pendingAbortRequest._resolve();
          stream._pendingAbortRequest = undefined;
        }
      }
      stream._state = "closed";
      const writer = stream._writer;
      if (writer !== undefined) {
        defaultWriterClosedPromiseResolve(writer);
      }
    }
    function WritableStreamFinishInFlightCloseWithError(stream, error) {
      stream._inFlightCloseRequest._reject(error);
      stream._inFlightCloseRequest = undefined;
      if (stream._pendingAbortRequest !== undefined) {
        stream._pendingAbortRequest._reject(error);
        stream._pendingAbortRequest = undefined;
      }
      WritableStreamDealWithRejection(stream, error);
    }
    function WritableStreamCloseQueuedOrInFlight(stream) {
      if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {
        return false;
      }
      return true;
    }
    function WritableStreamHasOperationMarkedInFlight(stream) {
      if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {
        return false;
      }
      return true;
    }
    function WritableStreamMarkCloseRequestInFlight(stream) {
      stream._inFlightCloseRequest = stream._closeRequest;
      stream._closeRequest = undefined;
    }
    function WritableStreamMarkFirstWriteRequestInFlight(stream) {
      stream._inFlightWriteRequest = stream._writeRequests.shift();
    }
    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
      if (stream._closeRequest !== undefined) {
        stream._closeRequest._reject(stream._storedError);
        stream._closeRequest = undefined;
      }
      const writer = stream._writer;
      if (writer !== undefined) {
        defaultWriterClosedPromiseReject(writer, stream._storedError);
      }
    }
    function WritableStreamUpdateBackpressure(stream, backpressure) {
      const writer = stream._writer;
      if (writer !== undefined && backpressure !== stream._backpressure) {
        if (backpressure) {
          defaultWriterReadyPromiseReset(writer);
        } else {
          defaultWriterReadyPromiseResolve(writer);
        }
      }
      stream._backpressure = backpressure;
    }

    class WritableStreamDefaultWriter {
      constructor(stream) {
        assertRequiredArgument(stream, 1, "WritableStreamDefaultWriter");
        assertWritableStream(stream, "First parameter");
        if (IsWritableStreamLocked(stream)) {
          throw new TypeError("This stream has already been locked for exclusive writing by another writer");
        }
        this._ownerWritableStream = stream;
        stream._writer = this;
        const state = stream._state;
        if (state === "writable") {
          if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
            defaultWriterReadyPromiseInitialize(this);
          } else {
            defaultWriterReadyPromiseInitializeAsResolved(this);
          }
          defaultWriterClosedPromiseInitialize(this);
        } else if (state === "erroring") {
          defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
          defaultWriterClosedPromiseInitialize(this);
        } else if (state === "closed") {
          defaultWriterReadyPromiseInitializeAsResolved(this);
          defaultWriterClosedPromiseInitializeAsResolved(this);
        } else {
          const storedError = stream._storedError;
          defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
          defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
        }
      }
      get closed() {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("closed"));
        }
        return this._closedPromise;
      }
      get desiredSize() {
        if (!IsWritableStreamDefaultWriter(this)) {
          throw defaultWriterBrandCheckException("desiredSize");
        }
        if (this._ownerWritableStream === undefined) {
          throw defaultWriterLockException("desiredSize");
        }
        return WritableStreamDefaultWriterGetDesiredSize(this);
      }
      get ready() {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("ready"));
        }
        return this._readyPromise;
      }
      abort(reason = undefined) {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("abort"));
        }
        if (this._ownerWritableStream === undefined) {
          return promiseRejectedWith(defaultWriterLockException("abort"));
        }
        return WritableStreamDefaultWriterAbort(this, reason);
      }
      close() {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("close"));
        }
        const stream = this._ownerWritableStream;
        if (stream === undefined) {
          return promiseRejectedWith(defaultWriterLockException("close"));
        }
        if (WritableStreamCloseQueuedOrInFlight(stream)) {
          return promiseRejectedWith(new TypeError("Cannot close an already-closing stream"));
        }
        return WritableStreamDefaultWriterClose(this);
      }
      releaseLock() {
        if (!IsWritableStreamDefaultWriter(this)) {
          throw defaultWriterBrandCheckException("releaseLock");
        }
        const stream = this._ownerWritableStream;
        if (stream === undefined) {
          return;
        }
        WritableStreamDefaultWriterRelease(this);
      }
      write(chunk = undefined) {
        if (!IsWritableStreamDefaultWriter(this)) {
          return promiseRejectedWith(defaultWriterBrandCheckException("write"));
        }
        if (this._ownerWritableStream === undefined) {
          return promiseRejectedWith(defaultWriterLockException("write to"));
        }
        return WritableStreamDefaultWriterWrite(this, chunk);
      }
    }
    Object.defineProperties(WritableStreamDefaultWriter.prototype, {
      abort: { enumerable: true },
      close: { enumerable: true },
      releaseLock: { enumerable: true },
      write: { enumerable: true },
      closed: { enumerable: true },
      desiredSize: { enumerable: true },
      ready: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStreamDefaultWriter",
        configurable: true
      });
    }
    function IsWritableStreamDefaultWriter(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_ownerWritableStream")) {
        return false;
      }
      return x instanceof WritableStreamDefaultWriter;
    }
    function WritableStreamDefaultWriterAbort(writer, reason) {
      const stream = writer._ownerWritableStream;
      return WritableStreamAbort(stream, reason);
    }
    function WritableStreamDefaultWriterClose(writer) {
      const stream = writer._ownerWritableStream;
      return WritableStreamClose(stream);
    }
    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
      const stream = writer._ownerWritableStream;
      const state = stream._state;
      if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
        return promiseResolvedWith(undefined);
      }
      if (state === "errored") {
        return promiseRejectedWith(stream._storedError);
      }
      return WritableStreamDefaultWriterClose(writer);
    }
    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
      if (writer._closedPromiseState === "pending") {
        defaultWriterClosedPromiseReject(writer, error);
      } else {
        defaultWriterClosedPromiseResetToRejected(writer, error);
      }
    }
    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
      if (writer._readyPromiseState === "pending") {
        defaultWriterReadyPromiseReject(writer, error);
      } else {
        defaultWriterReadyPromiseResetToRejected(writer, error);
      }
    }
    function WritableStreamDefaultWriterGetDesiredSize(writer) {
      const stream = writer._ownerWritableStream;
      const state = stream._state;
      if (state === "errored" || state === "erroring") {
        return null;
      }
      if (state === "closed") {
        return 0;
      }
      return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
    }
    function WritableStreamDefaultWriterRelease(writer) {
      const stream = writer._ownerWritableStream;
      const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
      WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
      stream._writer = undefined;
      writer._ownerWritableStream = undefined;
    }
    function WritableStreamDefaultWriterWrite(writer, chunk) {
      const stream = writer._ownerWritableStream;
      const controller = stream._writableStreamController;
      const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
      if (stream !== writer._ownerWritableStream) {
        return promiseRejectedWith(defaultWriterLockException("write to"));
      }
      const state = stream._state;
      if (state === "errored") {
        return promiseRejectedWith(stream._storedError);
      }
      if (WritableStreamCloseQueuedOrInFlight(stream) || state === "closed") {
        return promiseRejectedWith(new TypeError("The stream is closing or closed and cannot be written to"));
      }
      if (state === "erroring") {
        return promiseRejectedWith(stream._storedError);
      }
      const promise = WritableStreamAddWriteRequest(stream);
      WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
      return promise;
    }
    const closeSentinel = {};

    class WritableStreamDefaultController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get abortReason() {
        if (!IsWritableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$2("abortReason");
        }
        return this._abortReason;
      }
      get signal() {
        if (!IsWritableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$2("signal");
        }
        if (this._abortController === undefined) {
          throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
        }
        return this._abortController.signal;
      }
      error(e = undefined) {
        if (!IsWritableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$2("error");
        }
        const state = this._controlledWritableStream._state;
        if (state !== "writable") {
          return;
        }
        WritableStreamDefaultControllerError(this, e);
      }
      [AbortSteps](reason) {
        const result = this._abortAlgorithm(reason);
        WritableStreamDefaultControllerClearAlgorithms(this);
        return result;
      }
      [ErrorSteps]() {
        ResetQueue(this);
      }
    }
    Object.defineProperties(WritableStreamDefaultController.prototype, {
      abortReason: { enumerable: true },
      signal: { enumerable: true },
      error: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "WritableStreamDefaultController",
        configurable: true
      });
    }
    function IsWritableStreamDefaultController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledWritableStream")) {
        return false;
      }
      return x instanceof WritableStreamDefaultController;
    }
    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
      controller._controlledWritableStream = stream;
      stream._writableStreamController = controller;
      controller._queue = undefined;
      controller._queueTotalSize = undefined;
      ResetQueue(controller);
      controller._abortReason = undefined;
      controller._abortController = createAbortController();
      controller._started = false;
      controller._strategySizeAlgorithm = sizeAlgorithm;
      controller._strategyHWM = highWaterMark;
      controller._writeAlgorithm = writeAlgorithm;
      controller._closeAlgorithm = closeAlgorithm;
      controller._abortAlgorithm = abortAlgorithm;
      const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
      WritableStreamUpdateBackpressure(stream, backpressure);
      const startResult = startAlgorithm();
      const startPromise = promiseResolvedWith(startResult);
      uponPromise(startPromise, () => {
        controller._started = true;
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }, (r) => {
        controller._started = true;
        WritableStreamDealWithRejection(stream, r);
      });
    }
    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
      const controller = Object.create(WritableStreamDefaultController.prototype);
      let startAlgorithm = () => {
        return;
      };
      let writeAlgorithm = () => promiseResolvedWith(undefined);
      let closeAlgorithm = () => promiseResolvedWith(undefined);
      let abortAlgorithm = () => promiseResolvedWith(undefined);
      if (underlyingSink.start !== undefined) {
        startAlgorithm = () => underlyingSink.start(controller);
      }
      if (underlyingSink.write !== undefined) {
        writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
      }
      if (underlyingSink.close !== undefined) {
        closeAlgorithm = () => underlyingSink.close();
      }
      if (underlyingSink.abort !== undefined) {
        abortAlgorithm = (reason) => underlyingSink.abort(reason);
      }
      SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
    }
    function WritableStreamDefaultControllerClearAlgorithms(controller) {
      controller._writeAlgorithm = undefined;
      controller._closeAlgorithm = undefined;
      controller._abortAlgorithm = undefined;
      controller._strategySizeAlgorithm = undefined;
    }
    function WritableStreamDefaultControllerClose(controller) {
      EnqueueValueWithSize(controller, closeSentinel, 0);
      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
      try {
        return controller._strategySizeAlgorithm(chunk);
      } catch (chunkSizeE) {
        WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
        return 1;
      }
    }
    function WritableStreamDefaultControllerGetDesiredSize(controller) {
      return controller._strategyHWM - controller._queueTotalSize;
    }
    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
      try {
        EnqueueValueWithSize(controller, chunk, chunkSize);
      } catch (enqueueE) {
        WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
        return;
      }
      const stream = controller._controlledWritableStream;
      if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === "writable") {
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
      }
      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
      const stream = controller._controlledWritableStream;
      if (!controller._started) {
        return;
      }
      if (stream._inFlightWriteRequest !== undefined) {
        return;
      }
      const state = stream._state;
      if (state === "erroring") {
        WritableStreamFinishErroring(stream);
        return;
      }
      if (controller._queue.length === 0) {
        return;
      }
      const value = PeekQueueValue(controller);
      if (value === closeSentinel) {
        WritableStreamDefaultControllerProcessClose(controller);
      } else {
        WritableStreamDefaultControllerProcessWrite(controller, value);
      }
    }
    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
      if (controller._controlledWritableStream._state === "writable") {
        WritableStreamDefaultControllerError(controller, error);
      }
    }
    function WritableStreamDefaultControllerProcessClose(controller) {
      const stream = controller._controlledWritableStream;
      WritableStreamMarkCloseRequestInFlight(stream);
      DequeueValue(controller);
      const sinkClosePromise = controller._closeAlgorithm();
      WritableStreamDefaultControllerClearAlgorithms(controller);
      uponPromise(sinkClosePromise, () => {
        WritableStreamFinishInFlightClose(stream);
      }, (reason) => {
        WritableStreamFinishInFlightCloseWithError(stream, reason);
      });
    }
    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
      const stream = controller._controlledWritableStream;
      WritableStreamMarkFirstWriteRequestInFlight(stream);
      const sinkWritePromise = controller._writeAlgorithm(chunk);
      uponPromise(sinkWritePromise, () => {
        WritableStreamFinishInFlightWrite(stream);
        const state = stream._state;
        DequeueValue(controller);
        if (!WritableStreamCloseQueuedOrInFlight(stream) && state === "writable") {
          const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
          WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
      }, (reason) => {
        if (stream._state === "writable") {
          WritableStreamDefaultControllerClearAlgorithms(controller);
        }
        WritableStreamFinishInFlightWriteWithError(stream, reason);
      });
    }
    function WritableStreamDefaultControllerGetBackpressure(controller) {
      const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
      return desiredSize <= 0;
    }
    function WritableStreamDefaultControllerError(controller, error) {
      const stream = controller._controlledWritableStream;
      WritableStreamDefaultControllerClearAlgorithms(controller);
      WritableStreamStartErroring(stream, error);
    }
    function streamBrandCheckException$2(name) {
      return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
    }
    function defaultControllerBrandCheckException$2(name) {
      return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
    }
    function defaultWriterBrandCheckException(name) {
      return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
    }
    function defaultWriterLockException(name) {
      return new TypeError("Cannot " + name + " a stream using a released writer");
    }
    function defaultWriterClosedPromiseInitialize(writer) {
      writer._closedPromise = newPromise((resolve, reject) => {
        writer._closedPromise_resolve = resolve;
        writer._closedPromise_reject = reject;
        writer._closedPromiseState = "pending";
      });
    }
    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
      defaultWriterClosedPromiseInitialize(writer);
      defaultWriterClosedPromiseReject(writer, reason);
    }
    function defaultWriterClosedPromiseInitializeAsResolved(writer) {
      defaultWriterClosedPromiseInitialize(writer);
      defaultWriterClosedPromiseResolve(writer);
    }
    function defaultWriterClosedPromiseReject(writer, reason) {
      if (writer._closedPromise_reject === undefined) {
        return;
      }
      setPromiseIsHandledToTrue(writer._closedPromise);
      writer._closedPromise_reject(reason);
      writer._closedPromise_resolve = undefined;
      writer._closedPromise_reject = undefined;
      writer._closedPromiseState = "rejected";
    }
    function defaultWriterClosedPromiseResetToRejected(writer, reason) {
      defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterClosedPromiseResolve(writer) {
      if (writer._closedPromise_resolve === undefined) {
        return;
      }
      writer._closedPromise_resolve(undefined);
      writer._closedPromise_resolve = undefined;
      writer._closedPromise_reject = undefined;
      writer._closedPromiseState = "resolved";
    }
    function defaultWriterReadyPromiseInitialize(writer) {
      writer._readyPromise = newPromise((resolve, reject) => {
        writer._readyPromise_resolve = resolve;
        writer._readyPromise_reject = reject;
      });
      writer._readyPromiseState = "pending";
    }
    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
      defaultWriterReadyPromiseInitialize(writer);
      defaultWriterReadyPromiseReject(writer, reason);
    }
    function defaultWriterReadyPromiseInitializeAsResolved(writer) {
      defaultWriterReadyPromiseInitialize(writer);
      defaultWriterReadyPromiseResolve(writer);
    }
    function defaultWriterReadyPromiseReject(writer, reason) {
      if (writer._readyPromise_reject === undefined) {
        return;
      }
      setPromiseIsHandledToTrue(writer._readyPromise);
      writer._readyPromise_reject(reason);
      writer._readyPromise_resolve = undefined;
      writer._readyPromise_reject = undefined;
      writer._readyPromiseState = "rejected";
    }
    function defaultWriterReadyPromiseReset(writer) {
      defaultWriterReadyPromiseInitialize(writer);
    }
    function defaultWriterReadyPromiseResetToRejected(writer, reason) {
      defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterReadyPromiseResolve(writer) {
      if (writer._readyPromise_resolve === undefined) {
        return;
      }
      writer._readyPromise_resolve(undefined);
      writer._readyPromise_resolve = undefined;
      writer._readyPromise_reject = undefined;
      writer._readyPromiseState = "fulfilled";
    }
    const NativeDOMException = typeof DOMException !== "undefined" ? DOMException : undefined;
    function isDOMExceptionConstructor(ctor) {
      if (!(typeof ctor === "function" || typeof ctor === "object")) {
        return false;
      }
      try {
        new ctor;
        return true;
      } catch (_a) {
        return false;
      }
    }
    function createDOMExceptionPolyfill() {
      const ctor = function DOMException(message, name) {
        this.message = message || "";
        this.name = name || "Error";
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      };
      ctor.prototype = Object.create(Error.prototype);
      Object.defineProperty(ctor.prototype, "constructor", { value: ctor, writable: true, configurable: true });
      return ctor;
    }
    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();
    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
      const reader = AcquireReadableStreamDefaultReader(source);
      const writer = AcquireWritableStreamDefaultWriter(dest);
      source._disturbed = true;
      let shuttingDown = false;
      let currentWrite = promiseResolvedWith(undefined);
      return newPromise((resolve, reject) => {
        let abortAlgorithm;
        if (signal !== undefined) {
          abortAlgorithm = () => {
            const error = new DOMException$1("Aborted", "AbortError");
            const actions = [];
            if (!preventAbort) {
              actions.push(() => {
                if (dest._state === "writable") {
                  return WritableStreamAbort(dest, error);
                }
                return promiseResolvedWith(undefined);
              });
            }
            if (!preventCancel) {
              actions.push(() => {
                if (source._state === "readable") {
                  return ReadableStreamCancel(source, error);
                }
                return promiseResolvedWith(undefined);
              });
            }
            shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error);
          };
          if (signal.aborted) {
            abortAlgorithm();
            return;
          }
          signal.addEventListener("abort", abortAlgorithm);
        }
        function pipeLoop() {
          return newPromise((resolveLoop, rejectLoop) => {
            function next(done) {
              if (done) {
                resolveLoop();
              } else {
                PerformPromiseThen(pipeStep(), next, rejectLoop);
              }
            }
            next(false);
          });
        }
        function pipeStep() {
          if (shuttingDown) {
            return promiseResolvedWith(true);
          }
          return PerformPromiseThen(writer._readyPromise, () => {
            return newPromise((resolveRead, rejectRead) => {
              ReadableStreamDefaultReaderRead(reader, {
                _chunkSteps: (chunk) => {
                  currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);
                  resolveRead(false);
                },
                _closeSteps: () => resolveRead(true),
                _errorSteps: rejectRead
              });
            });
          });
        }
        isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
          if (!preventAbort) {
            shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
          } else {
            shutdown(true, storedError);
          }
        });
        isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
          if (!preventCancel) {
            shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
          } else {
            shutdown(true, storedError);
          }
        });
        isOrBecomesClosed(source, reader._closedPromise, () => {
          if (!preventClose) {
            shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
          } else {
            shutdown();
          }
        });
        if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === "closed") {
          const destClosed = new TypeError("the destination writable stream closed before all data could be piped to it");
          if (!preventCancel) {
            shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
          } else {
            shutdown(true, destClosed);
          }
        }
        setPromiseIsHandledToTrue(pipeLoop());
        function waitForWritesToFinish() {
          const oldCurrentWrite = currentWrite;
          return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);
        }
        function isOrBecomesErrored(stream, promise, action) {
          if (stream._state === "errored") {
            action(stream._storedError);
          } else {
            uponRejection(promise, action);
          }
        }
        function isOrBecomesClosed(stream, promise, action) {
          if (stream._state === "closed") {
            action();
          } else {
            uponFulfillment(promise, action);
          }
        }
        function shutdownWithAction(action, originalIsError, originalError) {
          if (shuttingDown) {
            return;
          }
          shuttingDown = true;
          if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
            uponFulfillment(waitForWritesToFinish(), doTheRest);
          } else {
            doTheRest();
          }
          function doTheRest() {
            uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));
          }
        }
        function shutdown(isError, error) {
          if (shuttingDown) {
            return;
          }
          shuttingDown = true;
          if (dest._state === "writable" && !WritableStreamCloseQueuedOrInFlight(dest)) {
            uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));
          } else {
            finalize(isError, error);
          }
        }
        function finalize(isError, error) {
          WritableStreamDefaultWriterRelease(writer);
          ReadableStreamReaderGenericRelease(reader);
          if (signal !== undefined) {
            signal.removeEventListener("abort", abortAlgorithm);
          }
          if (isError) {
            reject(error);
          } else {
            resolve(undefined);
          }
        }
      });
    }

    class ReadableStreamDefaultController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("desiredSize");
        }
        return ReadableStreamDefaultControllerGetDesiredSize(this);
      }
      close() {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("close");
        }
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
          throw new TypeError("The stream is not in a state that permits close");
        }
        ReadableStreamDefaultControllerClose(this);
      }
      enqueue(chunk = undefined) {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("enqueue");
        }
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
          throw new TypeError("The stream is not in a state that permits enqueue");
        }
        return ReadableStreamDefaultControllerEnqueue(this, chunk);
      }
      error(e = undefined) {
        if (!IsReadableStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException$1("error");
        }
        ReadableStreamDefaultControllerError(this, e);
      }
      [CancelSteps](reason) {
        ResetQueue(this);
        const result = this._cancelAlgorithm(reason);
        ReadableStreamDefaultControllerClearAlgorithms(this);
        return result;
      }
      [PullSteps](readRequest) {
        const stream = this._controlledReadableStream;
        if (this._queue.length > 0) {
          const chunk = DequeueValue(this);
          if (this._closeRequested && this._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(this);
            ReadableStreamClose(stream);
          } else {
            ReadableStreamDefaultControllerCallPullIfNeeded(this);
          }
          readRequest._chunkSteps(chunk);
        } else {
          ReadableStreamAddReadRequest(stream, readRequest);
          ReadableStreamDefaultControllerCallPullIfNeeded(this);
        }
      }
    }
    Object.defineProperties(ReadableStreamDefaultController.prototype, {
      close: { enumerable: true },
      enqueue: { enumerable: true },
      error: { enumerable: true },
      desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStreamDefaultController",
        configurable: true
      });
    }
    function IsReadableStreamDefaultController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledReadableStream")) {
        return false;
      }
      return x instanceof ReadableStreamDefaultController;
    }
    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
      const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
      if (!shouldPull) {
        return;
      }
      if (controller._pulling) {
        controller._pullAgain = true;
        return;
      }
      controller._pulling = true;
      const pullPromise = controller._pullAlgorithm();
      uponPromise(pullPromise, () => {
        controller._pulling = false;
        if (controller._pullAgain) {
          controller._pullAgain = false;
          ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }
      }, (e) => {
        ReadableStreamDefaultControllerError(controller, e);
      });
    }
    function ReadableStreamDefaultControllerShouldCallPull(controller) {
      const stream = controller._controlledReadableStream;
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
        return false;
      }
      if (!controller._started) {
        return false;
      }
      if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
        return true;
      }
      const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
      if (desiredSize > 0) {
        return true;
      }
      return false;
    }
    function ReadableStreamDefaultControllerClearAlgorithms(controller) {
      controller._pullAlgorithm = undefined;
      controller._cancelAlgorithm = undefined;
      controller._strategySizeAlgorithm = undefined;
    }
    function ReadableStreamDefaultControllerClose(controller) {
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
        return;
      }
      const stream = controller._controlledReadableStream;
      controller._closeRequested = true;
      if (controller._queue.length === 0) {
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
      }
    }
    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
        return;
      }
      const stream = controller._controlledReadableStream;
      if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
        ReadableStreamFulfillReadRequest(stream, chunk, false);
      } else {
        let chunkSize;
        try {
          chunkSize = controller._strategySizeAlgorithm(chunk);
        } catch (chunkSizeE) {
          ReadableStreamDefaultControllerError(controller, chunkSizeE);
          throw chunkSizeE;
        }
        try {
          EnqueueValueWithSize(controller, chunk, chunkSize);
        } catch (enqueueE) {
          ReadableStreamDefaultControllerError(controller, enqueueE);
          throw enqueueE;
        }
      }
      ReadableStreamDefaultControllerCallPullIfNeeded(controller);
    }
    function ReadableStreamDefaultControllerError(controller, e) {
      const stream = controller._controlledReadableStream;
      if (stream._state !== "readable") {
        return;
      }
      ResetQueue(controller);
      ReadableStreamDefaultControllerClearAlgorithms(controller);
      ReadableStreamError(stream, e);
    }
    function ReadableStreamDefaultControllerGetDesiredSize(controller) {
      const state = controller._controlledReadableStream._state;
      if (state === "errored") {
        return null;
      }
      if (state === "closed") {
        return 0;
      }
      return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableStreamDefaultControllerHasBackpressure(controller) {
      if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
        return false;
      }
      return true;
    }
    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
      const state = controller._controlledReadableStream._state;
      if (!controller._closeRequested && state === "readable") {
        return true;
      }
      return false;
    }
    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
      controller._controlledReadableStream = stream;
      controller._queue = undefined;
      controller._queueTotalSize = undefined;
      ResetQueue(controller);
      controller._started = false;
      controller._closeRequested = false;
      controller._pullAgain = false;
      controller._pulling = false;
      controller._strategySizeAlgorithm = sizeAlgorithm;
      controller._strategyHWM = highWaterMark;
      controller._pullAlgorithm = pullAlgorithm;
      controller._cancelAlgorithm = cancelAlgorithm;
      stream._readableStreamController = controller;
      const startResult = startAlgorithm();
      uponPromise(promiseResolvedWith(startResult), () => {
        controller._started = true;
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
      }, (r) => {
        ReadableStreamDefaultControllerError(controller, r);
      });
    }
    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
      const controller = Object.create(ReadableStreamDefaultController.prototype);
      let startAlgorithm = () => {
        return;
      };
      let pullAlgorithm = () => promiseResolvedWith(undefined);
      let cancelAlgorithm = () => promiseResolvedWith(undefined);
      if (underlyingSource.start !== undefined) {
        startAlgorithm = () => underlyingSource.start(controller);
      }
      if (underlyingSource.pull !== undefined) {
        pullAlgorithm = () => underlyingSource.pull(controller);
      }
      if (underlyingSource.cancel !== undefined) {
        cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
      }
      SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
    }
    function defaultControllerBrandCheckException$1(name) {
      return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
    }
    function ReadableStreamTee(stream, cloneForBranch2) {
      if (IsReadableByteStreamController(stream._readableStreamController)) {
        return ReadableByteStreamTee(stream);
      }
      return ReadableStreamDefaultTee(stream);
    }
    function ReadableStreamDefaultTee(stream, cloneForBranch2) {
      const reader = AcquireReadableStreamDefaultReader(stream);
      let reading = false;
      let readAgain = false;
      let canceled1 = false;
      let canceled2 = false;
      let reason1;
      let reason2;
      let branch1;
      let branch2;
      let resolveCancelPromise;
      const cancelPromise = newPromise((resolve) => {
        resolveCancelPromise = resolve;
      });
      function pullAlgorithm() {
        if (reading) {
          readAgain = true;
          return promiseResolvedWith(undefined);
        }
        reading = true;
        const readRequest = {
          _chunkSteps: (chunk) => {
            queueMicrotask2(() => {
              readAgain = false;
              const chunk1 = chunk;
              const chunk2 = chunk;
              if (!canceled1) {
                ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
              }
              if (!canceled2) {
                ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
              }
              reading = false;
              if (readAgain) {
                pullAlgorithm();
              }
            });
          },
          _closeSteps: () => {
            reading = false;
            if (!canceled1) {
              ReadableStreamDefaultControllerClose(branch1._readableStreamController);
            }
            if (!canceled2) {
              ReadableStreamDefaultControllerClose(branch2._readableStreamController);
            }
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(undefined);
            }
          },
          _errorSteps: () => {
            reading = false;
          }
        };
        ReadableStreamDefaultReaderRead(reader, readRequest);
        return promiseResolvedWith(undefined);
      }
      function cancel1Algorithm(reason) {
        canceled1 = true;
        reason1 = reason;
        if (canceled2) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function cancel2Algorithm(reason) {
        canceled2 = true;
        reason2 = reason;
        if (canceled1) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function startAlgorithm() {
      }
      branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
      branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
      uponRejection(reader._closedPromise, (r) => {
        ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
        ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
        if (!canceled1 || !canceled2) {
          resolveCancelPromise(undefined);
        }
      });
      return [branch1, branch2];
    }
    function ReadableByteStreamTee(stream) {
      let reader = AcquireReadableStreamDefaultReader(stream);
      let reading = false;
      let readAgainForBranch1 = false;
      let readAgainForBranch2 = false;
      let canceled1 = false;
      let canceled2 = false;
      let reason1;
      let reason2;
      let branch1;
      let branch2;
      let resolveCancelPromise;
      const cancelPromise = newPromise((resolve) => {
        resolveCancelPromise = resolve;
      });
      function forwardReaderError(thisReader) {
        uponRejection(thisReader._closedPromise, (r) => {
          if (thisReader !== reader) {
            return;
          }
          ReadableByteStreamControllerError(branch1._readableStreamController, r);
          ReadableByteStreamControllerError(branch2._readableStreamController, r);
          if (!canceled1 || !canceled2) {
            resolveCancelPromise(undefined);
          }
        });
      }
      function pullWithDefaultReader() {
        if (IsReadableStreamBYOBReader(reader)) {
          ReadableStreamReaderGenericRelease(reader);
          reader = AcquireReadableStreamDefaultReader(stream);
          forwardReaderError(reader);
        }
        const readRequest = {
          _chunkSteps: (chunk) => {
            queueMicrotask2(() => {
              readAgainForBranch1 = false;
              readAgainForBranch2 = false;
              const chunk1 = chunk;
              let chunk2 = chunk;
              if (!canceled1 && !canceled2) {
                try {
                  chunk2 = CloneAsUint8Array(chunk);
                } catch (cloneE) {
                  ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                  ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                  resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                  return;
                }
              }
              if (!canceled1) {
                ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
              }
              if (!canceled2) {
                ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
              }
              reading = false;
              if (readAgainForBranch1) {
                pull1Algorithm();
              } else if (readAgainForBranch2) {
                pull2Algorithm();
              }
            });
          },
          _closeSteps: () => {
            reading = false;
            if (!canceled1) {
              ReadableByteStreamControllerClose(branch1._readableStreamController);
            }
            if (!canceled2) {
              ReadableByteStreamControllerClose(branch2._readableStreamController);
            }
            if (branch1._readableStreamController._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
            }
            if (branch2._readableStreamController._pendingPullIntos.length > 0) {
              ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
            }
            if (!canceled1 || !canceled2) {
              resolveCancelPromise(undefined);
            }
          },
          _errorSteps: () => {
            reading = false;
          }
        };
        ReadableStreamDefaultReaderRead(reader, readRequest);
      }
      function pullWithBYOBReader(view, forBranch2) {
        if (IsReadableStreamDefaultReader(reader)) {
          ReadableStreamReaderGenericRelease(reader);
          reader = AcquireReadableStreamBYOBReader(stream);
          forwardReaderError(reader);
        }
        const byobBranch = forBranch2 ? branch2 : branch1;
        const otherBranch = forBranch2 ? branch1 : branch2;
        const readIntoRequest = {
          _chunkSteps: (chunk) => {
            queueMicrotask2(() => {
              readAgainForBranch1 = false;
              readAgainForBranch2 = false;
              const byobCanceled = forBranch2 ? canceled2 : canceled1;
              const otherCanceled = forBranch2 ? canceled1 : canceled2;
              if (!otherCanceled) {
                let clonedChunk;
                try {
                  clonedChunk = CloneAsUint8Array(chunk);
                } catch (cloneE) {
                  ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                  ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                  resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                  return;
                }
                if (!byobCanceled) {
                  ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                }
                ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
              } else if (!byobCanceled) {
                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
              }
              reading = false;
              if (readAgainForBranch1) {
                pull1Algorithm();
              } else if (readAgainForBranch2) {
                pull2Algorithm();
              }
            });
          },
          _closeSteps: (chunk) => {
            reading = false;
            const byobCanceled = forBranch2 ? canceled2 : canceled1;
            const otherCanceled = forBranch2 ? canceled1 : canceled2;
            if (!byobCanceled) {
              ReadableByteStreamControllerClose(byobBranch._readableStreamController);
            }
            if (!otherCanceled) {
              ReadableByteStreamControllerClose(otherBranch._readableStreamController);
            }
            if (chunk !== undefined) {
              if (!byobCanceled) {
                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
              }
              if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
              }
            }
            if (!byobCanceled || !otherCanceled) {
              resolveCancelPromise(undefined);
            }
          },
          _errorSteps: () => {
            reading = false;
          }
        };
        ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
      }
      function pull1Algorithm() {
        if (reading) {
          readAgainForBranch1 = true;
          return promiseResolvedWith(undefined);
        }
        reading = true;
        const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
        if (byobRequest === null) {
          pullWithDefaultReader();
        } else {
          pullWithBYOBReader(byobRequest._view, false);
        }
        return promiseResolvedWith(undefined);
      }
      function pull2Algorithm() {
        if (reading) {
          readAgainForBranch2 = true;
          return promiseResolvedWith(undefined);
        }
        reading = true;
        const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
        if (byobRequest === null) {
          pullWithDefaultReader();
        } else {
          pullWithBYOBReader(byobRequest._view, true);
        }
        return promiseResolvedWith(undefined);
      }
      function cancel1Algorithm(reason) {
        canceled1 = true;
        reason1 = reason;
        if (canceled2) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function cancel2Algorithm(reason) {
        canceled2 = true;
        reason2 = reason;
        if (canceled1) {
          const compositeReason = CreateArrayFromList([reason1, reason2]);
          const cancelResult = ReadableStreamCancel(stream, compositeReason);
          resolveCancelPromise(cancelResult);
        }
        return cancelPromise;
      }
      function startAlgorithm() {
        return;
      }
      branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
      branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
      forwardReaderError(reader);
      return [branch1, branch2];
    }
    function convertUnderlyingDefaultOrByteSource(source, context) {
      assertDictionary(source, context);
      const original = source;
      const autoAllocateChunkSize = original === null || original === undefined ? undefined : original.autoAllocateChunkSize;
      const cancel = original === null || original === undefined ? undefined : original.cancel;
      const pull = original === null || original === undefined ? undefined : original.pull;
      const start = original === null || original === undefined ? undefined : original.start;
      const type = original === null || original === undefined ? undefined : original.type;
      return {
        autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
        cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
        pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
        start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
        type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)
      };
    }
    function convertUnderlyingSourceCancelCallback(fn, original, context) {
      assertFunction(fn, context);
      return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSourcePullCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertUnderlyingSourceStartCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertReadableStreamType(type, context) {
      type = `${type}`;
      if (type !== "bytes") {
        throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
      }
      return type;
    }
    function convertReaderOptions(options, context) {
      assertDictionary(options, context);
      const mode = options === null || options === undefined ? undefined : options.mode;
      return {
        mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
      };
    }
    function convertReadableStreamReaderMode(mode, context) {
      mode = `${mode}`;
      if (mode !== "byob") {
        throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
      }
      return mode;
    }
    function convertIteratorOptions(options, context) {
      assertDictionary(options, context);
      const preventCancel = options === null || options === undefined ? undefined : options.preventCancel;
      return { preventCancel: Boolean(preventCancel) };
    }
    function convertPipeOptions(options, context) {
      assertDictionary(options, context);
      const preventAbort = options === null || options === undefined ? undefined : options.preventAbort;
      const preventCancel = options === null || options === undefined ? undefined : options.preventCancel;
      const preventClose = options === null || options === undefined ? undefined : options.preventClose;
      const signal = options === null || options === undefined ? undefined : options.signal;
      if (signal !== undefined) {
        assertAbortSignal(signal, `${context} has member 'signal' that`);
      }
      return {
        preventAbort: Boolean(preventAbort),
        preventCancel: Boolean(preventCancel),
        preventClose: Boolean(preventClose),
        signal
      };
    }
    function assertAbortSignal(signal, context) {
      if (!isAbortSignal(signal)) {
        throw new TypeError(`${context} is not an AbortSignal.`);
      }
    }
    function convertReadableWritablePair(pair, context) {
      assertDictionary(pair, context);
      const readable = pair === null || pair === undefined ? undefined : pair.readable;
      assertRequiredField(readable, "readable", "ReadableWritablePair");
      assertReadableStream(readable, `${context} has member 'readable' that`);
      const writable = pair === null || pair === undefined ? undefined : pair.writable;
      assertRequiredField(writable, "writable", "ReadableWritablePair");
      assertWritableStream(writable, `${context} has member 'writable' that`);
      return { readable, writable };
    }

    class ReadableStream2 {
      constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
        if (rawUnderlyingSource === undefined) {
          rawUnderlyingSource = null;
        } else {
          assertObject(rawUnderlyingSource, "First parameter");
        }
        const strategy = convertQueuingStrategy(rawStrategy, "Second parameter");
        const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, "First parameter");
        InitializeReadableStream(this);
        if (underlyingSource.type === "bytes") {
          if (strategy.size !== undefined) {
            throw new RangeError("The strategy for a byte stream cannot have a size function");
          }
          const highWaterMark = ExtractHighWaterMark(strategy, 0);
          SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
        } else {
          const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
          const highWaterMark = ExtractHighWaterMark(strategy, 1);
          SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
        }
      }
      get locked() {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("locked");
        }
        return IsReadableStreamLocked(this);
      }
      cancel(reason = undefined) {
        if (!IsReadableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$1("cancel"));
        }
        if (IsReadableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("Cannot cancel a stream that already has a reader"));
        }
        return ReadableStreamCancel(this, reason);
      }
      getReader(rawOptions = undefined) {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("getReader");
        }
        const options = convertReaderOptions(rawOptions, "First parameter");
        if (options.mode === undefined) {
          return AcquireReadableStreamDefaultReader(this);
        }
        return AcquireReadableStreamBYOBReader(this);
      }
      pipeThrough(rawTransform, rawOptions = {}) {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("pipeThrough");
        }
        assertRequiredArgument(rawTransform, 1, "pipeThrough");
        const transform = convertReadableWritablePair(rawTransform, "First parameter");
        const options = convertPipeOptions(rawOptions, "Second parameter");
        if (IsReadableStreamLocked(this)) {
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
        }
        if (IsWritableStreamLocked(transform.writable)) {
          throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
        }
        const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        setPromiseIsHandledToTrue(promise);
        return transform.readable;
      }
      pipeTo(destination, rawOptions = {}) {
        if (!IsReadableStream(this)) {
          return promiseRejectedWith(streamBrandCheckException$1("pipeTo"));
        }
        if (destination === undefined) {
          return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
        }
        if (!IsWritableStream(destination)) {
          return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
        }
        let options;
        try {
          options = convertPipeOptions(rawOptions, "Second parameter");
        } catch (e) {
          return promiseRejectedWith(e);
        }
        if (IsReadableStreamLocked(this)) {
          return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream"));
        }
        if (IsWritableStreamLocked(destination)) {
          return promiseRejectedWith(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream"));
        }
        return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
      }
      tee() {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("tee");
        }
        const branches = ReadableStreamTee(this);
        return CreateArrayFromList(branches);
      }
      values(rawOptions = undefined) {
        if (!IsReadableStream(this)) {
          throw streamBrandCheckException$1("values");
        }
        const options = convertIteratorOptions(rawOptions, "First parameter");
        return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
      }
    }
    Object.defineProperties(ReadableStream2.prototype, {
      cancel: { enumerable: true },
      getReader: { enumerable: true },
      pipeThrough: { enumerable: true },
      pipeTo: { enumerable: true },
      tee: { enumerable: true },
      values: { enumerable: true },
      locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {
        value: "ReadableStream",
        configurable: true
      });
    }
    if (typeof SymbolPolyfill.asyncIterator === "symbol") {
      Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {
        value: ReadableStream2.prototype.values,
        writable: true,
        configurable: true
      });
    }
    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
      const stream = Object.create(ReadableStream2.prototype);
      InitializeReadableStream(stream);
      const controller = Object.create(ReadableStreamDefaultController.prototype);
      SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
      return stream;
    }
    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
      const stream = Object.create(ReadableStream2.prototype);
      InitializeReadableStream(stream);
      const controller = Object.create(ReadableByteStreamController.prototype);
      SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);
      return stream;
    }
    function InitializeReadableStream(stream) {
      stream._state = "readable";
      stream._reader = undefined;
      stream._storedError = undefined;
      stream._disturbed = false;
    }
    function IsReadableStream(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_readableStreamController")) {
        return false;
      }
      return x instanceof ReadableStream2;
    }
    function IsReadableStreamLocked(stream) {
      if (stream._reader === undefined) {
        return false;
      }
      return true;
    }
    function ReadableStreamCancel(stream, reason) {
      stream._disturbed = true;
      if (stream._state === "closed") {
        return promiseResolvedWith(undefined);
      }
      if (stream._state === "errored") {
        return promiseRejectedWith(stream._storedError);
      }
      ReadableStreamClose(stream);
      const reader = stream._reader;
      if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {
        reader._readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._closeSteps(undefined);
        });
        reader._readIntoRequests = new SimpleQueue;
      }
      const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
      return transformPromiseWith(sourceCancelPromise, noop);
    }
    function ReadableStreamClose(stream) {
      stream._state = "closed";
      const reader = stream._reader;
      if (reader === undefined) {
        return;
      }
      defaultReaderClosedPromiseResolve(reader);
      if (IsReadableStreamDefaultReader(reader)) {
        reader._readRequests.forEach((readRequest) => {
          readRequest._closeSteps();
        });
        reader._readRequests = new SimpleQueue;
      }
    }
    function ReadableStreamError(stream, e) {
      stream._state = "errored";
      stream._storedError = e;
      const reader = stream._reader;
      if (reader === undefined) {
        return;
      }
      defaultReaderClosedPromiseReject(reader, e);
      if (IsReadableStreamDefaultReader(reader)) {
        reader._readRequests.forEach((readRequest) => {
          readRequest._errorSteps(e);
        });
        reader._readRequests = new SimpleQueue;
      } else {
        reader._readIntoRequests.forEach((readIntoRequest) => {
          readIntoRequest._errorSteps(e);
        });
        reader._readIntoRequests = new SimpleQueue;
      }
    }
    function streamBrandCheckException$1(name) {
      return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
    }
    function convertQueuingStrategyInit(init, context) {
      assertDictionary(init, context);
      const highWaterMark = init === null || init === undefined ? undefined : init.highWaterMark;
      assertRequiredField(highWaterMark, "highWaterMark", "QueuingStrategyInit");
      return {
        highWaterMark: convertUnrestrictedDouble(highWaterMark)
      };
    }
    const byteLengthSizeFunction = (chunk) => {
      return chunk.byteLength;
    };
    try {
      Object.defineProperty(byteLengthSizeFunction, "name", {
        value: "size",
        configurable: true
      });
    } catch (_a) {
    }

    class ByteLengthQueuingStrategy {
      constructor(options) {
        assertRequiredArgument(options, 1, "ByteLengthQueuingStrategy");
        options = convertQueuingStrategyInit(options, "First parameter");
        this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
      }
      get highWaterMark() {
        if (!IsByteLengthQueuingStrategy(this)) {
          throw byteLengthBrandCheckException("highWaterMark");
        }
        return this._byteLengthQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!IsByteLengthQueuingStrategy(this)) {
          throw byteLengthBrandCheckException("size");
        }
        return byteLengthSizeFunction;
      }
    }
    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
      highWaterMark: { enumerable: true },
      size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
        value: "ByteLengthQueuingStrategy",
        configurable: true
      });
    }
    function byteLengthBrandCheckException(name) {
      return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
    }
    function IsByteLengthQueuingStrategy(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_byteLengthQueuingStrategyHighWaterMark")) {
        return false;
      }
      return x instanceof ByteLengthQueuingStrategy;
    }
    const countSizeFunction = () => {
      return 1;
    };
    try {
      Object.defineProperty(countSizeFunction, "name", {
        value: "size",
        configurable: true
      });
    } catch (_a) {
    }

    class CountQueuingStrategy {
      constructor(options) {
        assertRequiredArgument(options, 1, "CountQueuingStrategy");
        options = convertQueuingStrategyInit(options, "First parameter");
        this._countQueuingStrategyHighWaterMark = options.highWaterMark;
      }
      get highWaterMark() {
        if (!IsCountQueuingStrategy(this)) {
          throw countBrandCheckException("highWaterMark");
        }
        return this._countQueuingStrategyHighWaterMark;
      }
      get size() {
        if (!IsCountQueuingStrategy(this)) {
          throw countBrandCheckException("size");
        }
        return countSizeFunction;
      }
    }
    Object.defineProperties(CountQueuingStrategy.prototype, {
      highWaterMark: { enumerable: true },
      size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
        value: "CountQueuingStrategy",
        configurable: true
      });
    }
    function countBrandCheckException(name) {
      return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
    }
    function IsCountQueuingStrategy(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_countQueuingStrategyHighWaterMark")) {
        return false;
      }
      return x instanceof CountQueuingStrategy;
    }
    function convertTransformer(original, context) {
      assertDictionary(original, context);
      const flush = original === null || original === undefined ? undefined : original.flush;
      const readableType = original === null || original === undefined ? undefined : original.readableType;
      const start = original === null || original === undefined ? undefined : original.start;
      const transform = original === null || original === undefined ? undefined : original.transform;
      const writableType = original === null || original === undefined ? undefined : original.writableType;
      return {
        flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
        readableType,
        start: start === undefined ? undefined : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
        transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
        writableType
      };
    }
    function convertTransformerFlushCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertTransformerStartCallback(fn, original, context) {
      assertFunction(fn, context);
      return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertTransformerTransformCallback(fn, original, context) {
      assertFunction(fn, context);
      return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    class TransformStream {
      constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
        if (rawTransformer === undefined) {
          rawTransformer = null;
        }
        const writableStrategy = convertQueuingStrategy(rawWritableStrategy, "Second parameter");
        const readableStrategy = convertQueuingStrategy(rawReadableStrategy, "Third parameter");
        const transformer = convertTransformer(rawTransformer, "First parameter");
        if (transformer.readableType !== undefined) {
          throw new RangeError("Invalid readableType specified");
        }
        if (transformer.writableType !== undefined) {
          throw new RangeError("Invalid writableType specified");
        }
        const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
        const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
        const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
        const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
        let startPromise_resolve;
        const startPromise = newPromise((resolve) => {
          startPromise_resolve = resolve;
        });
        InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
        if (transformer.start !== undefined) {
          startPromise_resolve(transformer.start(this._transformStreamController));
        } else {
          startPromise_resolve(undefined);
        }
      }
      get readable() {
        if (!IsTransformStream(this)) {
          throw streamBrandCheckException("readable");
        }
        return this._readable;
      }
      get writable() {
        if (!IsTransformStream(this)) {
          throw streamBrandCheckException("writable");
        }
        return this._writable;
      }
    }
    Object.defineProperties(TransformStream.prototype, {
      readable: { enumerable: true },
      writable: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
        value: "TransformStream",
        configurable: true
      });
    }
    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
      function startAlgorithm() {
        return startPromise;
      }
      function writeAlgorithm(chunk) {
        return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
      }
      function abortAlgorithm(reason) {
        return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
      }
      function closeAlgorithm() {
        return TransformStreamDefaultSinkCloseAlgorithm(stream);
      }
      stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
      function pullAlgorithm() {
        return TransformStreamDefaultSourcePullAlgorithm(stream);
      }
      function cancelAlgorithm(reason) {
        TransformStreamErrorWritableAndUnblockWrite(stream, reason);
        return promiseResolvedWith(undefined);
      }
      stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
      stream._backpressure = undefined;
      stream._backpressureChangePromise = undefined;
      stream._backpressureChangePromise_resolve = undefined;
      TransformStreamSetBackpressure(stream, true);
      stream._transformStreamController = undefined;
    }
    function IsTransformStream(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_transformStreamController")) {
        return false;
      }
      return x instanceof TransformStream;
    }
    function TransformStreamError(stream, e) {
      ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
      TransformStreamErrorWritableAndUnblockWrite(stream, e);
    }
    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
      TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
      WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
      if (stream._backpressure) {
        TransformStreamSetBackpressure(stream, false);
      }
    }
    function TransformStreamSetBackpressure(stream, backpressure) {
      if (stream._backpressureChangePromise !== undefined) {
        stream._backpressureChangePromise_resolve();
      }
      stream._backpressureChangePromise = newPromise((resolve) => {
        stream._backpressureChangePromise_resolve = resolve;
      });
      stream._backpressure = backpressure;
    }

    class TransformStreamDefaultController {
      constructor() {
        throw new TypeError("Illegal constructor");
      }
      get desiredSize() {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("desiredSize");
        }
        const readableController = this._controlledTransformStream._readable._readableStreamController;
        return ReadableStreamDefaultControllerGetDesiredSize(readableController);
      }
      enqueue(chunk = undefined) {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("enqueue");
        }
        TransformStreamDefaultControllerEnqueue(this, chunk);
      }
      error(reason = undefined) {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("error");
        }
        TransformStreamDefaultControllerError(this, reason);
      }
      terminate() {
        if (!IsTransformStreamDefaultController(this)) {
          throw defaultControllerBrandCheckException("terminate");
        }
        TransformStreamDefaultControllerTerminate(this);
      }
    }
    Object.defineProperties(TransformStreamDefaultController.prototype, {
      enqueue: { enumerable: true },
      error: { enumerable: true },
      terminate: { enumerable: true },
      desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === "symbol") {
      Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
        value: "TransformStreamDefaultController",
        configurable: true
      });
    }
    function IsTransformStreamDefaultController(x) {
      if (!typeIsObject(x)) {
        return false;
      }
      if (!Object.prototype.hasOwnProperty.call(x, "_controlledTransformStream")) {
        return false;
      }
      return x instanceof TransformStreamDefaultController;
    }
    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
      controller._controlledTransformStream = stream;
      stream._transformStreamController = controller;
      controller._transformAlgorithm = transformAlgorithm;
      controller._flushAlgorithm = flushAlgorithm;
    }
    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
      const controller = Object.create(TransformStreamDefaultController.prototype);
      let transformAlgorithm = (chunk) => {
        try {
          TransformStreamDefaultControllerEnqueue(controller, chunk);
          return promiseResolvedWith(undefined);
        } catch (transformResultE) {
          return promiseRejectedWith(transformResultE);
        }
      };
      let flushAlgorithm = () => promiseResolvedWith(undefined);
      if (transformer.transform !== undefined) {
        transformAlgorithm = (chunk) => transformer.transform(chunk, controller);
      }
      if (transformer.flush !== undefined) {
        flushAlgorithm = () => transformer.flush(controller);
      }
      SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
    }
    function TransformStreamDefaultControllerClearAlgorithms(controller) {
      controller._transformAlgorithm = undefined;
      controller._flushAlgorithm = undefined;
    }
    function TransformStreamDefaultControllerEnqueue(controller, chunk) {
      const stream = controller._controlledTransformStream;
      const readableController = stream._readable._readableStreamController;
      if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
        throw new TypeError("Readable side is not in a state that permits enqueue");
      }
      try {
        ReadableStreamDefaultControllerEnqueue(readableController, chunk);
      } catch (e) {
        TransformStreamErrorWritableAndUnblockWrite(stream, e);
        throw stream._readable._storedError;
      }
      const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
      if (backpressure !== stream._backpressure) {
        TransformStreamSetBackpressure(stream, true);
      }
    }
    function TransformStreamDefaultControllerError(controller, e) {
      TransformStreamError(controller._controlledTransformStream, e);
    }
    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
      const transformPromise = controller._transformAlgorithm(chunk);
      return transformPromiseWith(transformPromise, undefined, (r) => {
        TransformStreamError(controller._controlledTransformStream, r);
        throw r;
      });
    }
    function TransformStreamDefaultControllerTerminate(controller) {
      const stream = controller._controlledTransformStream;
      const readableController = stream._readable._readableStreamController;
      ReadableStreamDefaultControllerClose(readableController);
      const error = new TypeError("TransformStream terminated");
      TransformStreamErrorWritableAndUnblockWrite(stream, error);
    }
    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
      const controller = stream._transformStreamController;
      if (stream._backpressure) {
        const backpressureChangePromise = stream._backpressureChangePromise;
        return transformPromiseWith(backpressureChangePromise, () => {
          const writable = stream._writable;
          const state = writable._state;
          if (state === "erroring") {
            throw writable._storedError;
          }
          return TransformStreamDefaultControllerPerformTransform(controller, chunk);
        });
      }
      return TransformStreamDefaultControllerPerformTransform(controller, chunk);
    }
    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
      TransformStreamError(stream, reason);
      return promiseResolvedWith(undefined);
    }
    function TransformStreamDefaultSinkCloseAlgorithm(stream) {
      const readable = stream._readable;
      const controller = stream._transformStreamController;
      const flushPromise = controller._flushAlgorithm();
      TransformStreamDefaultControllerClearAlgorithms(controller);
      return transformPromiseWith(flushPromise, () => {
        if (readable._state === "errored") {
          throw readable._storedError;
        }
        ReadableStreamDefaultControllerClose(readable._readableStreamController);
      }, (r) => {
        TransformStreamError(stream, r);
        throw readable._storedError;
      });
    }
    function TransformStreamDefaultSourcePullAlgorithm(stream) {
      TransformStreamSetBackpressure(stream, false);
      return stream._backpressureChangePromise;
    }
    function defaultControllerBrandCheckException(name) {
      return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
    }
    function streamBrandCheckException(name) {
      return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
    }
    exports2.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
    exports2.CountQueuingStrategy = CountQueuingStrategy;
    exports2.ReadableByteStreamController = ReadableByteStreamController;
    exports2.ReadableStream = ReadableStream2;
    exports2.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
    exports2.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
    exports2.ReadableStreamDefaultController = ReadableStreamDefaultController;
    exports2.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
    exports2.TransformStream = TransformStream;
    exports2.TransformStreamDefaultController = TransformStreamDefaultController;
    exports2.WritableStream = WritableStream;
    exports2.WritableStreamDefaultController = WritableStreamDefaultController;
    exports2.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
});

// node_modules/node-fetch-commonjs/multipart-parser-25a14693.js
var require_multipart_parser_25a14693 = __commonJS((exports) => {
  var _fileName = function(headerValue) {
    const m = headerValue.match(/\bfilename=("(.*?)"|([^()<>@,;:\\"/[\]?={}\s\t]+))($|;\s)/i);
    if (!m) {
      return;
    }
    const match = m[2] || m[3] || "";
    let filename = match.slice(match.lastIndexOf("\\") + 1);
    filename = filename.replace(/%22/g, '"');
    filename = filename.replace(/&#(\d{4});/g, (m2, code) => {
      return String.fromCharCode(code);
    });
    return filename;
  };
  async function toFormData(Body, ct) {
    if (!/multipart/i.test(ct)) {
      throw new TypeError("Failed to fetch");
    }
    const m = ct.match(/boundary=(?:"([^"]+)"|([^;]+))/i);
    if (!m) {
      throw new TypeError("no or bad content-type header, no multipart boundary");
    }
    const parser = new MultipartParser(m[1] || m[2]);
    let headerField;
    let headerValue;
    let entryValue;
    let entryName;
    let contentType;
    let filename;
    const entryChunks = [];
    const formData = new index.FormData;
    const onPartData = (ui8a) => {
      entryValue += decoder.decode(ui8a, { stream: true });
    };
    const appendToFile = (ui8a) => {
      entryChunks.push(ui8a);
    };
    const appendFileToFormData = () => {
      const file = new index.File(entryChunks, filename, { type: contentType });
      formData.append(entryName, file);
    };
    const appendEntryToFormData = () => {
      formData.append(entryName, entryValue);
    };
    const decoder = new TextDecoder("utf-8");
    decoder.decode();
    parser.onPartBegin = function() {
      parser.onPartData = onPartData;
      parser.onPartEnd = appendEntryToFormData;
      headerField = "";
      headerValue = "";
      entryValue = "";
      entryName = "";
      contentType = "";
      filename = null;
      entryChunks.length = 0;
    };
    parser.onHeaderField = function(ui8a) {
      headerField += decoder.decode(ui8a, { stream: true });
    };
    parser.onHeaderValue = function(ui8a) {
      headerValue += decoder.decode(ui8a, { stream: true });
    };
    parser.onHeaderEnd = function() {
      headerValue += decoder.decode();
      headerField = headerField.toLowerCase();
      if (headerField === "content-disposition") {
        const m2 = headerValue.match(/\bname=("([^"]*)"|([^()<>@,;:\\"/[\]?={}\s\t]+))/i);
        if (m2) {
          entryName = m2[2] || m2[3] || "";
        }
        filename = _fileName(headerValue);
        if (filename) {
          parser.onPartData = appendToFile;
          parser.onPartEnd = appendFileToFormData;
        }
      } else if (headerField === "content-type") {
        contentType = headerValue;
      }
      headerValue = "";
      headerField = "";
    };
    for await (const chunk of Body) {
      parser.write(chunk);
    }
    parser.end();
    return formData;
  }
  __require("fs");
  __require("path");
  require_node_domexception();
  var index = require_node_fetch_commonjs();
  __require("http");
  __require("https");
  __require("zlib");
  __require("stream");
  __require("buffer");
  __require("util");
  __require("url");
  __require("net");
  var s = 0;
  var S = {
    START_BOUNDARY: s++,
    HEADER_FIELD_START: s++,
    HEADER_FIELD: s++,
    HEADER_VALUE_START: s++,
    HEADER_VALUE: s++,
    HEADER_VALUE_ALMOST_DONE: s++,
    HEADERS_ALMOST_DONE: s++,
    PART_DATA_START: s++,
    PART_DATA: s++,
    END: s++
  };
  var f = 1;
  var F = {
    PART_BOUNDARY: f,
    LAST_BOUNDARY: f *= 2
  };
  var LF = 10;
  var CR = 13;
  var SPACE = 32;
  var HYPHEN = 45;
  var COLON = 58;
  var A = 97;
  var Z = 122;
  var lower = (c) => c | 32;
  var noop = () => {
  };

  class MultipartParser {
    constructor(boundary) {
      this.index = 0;
      this.flags = 0;
      this.onHeaderEnd = noop;
      this.onHeaderField = noop;
      this.onHeadersEnd = noop;
      this.onHeaderValue = noop;
      this.onPartBegin = noop;
      this.onPartData = noop;
      this.onPartEnd = noop;
      this.boundaryChars = {};
      boundary = "\r\n--" + boundary;
      const ui8a = new Uint8Array(boundary.length);
      for (let i = 0;i < boundary.length; i++) {
        ui8a[i] = boundary.charCodeAt(i);
        this.boundaryChars[ui8a[i]] = true;
      }
      this.boundary = ui8a;
      this.lookbehind = new Uint8Array(this.boundary.length + 8);
      this.state = S.START_BOUNDARY;
    }
    write(data) {
      let i = 0;
      const length_ = data.length;
      let previousIndex = this.index;
      let { lookbehind, boundary, boundaryChars, index: index2, state, flags } = this;
      const boundaryLength = this.boundary.length;
      const boundaryEnd = boundaryLength - 1;
      const bufferLength = data.length;
      let c;
      let cl;
      const mark = (name) => {
        this[name + "Mark"] = i;
      };
      const clear = (name) => {
        delete this[name + "Mark"];
      };
      const callback = (callbackSymbol, start, end, ui8a) => {
        if (start === undefined || start !== end) {
          this[callbackSymbol](ui8a && ui8a.subarray(start, end));
        }
      };
      const dataCallback = (name, clear2) => {
        const markSymbol = name + "Mark";
        if (!(markSymbol in this)) {
          return;
        }
        if (clear2) {
          callback(name, this[markSymbol], i, data);
          delete this[markSymbol];
        } else {
          callback(name, this[markSymbol], data.length, data);
          this[markSymbol] = 0;
        }
      };
      for (i = 0;i < length_; i++) {
        c = data[i];
        switch (state) {
          case S.START_BOUNDARY:
            if (index2 === boundary.length - 2) {
              if (c === HYPHEN) {
                flags |= F.LAST_BOUNDARY;
              } else if (c !== CR) {
                return;
              }
              index2++;
              break;
            } else if (index2 - 1 === boundary.length - 2) {
              if (flags & F.LAST_BOUNDARY && c === HYPHEN) {
                state = S.END;
                flags = 0;
              } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {
                index2 = 0;
                callback("onPartBegin");
                state = S.HEADER_FIELD_START;
              } else {
                return;
              }
              break;
            }
            if (c !== boundary[index2 + 2]) {
              index2 = -2;
            }
            if (c === boundary[index2 + 2]) {
              index2++;
            }
            break;
          case S.HEADER_FIELD_START:
            state = S.HEADER_FIELD;
            mark("onHeaderField");
            index2 = 0;
          case S.HEADER_FIELD:
            if (c === CR) {
              clear("onHeaderField");
              state = S.HEADERS_ALMOST_DONE;
              break;
            }
            index2++;
            if (c === HYPHEN) {
              break;
            }
            if (c === COLON) {
              if (index2 === 1) {
                return;
              }
              dataCallback("onHeaderField", true);
              state = S.HEADER_VALUE_START;
              break;
            }
            cl = lower(c);
            if (cl < A || cl > Z) {
              return;
            }
            break;
          case S.HEADER_VALUE_START:
            if (c === SPACE) {
              break;
            }
            mark("onHeaderValue");
            state = S.HEADER_VALUE;
          case S.HEADER_VALUE:
            if (c === CR) {
              dataCallback("onHeaderValue", true);
              callback("onHeaderEnd");
              state = S.HEADER_VALUE_ALMOST_DONE;
            }
            break;
          case S.HEADER_VALUE_ALMOST_DONE:
            if (c !== LF) {
              return;
            }
            state = S.HEADER_FIELD_START;
            break;
          case S.HEADERS_ALMOST_DONE:
            if (c !== LF) {
              return;
            }
            callback("onHeadersEnd");
            state = S.PART_DATA_START;
            break;
          case S.PART_DATA_START:
            state = S.PART_DATA;
            mark("onPartData");
          case S.PART_DATA:
            previousIndex = index2;
            if (index2 === 0) {
              i += boundaryEnd;
              while (i < bufferLength && !(data[i] in boundaryChars)) {
                i += boundaryLength;
              }
              i -= boundaryEnd;
              c = data[i];
            }
            if (index2 < boundary.length) {
              if (boundary[index2] === c) {
                if (index2 === 0) {
                  dataCallback("onPartData", true);
                }
                index2++;
              } else {
                index2 = 0;
              }
            } else if (index2 === boundary.length) {
              index2++;
              if (c === CR) {
                flags |= F.PART_BOUNDARY;
              } else if (c === HYPHEN) {
                flags |= F.LAST_BOUNDARY;
              } else {
                index2 = 0;
              }
            } else if (index2 - 1 === boundary.length) {
              if (flags & F.PART_BOUNDARY) {
                index2 = 0;
                if (c === LF) {
                  flags &= ~F.PART_BOUNDARY;
                  callback("onPartEnd");
                  callback("onPartBegin");
                  state = S.HEADER_FIELD_START;
                  break;
                }
              } else if (flags & F.LAST_BOUNDARY) {
                if (c === HYPHEN) {
                  callback("onPartEnd");
                  state = S.END;
                  flags = 0;
                } else {
                  index2 = 0;
                }
              } else {
                index2 = 0;
              }
            }
            if (index2 > 0) {
              lookbehind[index2 - 1] = c;
            } else if (previousIndex > 0) {
              const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);
              callback("onPartData", 0, previousIndex, _lookbehind);
              previousIndex = 0;
              mark("onPartData");
              i--;
            }
            break;
          case S.END:
            break;
          default:
            throw new Error(`Unexpected state entered: ${state}`);
        }
      }
      dataCallback("onHeaderField");
      dataCallback("onHeaderValue");
      dataCallback("onPartData");
      this.index = index2;
      this.state = state;
      this.flags = flags;
    }
    end() {
      if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {
        this.onPartEnd();
      } else if (this.state !== S.END) {
        throw new Error("MultipartParser.end(): stream ended unexpectedly");
      }
    }
  }
  exports.toFormData = toFormData;
});

// node_modules/node-fetch-commonjs/index.js
var require_node_fetch_commonjs = __commonJS((exports, module) => {
  var dataUriToBuffer = function(uri) {
    if (!/^data:/i.test(uri)) {
      throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
    }
    uri = uri.replace(/\r?\n/g, "");
    const firstComma = uri.indexOf(",");
    if (firstComma === -1 || firstComma <= 4) {
      throw new TypeError("malformed data: URI");
    }
    const meta = uri.substring(5, firstComma).split(";");
    let charset = "";
    let base64 = false;
    const type = meta[0] || "text/plain";
    let typeFull = type;
    for (let i2 = 1;i2 < meta.length; i2++) {
      if (meta[i2] === "base64") {
        base64 = true;
      } else if (meta[i2]) {
        typeFull += `;${meta[i2]}`;
        if (meta[i2].indexOf("charset=") === 0) {
          charset = meta[i2].substring(8);
        }
      }
    }
    if (!meta[0] && !charset.length) {
      typeFull += ";charset=US-ASCII";
      charset = "US-ASCII";
    }
    const encoding = base64 ? "base64" : "ascii";
    const data = unescape(uri.substring(firstComma + 1));
    const buffer2 = Buffer.from(data, encoding);
    buffer2.type = type;
    buffer2.typeFull = typeFull;
    buffer2.charset = charset;
    return buffer2;
  };
  async function* toIterator(parts, clone2 = true) {
    for (const part of parts) {
      if ("stream" in part) {
        yield* part.stream();
      } else if (ArrayBuffer.isView(part)) {
        if (clone2) {
          let position = part.byteOffset;
          const end = part.byteOffset + part.byteLength;
          while (position !== end) {
            const size = Math.min(end - position, POOL_SIZE);
            const chunk = part.buffer.slice(position, position + size);
            position += chunk.byteLength;
            yield new Uint8Array(chunk);
          }
        } else {
          yield part;
        }
      } else {
        let position = 0, b = part;
        while (position !== b.size) {
          const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));
          const buffer2 = await chunk.arrayBuffer();
          position += buffer2.byteLength;
          yield new Uint8Array(buffer2);
        }
      }
    }
  }
  var formDataToBlob = function(F, B = Blob2) {
    var b = `${r()}${r()}`.replace(/\./g, "").slice(-28).padStart(32, "-"), c = [], p = `--${b}\r\nContent-Disposition: form-data; name="`;
    F.forEach((v, n) => typeof v == "string" ? c.push(p + e(n) + `"\r\n\r\n${v.replace(/\r(?!\n)|(?<!\r)\n/g, "\r\n")}\r\n`) : c.push(p + e(n) + `"; filename="${e(v.name, 1)}"\r\nContent-Type: ${v.type || "application/octet-stream"}\r\n\r\n`, v, "\r\n"));
    c.push(`--${b}--`);
    return new B(c, { type: "multipart/form-data; boundary=" + b });
  };
  async function consumeBody(data) {
    if (data[INTERNALS$2].disturbed) {
      throw new TypeError(`body used already for: ${data.url}`);
    }
    data[INTERNALS$2].disturbed = true;
    if (data[INTERNALS$2].error) {
      throw data[INTERNALS$2].error;
    }
    const { body } = data;
    if (body === null) {
      return buffer.Buffer.alloc(0);
    }
    if (!(body instanceof Stream)) {
      return buffer.Buffer.alloc(0);
    }
    const accum = [];
    let accumBytes = 0;
    try {
      for await (const chunk of body) {
        if (data.size > 0 && accumBytes + chunk.length > data.size) {
          const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
          body.destroy(error);
          throw error;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      }
    } catch (error) {
      const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, "system", error);
      throw error_;
    }
    if (body.readableEnded === true || body._readableState.ended === true) {
      try {
        if (accum.every((c) => typeof c === "string")) {
          return buffer.Buffer.from(accum.join(""));
        }
        return buffer.Buffer.concat(accum, accumBytes);
      } catch (error) {
        throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, "system", error);
      }
    } else {
      throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
    }
  }
  var fromRawHeaders = function(headers = []) {
    return new Headers2(headers.reduce((result, value, index, array) => {
      if (index % 2 === 0) {
        result.push(array.slice(index, index + 2));
      }
      return result;
    }, []).filter(([name, value]) => {
      try {
        validateHeaderName(name);
        validateHeaderValue(name, String(value));
        return true;
      } catch {
        return false;
      }
    }));
  };
  var stripURLForUseAsAReferrer = function(url2, originOnly = false) {
    if (url2 == null) {
      return "no-referrer";
    }
    url2 = new URL(url2);
    if (/^(about|blob|data):$/.test(url2.protocol)) {
      return "no-referrer";
    }
    url2.username = "";
    url2.password = "";
    url2.hash = "";
    if (originOnly) {
      url2.pathname = "";
      url2.search = "";
    }
    return url2;
  };
  var validateReferrerPolicy = function(referrerPolicy) {
    if (!ReferrerPolicy.has(referrerPolicy)) {
      throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
    }
    return referrerPolicy;
  };
  var isOriginPotentiallyTrustworthy = function(url2) {
    if (/^(http|ws)s:$/.test(url2.protocol)) {
      return true;
    }
    const hostIp = url2.host.replace(/(^\[)|(]$)/g, "");
    const hostIPVersion = net.isIP(hostIp);
    if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
      return true;
    }
    if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
      return true;
    }
    if (url2.host === "localhost" || url2.host.endsWith(".localhost")) {
      return false;
    }
    if (url2.protocol === "file:") {
      return true;
    }
    return false;
  };
  var isUrlPotentiallyTrustworthy = function(url2) {
    if (/^about:(blank|srcdoc)$/.test(url2)) {
      return true;
    }
    if (url2.protocol === "data:") {
      return true;
    }
    if (/^(blob|filesystem):$/.test(url2.protocol)) {
      return true;
    }
    return isOriginPotentiallyTrustworthy(url2);
  };
  var determineRequestsReferrer = function(request, { referrerURLCallback, referrerOriginCallback } = {}) {
    if (request.referrer === "no-referrer" || request.referrerPolicy === "") {
      return null;
    }
    const policy = request.referrerPolicy;
    if (request.referrer === "about:client") {
      return "no-referrer";
    }
    const referrerSource = request.referrer;
    let referrerURL = stripURLForUseAsAReferrer(referrerSource);
    let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);
    if (referrerURL.toString().length > 4096) {
      referrerURL = referrerOrigin;
    }
    if (referrerURLCallback) {
      referrerURL = referrerURLCallback(referrerURL);
    }
    if (referrerOriginCallback) {
      referrerOrigin = referrerOriginCallback(referrerOrigin);
    }
    const currentURL = new URL(request.url);
    switch (policy) {
      case "no-referrer":
        return "no-referrer";
      case "origin":
        return referrerOrigin;
      case "unsafe-url":
        return referrerURL;
      case "strict-origin":
        if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin.toString();
      case "strict-origin-when-cross-origin":
        if (referrerURL.origin === currentURL.origin) {
          return referrerURL;
        }
        if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerOrigin;
      case "same-origin":
        if (referrerURL.origin === currentURL.origin) {
          return referrerURL;
        }
        return "no-referrer";
      case "origin-when-cross-origin":
        if (referrerURL.origin === currentURL.origin) {
          return referrerURL;
        }
        return referrerOrigin;
      case "no-referrer-when-downgrade":
        if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
          return "no-referrer";
        }
        return referrerURL;
      default:
        throw new TypeError(`Invalid referrerPolicy: ${policy}`);
    }
  };
  var parseReferrerPolicyFromHeader = function(headers) {
    const policyTokens = (headers.get("referrer-policy") || "").split(/[,\s]+/);
    let policy = "";
    for (const token of policyTokens) {
      if (token && ReferrerPolicy.has(token)) {
        policy = token;
      }
    }
    return policy;
  };
  async function fetch2(url2, options_) {
    return new Promise((resolve, reject) => {
      const request = new Request(url2, options_);
      const { parsedURL, options } = getNodeRequestOptions(request);
      if (!supportedSchemas.has(parsedURL.protocol)) {
        throw new TypeError(`node-fetch cannot load ${url2}. URL scheme "${parsedURL.protocol.replace(/:$/, "")}" is not supported.`);
      }
      if (parsedURL.protocol === "data:") {
        const data = dataUriToBuffer(request.url);
        const response2 = new Response2(data, { headers: { "Content-Type": data.typeFull } });
        resolve(response2);
        return;
      }
      const send = (parsedURL.protocol === "https:" ? https : http).request;
      const { signal } = request;
      let response = null;
      const abort = () => {
        const error = new AbortError("The operation was aborted.");
        reject(error);
        if (request.body && request.body instanceof Stream.Readable) {
          request.body.destroy(error);
        }
        if (!response || !response.body) {
          return;
        }
        response.body.emit("error", error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = () => {
        abort();
        finalize();
      };
      const request_ = send(parsedURL.toString(), options);
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      const finalize = () => {
        request_.abort();
        if (signal) {
          signal.removeEventListener("abort", abortAndFinalize);
        }
      };
      request_.on("error", (error) => {
        reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, "system", error));
        finalize();
      });
      fixResponseChunkedTransferBadEnding(request_, (error) => {
        if (response && response.body) {
          response.body.destroy(error);
        }
      });
      if (process.version < "v14") {
        request_.on("socket", (s) => {
          let endedWithEventsCount;
          s.prependListener("end", () => {
            endedWithEventsCount = s._eventsCount;
          });
          s.prependListener("close", (hadError) => {
            if (response && endedWithEventsCount < s._eventsCount && !hadError) {
              const error = new Error("Premature close");
              error.code = "ERR_STREAM_PREMATURE_CLOSE";
              response.body.emit("error", error);
            }
          });
        });
      }
      request_.on("response", (response_) => {
        request_.setTimeout(0);
        const headers = fromRawHeaders(response_.rawHeaders);
        if (isRedirect(response_.statusCode)) {
          const location = headers.get("Location");
          let locationURL = null;
          try {
            locationURL = location === null ? null : new URL(location, request.url);
          } catch {
            if (request.redirect !== "manual") {
              reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
              finalize();
              return;
            }
          }
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              break;
            case "follow": {
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOptions = {
                headers: new Headers2(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: clone(request),
                signal: request.signal,
                size: request.size,
                referrer: request.referrer,
                referrerPolicy: request.referrerPolicy
              };
              if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                  requestOptions.headers.delete(name);
                }
              }
              if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream.Readable) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
                requestOptions.method = "GET";
                requestOptions.body = undefined;
                requestOptions.headers.delete("content-length");
              }
              const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
              if (responseReferrerPolicy) {
                requestOptions.referrerPolicy = responseReferrerPolicy;
              }
              resolve(fetch2(new Request(locationURL, requestOptions)));
              finalize();
              return;
            }
            default:
              return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
          }
        }
        if (signal) {
          response_.once("end", () => {
            signal.removeEventListener("abort", abortAndFinalize);
          });
        }
        let body = Stream.pipeline(response_, new Stream.PassThrough, (error) => {
          if (error) {
            reject(error);
          }
        });
        if (process.version < "v12.10") {
          response_.on("aborted", abortAndFinalize);
        }
        const responseOptions = {
          url: request.url,
          status: response_.statusCode,
          statusText: response_.statusMessage,
          headers,
          size: request.size,
          counter: request.counter,
          highWaterMark: request.highWaterMark
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
          response = new Response2(body, responseOptions);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: zlib.Z_SYNC_FLUSH,
          finishFlush: zlib.Z_SYNC_FLUSH
        };
        if (codings === "gzip" || codings === "x-gzip") {
          body = Stream.pipeline(body, zlib.createGunzip(zlibOptions), (error) => {
            if (error) {
              reject(error);
            }
          });
          response = new Response2(body, responseOptions);
          resolve(response);
          return;
        }
        if (codings === "deflate" || codings === "x-deflate") {
          const raw = Stream.pipeline(response_, new Stream.PassThrough, (error) => {
            if (error) {
              reject(error);
            }
          });
          raw.once("data", (chunk) => {
            if ((chunk[0] & 15) === 8) {
              body = Stream.pipeline(body, zlib.createInflate(), (error) => {
                if (error) {
                  reject(error);
                }
              });
            } else {
              body = Stream.pipeline(body, zlib.createInflateRaw(), (error) => {
                if (error) {
                  reject(error);
                }
              });
            }
            response = new Response2(body, responseOptions);
            resolve(response);
          });
          raw.once("end", () => {
            if (!response) {
              response = new Response2(body, responseOptions);
              resolve(response);
            }
          });
          return;
        }
        if (codings === "br") {
          body = Stream.pipeline(body, zlib.createBrotliDecompress(), (error) => {
            if (error) {
              reject(error);
            }
          });
          response = new Response2(body, responseOptions);
          resolve(response);
          return;
        }
        response = new Response2(body, responseOptions);
        resolve(response);
      });
      writeToStream(request_, request).catch(reject);
    });
  }
  var fixResponseChunkedTransferBadEnding = function(request, errorCallback) {
    const LAST_CHUNK = buffer.Buffer.from("0\r\n\r\n");
    let isChunkedTransfer = false;
    let properLastChunkReceived = false;
    let previousChunk;
    request.on("response", (response) => {
      const { headers } = response;
      isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
    });
    request.on("socket", (socket) => {
      const onSocketClose = () => {
        if (isChunkedTransfer && !properLastChunkReceived) {
          const error = new Error("Premature close");
          error.code = "ERR_STREAM_PREMATURE_CLOSE";
          errorCallback(error);
        }
      };
      const onData = (buf) => {
        properLastChunkReceived = buffer.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
        if (!properLastChunkReceived && previousChunk) {
          properLastChunkReceived = buffer.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && buffer.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
        }
        previousChunk = buf;
      };
      socket.prependListener("close", onSocketClose);
      socket.on("data", onData);
      request.on("close", () => {
        socket.removeListener("close", onSocketClose);
        socket.removeListener("data", onData);
      });
    });
  };
  exports = module.exports = fetch2;
  Object.defineProperty(exports, "__esModule", { value: true });
  var http = __require("http");
  var https = __require("https");
  var zlib = __require("zlib");
  var Stream = __require("stream");
  var buffer = __require("buffer");
  var util = __require("util");
  var url = __require("url");
  var net = __require("net");
  var fs = __require("fs");
  var path = __require("path");
  var DOMException2 = require_node_domexception();
  var POOL_SIZE$1 = 65536;
  if (!globalThis.ReadableStream) {
    try {
      const process2 = __require("node:process");
      const { emitWarning } = process2;
      try {
        process2.emitWarning = () => {
        };
        Object.assign(globalThis, __require("node:stream/web"));
        process2.emitWarning = emitWarning;
      } catch (error) {
        process2.emitWarning = emitWarning;
        throw error;
      }
    } catch (error) {
      Object.assign(globalThis, require_ponyfill_es2018());
    }
  }
  try {
    const { Blob: Blob3 } = __require("buffer");
    if (Blob3 && !Blob3.prototype.stream) {
      Blob3.prototype.stream = function name(params) {
        let position = 0;
        const blob = this;
        return new ReadableStream({
          type: "bytes",
          async pull(ctrl) {
            const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE$1));
            const buffer2 = await chunk.arrayBuffer();
            position += buffer2.byteLength;
            ctrl.enqueue(new Uint8Array(buffer2));
            if (position === blob.size) {
              ctrl.close();
            }
          }
        });
      };
    }
  } catch (error) {
  }
  /*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
  var POOL_SIZE = 65536;
  var _Blob = class Blob3 {
    #parts = [];
    #type = "";
    #size = 0;
    #endings = "transparent";
    constructor(blobParts = [], options = {}) {
      if (typeof blobParts !== "object" || blobParts === null) {
        throw new TypeError("Failed to construct \'Blob\': The provided value cannot be converted to a sequence.");
      }
      if (typeof blobParts[Symbol.iterator] !== "function") {
        throw new TypeError("Failed to construct \'Blob\': The object must have a callable @@iterator property.");
      }
      if (typeof options !== "object" && typeof options !== "function") {
        throw new TypeError("Failed to construct \'Blob\': parameter 2 cannot convert to dictionary.");
      }
      if (options === null)
        options = {};
      const encoder = new TextEncoder;
      for (const element of blobParts) {
        let part;
        if (ArrayBuffer.isView(element)) {
          part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));
        } else if (element instanceof ArrayBuffer) {
          part = new Uint8Array(element.slice(0));
        } else if (element instanceof Blob3) {
          part = element;
        } else {
          part = encoder.encode(`${element}`);
        }
        this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;
        this.#parts.push(part);
      }
      this.#endings = `${options.endings === undefined ? "transparent" : options.endings}`;
      const type = options.type === undefined ? "" : String(options.type);
      this.#type = /^[\x20-\x7E]*$/.test(type) ? type : "";
    }
    get size() {
      return this.#size;
    }
    get type() {
      return this.#type;
    }
    async text() {
      const decoder = new TextDecoder;
      let str = "";
      for await (const part of toIterator(this.#parts, false)) {
        str += decoder.decode(part, { stream: true });
      }
      str += decoder.decode();
      return str;
    }
    async arrayBuffer() {
      const data = new Uint8Array(this.size);
      let offset = 0;
      for await (const chunk of toIterator(this.#parts, false)) {
        data.set(chunk, offset);
        offset += chunk.length;
      }
      return data.buffer;
    }
    stream() {
      const it = toIterator(this.#parts, true);
      return new globalThis.ReadableStream({
        type: "bytes",
        async pull(ctrl) {
          const chunk = await it.next();
          chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);
        },
        async cancel() {
          await it.return();
        }
      });
    }
    slice(start = 0, end = this.size, type = "") {
      const { size } = this;
      let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
      let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);
      const span = Math.max(relativeEnd - relativeStart, 0);
      const parts = this.#parts;
      const blobParts = [];
      let added = 0;
      for (const part of parts) {
        if (added >= span) {
          break;
        }
        const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
        if (relativeStart && size2 <= relativeStart) {
          relativeStart -= size2;
          relativeEnd -= size2;
        } else {
          let chunk;
          if (ArrayBuffer.isView(part)) {
            chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));
            added += chunk.byteLength;
          } else {
            chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
            added += chunk.size;
          }
          relativeEnd -= size2;
          blobParts.push(chunk);
          relativeStart = 0;
        }
      }
      const blob = new Blob3([], { type: String(type).toLowerCase() });
      blob.#size = span;
      blob.#parts = blobParts;
      return blob;
    }
    get [Symbol.toStringTag]() {
      return "Blob";
    }
    static [Symbol.hasInstance](object) {
      return object && typeof object === "object" && typeof object.constructor === "function" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
    }
  };
  Object.defineProperties(_Blob.prototype, {
    size: { enumerable: true },
    type: { enumerable: true },
    slice: { enumerable: true }
  });
  var Blob2 = _Blob;
  var _File = class File3 extends Blob2 {
    #lastModified = 0;
    #name = "";
    constructor(fileBits, fileName, options = {}) {
      if (arguments.length < 2) {
        throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);
      }
      super(fileBits, options);
      if (options === null)
        options = {};
      const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified);
      if (!Number.isNaN(lastModified)) {
        this.#lastModified = lastModified;
      }
      this.#name = String(fileName);
    }
    get name() {
      return this.#name;
    }
    get lastModified() {
      return this.#lastModified;
    }
    get [Symbol.toStringTag]() {
      return "File";
    }
    static [Symbol.hasInstance](object) {
      return !!object && object instanceof Blob2 && /^(File)$/.test(object[Symbol.toStringTag]);
    }
  };
  var File2 = _File;
  /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
  var { toStringTag: t, iterator: i, hasInstance: h } = Symbol;
  var r = Math.random;
  var m = "append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(",");
  var f = (a, b, c) => (a += "", /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== undefined ? c + "" : b[t] == "File" ? b.name : "blob", a), b.name !== c || b[t] == "blob" ? new File2([b], c, b) : b] : [a, b + ""]);
  var e = (c, f2) => (f2 ? c : c.replace(/\r?\n|\r/g, "\r\n")).replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
  var x = (n, a, e2) => {
    if (a.length < e2) {
      throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e2} arguments required, but only ${a.length} present.`);
    }
  };
  var FormData2 = class FormData3 {
    #d = [];
    constructor(...a) {
      if (a.length)
        throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);
    }
    get [t]() {
      return "FormData";
    }
    [i]() {
      return this.entries();
    }
    static [h](o) {
      return o && typeof o === "object" && o[t] === "FormData" && !m.some((m2) => typeof o[m2] != "function");
    }
    append(...a) {
      x("append", arguments, 2);
      this.#d.push(f(...a));
    }
    delete(a) {
      x("delete", arguments, 1);
      a += "";
      this.#d = this.#d.filter(([b]) => b !== a);
    }
    get(a) {
      x("get", arguments, 1);
      a += "";
      for (var b = this.#d, l = b.length, c = 0;c < l; c++)
        if (b[c][0] === a)
          return b[c][1];
      return null;
    }
    getAll(a, b) {
      x("getAll", arguments, 1);
      b = [];
      a += "";
      this.#d.forEach((c) => c[0] === a && b.push(c[1]));
      return b;
    }
    has(a) {
      x("has", arguments, 1);
      a += "";
      return this.#d.some((b) => b[0] === a);
    }
    forEach(a, b) {
      x("forEach", arguments, 1);
      for (var [c, d] of this)
        a.call(b, d, c, this);
    }
    set(...a) {
      x("set", arguments, 2);
      var b = [], c = true;
      a = f(...a);
      this.#d.forEach((d) => {
        d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);
      });
      c && b.push(a);
      this.#d = b;
    }
    *entries() {
      yield* this.#d;
    }
    *keys() {
      for (var [a] of this)
        yield a;
    }
    *values() {
      for (var [, a] of this)
        yield a;
    }
  };

  class FetchBaseError extends Error {
    constructor(message, type) {
      super(message);
      Error.captureStackTrace(this, this.constructor);
      this.type = type;
    }
    get name() {
      return this.constructor.name;
    }
    get [Symbol.toStringTag]() {
      return this.constructor.name;
    }
  }

  class FetchError extends FetchBaseError {
    constructor(message, type, systemError) {
      super(message, type);
      if (systemError) {
        this.code = this.errno = systemError.code;
        this.erroredSysCall = systemError.syscall;
      }
    }
  }
  var NAME = Symbol.toStringTag;
  var isURLSearchParameters = (object) => {
    return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
  };
  var isBlob = (object) => {
    return object && typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
  };
  var isAbortSignal = (object) => {
    return typeof object === "object" && (object[NAME] === "AbortSignal" || object[NAME] === "EventTarget");
  };
  var isDomainOrSubdomain = (destination, original) => {
    const orig = new URL(original).hostname;
    const dest = new URL(destination).hostname;
    return orig === dest || orig.endsWith(`.${dest}`);
  };
  var isSameProtocol = (destination, original) => {
    const orig = new URL(original).protocol;
    const dest = new URL(destination).protocol;
    return orig === dest;
  };
  var pipeline = util.promisify(Stream.pipeline);
  var INTERNALS$2 = Symbol("Body internals");

  class Body {
    constructor(body, {
      size = 0
    } = {}) {
      let boundary = null;
      if (body === null) {
        body = null;
      } else if (isURLSearchParameters(body)) {
        body = buffer.Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (buffer.Buffer.isBuffer(body))
        ;
      else if (util.types.isAnyArrayBuffer(body)) {
        body = buffer.Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else if (body instanceof FormData2) {
        body = formDataToBlob(body);
        boundary = body.type.split("=")[1];
      } else {
        body = buffer.Buffer.from(String(body));
      }
      let stream = body;
      if (buffer.Buffer.isBuffer(body)) {
        stream = Stream.Readable.from(body);
      } else if (isBlob(body)) {
        stream = Stream.Readable.from(body.stream());
      }
      this[INTERNALS$2] = {
        body,
        stream,
        boundary,
        disturbed: false,
        error: null
      };
      this.size = size;
      if (body instanceof Stream) {
        body.on("error", (error_) => {
          const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, "system", error_);
          this[INTERNALS$2].error = error;
        });
      }
    }
    get body() {
      return this[INTERNALS$2].stream;
    }
    get bodyUsed() {
      return this[INTERNALS$2].disturbed;
    }
    async arrayBuffer() {
      const { buffer: buffer2, byteOffset, byteLength } = await consumeBody(this);
      return buffer2.slice(byteOffset, byteOffset + byteLength);
    }
    async formData() {
      const ct = this.headers.get("content-type");
      if (ct.startsWith("application/x-www-form-urlencoded")) {
        const formData = new FormData2;
        const parameters = new URLSearchParams(await this.text());
        for (const [name, value] of parameters) {
          formData.append(name, value);
        }
        return formData;
      }
      const { toFormData } = await Promise.resolve().then(function() {
        return require_multipart_parser_25a14693();
      });
      return toFormData(this.body, ct);
    }
    async blob() {
      const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
      const buf = await this.arrayBuffer();
      return new Blob2([buf], {
        type: ct
      });
    }
    async json() {
      const text = await this.text();
      return JSON.parse(text);
    }
    async text() {
      const buffer2 = await consumeBody(this);
      return new TextDecoder().decode(buffer2);
    }
    buffer() {
      return consumeBody(this);
    }
  }
  Body.prototype.buffer = util.deprecate(Body.prototype.buffer, "Please use \'response.arrayBuffer()\' instead of \'response.buffer()\'", "node-fetch#buffer");
  Object.defineProperties(Body.prototype, {
    body: { enumerable: true },
    bodyUsed: { enumerable: true },
    arrayBuffer: { enumerable: true },
    blob: { enumerable: true },
    json: { enumerable: true },
    text: { enumerable: true },
    data: { get: util.deprecate(() => {
    }, "data doesn\'t exist, use json(), text(), arrayBuffer(), or body instead", "https://github.com/node-fetch/node-fetch/issues/1000 (response)") }
  });
  var clone = (instance, highWaterMark) => {
    let p1;
    let p2;
    let { body } = instance[INTERNALS$2];
    if (instance.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof Stream && typeof body.getBoundary !== "function") {
      p1 = new Stream.PassThrough({ highWaterMark });
      p2 = new Stream.PassThrough({ highWaterMark });
      body.pipe(p1);
      body.pipe(p2);
      instance[INTERNALS$2].stream = p1;
      body = p2;
    }
    return body;
  };
  var getNonSpecFormDataBoundary = util.deprecate((body) => body.getBoundary(), "form-data doesn\'t follow the spec and requires special treatment. Use alternative package", "https://github.com/node-fetch/node-fetch/issues/1167");
  var extractContentType = (body, request) => {
    if (body === null) {
      return null;
    }
    if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    }
    if (isURLSearchParameters(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    }
    if (isBlob(body)) {
      return body.type || null;
    }
    if (buffer.Buffer.isBuffer(body) || util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
      return null;
    }
    if (body instanceof FormData2) {
      return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
    }
    if (body && typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
    }
    if (body instanceof Stream) {
      return null;
    }
    return "text/plain;charset=UTF-8";
  };
  var getTotalBytes = (request) => {
    const { body } = request[INTERNALS$2];
    if (body === null) {
      return 0;
    }
    if (isBlob(body)) {
      return body.size;
    }
    if (buffer.Buffer.isBuffer(body)) {
      return body.length;
    }
    if (body && typeof body.getLengthSync === "function") {
      return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
    }
    return null;
  };
  var writeToStream = async (dest, { body }) => {
    if (body === null) {
      dest.end();
    } else {
      await pipeline(body, dest);
    }
  };
  var validateHeaderName = typeof http.validateHeaderName === "function" ? http.validateHeaderName : (name) => {
    if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
      const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
      Object.defineProperty(error, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
      throw error;
    }
  };
  var validateHeaderValue = typeof http.validateHeaderValue === "function" ? http.validateHeaderValue : (name, value) => {
    if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
      const error = new TypeError(`Invalid character in header content ["${name}"]`);
      Object.defineProperty(error, "code", { value: "ERR_INVALID_CHAR" });
      throw error;
    }
  };

  class Headers2 extends URLSearchParams {
    constructor(init) {
      let result = [];
      if (init instanceof Headers2) {
        const raw = init.raw();
        for (const [name, values] of Object.entries(raw)) {
          result.push(...values.map((value) => [name, value]));
        }
      } else if (init == null)
        ;
      else if (typeof init === "object" && !util.types.isBoxedPrimitive(init)) {
        const method = init[Symbol.iterator];
        if (method == null) {
          result.push(...Object.entries(init));
        } else {
          if (typeof method !== "function") {
            throw new TypeError("Header pairs must be iterable");
          }
          result = [...init].map((pair) => {
            if (typeof pair !== "object" || util.types.isBoxedPrimitive(pair)) {
              throw new TypeError("Each header pair must be an iterable object");
            }
            return [...pair];
          }).map((pair) => {
            if (pair.length !== 2) {
              throw new TypeError("Each header pair must be a name/value tuple");
            }
            return [...pair];
          });
        }
      } else {
        throw new TypeError("Failed to construct \'Headers\': The provided value is not of type \'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
      }
      result = result.length > 0 ? result.map(([name, value]) => {
        validateHeaderName(name);
        validateHeaderValue(name, String(value));
        return [String(name).toLowerCase(), String(value)];
      }) : undefined;
      super(result);
      return new Proxy(this, {
        get(target, p, receiver) {
          switch (p) {
            case "append":
            case "set":
              return (name, value) => {
                validateHeaderName(name);
                validateHeaderValue(name, String(value));
                return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));
              };
            case "delete":
            case "has":
            case "getAll":
              return (name) => {
                validateHeaderName(name);
                return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());
              };
            case "keys":
              return () => {
                target.sort();
                return new Set(URLSearchParams.prototype.keys.call(target)).keys();
              };
            default:
              return Reflect.get(target, p, receiver);
          }
        }
      });
    }
    get [Symbol.toStringTag]() {
      return this.constructor.name;
    }
    toString() {
      return Object.prototype.toString.call(this);
    }
    get(name) {
      const values = this.getAll(name);
      if (values.length === 0) {
        return null;
      }
      let value = values.join(", ");
      if (/^content-encoding$/i.test(name)) {
        value = value.toLowerCase();
      }
      return value;
    }
    forEach(callback, thisArg = undefined) {
      for (const name of this.keys()) {
        Reflect.apply(callback, thisArg, [this.get(name), name, this]);
      }
    }
    *values() {
      for (const name of this.keys()) {
        yield this.get(name);
      }
    }
    *entries() {
      for (const name of this.keys()) {
        yield [name, this.get(name)];
      }
    }
    [Symbol.iterator]() {
      return this.entries();
    }
    raw() {
      return [...this.keys()].reduce((result, key) => {
        result[key] = this.getAll(key);
        return result;
      }, {});
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
      return [...this.keys()].reduce((result, key) => {
        const values = this.getAll(key);
        if (key === "host") {
          result[key] = values[0];
        } else {
          result[key] = values.length > 1 ? values : values[0];
        }
        return result;
      }, {});
    }
  }
  Object.defineProperties(Headers2.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
    result[property] = { enumerable: true };
    return result;
  }, {}));
  var redirectStatus = new Set([301, 302, 303, 307, 308]);
  var isRedirect = (code) => {
    return redirectStatus.has(code);
  };
  var INTERNALS$1 = Symbol("Response internals");

  class Response2 extends Body {
    constructor(body = null, options = {}) {
      super(body, options);
      const status = options.status != null ? options.status : 200;
      const headers = new Headers2(options.headers);
      if (body !== null && !headers.has("Content-Type")) {
        const contentType = extractContentType(body, this);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      this[INTERNALS$1] = {
        type: "default",
        url: options.url,
        status,
        statusText: options.statusText || "",
        headers,
        counter: options.counter,
        highWaterMark: options.highWaterMark
      };
    }
    get type() {
      return this[INTERNALS$1].type;
    }
    get url() {
      return this[INTERNALS$1].url || "";
    }
    get status() {
      return this[INTERNALS$1].status;
    }
    get ok() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
      return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
      return this[INTERNALS$1].statusText;
    }
    get headers() {
      return this[INTERNALS$1].headers;
    }
    get highWaterMark() {
      return this[INTERNALS$1].highWaterMark;
    }
    clone() {
      return new Response2(clone(this, this.highWaterMark), {
        type: this.type,
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected,
        size: this.size,
        highWaterMark: this.highWaterMark
      });
    }
    static redirect(url2, status = 302) {
      if (!isRedirect(status)) {
        throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
      }
      return new Response2(null, {
        headers: {
          location: new URL(url2).toString()
        },
        status
      });
    }
    static error() {
      const response = new Response2(null, { status: 0, statusText: "" });
      response[INTERNALS$1].type = "error";
      return response;
    }
    static json(data = undefined, init = {}) {
      const body = JSON.stringify(data);
      if (body === undefined) {
        throw new TypeError("data is not JSON serializable");
      }
      const headers = new Headers2(init && init.headers);
      if (!headers.has("content-type")) {
        headers.set("content-type", "application/json");
      }
      return new Response2(body, {
        ...init,
        headers
      });
    }
    get [Symbol.toStringTag]() {
      return "Response";
    }
  }
  Object.defineProperties(Response2.prototype, {
    type: { enumerable: true },
    url: { enumerable: true },
    status: { enumerable: true },
    ok: { enumerable: true },
    redirected: { enumerable: true },
    statusText: { enumerable: true },
    headers: { enumerable: true },
    clone: { enumerable: true }
  });
  var getSearch = (parsedURL) => {
    if (parsedURL.search) {
      return parsedURL.search;
    }
    const lastOffset = parsedURL.href.length - 1;
    const hash = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
    return parsedURL.href[lastOffset - hash.length] === "?" ? "?" : "";
  };
  var ReferrerPolicy = new Set([
    "",
    "no-referrer",
    "no-referrer-when-downgrade",
    "same-origin",
    "origin",
    "strict-origin",
    "origin-when-cross-origin",
    "strict-origin-when-cross-origin",
    "unsafe-url"
  ]);
  var DEFAULT_REFERRER_POLICY = "strict-origin-when-cross-origin";
  var INTERNALS = Symbol("Request internals");
  var isRequest = (object) => {
    return typeof object === "object" && typeof object[INTERNALS] === "object";
  };
  var doBadDataWarn = util.deprecate(() => {
  }, ".data is not a valid RequestInit property, use .body instead", "https://github.com/node-fetch/node-fetch/issues/1000 (request)");

  class Request extends Body {
    constructor(input, init = {}) {
      let parsedURL;
      if (isRequest(input)) {
        parsedURL = new URL(input.url);
      } else {
        parsedURL = new URL(input);
        input = {};
      }
      if (parsedURL.username !== "" || parsedURL.password !== "") {
        throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
      }
      let method = init.method || input.method || "GET";
      if (/^(delete|get|head|options|post|put)$/i.test(method)) {
        method = method.toUpperCase();
      }
      if (!isRequest(init) && ("data" in init)) {
        doBadDataWarn();
      }
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body");
      }
      const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
      super(inputBody, {
        size: init.size || input.size || 0
      });
      const headers = new Headers2(init.headers || input.headers || {});
      if (inputBody !== null && !headers.has("Content-Type")) {
        const contentType = extractContentType(inputBody, this);
        if (contentType) {
          headers.set("Content-Type", contentType);
        }
      }
      let signal = isRequest(input) ? input.signal : null;
      if ("signal" in init) {
        signal = init.signal;
      }
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
      }
      let referrer = init.referrer == null ? input.referrer : init.referrer;
      if (referrer === "") {
        referrer = "no-referrer";
      } else if (referrer) {
        const parsedReferrer = new URL(referrer);
        referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? "client" : parsedReferrer;
      } else {
        referrer = undefined;
      }
      this[INTERNALS] = {
        method,
        redirect: init.redirect || input.redirect || "follow",
        headers,
        parsedURL,
        signal,
        referrer
      };
      this.follow = init.follow === undefined ? input.follow === undefined ? 20 : input.follow : init.follow;
      this.compress = init.compress === undefined ? input.compress === undefined ? true : input.compress : init.compress;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
      this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
      this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;
      this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || "";
    }
    get method() {
      return this[INTERNALS].method;
    }
    get url() {
      return url.format(this[INTERNALS].parsedURL);
    }
    get headers() {
      return this[INTERNALS].headers;
    }
    get redirect() {
      return this[INTERNALS].redirect;
    }
    get signal() {
      return this[INTERNALS].signal;
    }
    get referrer() {
      if (this[INTERNALS].referrer === "no-referrer") {
        return "";
      }
      if (this[INTERNALS].referrer === "client") {
        return "about:client";
      }
      if (this[INTERNALS].referrer) {
        return this[INTERNALS].referrer.toString();
      }
      return;
    }
    get referrerPolicy() {
      return this[INTERNALS].referrerPolicy;
    }
    set referrerPolicy(referrerPolicy) {
      this[INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);
    }
    clone() {
      return new Request(this);
    }
    get [Symbol.toStringTag]() {
      return "Request";
    }
  }
  Object.defineProperties(Request.prototype, {
    method: { enumerable: true },
    url: { enumerable: true },
    headers: { enumerable: true },
    redirect: { enumerable: true },
    clone: { enumerable: true },
    signal: { enumerable: true },
    referrer: { enumerable: true },
    referrerPolicy: { enumerable: true }
  });
  var getNodeRequestOptions = (request) => {
    const { parsedURL } = request[INTERNALS];
    const headers = new Headers2(request[INTERNALS].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    let contentLengthValue = null;
    if (request.body === null && /^(post|put)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body !== null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (request.referrerPolicy === "") {
      request.referrerPolicy = DEFAULT_REFERRER_POLICY;
    }
    if (request.referrer && request.referrer !== "no-referrer") {
      request[INTERNALS].referrer = determineRequestsReferrer(request);
    } else {
      request[INTERNALS].referrer = "no-referrer";
    }
    if (request[INTERNALS].referrer instanceof URL) {
      headers.set("Referer", request.referrer);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip, deflate, br");
    }
    let { agent } = request;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    const search = getSearch(parsedURL);
    const options = {
      path: parsedURL.pathname + search,
      method: request.method,
      headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
      insecureHTTPParser: request.insecureHTTPParser,
      agent
    };
    return {
      parsedURL,
      options
    };
  };

  class AbortError extends FetchBaseError {
    constructor(message, type = "aborted") {
      super(message, type);
    }
  }
  var { stat } = fs.promises;
  var blobFromSync = (path2, type) => fromBlob(fs.statSync(path2), path2, type);
  var blobFrom = (path2, type) => stat(path2).then((stat2) => fromBlob(stat2, path2, type));
  var fileFrom = (path2, type) => stat(path2).then((stat2) => fromFile(stat2, path2, type));
  var fileFromSync = (path2, type) => fromFile(fs.statSync(path2), path2, type);
  var fromBlob = (stat2, path2, type = "") => new Blob2([new BlobDataItem({
    path: path2,
    size: stat2.size,
    lastModified: stat2.mtimeMs,
    start: 0
  })], { type });
  var fromFile = (stat2, path$1, type = "") => new File2([new BlobDataItem({
    path: path$1,
    size: stat2.size,
    lastModified: stat2.mtimeMs,
    start: 0
  })], path.basename(path$1), { type, lastModified: stat2.mtimeMs });

  class BlobDataItem {
    #path;
    #start;
    constructor(options) {
      this.#path = options.path;
      this.#start = options.start;
      this.size = options.size;
      this.lastModified = options.lastModified;
    }
    slice(start, end) {
      return new BlobDataItem({
        path: this.#path,
        lastModified: this.lastModified,
        size: end - start,
        start: this.#start + start
      });
    }
    async* stream() {
      const { mtimeMs } = await stat(this.#path);
      if (mtimeMs > this.lastModified) {
        throw new DOMException2("The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.", "NotReadableError");
      }
      yield* fs.createReadStream(this.#path, {
        start: this.#start,
        end: this.#start + this.size - 1
      });
    }
    get [Symbol.toStringTag]() {
      return "Blob";
    }
  }
  var supportedSchemas = new Set(["data:", "http:", "https:"]);
  exports.AbortError = AbortError;
  exports.Blob = Blob2;
  exports.FetchError = FetchError;
  exports.File = File2;
  exports.FormData = FormData2;
  exports.Headers = Headers2;
  exports.Request = Request;
  exports.Response = Response2;
  exports.blobFrom = blobFrom;
  exports.blobFromSync = blobFromSync;
  exports.default = fetch2;
  exports.fileFrom = fileFrom;
  exports.fileFromSync = fileFromSync;
  exports.isRedirect = isRedirect;
});

// node_modules/swagger-client/lib/helpers/fetch-ponyfill-node-fetch.node.js
var require_fetch_ponyfill_node_fetch_node = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  var _nodeFetchCommonjs = _interopRequireWildcard(require_node_fetch_commonjs());
  exports.fetch = _nodeFetchCommonjs.default;
  exports.Response = _nodeFetchCommonjs.Response;
  exports.Headers = _nodeFetchCommonjs.Headers;
  exports.Request = _nodeFetchCommonjs.Request;
  exports.FormData = _nodeFetchCommonjs.FormData;
  exports.File = _nodeFetchCommonjs.File;
  exports.Blob = _nodeFetchCommonjs.Blob;
});

// node_modules/swagger-client/lib/helpers/fetch-polyfill.node.js
var require_fetch_polyfill_node = __commonJS(() => {
  var _fetchPonyfillUndiciNode = require_fetch_ponyfill_undici_node();
  var _fetchPonyfillNodeFetchNode = require_fetch_ponyfill_node_fetch_node();
  if (typeof globalThis.fetch === "undefined") {
    globalThis.fetch = _fetchPonyfillUndiciNode.fetch || _fetchPonyfillNodeFetchNode.fetch;
  }
  if (typeof globalThis.Headers === "undefined") {
    globalThis.Headers = _fetchPonyfillUndiciNode.Headers || _fetchPonyfillNodeFetchNode.Headers;
  }
  if (typeof globalThis.Request === "undefined") {
    globalThis.Request = _fetchPonyfillUndiciNode.Request || _fetchPonyfillNodeFetchNode.Request;
  }
  if (typeof globalThis.Response === "undefined") {
    globalThis.Response = _fetchPonyfillUndiciNode.Response || _fetchPonyfillNodeFetchNode.Response;
  }
  if (typeof globalThis.FormData === "undefined") {
    globalThis.FormData = _fetchPonyfillUndiciNode.FormData || _fetchPonyfillNodeFetchNode.FormData;
  }
  if (typeof globalThis.File === "undefined") {
    globalThis.File = _fetchPonyfillUndiciNode.File || _fetchPonyfillNodeFetchNode.File;
  }
  if (typeof globalThis.Blob === "undefined") {
    globalThis.Blob = _fetchPonyfillUndiciNode.Blob || _fetchPonyfillNodeFetchNode.Blob;
  }
});

// node_modules/swagger-client/lib/execute/oas3/style-serializer.js
var require_style_serializer = __commonJS((exports) => {
  var encodeDisallowedCharacters = function(str, _temp, parse) {
    let {
      escape: escape2
    } = _temp === undefined ? {} : _temp;
    if (typeof str === "number") {
      str = str.toString();
    }
    if (typeof str !== "string" || !str.length) {
      return str;
    }
    if (!escape2) {
      return str;
    }
    if (parse) {
      return JSON.parse(str);
    }
    return [...str].map((char) => {
      if (isRrc3986Unreserved(char)) {
        return char;
      }
      if (isRfc3986Reserved(char) && escape2 === "unsafe") {
        return char;
      }
      const encoder = new TextEncoder;
      const encoded = Array.from(encoder.encode(char)).map((byte) => `0${byte.toString(16).toUpperCase()}`.slice(-2)).map((encodedByte) => `%${encodedByte}`).join("");
      return encoded;
    }).join("");
  };
  var stylize = function(config) {
    const {
      value
    } = config;
    if (Array.isArray(value)) {
      return encodeArray(config);
    }
    if (typeof value === "object") {
      return encodeObject(config);
    }
    return encodePrimitive(config);
  };
  var encodeArray = function(_ref) {
    let {
      key,
      value,
      style,
      explode,
      escape: escape2
    } = _ref;
    const valueEncoder = (str) => encodeDisallowedCharacters(str, {
      escape: escape2
    });
    if (style === "simple") {
      return value.map((val) => valueEncoder(val)).join(",");
    }
    if (style === "label") {
      return `.${value.map((val) => valueEncoder(val)).join(".")}`;
    }
    if (style === "matrix") {
      return value.map((val) => valueEncoder(val)).reduce((prev, curr) => {
        if (!prev || explode) {
          return `${prev || ""};${key}=${curr}`;
        }
        return `${prev},${curr}`;
      }, "");
    }
    if (style === "form") {
      const after = explode ? `&${key}=` : ",";
      return value.map((val) => valueEncoder(val)).join(after);
    }
    if (style === "spaceDelimited") {
      const after = explode ? `${key}=` : "";
      return value.map((val) => valueEncoder(val)).join(` ${after}`);
    }
    if (style === "pipeDelimited") {
      const after = explode ? `${key}=` : "";
      return value.map((val) => valueEncoder(val)).join(`|${after}`);
    }
    return;
  };
  var encodeObject = function(_ref2) {
    let {
      key,
      value,
      style,
      explode,
      escape: escape2
    } = _ref2;
    const valueEncoder = (str) => encodeDisallowedCharacters(str, {
      escape: escape2
    });
    const valueKeys = Object.keys(value);
    if (style === "simple") {
      return valueKeys.reduce((prev, curr) => {
        const val = valueEncoder(value[curr]);
        const middleChar = explode ? "=" : ",";
        const prefix = prev ? `${prev},` : "";
        return `${prefix}${curr}${middleChar}${val}`;
      }, "");
    }
    if (style === "label") {
      return valueKeys.reduce((prev, curr) => {
        const val = valueEncoder(value[curr]);
        const middleChar = explode ? "=" : ".";
        const prefix = prev ? `${prev}.` : ".";
        return `${prefix}${curr}${middleChar}${val}`;
      }, "");
    }
    if (style === "matrix" && explode) {
      return valueKeys.reduce((prev, curr) => {
        const val = valueEncoder(value[curr]);
        const prefix = prev ? `${prev};` : ";";
        return `${prefix}${curr}=${val}`;
      }, "");
    }
    if (style === "matrix") {
      return valueKeys.reduce((prev, curr) => {
        const val = valueEncoder(value[curr]);
        const prefix = prev ? `${prev},` : `;${key}=`;
        return `${prefix}${curr},${val}`;
      }, "");
    }
    if (style === "form") {
      return valueKeys.reduce((prev, curr) => {
        const val = valueEncoder(value[curr]);
        const prefix = prev ? `${prev}${explode ? "&" : ","}` : "";
        const separator = explode ? "=" : ",";
        return `${prefix}${curr}${separator}${val}`;
      }, "");
    }
    return;
  };
  var encodePrimitive = function(_ref3) {
    let {
      key,
      value,
      style,
      escape: escape2
    } = _ref3;
    const valueEncoder = (str) => encodeDisallowedCharacters(str, {
      escape: escape2
    });
    if (style === "simple") {
      return valueEncoder(value);
    }
    if (style === "label") {
      return `.${valueEncoder(value)}`;
    }
    if (style === "matrix") {
      return `;${key}=${valueEncoder(value)}`;
    }
    if (style === "form") {
      return valueEncoder(value);
    }
    if (style === "deepObject") {
      return valueEncoder(value, {}, true);
    }
    return;
  };
  exports.__esModule = true;
  exports.default = stylize;
  exports.encodeDisallowedCharacters = encodeDisallowedCharacters;
  var isRfc3986Reserved = (char) => ":/?#[]@!$&'()*+,;=".indexOf(char) > -1;
  var isRrc3986Unreserved = (char) => /^[a-z0-9\-._~]+$/i.test(char);
});

// node_modules/swagger-client/lib/http/index.js
var require_http = __commonJS((exports) => {
  async function http(url, request) {
    if (request === undefined) {
      request = {};
    }
    if (typeof url === "object") {
      request = url;
      url = request.url;
    }
    request.headers = request.headers || {};
    self2.mergeInQueryOrForm(request);
    if (request.headers) {
      Object.keys(request.headers).forEach((headerName) => {
        const value = request.headers[headerName];
        if (typeof value === "string") {
          request.headers[headerName] = value.replace(/\n+/g, " ");
        }
      });
    }
    if (request.requestInterceptor) {
      request = await request.requestInterceptor(request) || request;
    }
    const contentType = request.headers["content-type"] || request.headers["Content-Type"];
    if (/multipart\/form-data/i.test(contentType)) {
      delete request.headers["content-type"];
      delete request.headers["Content-Type"];
    }
    let res;
    try {
      res = await (request.userFetch || fetch)(request.url, request);
      res = await self2.serializeRes(res, url, request);
      if (request.responseInterceptor) {
        res = await request.responseInterceptor(res) || res;
      }
    } catch (resError) {
      if (!res) {
        throw resError;
      }
      const error = new Error(res.statusText || `response status is ${res.status}`);
      error.status = res.status;
      error.statusCode = res.status;
      error.responseError = resError;
      throw error;
    }
    if (!res.ok) {
      const error = new Error(res.statusText || `response status is ${res.status}`);
      error.status = res.status;
      error.statusCode = res.status;
      error.response = res;
      throw error;
    }
    return res;
  }
  var parseBody = function(body, contentType) {
    if (contentType && (contentType.indexOf("application/json") === 0 || contentType.indexOf("+json") > 0)) {
      return JSON.parse(body);
    }
    return _jsYaml.default.load(body);
  };
  var serializeRes = function(oriRes, url, _temp) {
    let {
      loadSpec = false
    } = _temp === undefined ? {} : _temp;
    const res = {
      ok: oriRes.ok,
      url: oriRes.url || url,
      status: oriRes.status,
      statusText: oriRes.statusText,
      headers: serializeHeaders(oriRes.headers)
    };
    const contentType = res.headers["content-type"];
    const useText = loadSpec || shouldDownloadAsText(contentType);
    const getBody = useText ? oriRes.text : oriRes.blob || oriRes.buffer;
    return getBody.call(oriRes).then((body) => {
      res.text = body;
      res.data = body;
      if (useText) {
        try {
          const obj = parseBody(body, contentType);
          res.body = obj;
          res.obj = obj;
        } catch (e) {
          res.parseError = e;
        }
      }
      return res;
    });
  };
  var serializeHeaderValue = function(value) {
    const isMulti = value.includes(", ");
    return isMulti ? value.split(", ") : value;
  };
  var serializeHeaders = function(headers) {
    if (headers === undefined) {
      headers = {};
    }
    if (typeof headers.entries !== "function")
      return {};
    return Array.from(headers.entries()).reduce((acc, _ref) => {
      let [header, value] = _ref;
      acc[header] = serializeHeaderValue(value);
      return acc;
    }, {});
  };
  var isFile = function(obj, navigatorObj) {
    if (!navigatorObj && typeof navigator !== "undefined") {
      navigatorObj = navigator;
    }
    if (navigatorObj && navigatorObj.product === "ReactNative") {
      if (obj && typeof obj === "object" && typeof obj.uri === "string") {
        return true;
      }
      return false;
    }
    if (typeof File !== "undefined" && obj instanceof File) {
      return true;
    }
    if (typeof Blob !== "undefined" && obj instanceof Blob) {
      return true;
    }
    if (ArrayBuffer.isView(obj)) {
      return true;
    }
    return obj !== null && typeof obj === "object" && typeof obj.pipe === "function";
  };
  var isArrayOfFile = function(obj, navigatorObj) {
    return Array.isArray(obj) && obj.some((v) => isFile(v, navigatorObj));
  };
  var formatKeyValue = function(key, input, skipEncoding) {
    if (skipEncoding === undefined) {
      skipEncoding = false;
    }
    const {
      collectionFormat,
      allowEmptyValue,
      serializationOption,
      encoding
    } = input;
    const value = typeof input === "object" && !Array.isArray(input) ? input.value : input;
    const encodeFn = skipEncoding ? (k) => k.toString() : (k) => encodeURIComponent(k);
    const encodedKey = encodeFn(key);
    if (typeof value === "undefined" && allowEmptyValue) {
      return [[encodedKey, ""]];
    }
    if (isFile(value) || isArrayOfFile(value)) {
      return [[encodedKey, value]];
    }
    if (serializationOption) {
      return formatKeyValueBySerializationOption(key, value, skipEncoding, serializationOption);
    }
    if (encoding) {
      if ([typeof encoding.style, typeof encoding.explode, typeof encoding.allowReserved].some((type) => type !== "undefined")) {
        const {
          style,
          explode,
          allowReserved
        } = encoding;
        return formatKeyValueBySerializationOption(key, value, skipEncoding, {
          style,
          explode,
          allowReserved
        });
      }
      if (typeof encoding.contentType === "string") {
        if (encoding.contentType.startsWith("application/json")) {
          const json = typeof value === "string" ? value : JSON.stringify(value);
          const encodedJson = encodeFn(json);
          const file = new FileWithData(encodedJson, "blob", {
            type: encoding.contentType
          });
          return [[encodedKey, file]];
        }
        const encodedData = encodeFn(String(value));
        const blob = new FileWithData(encodedData, "blob", {
          type: encoding.contentType
        });
        return [[encodedKey, blob]];
      }
      if (typeof value !== "object") {
        return [[encodedKey, encodeFn(value)]];
      }
      if (Array.isArray(value) && value.every((v) => typeof v !== "object")) {
        return [[encodedKey, value.map(encodeFn).join(",")]];
      }
      return [[encodedKey, encodeFn(JSON.stringify(value))]];
    }
    if (typeof value !== "object") {
      return [[encodedKey, encodeFn(value)]];
    }
    if (Array.isArray(value)) {
      if (collectionFormat === "multi") {
        return [[encodedKey, value.map(encodeFn)]];
      }
      return [[encodedKey, value.map(encodeFn).join(SEPARATORS[collectionFormat || "csv"])]];
    }
    return [[encodedKey, ""]];
  };
  var formatKeyValueBySerializationOption = function(key, value, skipEncoding, serializationOption) {
    const style = serializationOption.style || "form";
    const explode = typeof serializationOption.explode === "undefined" ? style === "form" : serializationOption.explode;
    const escape2 = skipEncoding ? false : serializationOption && serializationOption.allowReserved ? "unsafe" : "reserved";
    const encodeFn = (v) => (0, _styleSerializer.encodeDisallowedCharacters)(v, {
      escape: escape2
    });
    const encodeKeyFn = skipEncoding ? (k) => k : (k) => (0, _styleSerializer.encodeDisallowedCharacters)(k, {
      escape: escape2
    });
    if (typeof value !== "object") {
      return [[encodeKeyFn(key), encodeFn(value)]];
    }
    if (Array.isArray(value)) {
      if (explode) {
        return [[encodeKeyFn(key), value.map(encodeFn)]];
      }
      return [[encodeKeyFn(key), value.map(encodeFn).join(STYLE_SEPARATORS[style])]];
    }
    if (style === "deepObject") {
      return Object.keys(value).map((valueKey) => [encodeKeyFn(`${key}[${valueKey}]`), encodeFn(value[valueKey])]);
    }
    if (explode) {
      return Object.keys(value).map((valueKey) => [encodeKeyFn(valueKey), encodeFn(value[valueKey])]);
    }
    return [[encodeKeyFn(key), Object.keys(value).map((valueKey) => [`${encodeKeyFn(valueKey)},${encodeFn(value[valueKey])}`]).join(",")]];
  };
  var buildFormData = function(reqForm) {
    return Object.entries(reqForm).reduce((formData, _ref2) => {
      let [name, input] = _ref2;
      for (const [key, value] of formatKeyValue(name, input, true)) {
        if (Array.isArray(value)) {
          for (const v of value) {
            if (ArrayBuffer.isView(v)) {
              const blob = new Blob([v]);
              formData.append(key, blob);
            } else {
              formData.append(key, v);
            }
          }
        } else if (ArrayBuffer.isView(value)) {
          const blob = new Blob([value]);
          formData.append(key, blob);
        } else {
          formData.append(key, value);
        }
      }
      return formData;
    }, new FormData);
  };
  var encodeFormOrQuery = function(data) {
    const encodedQuery = Object.keys(data).reduce((result, parameterName) => {
      for (const [key, value] of formatKeyValue(parameterName, data[parameterName])) {
        if (value instanceof FileWithData) {
          result[key] = value.valueOf();
        } else {
          result[key] = value;
        }
      }
      return result;
    }, {});
    return _qs.default.stringify(encodedQuery, {
      encode: false,
      indices: false
    }) || "";
  };
  var mergeInQueryOrForm = function(req) {
    if (req === undefined) {
      req = {};
    }
    const {
      url = "",
      query,
      form
    } = req;
    const joinSearch = function() {
      for (var _len = arguments.length, strs = new Array(_len), _key = 0;_key < _len; _key++) {
        strs[_key] = arguments[_key];
      }
      const search = strs.filter((a) => a).join("&");
      return search ? `?${search}` : "";
    };
    if (form) {
      const hasFile = Object.keys(form).some((key) => {
        const {
          value
        } = form[key];
        return isFile(value) || isArrayOfFile(value);
      });
      const contentType = req.headers["content-type"] || req.headers["Content-Type"];
      if (hasFile || /multipart\/form-data/i.test(contentType)) {
        const formdata = buildFormData(req.form);
        req.formdata = formdata;
        req.body = formdata;
      } else {
        req.body = encodeFormOrQuery(form);
      }
      delete req.form;
    }
    if (query) {
      const [baseUrl, oriSearch] = url.split("?");
      let newStr = "";
      if (oriSearch) {
        const oriQuery = _qs.default.parse(oriSearch);
        const keysToRemove = Object.keys(query);
        keysToRemove.forEach((key) => delete oriQuery[key]);
        newStr = _qs.default.stringify(oriQuery, {
          encode: true
        });
      }
      const finalStr = joinSearch(newStr, encodeFormOrQuery(query));
      req.url = baseUrl + finalStr;
      delete req.query;
    }
    return req;
  };
  var makeHttp = function(httpFn, preFetch, postFetch) {
    postFetch = postFetch || ((a) => a);
    preFetch = preFetch || ((a) => a);
    return (req) => {
      if (typeof req === "string") {
        req = {
          url: req
        };
      }
      self2.mergeInQueryOrForm(req);
      req = preFetch(req);
      return postFetch(httpFn(req));
    };
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = http;
  exports.encodeFormOrQuery = encodeFormOrQuery;
  exports.isFile = isFile;
  exports.makeHttp = makeHttp;
  exports.mergeInQueryOrForm = mergeInQueryOrForm;
  exports.self = undefined;
  exports.serializeHeaders = serializeHeaders;
  exports.serializeRes = serializeRes;
  exports.shouldDownloadAsText = undefined;
  var _qs = _interopRequireDefault(require_lib3());
  var _jsYaml = _interopRequireDefault(require_js_yaml());
  require_fetch_polyfill_node();
  var _styleSerializer = require_style_serializer();
  var self2 = {
    serializeRes,
    mergeInQueryOrForm
  };
  exports.self = self2;
  var shouldDownloadAsText = function(contentType) {
    if (contentType === undefined) {
      contentType = "";
    }
    return /(json|xml|yaml|text)\b/.test(contentType);
  };
  exports.shouldDownloadAsText = shouldDownloadAsText;
  var STYLE_SEPARATORS = {
    form: ",",
    spaceDelimited: "%20",
    pipeDelimited: "|"
  };
  var SEPARATORS = {
    csv: ",",
    ssv: "%20",
    tsv: "%09",
    pipes: "|"
  };

  class FileWithData extends File {
    constructor(data, name, options) {
      if (name === undefined) {
        name = "";
      }
      if (options === undefined) {
        options = {};
      }
      super([data], name, options);
      this.data = data;
    }
    valueOf() {
      return this.data;
    }
    toString() {
      return this.valueOf();
    }
  }
});

// node_modules/swagger-client/lib/constants.js
var require_constants5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.ACCEPT_HEADER_VALUE_FOR_DOCUMENTS = undefined;
  var ACCEPT_HEADER_VALUE_FOR_DOCUMENTS = "application/json, application/yaml";
  exports.ACCEPT_HEADER_VALUE_FOR_DOCUMENTS = ACCEPT_HEADER_VALUE_FOR_DOCUMENTS;
});

// node_modules/swagger-client/lib/resolver/utils/index.js
var require_utils4 = __commonJS((exports) => {
  var makeFetchJSON = function(http, opts) {
    if (opts === undefined) {
      opts = {};
    }
    const {
      requestInterceptor,
      responseInterceptor
    } = opts;
    const credentials = http.withCredentials ? "include" : "same-origin";
    return (docPath) => http({
      url: docPath,
      loadSpec: true,
      requestInterceptor,
      responseInterceptor,
      headers: {
        Accept: _constants.ACCEPT_HEADER_VALUE_FOR_DOCUMENTS
      },
      credentials
    }).then((res) => res.body);
  };
  exports.__esModule = true;
  exports.makeFetchJSON = makeFetchJSON;
  var _constants = require_constants5();
});

// node_modules/swagger-client/lib/resolver/utils/options.js
var require_options = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.retrievalURI = exports.httpClient = undefined;
  var _index = _interopRequireDefault(require_http());
  var retrievalURI = (options) => {
    const {
      baseDoc,
      url
    } = options;
    return baseDoc || url || "";
  };
  exports.retrievalURI = retrievalURI;
  var httpClient = (options) => {
    const {
      fetch: fetch2,
      http
    } = options;
    return fetch2 || http || _index.default;
  };
  exports.httpClient = httpClient;
});

// node_modules/fast-json-patch/commonjs/helpers.js
var require_helpers = __commonJS((exports) => {
  var hasOwnProperty = function(obj, key) {
    return _hasOwnProperty.call(obj, key);
  };
  var _objectKeys = function(obj) {
    if (Array.isArray(obj)) {
      var keys = new Array(obj.length);
      for (var k = 0;k < keys.length; k++) {
        keys[k] = "" + k;
      }
      return keys;
    }
    if (Object.keys) {
      return Object.keys(obj);
    }
    var keys = [];
    for (var i in obj) {
      if (hasOwnProperty(obj, i)) {
        keys.push(i);
      }
    }
    return keys;
  };
  var _deepClone = function(obj) {
    switch (typeof obj) {
      case "object":
        return JSON.parse(JSON.stringify(obj));
      case "undefined":
        return null;
      default:
        return obj;
    }
  };
  var isInteger = function(str) {
    var i = 0;
    var len = str.length;
    var charCode;
    while (i < len) {
      charCode = str.charCodeAt(i);
      if (charCode >= 48 && charCode <= 57) {
        i++;
        continue;
      }
      return false;
    }
    return true;
  };
  var escapePathComponent = function(path) {
    if (path.indexOf("/") === -1 && path.indexOf("~") === -1)
      return path;
    return path.replace(/~/g, "~0").replace(/\//g, "~1");
  };
  var unescapePathComponent = function(path) {
    return path.replace(/~1/g, "/").replace(/~0/g, "~");
  };
  var _getPathRecursive = function(root, obj) {
    var found;
    for (var key in root) {
      if (hasOwnProperty(root, key)) {
        if (root[key] === obj) {
          return escapePathComponent(key) + "/";
        } else if (typeof root[key] === "object") {
          found = _getPathRecursive(root[key], obj);
          if (found != "") {
            return escapePathComponent(key) + "/" + found;
          }
        }
      }
    }
    return "";
  };
  var getPath = function(root, obj) {
    if (root === obj) {
      return "/";
    }
    var path = _getPathRecursive(root, obj);
    if (path === "") {
      throw new Error("Object not found in root");
    }
    return "/" + path;
  };
  var hasUndefined = function(obj) {
    if (obj === undefined) {
      return true;
    }
    if (obj) {
      if (Array.isArray(obj)) {
        for (var i = 0, len = obj.length;i < len; i++) {
          if (hasUndefined(obj[i])) {
            return true;
          }
        }
      } else if (typeof obj === "object") {
        var objKeys = _objectKeys(obj);
        var objKeysLength = objKeys.length;
        for (var i = 0;i < objKeysLength; i++) {
          if (hasUndefined(obj[objKeys[i]])) {
            return true;
          }
        }
      }
    }
    return false;
  };
  var patchErrorMessageFormatter = function(message, args) {
    var messageParts = [message];
    for (var key in args) {
      var value = typeof args[key] === "object" ? JSON.stringify(args[key], null, 2) : args[key];
      if (typeof value !== "undefined") {
        messageParts.push(key + ": " + value);
      }
    }
    return messageParts.join("\n");
  };
  /*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017 Joachim Wester
   * MIT license
   */
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __);
    };
  }();
  Object.defineProperty(exports, "__esModule", { value: true });
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  exports.hasOwnProperty = hasOwnProperty;
  exports._objectKeys = _objectKeys;
  exports._deepClone = _deepClone;
  exports.isInteger = isInteger;
  exports.escapePathComponent = escapePathComponent;
  exports.unescapePathComponent = unescapePathComponent;
  exports._getPathRecursive = _getPathRecursive;
  exports.getPath = getPath;
  exports.hasUndefined = hasUndefined;
  var PatchError = function(_super) {
    __extends(PatchError2, _super);
    function PatchError2(message, name, index, operation, tree) {
      var _newTarget = this.constructor;
      var _this = _super.call(this, patchErrorMessageFormatter(message, { name, index, operation, tree })) || this;
      _this.name = name;
      _this.index = index;
      _this.operation = operation;
      _this.tree = tree;
      Object.setPrototypeOf(_this, _newTarget.prototype);
      _this.message = patchErrorMessageFormatter(message, { name, index, operation, tree });
      return _this;
    }
    return PatchError2;
  }(Error);
  exports.PatchError = PatchError;
});

// node_modules/fast-json-patch/commonjs/core.js
var require_core = __commonJS((exports) => {
  var getValueByPointer = function(document2, pointer) {
    if (pointer == "") {
      return document2;
    }
    var getOriginalDestination = { op: "_get", path: pointer };
    applyOperation(document2, getOriginalDestination);
    return getOriginalDestination.value;
  };
  var applyOperation = function(document2, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {
    if (validateOperation === undefined) {
      validateOperation = false;
    }
    if (mutateDocument === undefined) {
      mutateDocument = true;
    }
    if (banPrototypeModifications === undefined) {
      banPrototypeModifications = true;
    }
    if (index === undefined) {
      index = 0;
    }
    if (validateOperation) {
      if (typeof validateOperation == "function") {
        validateOperation(operation, 0, document2, operation.path);
      } else {
        validator(operation, 0);
      }
    }
    if (operation.path === "") {
      var returnValue = { newDocument: document2 };
      if (operation.op === "add") {
        returnValue.newDocument = operation.value;
        return returnValue;
      } else if (operation.op === "replace") {
        returnValue.newDocument = operation.value;
        returnValue.removed = document2;
        return returnValue;
      } else if (operation.op === "move" || operation.op === "copy") {
        returnValue.newDocument = getValueByPointer(document2, operation.from);
        if (operation.op === "move") {
          returnValue.removed = document2;
        }
        return returnValue;
      } else if (operation.op === "test") {
        returnValue.test = _areEquals(document2, operation.value);
        if (returnValue.test === false) {
          throw new exports.JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
        }
        returnValue.newDocument = document2;
        return returnValue;
      } else if (operation.op === "remove") {
        returnValue.removed = document2;
        returnValue.newDocument = null;
        return returnValue;
      } else if (operation.op === "_get") {
        operation.value = document2;
        return returnValue;
      } else {
        if (validateOperation) {
          throw new exports.JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index, operation, document2);
        } else {
          return returnValue;
        }
      }
    } else {
      if (!mutateDocument) {
        document2 = helpers_js_1._deepClone(document2);
      }
      var path = operation.path || "";
      var keys = path.split("/");
      var obj = document2;
      var t = 1;
      var len = keys.length;
      var existingPathFragment = undefined;
      var key = undefined;
      var validateFunction = undefined;
      if (typeof validateOperation == "function") {
        validateFunction = validateOperation;
      } else {
        validateFunction = validator;
      }
      while (true) {
        key = keys[t];
        if (banPrototypeModifications && key == "__proto__") {
          throw new TypeError("JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README");
        }
        if (validateOperation) {
          if (existingPathFragment === undefined) {
            if (obj[key] === undefined) {
              existingPathFragment = keys.slice(0, t).join("/");
            } else if (t == len - 1) {
              existingPathFragment = operation.path;
            }
            if (existingPathFragment !== undefined) {
              validateFunction(operation, 0, document2, existingPathFragment);
            }
          }
        }
        t++;
        if (Array.isArray(obj)) {
          if (key === "-") {
            key = obj.length;
          } else {
            if (validateOperation && !helpers_js_1.isInteger(key)) {
              throw new exports.JsonPatchError("Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index", "OPERATION_PATH_ILLEGAL_ARRAY_INDEX", index, operation, document2);
            } else if (helpers_js_1.isInteger(key)) {
              key = ~~key;
            }
          }
          if (t >= len) {
            if (validateOperation && operation.op === "add" && key > obj.length) {
              throw new exports.JsonPatchError("The specified index MUST NOT be greater than the number of elements in the array", "OPERATION_VALUE_OUT_OF_BOUNDS", index, operation, document2);
            }
            var returnValue = arrOps[operation.op].call(operation, obj, key, document2);
            if (returnValue.test === false) {
              throw new exports.JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
            }
            return returnValue;
          }
        } else {
          if (key && key.indexOf("~") != -1) {
            key = helpers_js_1.unescapePathComponent(key);
          }
          if (t >= len) {
            var returnValue = objOps[operation.op].call(operation, obj, key, document2);
            if (returnValue.test === false) {
              throw new exports.JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
            }
            return returnValue;
          }
        }
        obj = obj[key];
      }
    }
  };
  var applyPatch = function(document2, patch, validateOperation, mutateDocument, banPrototypeModifications) {
    if (mutateDocument === undefined) {
      mutateDocument = true;
    }
    if (banPrototypeModifications === undefined) {
      banPrototypeModifications = true;
    }
    if (validateOperation) {
      if (!Array.isArray(patch)) {
        throw new exports.JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
      }
    }
    if (!mutateDocument) {
      document2 = helpers_js_1._deepClone(document2);
    }
    var results = new Array(patch.length);
    for (var i = 0, length_1 = patch.length;i < length_1; i++) {
      results[i] = applyOperation(document2, patch[i], validateOperation, true, banPrototypeModifications, i);
      document2 = results[i].newDocument;
    }
    results.newDocument = document2;
    return results;
  };
  var applyReducer = function(document2, operation, index) {
    var operationResult = applyOperation(document2, operation);
    if (operationResult.test === false) {
      throw new exports.JsonPatchError("Test operation failed", "TEST_OPERATION_FAILED", index, operation, document2);
    }
    return operationResult.newDocument;
  };
  var validator = function(operation, index, document2, existingPathFragment) {
    if (typeof operation !== "object" || operation === null || Array.isArray(operation)) {
      throw new exports.JsonPatchError("Operation is not an object", "OPERATION_NOT_AN_OBJECT", index, operation, document2);
    } else if (!objOps[operation.op]) {
      throw new exports.JsonPatchError("Operation `op` property is not one of operations defined in RFC-6902", "OPERATION_OP_INVALID", index, operation, document2);
    } else if (typeof operation.path !== "string") {
      throw new exports.JsonPatchError("Operation `path` property is not a string", "OPERATION_PATH_INVALID", index, operation, document2);
    } else if (operation.path.indexOf("/") !== 0 && operation.path.length > 0) {
      throw new exports.JsonPatchError('Operation `path` property must start with "/"', "OPERATION_PATH_INVALID", index, operation, document2);
    } else if ((operation.op === "move" || operation.op === "copy") && typeof operation.from !== "string") {
      throw new exports.JsonPatchError("Operation `from` property is not present (applicable in `move` and `copy` operations)", "OPERATION_FROM_REQUIRED", index, operation, document2);
    } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && operation.value === undefined) {
      throw new exports.JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_REQUIRED", index, operation, document2);
    } else if ((operation.op === "add" || operation.op === "replace" || operation.op === "test") && helpers_js_1.hasUndefined(operation.value)) {
      throw new exports.JsonPatchError("Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)", "OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED", index, operation, document2);
    } else if (document2) {
      if (operation.op == "add") {
        var pathLen = operation.path.split("/").length;
        var existingPathLen = existingPathFragment.split("/").length;
        if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {
          throw new exports.JsonPatchError("Cannot perform an `add` operation at the desired path", "OPERATION_PATH_CANNOT_ADD", index, operation, document2);
        }
      } else if (operation.op === "replace" || operation.op === "remove" || operation.op === "_get") {
        if (operation.path !== existingPathFragment) {
          throw new exports.JsonPatchError("Cannot perform the operation at a path that does not exist", "OPERATION_PATH_UNRESOLVABLE", index, operation, document2);
        }
      } else if (operation.op === "move" || operation.op === "copy") {
        var existingValue = { op: "_get", path: operation.from, value: undefined };
        var error = validate([existingValue], document2);
        if (error && error.name === "OPERATION_PATH_UNRESOLVABLE") {
          throw new exports.JsonPatchError("Cannot perform the operation from a path that does not exist", "OPERATION_FROM_UNRESOLVABLE", index, operation, document2);
        }
      }
    }
  };
  var validate = function(sequence, document2, externalValidator) {
    try {
      if (!Array.isArray(sequence)) {
        throw new exports.JsonPatchError("Patch sequence must be an array", "SEQUENCE_NOT_AN_ARRAY");
      }
      if (document2) {
        applyPatch(helpers_js_1._deepClone(document2), helpers_js_1._deepClone(sequence), externalValidator || true);
      } else {
        externalValidator = externalValidator || validator;
        for (var i = 0;i < sequence.length; i++) {
          externalValidator(sequence[i], i, document2, undefined);
        }
      }
    } catch (e) {
      if (e instanceof exports.JsonPatchError) {
        return e;
      } else {
        throw e;
      }
    }
  };
  var _areEquals = function(a, b) {
    if (a === b)
      return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
      var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;
      if (arrA && arrB) {
        length = a.length;
        if (length != b.length)
          return false;
        for (i = length;i-- !== 0; )
          if (!_areEquals(a[i], b[i]))
            return false;
        return true;
      }
      if (arrA != arrB)
        return false;
      var keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length)
        return false;
      for (i = length;i-- !== 0; )
        if (!b.hasOwnProperty(keys[i]))
          return false;
      for (i = length;i-- !== 0; ) {
        key = keys[i];
        if (!_areEquals(a[key], b[key]))
          return false;
      }
      return true;
    }
    return a !== a && b !== b;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var helpers_js_1 = require_helpers();
  exports.JsonPatchError = helpers_js_1.PatchError;
  exports.deepClone = helpers_js_1._deepClone;
  var objOps = {
    add: function(obj, key, document2) {
      obj[key] = this.value;
      return { newDocument: document2 };
    },
    remove: function(obj, key, document2) {
      var removed = obj[key];
      delete obj[key];
      return { newDocument: document2, removed };
    },
    replace: function(obj, key, document2) {
      var removed = obj[key];
      obj[key] = this.value;
      return { newDocument: document2, removed };
    },
    move: function(obj, key, document2) {
      var removed = getValueByPointer(document2, this.path);
      if (removed) {
        removed = helpers_js_1._deepClone(removed);
      }
      var originalValue = applyOperation(document2, { op: "remove", path: this.from }).removed;
      applyOperation(document2, { op: "add", path: this.path, value: originalValue });
      return { newDocument: document2, removed };
    },
    copy: function(obj, key, document2) {
      var valueToCopy = getValueByPointer(document2, this.from);
      applyOperation(document2, { op: "add", path: this.path, value: helpers_js_1._deepClone(valueToCopy) });
      return { newDocument: document2 };
    },
    test: function(obj, key, document2) {
      return { newDocument: document2, test: _areEquals(obj[key], this.value) };
    },
    _get: function(obj, key, document2) {
      this.value = obj[key];
      return { newDocument: document2 };
    }
  };
  var arrOps = {
    add: function(arr, i, document2) {
      if (helpers_js_1.isInteger(i)) {
        arr.splice(i, 0, this.value);
      } else {
        arr[i] = this.value;
      }
      return { newDocument: document2, index: i };
    },
    remove: function(arr, i, document2) {
      var removedList = arr.splice(i, 1);
      return { newDocument: document2, removed: removedList[0] };
    },
    replace: function(arr, i, document2) {
      var removed = arr[i];
      arr[i] = this.value;
      return { newDocument: document2, removed };
    },
    move: objOps.move,
    copy: objOps.copy,
    test: objOps.test,
    _get: objOps._get
  };
  exports.getValueByPointer = getValueByPointer;
  exports.applyOperation = applyOperation;
  exports.applyPatch = applyPatch;
  exports.applyReducer = applyReducer;
  exports.validator = validator;
  exports.validate = validate;
  exports._areEquals = _areEquals;
});

// node_modules/fast-json-patch/commonjs/duplex.js
var require_duplex = __commonJS((exports) => {
  var getMirror = function(obj) {
    return beforeDict.get(obj);
  };
  var getObserverFromMirror = function(mirror, callback) {
    return mirror.observers.get(callback);
  };
  var removeObserverFromMirror = function(mirror, observer) {
    mirror.observers.delete(observer.callback);
  };
  var unobserve = function(root, observer) {
    observer.unobserve();
  };
  var observe = function(obj, callback) {
    var patches = [];
    var observer;
    var mirror = getMirror(obj);
    if (!mirror) {
      mirror = new Mirror(obj);
      beforeDict.set(obj, mirror);
    } else {
      var observerInfo = getObserverFromMirror(mirror, callback);
      observer = observerInfo && observerInfo.observer;
    }
    if (observer) {
      return observer;
    }
    observer = {};
    mirror.value = helpers_js_1._deepClone(obj);
    if (callback) {
      observer.callback = callback;
      observer.next = null;
      var dirtyCheck = function() {
        generate(observer);
      };
      var fastCheck = function() {
        clearTimeout(observer.next);
        observer.next = setTimeout(dirtyCheck);
      };
      if (typeof window !== "undefined") {
        window.addEventListener("mouseup", fastCheck);
        window.addEventListener("keyup", fastCheck);
        window.addEventListener("mousedown", fastCheck);
        window.addEventListener("keydown", fastCheck);
        window.addEventListener("change", fastCheck);
      }
    }
    observer.patches = patches;
    observer.object = obj;
    observer.unobserve = function() {
      generate(observer);
      clearTimeout(observer.next);
      removeObserverFromMirror(mirror, observer);
      if (typeof window !== "undefined") {
        window.removeEventListener("mouseup", fastCheck);
        window.removeEventListener("keyup", fastCheck);
        window.removeEventListener("mousedown", fastCheck);
        window.removeEventListener("keydown", fastCheck);
        window.removeEventListener("change", fastCheck);
      }
    };
    mirror.observers.set(callback, new ObserverInfo(callback, observer));
    return observer;
  };
  var generate = function(observer, invertible) {
    if (invertible === undefined) {
      invertible = false;
    }
    var mirror = beforeDict.get(observer.object);
    _generate(mirror.value, observer.object, observer.patches, "", invertible);
    if (observer.patches.length) {
      core_js_1.applyPatch(mirror.value, observer.patches);
    }
    var temp = observer.patches;
    if (temp.length > 0) {
      observer.patches = [];
      if (observer.callback) {
        observer.callback(temp);
      }
    }
    return temp;
  };
  var _generate = function(mirror, obj, patches, path, invertible) {
    if (obj === mirror) {
      return;
    }
    if (typeof obj.toJSON === "function") {
      obj = obj.toJSON();
    }
    var newKeys = helpers_js_1._objectKeys(obj);
    var oldKeys = helpers_js_1._objectKeys(mirror);
    var changed = false;
    var deleted = false;
    for (var t = oldKeys.length - 1;t >= 0; t--) {
      var key = oldKeys[t];
      var oldVal = mirror[key];
      if (helpers_js_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {
        var newVal = obj[key];
        if (typeof oldVal == "object" && oldVal != null && typeof newVal == "object" && newVal != null) {
          _generate(oldVal, newVal, patches, path + "/" + helpers_js_1.escapePathComponent(key), invertible);
        } else {
          if (oldVal !== newVal) {
            changed = true;
            if (invertible) {
              patches.push({ op: "test", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(oldVal) });
            }
            patches.push({ op: "replace", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(newVal) });
          }
        }
      } else if (Array.isArray(mirror) === Array.isArray(obj)) {
        if (invertible) {
          patches.push({ op: "test", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(oldVal) });
        }
        patches.push({ op: "remove", path: path + "/" + helpers_js_1.escapePathComponent(key) });
        deleted = true;
      } else {
        if (invertible) {
          patches.push({ op: "test", path, value: mirror });
        }
        patches.push({ op: "replace", path, value: obj });
        changed = true;
      }
    }
    if (!deleted && newKeys.length == oldKeys.length) {
      return;
    }
    for (var t = 0;t < newKeys.length; t++) {
      var key = newKeys[t];
      if (!helpers_js_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {
        patches.push({ op: "add", path: path + "/" + helpers_js_1.escapePathComponent(key), value: helpers_js_1._deepClone(obj[key]) });
      }
    }
  };
  var compare = function(tree1, tree2, invertible) {
    if (invertible === undefined) {
      invertible = false;
    }
    var patches = [];
    _generate(tree1, tree2, patches, "", invertible);
    return patches;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  /*!
   * https://github.com/Starcounter-Jack/JSON-Patch
   * (c) 2017 Joachim Wester
   * MIT license
   */
  var helpers_js_1 = require_helpers();
  var core_js_1 = require_core();
  var beforeDict = new WeakMap;
  var Mirror = function() {
    function Mirror2(obj) {
      this.observers = new Map;
      this.obj = obj;
    }
    return Mirror2;
  }();
  var ObserverInfo = function() {
    function ObserverInfo2(callback, observer) {
      this.callback = callback;
      this.observer = observer;
    }
    return ObserverInfo2;
  }();
  exports.unobserve = unobserve;
  exports.observe = observe;
  exports.generate = generate;
  exports.compare = compare;
});

// node_modules/fast-json-patch/index.js
var require_fast_json_patch = __commonJS((exports) => {
  var core = require_core();
  Object.assign(exports, core);
  var duplex = require_duplex();
  Object.assign(exports, duplex);
  var helpers = require_helpers();
  exports.JsonPatchError = helpers.PatchError;
  exports.deepClone = helpers._deepClone;
  exports.escapePathComponent = helpers.escapePathComponent;
  exports.unescapePathComponent = helpers.unescapePathComponent;
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS((exports, module) => {
  var isNonNullObject = function(value) {
    return !!value && typeof value === "object";
  };
  var isSpecial = function(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
  };
  var isReactElement = function(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  };
  var emptyTarget = function(val) {
    return Array.isArray(val) ? [] : {};
  };
  var cloneUnlessOtherwiseSpecified = function(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
  };
  var defaultArrayMerge = function(target, source, options) {
    return target.concat(source).map(function(element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  };
  var getMergeFunction = function(key, options) {
    if (!options.customMerge) {
      return deepmerge;
    }
    var customMerge = options.customMerge(key);
    return typeof customMerge === "function" ? customMerge : deepmerge;
  };
  var getEnumerableOwnPropertySymbols = function(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
      return Object.propertyIsEnumerable.call(target, symbol);
    }) : [];
  };
  var getKeys = function(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  };
  var propertyIsOnObject = function(object, property) {
    try {
      return property in object;
    } catch (_) {
      return false;
    }
  };
  var propertyIsUnsafe = function(target, key) {
    return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
  };
  var mergeObject = function(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) {
      getKeys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
      });
    }
    getKeys(source).forEach(function(key) {
      if (propertyIsUnsafe(target, key)) {
        return;
      }
      if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
        destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
      } else {
        destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
      }
    });
    return destination;
  };
  var deepmerge = function(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
      return cloneUnlessOtherwiseSpecified(source, options);
    } else if (sourceIsArray) {
      return options.arrayMerge(target, source, options);
    } else {
      return mergeObject(target, source, options);
    }
  };
  var isMergeableObject = function isMergeableObject(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  var canUseSymbol = typeof Symbol === "function" && Symbol.for;
  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
  deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) {
      throw new Error("first argument should be an array");
    }
    return array.reduce(function(prev, next) {
      return deepmerge(prev, next, options);
    }, {});
  };
  var deepmerge_1 = deepmerge;
  module.exports = deepmerge_1;
});

// node_modules/swagger-client/lib/specmap/lib/index.js
var require_lib5 = __commonJS((exports) => {
  var applyPatch = function(obj, patch, opts) {
    opts = opts || {};
    patch = {
      ...patch,
      path: patch.path && normalizeJSONPath(patch.path)
    };
    if (patch.op === "merge") {
      const newValue = getInByJsonPath(obj, patch.path);
      Object.assign(newValue, patch.value);
      jsonPatch.applyPatch(obj, [replace(patch.path, newValue)]);
    } else if (patch.op === "mergeDeep") {
      const currentValue = getInByJsonPath(obj, patch.path);
      const newValue = (0, _deepmerge.default)(currentValue, patch.value);
      obj = jsonPatch.applyPatch(obj, [replace(patch.path, newValue)]).newDocument;
    } else if (patch.op === "add" && patch.path === "" && isObject(patch.value)) {
      const patches = Object.keys(patch.value).reduce((arr, key) => {
        arr.push({
          op: "add",
          path: `/${normalizeJSONPath(key)}`,
          value: patch.value[key]
        });
        return arr;
      }, []);
      jsonPatch.applyPatch(obj, patches);
    } else if (patch.op === "replace" && patch.path === "") {
      let {
        value
      } = patch;
      if (opts.allowMetaPatches && patch.meta && isAdditiveMutation(patch) && (Array.isArray(patch.value) || isObject(patch.value))) {
        value = {
          ...value,
          ...patch.meta
        };
      }
      obj = value;
    } else {
      jsonPatch.applyPatch(obj, [patch]);
      if (opts.allowMetaPatches && patch.meta && isAdditiveMutation(patch) && (Array.isArray(patch.value) || isObject(patch.value))) {
        const currentValue = getInByJsonPath(obj, patch.path);
        const newValue = {
          ...currentValue,
          ...patch.meta
        };
        jsonPatch.applyPatch(obj, [replace(patch.path, newValue)]);
      }
    }
    return obj;
  };
  var normalizeJSONPath = function(path) {
    if (Array.isArray(path)) {
      if (path.length < 1) {
        return "";
      }
      return `/${path.map((item) => (item + "").replace(/~/g, "~0").replace(/\//g, "~1")).join("/")}`;
    }
    return path;
  };
  var add = function(path, value) {
    return {
      op: "add",
      path,
      value
    };
  };
  var replace = function(path, value, meta) {
    return {
      op: "replace",
      path,
      value,
      meta
    };
  };
  var remove = function(path) {
    return {
      op: "remove",
      path
    };
  };
  var merge = function(path, value) {
    return {
      type: "mutation",
      op: "merge",
      path,
      value
    };
  };
  var mergeDeep = function(path, value) {
    return {
      type: "mutation",
      op: "mergeDeep",
      path,
      value
    };
  };
  var context = function(path, value) {
    return {
      type: "context",
      path,
      value
    };
  };
  var forEachNew = function(mutations, fn) {
    try {
      return forEachNewPatch(mutations, forEach, fn);
    } catch (e) {
      return e;
    }
  };
  var forEachNewPrimitive = function(mutations, fn) {
    try {
      return forEachNewPatch(mutations, forEachPrimitive, fn);
    } catch (e) {
      return e;
    }
  };
  var forEachNewPatch = function(mutations, fn, callback) {
    const res = mutations.filter(isAdditiveMutation).map((mutation) => fn(mutation.value, callback, mutation.path)) || [];
    const flat = flatten(res);
    const clean = cleanArray(flat);
    return clean;
  };
  var forEachPrimitive = function(obj, fn, basePath) {
    basePath = basePath || [];
    if (Array.isArray(obj)) {
      return obj.map((val, key) => forEachPrimitive(val, fn, basePath.concat(key)));
    }
    if (isObject(obj)) {
      return Object.keys(obj).map((key) => forEachPrimitive(obj[key], fn, basePath.concat(key)));
    }
    return fn(obj, basePath[basePath.length - 1], basePath);
  };
  var forEach = function(obj, fn, basePath) {
    basePath = basePath || [];
    let results = [];
    if (basePath.length > 0) {
      const newResults = fn(obj, basePath[basePath.length - 1], basePath);
      if (newResults) {
        results = results.concat(newResults);
      }
    }
    if (Array.isArray(obj)) {
      const arrayResults = obj.map((val, key) => forEach(val, fn, basePath.concat(key)));
      if (arrayResults) {
        results = results.concat(arrayResults);
      }
    } else if (isObject(obj)) {
      const moreResults = Object.keys(obj).map((key) => forEach(obj[key], fn, basePath.concat(key)));
      if (moreResults) {
        results = results.concat(moreResults);
      }
    }
    results = flatten(results);
    return results;
  };
  var parentPathMatch = function(path, arr) {
    if (!Array.isArray(arr)) {
      return false;
    }
    for (let i = 0, len = arr.length;i < len; i += 1) {
      if (arr[i] !== path[i]) {
        return false;
      }
    }
    return true;
  };
  var getIn = function(obj, path) {
    return path.reduce((val, token) => {
      if (typeof token !== "undefined" && val) {
        return val[token];
      }
      return val;
    }, obj);
  };
  var fullyNormalizeArray = function(arr) {
    return cleanArray(flatten(normalizeArray(arr)));
  };
  var normalizeArray = function(arr) {
    return Array.isArray(arr) ? arr : [arr];
  };
  var flatten = function(arr) {
    return [].concat(...arr.map((val) => Array.isArray(val) ? flatten(val) : val));
  };
  var cleanArray = function(arr) {
    return arr.filter((elm) => typeof elm !== "undefined");
  };
  var isObject = function(val) {
    return val && typeof val === "object";
  };
  var isPromise = function(val) {
    return isObject(val) && isFunction(val.then);
  };
  var isFunction = function(val) {
    return val && typeof val === "function";
  };
  var isError = function(patch) {
    return patch instanceof Error;
  };
  var isJsonPatch = function(patch) {
    if (isPatch(patch)) {
      const {
        op
      } = patch;
      return op === "add" || op === "remove" || op === "replace";
    }
    return false;
  };
  var isGenerator = function(thing) {
    return Object.prototype.toString.call(thing) === "[object GeneratorFunction]";
  };
  var isMutation = function(patch) {
    return isJsonPatch(patch) || isPatch(patch) && patch.type === "mutation";
  };
  var isAdditiveMutation = function(patch) {
    return isMutation(patch) && (patch.op === "add" || patch.op === "replace" || patch.op === "merge" || patch.op === "mergeDeep");
  };
  var isContextPatch = function(patch) {
    return isPatch(patch) && patch.type === "context";
  };
  var isPatch = function(patch) {
    return patch && typeof patch === "object";
  };
  var getInByJsonPath = function(obj, jsonPath) {
    try {
      return jsonPatch.getValueByPointer(obj, jsonPath);
    } catch (e) {
      console.error(e);
      return {};
    }
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var jsonPatch = _interopRequireWildcard(require_fast_json_patch());
  var _deepmerge = _interopRequireDefault(require_cjs());
  var _default = {
    add,
    replace,
    remove,
    merge,
    mergeDeep,
    context,
    getIn,
    applyPatch,
    parentPathMatch,
    flatten,
    fullyNormalizeArray,
    normalizeArray,
    isPromise,
    forEachNew,
    forEachNewPrimitive,
    isJsonPatch,
    isContextPatch,
    isPatch,
    isMutation,
    isAdditiveMutation,
    isGenerator,
    isFunction,
    isObject,
    isError
  };
  exports.default = _default;
});

// node_modules/stampit/dist/stampit.min.js
var require_stampit_min = __commonJS((exports, module) => {
  (function() {
    var u, c, a, s, f, y = "properties", l = "deepProperties", b = "propertyDescriptors", d = "staticProperties", O = "staticDeepProperties", h = "staticPropertyDescriptors", g = "configuration", m = "deepConfiguration", P = "deepProps", A = "deepStatics", j = "deepConf", v = "initializers", _ = "methods", w = "composers", D = "compose";
    function S(r2) {
      return Object.getOwnPropertyNames(r2).concat(Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(r2) : []);
    }
    function r(r2, t2) {
      return Array.prototype.slice.call(arguments, 2).reduce(r2, t2);
    }
    var x = r.bind(0, function r(t2, e2) {
      if (e2)
        for (var n2 = S(e2), o2 = 0;o2 < n2.length; o2 += 1)
          Object.defineProperty(t2, n2[o2], Object.getOwnPropertyDescriptor(e2, n2[o2]));
      return t2;
    });
    function C(r2) {
      return typeof r2 == "function";
    }
    function N(r2) {
      return r2 && typeof r2 == "object" || C(r2);
    }
    function z(r2) {
      return r2 && typeof r2 == "object" && r2.__proto__ == Object.prototype;
    }
    var E = r.bind(0, function r(t2, e2) {
      if (e2 === u)
        return t2;
      if (Array.isArray(e2))
        return (Array.isArray(t2) ? t2 : []).concat(e2);
      if (!z(e2))
        return e2;
      for (var n2, o2, i = S(e2), p = 0;p < i.length; )
        n2 = i[p++], (o2 = Object.getOwnPropertyDescriptor(e2, n2)).hasOwnProperty("value") ? o2.value !== u && (t2[n2] = r(z(t2[n2]) || Array.isArray(e2[n2]) ? t2[n2] : {}, e2[n2])) : Object.defineProperty(t2, n2, o2);
      return t2;
    });
    function I() {
      return (c = Array.prototype.concat.apply([], arguments).filter(function(r2, t2, e2) {
        return C(r2) && e2.indexOf(r2) === t2;
      })).length ? c : u;
    }
    function t(r2) {
      return c = function r() {
        return function r(t2) {
          var e2, n2, o2 = r[D] || {}, i = { __proto__: o2[_] }, p = o2[v], c2 = Array.prototype.slice.apply(arguments), a2 = o2[l];
          if (a2 && E(i, a2), (a2 = o2[y]) && x(i, a2), (a2 = o2[b]) && Object.defineProperties(i, a2), !p || !p.length)
            return i;
          for (t2 === u && (t2 = {}), o2 = 0;o2 < p.length; )
            C(e2 = p[o2++]) && (i = (n2 = e2.call(i, t2, { instance: i, stamp: r, args: c2 })) === u ? i : n2);
          return i;
        };
      }(), (a = r2[O]) && E(c, a), (a = r2[d]) && x(c, a), (a = r2[h]) && Object.defineProperties(c, a), a = C(c[D]) ? c[D] : R, x(c[D] = function() {
        return a.apply(this, arguments);
      }, r2), c;
    }
    function e(e2, n2) {
      function r2(r3, t3) {
        N(n2[r3]) && (N(e2[r3]) || (e2[r3] = {}), (t3 || x)(e2[r3], n2[r3]));
      }
      function t2(r3) {
        (c = I(e2[r3], n2[r3])) && (e2[r3] = c);
      }
      return n2 && N(n2 = n2[D] || n2) && (r2(_), r2(y), r2(l, E), r2(b), r2(d), r2(O, E), r2(h), r2(g), r2(m, E), t2(v), t2(w)), e2;
    }
    function R() {
      return t(Array.prototype.concat.apply([this], arguments).reduce(e, {}));
    }
    function V(r2) {
      return C(r2) && C(r2[D]);
    }
    var n = {};
    function o(r2, t2) {
      return function() {
        return (s = {})[r2] = t2.apply(u, Array.prototype.concat.apply([{}], arguments)), ((c = this) && c[D] || a).call(c, s);
      };
    }
    n[_] = o(_, x), n[y] = n.props = o(y, x), n[v] = n.init = o(v, I), n[w] = o(w, I), n[l] = n[P] = o(l, E), n[d] = n.statics = o(d, x), n[O] = n[A] = o(O, E), n[g] = n.conf = o(g, x), n[m] = n[j] = o(m, E), n[b] = o(b, x), n[h] = o(h, x), a = n[D] = x(function r() {
      for (var t2, e2, n2 = 0, o2 = [], i = arguments, p = this;n2 < i.length; )
        N(t2 = i[n2++]) && o2.push(V(t2) ? t2 : ((s = {})[_] = (e2 = t2)[_] || u, a = e2.props, s[y] = N((c = e2[y]) || a) ? x({}, a, c) : u, s[v] = I(e2.init, e2[v]), s[w] = I(e2[w]), a = e2[P], s[l] = N((c = e2[l]) || a) ? E({}, a, c) : u, s[b] = e2[b], a = e2.statics, s[d] = N((c = e2[d]) || a) ? x({}, a, c) : u, a = e2[A], s[O] = N((c = e2[O]) || a) ? E({}, a, c) : u, c = e2[h], s[h] = N((a = e2.name && { name: { value: e2.name } }) || c) ? x({}, c, a) : u, a = e2.conf, s[g] = N((c = e2[g]) || a) ? x({}, a, c) : u, a = e2[j], s[m] = N((c = e2[m]) || a) ? E({}, a, c) : u, s));
      if (t2 = R.apply(p || f, o2), p && o2.unshift(p), Array.isArray(i = t2[D][w]))
        for (n2 = 0;n2 < i.length; )
          t2 = V(p = i[n2++]({ stamp: t2, composables: o2 })) ? p : t2;
      return t2;
    }, n), n.create = function() {
      return this.apply(u, arguments);
    }, (s = {})[d] = n, f = R(s), a[D] = a.bind(), a.version = "4.3.2", typeof u != typeof module ? module.exports = a : self.stampit = a;
  })();
});

// node_modules/ramda/src/F.js
var require_F = __commonJS((exports, module) => {
  var F = function() {
    return false;
  };
  module.exports = F;
});

// node_modules/ramda/src/T.js
var require_T = __commonJS((exports, module) => {
  var T = function() {
    return true;
  };
  module.exports = T;
});

// node_modules/ramda/src/__.js
var require___ = __commonJS((exports, module) => {
  module.exports = {
    "@@functional/placeholder": true
  };
});

// node_modules/ramda/src/internal/_isPlaceholder.js
var require__isPlaceholder = __commonJS((exports, module) => {
  var _isPlaceholder = function(a) {
    return a != null && typeof a === "object" && a["@@functional/placeholder"] === true;
  };
  module.exports = _isPlaceholder;
});

// node_modules/ramda/src/internal/_curry1.js
var require__curry1 = __commonJS((exports, module) => {
  var _curry1 = function(fn) {
    return function f1(a) {
      if (arguments.length === 0 || _isPlaceholder(a)) {
        return f1;
      } else {
        return fn.apply(this, arguments);
      }
    };
  };
  var _isPlaceholder = require__isPlaceholder();
  module.exports = _curry1;
});

// node_modules/ramda/src/internal/_curry2.js
var require__curry2 = __commonJS((exports, module) => {
  var _curry2 = function(fn) {
    return function f2(a, b) {
      switch (arguments.length) {
        case 0:
          return f2;
        case 1:
          return _isPlaceholder(a) ? f2 : _curry1(function(_b) {
            return fn(a, _b);
          });
        default:
          return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function(_a) {
            return fn(_a, b);
          }) : _isPlaceholder(b) ? _curry1(function(_b) {
            return fn(a, _b);
          }) : fn(a, b);
      }
    };
  };
  var _curry1 = require__curry1();
  var _isPlaceholder = require__isPlaceholder();
  module.exports = _curry2;
});

// node_modules/ramda/src/add.js
var require_add = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var add = _curry2(function add(a, b) {
    return Number(a) + Number(b);
  });
  module.exports = add;
});

// node_modules/ramda/src/internal/_concat.js
var require__concat = __commonJS((exports, module) => {
  var _concat = function(set1, set2) {
    set1 = set1 || [];
    set2 = set2 || [];
    var idx;
    var len1 = set1.length;
    var len2 = set2.length;
    var result = [];
    idx = 0;
    while (idx < len1) {
      result[result.length] = set1[idx];
      idx += 1;
    }
    idx = 0;
    while (idx < len2) {
      result[result.length] = set2[idx];
      idx += 1;
    }
    return result;
  };
  module.exports = _concat;
});

// node_modules/ramda/src/internal/_arity.js
var require__arity = __commonJS((exports, module) => {
  var _arity = function(n, fn) {
    switch (n) {
      case 0:
        return function() {
          return fn.apply(this, arguments);
        };
      case 1:
        return function(a0) {
          return fn.apply(this, arguments);
        };
      case 2:
        return function(a0, a1) {
          return fn.apply(this, arguments);
        };
      case 3:
        return function(a0, a1, a2) {
          return fn.apply(this, arguments);
        };
      case 4:
        return function(a0, a1, a2, a3) {
          return fn.apply(this, arguments);
        };
      case 5:
        return function(a0, a1, a2, a3, a4) {
          return fn.apply(this, arguments);
        };
      case 6:
        return function(a0, a1, a2, a3, a4, a5) {
          return fn.apply(this, arguments);
        };
      case 7:
        return function(a0, a1, a2, a3, a4, a5, a6) {
          return fn.apply(this, arguments);
        };
      case 8:
        return function(a0, a1, a2, a3, a4, a5, a6, a7) {
          return fn.apply(this, arguments);
        };
      case 9:
        return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
          return fn.apply(this, arguments);
        };
      case 10:
        return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
          return fn.apply(this, arguments);
        };
      default:
        throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
    }
  };
  module.exports = _arity;
});

// node_modules/ramda/src/internal/_curryN.js
var require__curryN = __commonJS((exports, module) => {
  var _curryN = function(length, received, fn) {
    return function() {
      var combined = [];
      var argsIdx = 0;
      var left = length;
      var combinedIdx = 0;
      while (combinedIdx < received.length || argsIdx < arguments.length) {
        var result;
        if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
          result = received[combinedIdx];
        } else {
          result = arguments[argsIdx];
          argsIdx += 1;
        }
        combined[combinedIdx] = result;
        if (!_isPlaceholder(result)) {
          left -= 1;
        }
        combinedIdx += 1;
      }
      return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
    };
  };
  var _arity = require__arity();
  var _isPlaceholder = require__isPlaceholder();
  module.exports = _curryN;
});

// node_modules/ramda/src/curryN.js
var require_curryN = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _curry1 = require__curry1();
  var _curry2 = require__curry2();
  var _curryN = require__curryN();
  var curryN = _curry2(function curryN(length, fn) {
    if (length === 1) {
      return _curry1(fn);
    }
    return _arity(length, _curryN(length, [], fn));
  });
  module.exports = curryN;
});

// node_modules/ramda/src/addIndex.js
var require_addIndex = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var addIndex = _curry1(function addIndex(fn) {
    return curryN(fn.length, function() {
      var idx = 0;
      var origFn = arguments[0];
      var list = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0);
      args[0] = function() {
        var result = origFn.apply(this, _concat(arguments, [idx, list]));
        idx += 1;
        return result;
      };
      return fn.apply(this, args);
    });
  });
  module.exports = addIndex;
});

// node_modules/ramda/src/addIndexRight.js
var require_addIndexRight = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var addIndexRight = _curry1(function addIndex(fn) {
    return curryN(fn.length, function() {
      var origFn = arguments[0];
      var list = arguments[arguments.length - 1];
      var idx = list.length - 1;
      var args = Array.prototype.slice.call(arguments, 0);
      args[0] = function() {
        var result = origFn.apply(this, _concat(arguments, [idx, list]));
        idx -= 1;
        return result;
      };
      return fn.apply(this, args);
    });
  });
  module.exports = addIndexRight;
});

// node_modules/ramda/src/internal/_curry3.js
var require__curry3 = __commonJS((exports, module) => {
  var _curry3 = function(fn) {
    return function f3(a, b, c) {
      switch (arguments.length) {
        case 0:
          return f3;
        case 1:
          return _isPlaceholder(a) ? f3 : _curry2(function(_b, _c) {
            return fn(a, _b, _c);
          });
        case 2:
          return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function(_a, _c) {
            return fn(_a, b, _c);
          }) : _isPlaceholder(b) ? _curry2(function(_b, _c) {
            return fn(a, _b, _c);
          }) : _curry1(function(_c) {
            return fn(a, b, _c);
          });
        default:
          return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) {
            return fn(_a, _b, c);
          }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) {
            return fn(_a, b, _c);
          }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) {
            return fn(a, _b, _c);
          }) : _isPlaceholder(a) ? _curry1(function(_a) {
            return fn(_a, b, c);
          }) : _isPlaceholder(b) ? _curry1(function(_b) {
            return fn(a, _b, c);
          }) : _isPlaceholder(c) ? _curry1(function(_c) {
            return fn(a, b, _c);
          }) : fn(a, b, c);
      }
    };
  };
  var _curry1 = require__curry1();
  var _curry2 = require__curry2();
  var _isPlaceholder = require__isPlaceholder();
  module.exports = _curry3;
});

// node_modules/ramda/src/adjust.js
var require_adjust = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry3 = require__curry3();
  var adjust = _curry3(function adjust(idx, fn, list) {
    var len = list.length;
    if (idx >= len || idx < -len) {
      return list;
    }
    var _idx = (len + idx) % len;
    var _list = _concat(list);
    _list[_idx] = fn(list[_idx]);
    return _list;
  });
  module.exports = adjust;
});

// node_modules/ramda/src/internal/_isArray.js
var require__isArray = __commonJS((exports, module) => {
  module.exports = Array.isArray || function _isArray(val) {
    return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
  };
});

// node_modules/ramda/src/internal/_isTransformer.js
var require__isTransformer = __commonJS((exports, module) => {
  var _isTransformer = function(obj) {
    return obj != null && typeof obj["@@transducer/step"] === "function";
  };
  module.exports = _isTransformer;
});

// node_modules/ramda/src/internal/_dispatchable.js
var require__dispatchable = __commonJS((exports, module) => {
  var _dispatchable = function(methodNames, transducerCreator, fn) {
    return function() {
      if (arguments.length === 0) {
        return fn();
      }
      var obj = arguments[arguments.length - 1];
      if (!_isArray(obj)) {
        var idx = 0;
        while (idx < methodNames.length) {
          if (typeof obj[methodNames[idx]] === "function") {
            return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
          }
          idx += 1;
        }
        if (_isTransformer(obj)) {
          var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
          return transducer(obj);
        }
      }
      return fn.apply(this, arguments);
    };
  };
  var _isArray = require__isArray();
  var _isTransformer = require__isTransformer();
  module.exports = _dispatchable;
});

// node_modules/ramda/src/internal/_reduced.js
var require__reduced = __commonJS((exports, module) => {
  var _reduced = function(x) {
    return x && x["@@transducer/reduced"] ? x : {
      "@@transducer/value": x,
      "@@transducer/reduced": true
    };
  };
  module.exports = _reduced;
});

// node_modules/ramda/src/internal/_xfBase.js
var require__xfBase = __commonJS((exports, module) => {
  module.exports = {
    init: function() {
      return this.xf["@@transducer/init"]();
    },
    result: function(result) {
      return this.xf["@@transducer/result"](result);
    }
  };
});

// node_modules/ramda/src/internal/_xall.js
var require__xall = __commonJS((exports, module) => {
  var _xall = function(f) {
    return function(xf) {
      return new XAll(f, xf);
    };
  };
  var _reduced = require__reduced();
  var _xfBase = require__xfBase();
  var XAll = function() {
    function XAll2(f, xf) {
      this.xf = xf;
      this.f = f;
      this.all = true;
    }
    XAll2.prototype["@@transducer/init"] = _xfBase.init;
    XAll2.prototype["@@transducer/result"] = function(result) {
      if (this.all) {
        result = this.xf["@@transducer/step"](result, true);
      }
      return this.xf["@@transducer/result"](result);
    };
    XAll2.prototype["@@transducer/step"] = function(result, input) {
      if (!this.f(input)) {
        this.all = false;
        result = _reduced(this.xf["@@transducer/step"](result, false));
      }
      return result;
    };
    return XAll2;
  }();
  module.exports = _xall;
});

// node_modules/ramda/src/all.js
var require_all = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xall = require__xall();
  var all = _curry2(_dispatchable(["all"], _xall, function all(fn, list) {
    var idx = 0;
    while (idx < list.length) {
      if (!fn(list[idx])) {
        return false;
      }
      idx += 1;
    }
    return true;
  }));
  module.exports = all;
});

// node_modules/ramda/src/internal/_arrayFromIterator.js
var require__arrayFromIterator = __commonJS((exports, module) => {
  var _arrayFromIterator = function(iter) {
    var list = [];
    var next;
    while (!(next = iter.next()).done) {
      list.push(next.value);
    }
    return list;
  };
  module.exports = _arrayFromIterator;
});

// node_modules/ramda/src/internal/_includesWith.js
var require__includesWith = __commonJS((exports, module) => {
  var _includesWith = function(pred, x, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      if (pred(x, list[idx])) {
        return true;
      }
      idx += 1;
    }
    return false;
  };
  module.exports = _includesWith;
});

// node_modules/ramda/src/internal/_functionName.js
var require__functionName = __commonJS((exports, module) => {
  var _functionName = function(f) {
    var match = String(f).match(/^function (\w*)/);
    return match == null ? "" : match[1];
  };
  module.exports = _functionName;
});

// node_modules/ramda/src/internal/_has.js
var require__has = __commonJS((exports, module) => {
  var _has = function(prop, obj) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  };
  module.exports = _has;
});

// node_modules/ramda/src/internal/_objectIs.js
var require__objectIs = __commonJS((exports, module) => {
  var _objectIs = function(a, b) {
    if (a === b) {
      return a !== 0 || 1 / a === 1 / b;
    } else {
      return a !== a && b !== b;
    }
  };
  module.exports = typeof Object.is === "function" ? Object.is : _objectIs;
});

// node_modules/ramda/src/internal/_isArguments.js
var require__isArguments = __commonJS((exports, module) => {
  var _has = require__has();
  var toString = Object.prototype.toString;
  var _isArguments = function() {
    return toString.call(arguments) === "[object Arguments]" ? function _isArguments(x) {
      return toString.call(x) === "[object Arguments]";
    } : function _isArguments(x) {
      return _has("callee", x);
    };
  }();
  module.exports = _isArguments;
});

// node_modules/ramda/src/keys.js
var require_keys = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _has = require__has();
  var _isArguments = require__isArguments();
  var hasEnumBug = !{
    toString: null
  }.propertyIsEnumerable("toString");
  var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
  var hasArgsEnumBug = function() {
    return arguments.propertyIsEnumerable("length");
  }();
  var contains = function contains(list, item) {
    var idx = 0;
    while (idx < list.length) {
      if (list[idx] === item) {
        return true;
      }
      idx += 1;
    }
    return false;
  };
  var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? _curry1(function keys(obj) {
    return Object(obj) !== obj ? [] : Object.keys(obj);
  }) : _curry1(function keys(obj) {
    if (Object(obj) !== obj) {
      return [];
    }
    var prop, nIdx;
    var ks = [];
    var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
    for (prop in obj) {
      if (_has(prop, obj) && (!checkArgsLength || prop !== "length")) {
        ks[ks.length] = prop;
      }
    }
    if (hasEnumBug) {
      nIdx = nonEnumerableProps.length - 1;
      while (nIdx >= 0) {
        prop = nonEnumerableProps[nIdx];
        if (_has(prop, obj) && !contains(ks, prop)) {
          ks[ks.length] = prop;
        }
        nIdx -= 1;
      }
    }
    return ks;
  });
  module.exports = keys;
});

// node_modules/ramda/src/type.js
var require_type2 = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var type = _curry1(function type(val) {
    return val === null ? "Null" : val === undefined ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
  });
  module.exports = type;
});

// node_modules/ramda/src/internal/_equals.js
var require__equals = __commonJS((exports, module) => {
  var _uniqContentEquals = function(aIterator, bIterator, stackA, stackB) {
    var a = _arrayFromIterator(aIterator);
    var b = _arrayFromIterator(bIterator);
    function eq(_a, _b) {
      return _equals(_a, _b, stackA.slice(), stackB.slice());
    }
    return !_includesWith(function(b2, aItem) {
      return !_includesWith(eq, aItem, b2);
    }, b, a);
  };
  var _equals = function(a, b, stackA, stackB) {
    if (_objectIs(a, b)) {
      return true;
    }
    var typeA = type(a);
    if (typeA !== type(b)) {
      return false;
    }
    if (typeof a["fantasy-land/equals"] === "function" || typeof b["fantasy-land/equals"] === "function") {
      return typeof a["fantasy-land/equals"] === "function" && a["fantasy-land/equals"](b) && typeof b["fantasy-land/equals"] === "function" && b["fantasy-land/equals"](a);
    }
    if (typeof a.equals === "function" || typeof b.equals === "function") {
      return typeof a.equals === "function" && a.equals(b) && typeof b.equals === "function" && b.equals(a);
    }
    switch (typeA) {
      case "Arguments":
      case "Array":
      case "Object":
        if (typeof a.constructor === "function" && _functionName(a.constructor) === "Promise") {
          return a === b;
        }
        break;
      case "Boolean":
      case "Number":
      case "String":
        if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {
          return false;
        }
        break;
      case "Date":
        if (!_objectIs(a.valueOf(), b.valueOf())) {
          return false;
        }
        break;
      case "Error":
        return a.name === b.name && a.message === b.message;
      case "RegExp":
        if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
          return false;
        }
        break;
    }
    var idx = stackA.length - 1;
    while (idx >= 0) {
      if (stackA[idx] === a) {
        return stackB[idx] === b;
      }
      idx -= 1;
    }
    switch (typeA) {
      case "Map":
        if (a.size !== b.size) {
          return false;
        }
        return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
      case "Set":
        if (a.size !== b.size) {
          return false;
        }
        return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
      case "Arguments":
      case "Array":
      case "Object":
      case "Boolean":
      case "Number":
      case "String":
      case "Date":
      case "Error":
      case "RegExp":
      case "Int8Array":
      case "Uint8Array":
      case "Uint8ClampedArray":
      case "Int16Array":
      case "Uint16Array":
      case "Int32Array":
      case "Uint32Array":
      case "Float32Array":
      case "Float64Array":
      case "ArrayBuffer":
        break;
      default:
        return false;
    }
    var keysA = keys(a);
    if (keysA.length !== keys(b).length) {
      return false;
    }
    var extendedStackA = stackA.concat([a]);
    var extendedStackB = stackB.concat([b]);
    idx = keysA.length - 1;
    while (idx >= 0) {
      var key = keysA[idx];
      if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
        return false;
      }
      idx -= 1;
    }
    return true;
  };
  var _arrayFromIterator = require__arrayFromIterator();
  var _includesWith = require__includesWith();
  var _functionName = require__functionName();
  var _has = require__has();
  var _objectIs = require__objectIs();
  var keys = require_keys();
  var type = require_type2();
  module.exports = _equals;
});

// node_modules/ramda/src/equals.js
var require_equals = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _equals = require__equals();
  var equals = _curry2(function equals(a, b) {
    return _equals(a, b, [], []);
  });
  module.exports = equals;
});

// node_modules/ramda/src/internal/_indexOf.js
var require__indexOf = __commonJS((exports, module) => {
  var _indexOf = function(list, a, idx) {
    var inf, item;
    if (typeof list.indexOf === "function") {
      switch (typeof a) {
        case "number":
          if (a === 0) {
            inf = 1 / a;
            while (idx < list.length) {
              item = list[idx];
              if (item === 0 && 1 / item === inf) {
                return idx;
              }
              idx += 1;
            }
            return -1;
          } else if (a !== a) {
            while (idx < list.length) {
              item = list[idx];
              if (typeof item === "number" && item !== item) {
                return idx;
              }
              idx += 1;
            }
            return -1;
          }
          return list.indexOf(a, idx);
        case "string":
        case "boolean":
        case "function":
        case "undefined":
          return list.indexOf(a, idx);
        case "object":
          if (a === null) {
            return list.indexOf(a, idx);
          }
      }
    }
    while (idx < list.length) {
      if (equals(list[idx], a)) {
        return idx;
      }
      idx += 1;
    }
    return -1;
  };
  var equals = require_equals();
  module.exports = _indexOf;
});

// node_modules/ramda/src/internal/_includes.js
var require__includes = __commonJS((exports, module) => {
  var _includes = function(a, list) {
    return _indexOf(list, a, 0) >= 0;
  };
  var _indexOf = require__indexOf();
  module.exports = _includes;
});

// node_modules/ramda/src/internal/_map.js
var require__map = __commonJS((exports, module) => {
  var _map = function(fn, functor) {
    var idx = 0;
    var len = functor.length;
    var result = Array(len);
    while (idx < len) {
      result[idx] = fn(functor[idx]);
      idx += 1;
    }
    return result;
  };
  module.exports = _map;
});

// node_modules/ramda/src/internal/_quote.js
var require__quote = __commonJS((exports, module) => {
  var _quote = function(s) {
    var escaped = s.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0");
    return '"' + escaped.replace(/"/g, '\\"') + '"';
  };
  module.exports = _quote;
});

// node_modules/ramda/src/internal/_toISOString.js
var require__toISOString = __commonJS((exports, module) => {
  var pad = function pad(n) {
    return (n < 10 ? "0" : "") + n;
  };
  var _toISOString = typeof Date.prototype.toISOString === "function" ? function _toISOString(d) {
    return d.toISOString();
  } : function _toISOString(d) {
    return d.getUTCFullYear() + "-" + pad(d.getUTCMonth() + 1) + "-" + pad(d.getUTCDate()) + "T" + pad(d.getUTCHours()) + ":" + pad(d.getUTCMinutes()) + ":" + pad(d.getUTCSeconds()) + "." + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + "Z";
  };
  module.exports = _toISOString;
});

// node_modules/ramda/src/internal/_complement.js
var require__complement = __commonJS((exports, module) => {
  var _complement = function(f) {
    return function() {
      return !f.apply(this, arguments);
    };
  };
  module.exports = _complement;
});

// node_modules/ramda/src/internal/_arrayReduce.js
var require__arrayReduce = __commonJS((exports, module) => {
  var _arrayReduce = function(reducer, acc, list) {
    var index = 0;
    var length = list.length;
    while (index < length) {
      acc = reducer(acc, list[index]);
      index += 1;
    }
    return acc;
  };
  module.exports = _arrayReduce;
});

// node_modules/ramda/src/internal/_filter.js
var require__filter = __commonJS((exports, module) => {
  var _filter = function(fn, list) {
    var idx = 0;
    var len = list.length;
    var result = [];
    while (idx < len) {
      if (fn(list[idx])) {
        result[result.length] = list[idx];
      }
      idx += 1;
    }
    return result;
  };
  module.exports = _filter;
});

// node_modules/ramda/src/internal/_isObject.js
var require__isObject = __commonJS((exports, module) => {
  var _isObject = function(x) {
    return Object.prototype.toString.call(x) === "[object Object]";
  };
  module.exports = _isObject;
});

// node_modules/ramda/src/internal/_xfilter.js
var require__xfilter = __commonJS((exports, module) => {
  var _xfilter = function(f) {
    return function(xf) {
      return new XFilter(f, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XFilter = function() {
    function XFilter2(f, xf) {
      this.xf = xf;
      this.f = f;
    }
    XFilter2.prototype["@@transducer/init"] = _xfBase.init;
    XFilter2.prototype["@@transducer/result"] = _xfBase.result;
    XFilter2.prototype["@@transducer/step"] = function(result, input) {
      return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
    };
    return XFilter2;
  }();
  module.exports = _xfilter;
});

// node_modules/ramda/src/filter.js
var require_filter = __commonJS((exports, module) => {
  var _arrayReduce = require__arrayReduce();
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _filter = require__filter();
  var _isObject = require__isObject();
  var _xfilter = require__xfilter();
  var keys = require_keys();
  var filter = _curry2(_dispatchable(["fantasy-land/filter", "filter"], _xfilter, function(pred, filterable) {
    return _isObject(filterable) ? _arrayReduce(function(acc, key) {
      if (pred(filterable[key])) {
        acc[key] = filterable[key];
      }
      return acc;
    }, {}, keys(filterable)) : _filter(pred, filterable);
  }));
  module.exports = filter;
});

// node_modules/ramda/src/reject.js
var require_reject = __commonJS((exports, module) => {
  var _complement = require__complement();
  var _curry2 = require__curry2();
  var filter = require_filter();
  var reject = _curry2(function reject(pred, filterable) {
    return filter(_complement(pred), filterable);
  });
  module.exports = reject;
});

// node_modules/ramda/src/internal/_toString.js
var require__toString = __commonJS((exports, module) => {
  var _toString = function(x, seen) {
    var recur = function recur(y) {
      var xs = seen.concat([x]);
      return _includes(y, xs) ? "<Circular>" : _toString(y, xs);
    };
    var mapPairs = function(obj, keys2) {
      return _map(function(k) {
        return _quote(k) + ": " + recur(obj[k]);
      }, keys2.slice().sort());
    };
    switch (Object.prototype.toString.call(x)) {
      case "[object Arguments]":
        return "(function() { return arguments; }(" + _map(recur, x).join(", ") + "))";
      case "[object Array]":
        return "[" + _map(recur, x).concat(mapPairs(x, reject(function(k) {
          return /^\d+$/.test(k);
        }, keys(x)))).join(", ") + "]";
      case "[object Boolean]":
        return typeof x === "object" ? "new Boolean(" + recur(x.valueOf()) + ")" : x.toString();
      case "[object Date]":
        return "new Date(" + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ")";
      case "[object Map]":
        return "new Map(" + recur(Array.from(x)) + ")";
      case "[object Null]":
        return "null";
      case "[object Number]":
        return typeof x === "object" ? "new Number(" + recur(x.valueOf()) + ")" : 1 / x === (-Infinity) ? "-0" : x.toString(10);
      case "[object Set]":
        return "new Set(" + recur(Array.from(x).sort()) + ")";
      case "[object String]":
        return typeof x === "object" ? "new String(" + recur(x.valueOf()) + ")" : _quote(x);
      case "[object Undefined]":
        return "undefined";
      default:
        if (typeof x.toString === "function") {
          var repr = x.toString();
          if (repr !== "[object Object]") {
            return repr;
          }
        }
        return "{" + mapPairs(x, keys(x)).join(", ") + "}";
    }
  };
  var _includes = require__includes();
  var _map = require__map();
  var _quote = require__quote();
  var _toISOString = require__toISOString();
  var keys = require_keys();
  var reject = require_reject();
  module.exports = _toString;
});

// node_modules/ramda/src/toString.js
var require_toString = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _toString = require__toString();
  var toString = _curry1(function toString(val) {
    return _toString(val, []);
  });
  module.exports = toString;
});

// node_modules/ramda/src/max.js
var require_max = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var toString = require_toString();
  var max = _curry2(function max(a, b) {
    if (a === b) {
      return b;
    }
    function safeMax(x, y) {
      if (x > y !== y > x) {
        return y > x ? y : x;
      }
      return;
    }
    var maxByValue = safeMax(a, b);
    if (maxByValue !== undefined) {
      return maxByValue;
    }
    var maxByType = safeMax(typeof a, typeof b);
    if (maxByType !== undefined) {
      return maxByType === typeof a ? a : b;
    }
    var stringA = toString(a);
    var maxByStringValue = safeMax(stringA, toString(b));
    if (maxByStringValue !== undefined) {
      return maxByStringValue === stringA ? a : b;
    }
    return b;
  });
  module.exports = max;
});

// node_modules/ramda/src/internal/_xmap.js
var require__xmap = __commonJS((exports, module) => {
  var _xfBase = require__xfBase();
  var XMap = function() {
    function XMap2(f, xf) {
      this.xf = xf;
      this.f = f;
    }
    XMap2.prototype["@@transducer/init"] = _xfBase.init;
    XMap2.prototype["@@transducer/result"] = _xfBase.result;
    XMap2.prototype["@@transducer/step"] = function(result, input) {
      return this.xf["@@transducer/step"](result, this.f(input));
    };
    return XMap2;
  }();
  var _xmap = function _xmap(f) {
    return function(xf) {
      return new XMap(f, xf);
    };
  };
  module.exports = _xmap;
});

// node_modules/ramda/src/map.js
var require_map3 = __commonJS((exports, module) => {
  var _arrayReduce = require__arrayReduce();
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _map = require__map();
  var _xmap = require__xmap();
  var curryN = require_curryN();
  var keys = require_keys();
  var map = _curry2(_dispatchable(["fantasy-land/map", "map"], _xmap, function map(fn, functor) {
    switch (Object.prototype.toString.call(functor)) {
      case "[object Function]":
        return curryN(functor.length, function() {
          return fn.call(this, functor.apply(this, arguments));
        });
      case "[object Object]":
        return _arrayReduce(function(acc, key) {
          acc[key] = fn(functor[key]);
          return acc;
        }, {}, keys(functor));
      default:
        return _map(fn, functor);
    }
  }));
  module.exports = map;
});

// node_modules/ramda/src/internal/_isInteger.js
var require__isInteger = __commonJS((exports, module) => {
  module.exports = Number.isInteger || function _isInteger(n) {
    return n << 0 === n;
  };
});

// node_modules/ramda/src/internal/_isString.js
var require__isString = __commonJS((exports, module) => {
  var _isString = function(x) {
    return Object.prototype.toString.call(x) === "[object String]";
  };
  module.exports = _isString;
});

// node_modules/ramda/src/nth.js
var require_nth = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isString = require__isString();
  var nth = _curry2(function nth(offset, list) {
    var idx = offset < 0 ? list.length + offset : offset;
    return _isString(list) ? list.charAt(idx) : list[idx];
  });
  module.exports = nth;
});

// node_modules/ramda/src/prop.js
var require_prop = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isInteger = require__isInteger();
  var nth = require_nth();
  var prop = _curry2(function prop(p, obj) {
    if (obj == null) {
      return;
    }
    return _isInteger(p) ? nth(p, obj) : obj[p];
  });
  module.exports = prop;
});

// node_modules/ramda/src/pluck.js
var require_pluck = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var map = require_map3();
  var prop = require_prop();
  var pluck = _curry2(function pluck(p, list) {
    return map(prop(p), list);
  });
  module.exports = pluck;
});

// node_modules/ramda/src/internal/_isArrayLike.js
var require__isArrayLike = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _isArray = require__isArray();
  var _isString = require__isString();
  var _isArrayLike = _curry1(function isArrayLike(x) {
    if (_isArray(x)) {
      return true;
    }
    if (!x) {
      return false;
    }
    if (typeof x !== "object") {
      return false;
    }
    if (_isString(x)) {
      return false;
    }
    if (x.length === 0) {
      return true;
    }
    if (x.length > 0) {
      return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
    }
    return false;
  });
  module.exports = _isArrayLike;
});

// node_modules/ramda/src/internal/_createReduce.js
var require__createReduce = __commonJS((exports, module) => {
  var _createReduce = function(arrayReduce, methodReduce, iterableReduce) {
    return function _reduce(xf, acc, list) {
      if (_isArrayLike(list)) {
        return arrayReduce(xf, acc, list);
      }
      if (list == null) {
        return acc;
      }
      if (typeof list["fantasy-land/reduce"] === "function") {
        return methodReduce(xf, acc, list, "fantasy-land/reduce");
      }
      if (list[symIterator] != null) {
        return iterableReduce(xf, acc, list[symIterator]());
      }
      if (typeof list.next === "function") {
        return iterableReduce(xf, acc, list);
      }
      if (typeof list.reduce === "function") {
        return methodReduce(xf, acc, list, "reduce");
      }
      throw new TypeError("reduce: list must be array or iterable");
    };
  };
  var _isArrayLike = require__isArrayLike();
  var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
  module.exports = _createReduce;
});

// node_modules/ramda/src/internal/_xArrayReduce.js
var require__xArrayReduce = __commonJS((exports, module) => {
  var _xArrayReduce = function(xf, acc, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      acc = xf["@@transducer/step"](acc, list[idx]);
      if (acc && acc["@@transducer/reduced"]) {
        acc = acc["@@transducer/value"];
        break;
      }
      idx += 1;
    }
    return xf["@@transducer/result"](acc);
  };
  module.exports = _xArrayReduce;
});

// node_modules/ramda/src/bind.js
var require_bind = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _curry2 = require__curry2();
  var bind = _curry2(function bind(fn, thisObj) {
    return _arity(fn.length, function() {
      return fn.apply(thisObj, arguments);
    });
  });
  module.exports = bind;
});

// node_modules/ramda/src/internal/_xReduce.js
var require__xReduce = __commonJS((exports, module) => {
  var _xIterableReduce = function(xf, acc, iter) {
    var step = iter.next();
    while (!step.done) {
      acc = xf["@@transducer/step"](acc, step.value);
      if (acc && acc["@@transducer/reduced"]) {
        acc = acc["@@transducer/value"];
        break;
      }
      step = iter.next();
    }
    return xf["@@transducer/result"](acc);
  };
  var _xMethodReduce = function(xf, acc, obj, methodName) {
    return xf["@@transducer/result"](obj[methodName](bind(xf["@@transducer/step"], xf), acc));
  };
  var _createReduce = require__createReduce();
  var _xArrayReduce = require__xArrayReduce();
  var bind = require_bind();
  var _xReduce = _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);
  module.exports = _xReduce;
});

// node_modules/ramda/src/internal/_xwrap.js
var require__xwrap = __commonJS((exports, module) => {
  var _xwrap = function(fn) {
    return new XWrap(fn);
  };
  var XWrap = function() {
    function XWrap2(fn) {
      this.f = fn;
    }
    XWrap2.prototype["@@transducer/init"] = function() {
      throw new Error("init not implemented on XWrap");
    };
    XWrap2.prototype["@@transducer/result"] = function(acc) {
      return acc;
    };
    XWrap2.prototype["@@transducer/step"] = function(acc, x) {
      return this.f(acc, x);
    };
    return XWrap2;
  }();
  module.exports = _xwrap;
});

// node_modules/ramda/src/reduce.js
var require_reduce = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _xReduce = require__xReduce();
  var _xwrap = require__xwrap();
  var reduce = _curry3(function(xf, acc, list) {
    return _xReduce(typeof xf === "function" ? _xwrap(xf) : xf, acc, list);
  });
  module.exports = reduce;
});

// node_modules/ramda/src/allPass.js
var require_allPass = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var max = require_max();
  var pluck = require_pluck();
  var reduce = require_reduce();
  var allPass = _curry1(function allPass(preds) {
    return curryN(reduce(max, 0, pluck("length", preds)), function() {
      var idx = 0;
      var len = preds.length;
      while (idx < len) {
        if (!preds[idx].apply(this, arguments)) {
          return false;
        }
        idx += 1;
      }
      return true;
    });
  });
  module.exports = allPass;
});

// node_modules/ramda/src/always.js
var require_always = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var always = _curry1(function always(val) {
    return function() {
      return val;
    };
  });
  module.exports = always;
});

// node_modules/ramda/src/and.js
var require_and = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var and = _curry2(function and(a, b) {
    return a && b;
  });
  module.exports = and;
});

// node_modules/ramda/src/internal/_xany.js
var require__xany = __commonJS((exports, module) => {
  var _xany = function(f) {
    return function(xf) {
      return new XAny(f, xf);
    };
  };
  var _reduced = require__reduced();
  var _xfBase = require__xfBase();
  var XAny = function() {
    function XAny2(f, xf) {
      this.xf = xf;
      this.f = f;
      this.any = false;
    }
    XAny2.prototype["@@transducer/init"] = _xfBase.init;
    XAny2.prototype["@@transducer/result"] = function(result) {
      if (!this.any) {
        result = this.xf["@@transducer/step"](result, false);
      }
      return this.xf["@@transducer/result"](result);
    };
    XAny2.prototype["@@transducer/step"] = function(result, input) {
      if (this.f(input)) {
        this.any = true;
        result = _reduced(this.xf["@@transducer/step"](result, true));
      }
      return result;
    };
    return XAny2;
  }();
  module.exports = _xany;
});

// node_modules/ramda/src/any.js
var require_any = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xany = require__xany();
  var any = _curry2(_dispatchable(["any"], _xany, function any(fn, list) {
    var idx = 0;
    while (idx < list.length) {
      if (fn(list[idx])) {
        return true;
      }
      idx += 1;
    }
    return false;
  }));
  module.exports = any;
});

// node_modules/ramda/src/anyPass.js
var require_anyPass = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var max = require_max();
  var pluck = require_pluck();
  var reduce = require_reduce();
  var anyPass = _curry1(function anyPass(preds) {
    return curryN(reduce(max, 0, pluck("length", preds)), function() {
      var idx = 0;
      var len = preds.length;
      while (idx < len) {
        if (preds[idx].apply(this, arguments)) {
          return true;
        }
        idx += 1;
      }
      return false;
    });
  });
  module.exports = anyPass;
});

// node_modules/ramda/src/internal/_reduce.js
var require__reduce = __commonJS((exports, module) => {
  var _iterableReduce = function(reducer, acc, iter) {
    var step = iter.next();
    while (!step.done) {
      acc = reducer(acc, step.value);
      step = iter.next();
    }
    return acc;
  };
  var _methodReduce = function(reducer, acc, obj, methodName) {
    return obj[methodName](reducer, acc);
  };
  var _arrayReduce = require__arrayReduce();
  var _createReduce = require__createReduce();
  var _reduce = _createReduce(_arrayReduce, _methodReduce, _iterableReduce);
  module.exports = _reduce;
});

// node_modules/ramda/src/ap.js
var require_ap = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry2 = require__curry2();
  var _reduce = require__reduce();
  var map = require_map3();
  var ap = _curry2(function ap(applyF, applyX) {
    return typeof applyX["fantasy-land/ap"] === "function" ? applyX["fantasy-land/ap"](applyF) : typeof applyF.ap === "function" ? applyF.ap(applyX) : typeof applyF === "function" ? function(x) {
      return applyF(x)(applyX(x));
    } : _reduce(function(acc, f) {
      return _concat(acc, map(f, applyX));
    }, [], applyF);
  });
  module.exports = ap;
});

// node_modules/ramda/src/internal/_aperture.js
var require__aperture = __commonJS((exports, module) => {
  var _aperture = function(n, list) {
    var idx = 0;
    var limit = list.length - (n - 1);
    var acc = new Array(limit >= 0 ? limit : 0);
    while (idx < limit) {
      acc[idx] = Array.prototype.slice.call(list, idx, idx + n);
      idx += 1;
    }
    return acc;
  };
  module.exports = _aperture;
});

// node_modules/ramda/src/internal/_xaperture.js
var require__xaperture = __commonJS((exports, module) => {
  var _xaperture = function(n) {
    return function(xf) {
      return new XAperture(n, xf);
    };
  };
  var _concat = require__concat();
  var _xfBase = require__xfBase();
  var XAperture = function() {
    function XAperture2(n, xf) {
      this.xf = xf;
      this.pos = 0;
      this.full = false;
      this.acc = new Array(n);
    }
    XAperture2.prototype["@@transducer/init"] = _xfBase.init;
    XAperture2.prototype["@@transducer/result"] = function(result) {
      this.acc = null;
      return this.xf["@@transducer/result"](result);
    };
    XAperture2.prototype["@@transducer/step"] = function(result, input) {
      this.store(input);
      return this.full ? this.xf["@@transducer/step"](result, this.getCopy()) : result;
    };
    XAperture2.prototype.store = function(input) {
      this.acc[this.pos] = input;
      this.pos += 1;
      if (this.pos === this.acc.length) {
        this.pos = 0;
        this.full = true;
      }
    };
    XAperture2.prototype.getCopy = function() {
      return _concat(Array.prototype.slice.call(this.acc, this.pos), Array.prototype.slice.call(this.acc, 0, this.pos));
    };
    return XAperture2;
  }();
  module.exports = _xaperture;
});

// node_modules/ramda/src/aperture.js
var require_aperture = __commonJS((exports, module) => {
  var _aperture = require__aperture();
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xaperture = require__xaperture();
  var aperture = _curry2(_dispatchable([], _xaperture, _aperture));
  module.exports = aperture;
});

// node_modules/ramda/src/append.js
var require_append = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry2 = require__curry2();
  var append = _curry2(function append(el, list) {
    return _concat(list, [el]);
  });
  module.exports = append;
});

// node_modules/ramda/src/apply.js
var require_apply = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var apply = _curry2(function apply(fn, args) {
    return fn.apply(this, args);
  });
  module.exports = apply;
});

// node_modules/ramda/src/values.js
var require_values = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var keys = require_keys();
  var values = _curry1(function values(obj) {
    var props = keys(obj);
    var len = props.length;
    var vals = [];
    var idx = 0;
    while (idx < len) {
      vals[idx] = obj[props[idx]];
      idx += 1;
    }
    return vals;
  });
  module.exports = values;
});

// node_modules/ramda/src/applySpec.js
var require_applySpec = __commonJS((exports, module) => {
  var mapValues = function(fn, obj) {
    return _isArray(obj) ? obj.map(fn) : keys(obj).reduce(function(acc, key) {
      acc[key] = fn(obj[key]);
      return acc;
    }, {});
  };
  var _curry1 = require__curry1();
  var _isArray = require__isArray();
  var apply = require_apply();
  var curryN = require_curryN();
  var max = require_max();
  var pluck = require_pluck();
  var reduce = require_reduce();
  var keys = require_keys();
  var values = require_values();
  var applySpec = _curry1(function applySpec(spec) {
    spec = mapValues(function(v) {
      return typeof v == "function" ? v : applySpec(v);
    }, spec);
    return curryN(reduce(max, 0, pluck("length", values(spec))), function() {
      var args = arguments;
      return mapValues(function(f) {
        return apply(f, args);
      }, spec);
    });
  });
  module.exports = applySpec;
});

// node_modules/ramda/src/applyTo.js
var require_applyTo = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var applyTo = _curry2(function applyTo(x, f) {
    return f(x);
  });
  module.exports = applyTo;
});

// node_modules/ramda/src/ascend.js
var require_ascend = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var ascend = _curry3(function ascend(fn, a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
  module.exports = ascend;
});

// node_modules/ramda/src/internal/_assoc.js
var require__assoc = __commonJS((exports, module) => {
  var _assoc = function(prop, val, obj) {
    if (_isInteger(prop) && _isArray(obj)) {
      var arr = [].concat(obj);
      arr[prop] = val;
      return arr;
    }
    var result = {};
    for (var p in obj) {
      result[p] = obj[p];
    }
    result[prop] = val;
    return result;
  };
  var _isArray = require__isArray();
  var _isInteger = require__isInteger();
  module.exports = _assoc;
});

// node_modules/ramda/src/isNil.js
var require_isNil = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var isNil = _curry1(function isNil(x) {
    return x == null;
  });
  module.exports = isNil;
});

// node_modules/ramda/src/assocPath.js
var require_assocPath = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _has = require__has();
  var _isInteger = require__isInteger();
  var _assoc = require__assoc();
  var isNil = require_isNil();
  var assocPath = _curry3(function assocPath(path, val, obj) {
    if (path.length === 0) {
      return val;
    }
    var idx = path[0];
    if (path.length > 1) {
      var nextObj = !isNil(obj) && _has(idx, obj) && typeof obj[idx] === "object" ? obj[idx] : _isInteger(path[1]) ? [] : {};
      val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);
    }
    return _assoc(idx, val, obj);
  });
  module.exports = assocPath;
});

// node_modules/ramda/src/assoc.js
var require_assoc = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var assocPath = require_assocPath();
  var assoc = _curry3(function assoc(prop, val, obj) {
    return assocPath([prop], val, obj);
  });
  module.exports = assoc;
});

// node_modules/ramda/src/nAry.js
var require_nAry = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var nAry = _curry2(function nAry(n, fn) {
    switch (n) {
      case 0:
        return function() {
          return fn.call(this);
        };
      case 1:
        return function(a0) {
          return fn.call(this, a0);
        };
      case 2:
        return function(a0, a1) {
          return fn.call(this, a0, a1);
        };
      case 3:
        return function(a0, a1, a2) {
          return fn.call(this, a0, a1, a2);
        };
      case 4:
        return function(a0, a1, a2, a3) {
          return fn.call(this, a0, a1, a2, a3);
        };
      case 5:
        return function(a0, a1, a2, a3, a4) {
          return fn.call(this, a0, a1, a2, a3, a4);
        };
      case 6:
        return function(a0, a1, a2, a3, a4, a5) {
          return fn.call(this, a0, a1, a2, a3, a4, a5);
        };
      case 7:
        return function(a0, a1, a2, a3, a4, a5, a6) {
          return fn.call(this, a0, a1, a2, a3, a4, a5, a6);
        };
      case 8:
        return function(a0, a1, a2, a3, a4, a5, a6, a7) {
          return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);
        };
      case 9:
        return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {
          return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);
        };
      case 10:
        return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
          return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
        };
      default:
        throw new Error("First argument to nAry must be a non-negative integer no greater than ten");
    }
  });
  module.exports = nAry;
});

// node_modules/ramda/src/binary.js
var require_binary3 = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var nAry = require_nAry();
  var binary = _curry1(function binary(fn) {
    return nAry(2, fn);
  });
  module.exports = binary;
});

// node_modules/ramda/src/internal/_isFunction.js
var require__isFunction = __commonJS((exports, module) => {
  var _isFunction = function(x) {
    var type = Object.prototype.toString.call(x);
    return type === "[object Function]" || type === "[object AsyncFunction]" || type === "[object GeneratorFunction]" || type === "[object AsyncGeneratorFunction]";
  };
  module.exports = _isFunction;
});

// node_modules/ramda/src/liftN.js
var require_liftN = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _arrayReduce = require__arrayReduce();
  var ap = require_ap();
  var curryN = require_curryN();
  var map = require_map3();
  var liftN = _curry2(function liftN(arity, fn) {
    var lifted = curryN(arity, fn);
    return curryN(arity, function() {
      return _arrayReduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
    });
  });
  module.exports = liftN;
});

// node_modules/ramda/src/lift.js
var require_lift = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var liftN = require_liftN();
  var lift = _curry1(function lift(fn) {
    return liftN(fn.length, fn);
  });
  module.exports = lift;
});

// node_modules/ramda/src/both.js
var require_both = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isFunction = require__isFunction();
  var and = require_and();
  var lift = require_lift();
  var both = _curry2(function both(f, g) {
    return _isFunction(f) ? function _both() {
      return f.apply(this, arguments) && g.apply(this, arguments);
    } : lift(and)(f, g);
  });
  module.exports = both;
});

// node_modules/ramda/src/call.js
var require_call = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var call = _curry1(function call(fn) {
    return fn.apply(this, Array.prototype.slice.call(arguments, 1));
  });
  module.exports = call;
});

// node_modules/ramda/src/internal/_makeFlat.js
var require__makeFlat = __commonJS((exports, module) => {
  var _makeFlat = function(recursive) {
    return function flatt(list) {
      var value, jlen, j;
      var result = [];
      var idx = 0;
      var ilen = list.length;
      while (idx < ilen) {
        if (_isArrayLike(list[idx])) {
          value = recursive ? flatt(list[idx]) : list[idx];
          j = 0;
          jlen = value.length;
          while (j < jlen) {
            result[result.length] = value[j];
            j += 1;
          }
        } else {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    };
  };
  var _isArrayLike = require__isArrayLike();
  module.exports = _makeFlat;
});

// node_modules/ramda/src/internal/_forceReduced.js
var require__forceReduced = __commonJS((exports, module) => {
  var _forceReduced = function(x) {
    return {
      "@@transducer/value": x,
      "@@transducer/reduced": true
    };
  };
  module.exports = _forceReduced;
});

// node_modules/ramda/src/internal/_flatCat.js
var require__flatCat = __commonJS((exports, module) => {
  var _forceReduced = require__forceReduced();
  var _isArrayLike = require__isArrayLike();
  var _xArrayReduce = require__xArrayReduce();
  var _xReduce = require__xReduce();
  var _xfBase = require__xfBase();
  var tInit = "@@transducer/init";
  var tStep = "@@transducer/step";
  var tResult = "@@transducer/result";
  var XPreservingReduced = function() {
    function XPreservingReduced2(xf) {
      this.xf = xf;
    }
    XPreservingReduced2.prototype[tInit] = _xfBase.init;
    XPreservingReduced2.prototype[tResult] = _xfBase.result;
    XPreservingReduced2.prototype[tStep] = function(result, input) {
      var ret = this.xf[tStep](result, input);
      return ret["@@transducer/reduced"] ? _forceReduced(ret) : ret;
    };
    return XPreservingReduced2;
  }();
  var XFlatCat = function() {
    function XFlatCat2(xf) {
      this.xf = new XPreservingReduced(xf);
    }
    XFlatCat2.prototype[tInit] = _xfBase.init;
    XFlatCat2.prototype[tResult] = _xfBase.result;
    XFlatCat2.prototype[tStep] = function(result, input) {
      return !_isArrayLike(input) ? _xArrayReduce(this.xf, result, [input]) : _xReduce(this.xf, result, input);
    };
    return XFlatCat2;
  }();
  var _flatCat = function _xcat(xf) {
    return new XFlatCat(xf);
  };
  module.exports = _flatCat;
});

// node_modules/ramda/src/internal/_xchain.js
var require__xchain = __commonJS((exports, module) => {
  var _xchain = function(f) {
    return function(xf) {
      return _xmap(f)(_flatCat(xf));
    };
  };
  var _flatCat = require__flatCat();
  var _xmap = require__xmap();
  module.exports = _xchain;
});

// node_modules/ramda/src/chain.js
var require_chain = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _makeFlat = require__makeFlat();
  var _xchain = require__xchain();
  var map = require_map3();
  var chain = _curry2(_dispatchable(["fantasy-land/chain", "chain"], _xchain, function chain(fn, monad) {
    if (typeof monad === "function") {
      return function(x) {
        return fn(monad(x))(x);
      };
    }
    return _makeFlat(false)(map(fn, monad));
  }));
  module.exports = chain;
});

// node_modules/ramda/src/clamp.js
var require_clamp = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var clamp = _curry3(function clamp(min, max, value) {
    if (min > max) {
      throw new Error("min must not be greater than max in clamp(min, max, value)");
    }
    return value < min ? min : value > max ? max : value;
  });
  module.exports = clamp;
});

// node_modules/ramda/src/internal/_cloneRegExp.js
var require__cloneRegExp = __commonJS((exports, module) => {
  var _cloneRegExp = function(pattern) {
    return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : "") + (pattern.dotAll ? "s" : ""));
  };
  module.exports = _cloneRegExp;
});

// node_modules/ramda/src/internal/_clone.js
var require__clone = __commonJS((exports, module) => {
  var _clone = function(value, deep, map) {
    map || (map = new _ObjectMap);
    if (_isPrimitive(value)) {
      return value;
    }
    var copy = function copy(copiedValue) {
      var cachedCopy = map.get(value);
      if (cachedCopy) {
        return cachedCopy;
      }
      map.set(value, copiedValue);
      for (var key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          copiedValue[key] = deep ? _clone(value[key], true, map) : value[key];
        }
      }
      return copiedValue;
    };
    switch (type(value)) {
      case "Object":
        return copy(Object.create(Object.getPrototypeOf(value)));
      case "Array":
        return copy([]);
      case "Date":
        return new Date(value.valueOf());
      case "RegExp":
        return _cloneRegExp(value);
      case "Int8Array":
      case "Uint8Array":
      case "Uint8ClampedArray":
      case "Int16Array":
      case "Uint16Array":
      case "Int32Array":
      case "Uint32Array":
      case "Float32Array":
      case "Float64Array":
      case "BigInt64Array":
      case "BigUint64Array":
        return value.slice();
      default:
        return value;
    }
  };
  var _isPrimitive = function(param) {
    var type2 = typeof param;
    return param == null || type2 != "object" && type2 != "function";
  };
  var _cloneRegExp = require__cloneRegExp();
  var type = require_type2();
  module.exports = _clone;
  var _ObjectMap = function() {
    function _ObjectMap2() {
      this.map = {};
      this.length = 0;
    }
    _ObjectMap2.prototype.set = function(key, value) {
      const hashedKey = this.hash(key);
      let bucket = this.map[hashedKey];
      if (!bucket) {
        this.map[hashedKey] = bucket = [];
      }
      bucket.push([key, value]);
      this.length += 1;
    };
    _ObjectMap2.prototype.hash = function(key) {
      let hashedKey = [];
      for (var value in key) {
        hashedKey.push(Object.prototype.toString.call(key[value]));
      }
      return hashedKey.join();
    };
    _ObjectMap2.prototype.get = function(key) {
      if (this.length <= 180) {
        for (const p in this.map) {
          const bucket2 = this.map[p];
          for (let i = 0;i < bucket2.length; i += 1) {
            const element = bucket2[i];
            if (element[0] === key) {
              return element[1];
            }
          }
        }
        return;
      }
      const hashedKey = this.hash(key);
      const bucket = this.map[hashedKey];
      if (!bucket) {
        return;
      }
      for (let i = 0;i < bucket.length; i += 1) {
        const element = bucket[i];
        if (element[0] === key) {
          return element[1];
        }
      }
    };
    return _ObjectMap2;
  }();
});

// node_modules/ramda/src/clone.js
var require_clone = __commonJS((exports, module) => {
  var _clone = require__clone();
  var _curry1 = require__curry1();
  var clone = _curry1(function clone(value) {
    return value != null && typeof value.clone === "function" ? value.clone() : _clone(value, true);
  });
  module.exports = clone;
});

// node_modules/ramda/src/collectBy.js
var require_collectBy = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _reduce = require__reduce();
  var collectBy = _curry2(function collectBy(fn, list) {
    var group = _reduce(function(o, x) {
      var tag2 = fn(x);
      if (o[tag2] === undefined) {
        o[tag2] = [];
      }
      o[tag2].push(x);
      return o;
    }, {}, list);
    var newList = [];
    for (var tag in group) {
      newList.push(group[tag]);
    }
    return newList;
  });
  module.exports = collectBy;
});

// node_modules/ramda/src/comparator.js
var require_comparator = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var comparator = _curry1(function comparator(pred) {
    return function(a, b) {
      return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
    };
  });
  module.exports = comparator;
});

// node_modules/ramda/src/not.js
var require_not = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var not = _curry1(function not(a) {
    return !a;
  });
  module.exports = not;
});

// node_modules/ramda/src/complement.js
var require_complement = __commonJS((exports, module) => {
  var lift = require_lift();
  var not = require_not();
  var complement = lift(not);
  module.exports = complement;
});

// node_modules/ramda/src/internal/_pipe.js
var require__pipe = __commonJS((exports, module) => {
  var _pipe = function(f, g) {
    return function() {
      return g.call(this, f.apply(this, arguments));
    };
  };
  module.exports = _pipe;
});

// node_modules/ramda/src/internal/_checkForMethod.js
var require__checkForMethod = __commonJS((exports, module) => {
  var _checkForMethod = function(methodname, fn) {
    return function() {
      var length = arguments.length;
      if (length === 0) {
        return fn();
      }
      var obj = arguments[length - 1];
      return _isArray(obj) || typeof obj[methodname] !== "function" ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
    };
  };
  var _isArray = require__isArray();
  module.exports = _checkForMethod;
});

// node_modules/ramda/src/slice.js
var require_slice = __commonJS((exports, module) => {
  var _checkForMethod = require__checkForMethod();
  var _curry3 = require__curry3();
  var slice = _curry3(_checkForMethod("slice", function slice(fromIndex, toIndex, list) {
    return Array.prototype.slice.call(list, fromIndex, toIndex);
  }));
  module.exports = slice;
});

// node_modules/ramda/src/tail.js
var require_tail = __commonJS((exports, module) => {
  var _checkForMethod = require__checkForMethod();
  var _curry1 = require__curry1();
  var slice = require_slice();
  var tail = _curry1(_checkForMethod("tail", slice(1, Infinity)));
  module.exports = tail;
});

// node_modules/ramda/src/pipe.js
var require_pipe = __commonJS((exports, module) => {
  var pipe = function() {
    if (arguments.length === 0) {
      throw new Error("pipe requires at least one argument");
    }
    return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
  };
  var _arity = require__arity();
  var _pipe = require__pipe();
  var reduce = require_reduce();
  var tail = require_tail();
  module.exports = pipe;
});

// node_modules/ramda/src/reverse.js
var require_reverse = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _isString = require__isString();
  var reverse = _curry1(function reverse(list) {
    return _isString(list) ? list.split("").reverse().join("") : Array.prototype.slice.call(list, 0).reverse();
  });
  module.exports = reverse;
});

// node_modules/ramda/src/compose.js
var require_compose = __commonJS((exports, module) => {
  var compose = function() {
    if (arguments.length === 0) {
      throw new Error("compose requires at least one argument");
    }
    return pipe.apply(this, reverse(arguments));
  };
  var pipe = require_pipe();
  var reverse = require_reverse();
  module.exports = compose;
});

// node_modules/ramda/src/head.js
var require_head = __commonJS((exports, module) => {
  var nth = require_nth();
  var head = nth(0);
  module.exports = head;
});

// node_modules/ramda/src/internal/_identity.js
var require__identity = __commonJS((exports, module) => {
  var _identity = function(x) {
    return x;
  };
  module.exports = _identity;
});

// node_modules/ramda/src/identity.js
var require_identity2 = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _identity = require__identity();
  var identity = _curry1(_identity);
  module.exports = identity;
});

// node_modules/ramda/src/pipeWith.js
var require_pipeWith = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _curry2 = require__curry2();
  var head = require_head();
  var _reduce = require__reduce();
  var tail = require_tail();
  var identity = require_identity2();
  var pipeWith = _curry2(function pipeWith(xf, list) {
    if (list.length <= 0) {
      return identity;
    }
    var headList = head(list);
    var tailList = tail(list);
    return _arity(headList.length, function() {
      return _reduce(function(result, f) {
        return xf.call(this, f, result);
      }, headList.apply(this, arguments), tailList);
    });
  });
  module.exports = pipeWith;
});

// node_modules/ramda/src/composeWith.js
var require_composeWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var pipeWith = require_pipeWith();
  var reverse = require_reverse();
  var composeWith = _curry2(function composeWith(xf, list) {
    return pipeWith.apply(this, [xf, reverse(list)]);
  });
  module.exports = composeWith;
});

// node_modules/ramda/src/concat.js
var require_concat = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isArray = require__isArray();
  var _isFunction = require__isFunction();
  var _isString = require__isString();
  var toString = require_toString();
  var concat = _curry2(function concat(a, b) {
    if (_isArray(a)) {
      if (_isArray(b)) {
        return a.concat(b);
      }
      throw new TypeError(toString(b) + " is not an array");
    }
    if (_isString(a)) {
      if (_isString(b)) {
        return a + b;
      }
      throw new TypeError(toString(b) + " is not a string");
    }
    if (a != null && _isFunction(a["fantasy-land/concat"])) {
      return a["fantasy-land/concat"](b);
    }
    if (a != null && _isFunction(a.concat)) {
      return a.concat(b);
    }
    throw new TypeError(toString(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
  });
  module.exports = concat;
});

// node_modules/ramda/src/cond.js
var require_cond = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _curry1 = require__curry1();
  var map = require_map3();
  var max = require_max();
  var reduce = require_reduce();
  var cond = _curry1(function cond(pairs) {
    var arity = reduce(max, 0, map(function(pair) {
      return pair[0].length;
    }, pairs));
    return _arity(arity, function() {
      var idx = 0;
      while (idx < pairs.length) {
        if (pairs[idx][0].apply(this, arguments)) {
          return pairs[idx][1].apply(this, arguments);
        }
        idx += 1;
      }
    });
  });
  module.exports = cond;
});

// node_modules/ramda/src/curry.js
var require_curry = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var curry = _curry1(function curry(fn) {
    return curryN(fn.length, fn);
  });
  module.exports = curry;
});

// node_modules/ramda/src/constructN.js
var require_constructN = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var curry = require_curry();
  var nAry = require_nAry();
  var constructN = _curry2(function constructN(n, Fn) {
    if (n > 10) {
      throw new Error("Constructor with greater than ten arguments");
    }
    if (n === 0) {
      return function() {
        return new Fn;
      };
    }
    return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
      switch (n) {
        case 1:
          return new Fn($0);
        case 2:
          return new Fn($0, $1);
        case 3:
          return new Fn($0, $1, $2);
        case 4:
          return new Fn($0, $1, $2, $3);
        case 5:
          return new Fn($0, $1, $2, $3, $4);
        case 6:
          return new Fn($0, $1, $2, $3, $4, $5);
        case 7:
          return new Fn($0, $1, $2, $3, $4, $5, $6);
        case 8:
          return new Fn($0, $1, $2, $3, $4, $5, $6, $7);
        case 9:
          return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);
        case 10:
          return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
      }
    }));
  });
  module.exports = constructN;
});

// node_modules/ramda/src/construct.js
var require_construct = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var constructN = require_constructN();
  var construct = _curry1(function construct(Fn) {
    return constructN(Fn.length, Fn);
  });
  module.exports = construct;
});

// node_modules/ramda/src/converge.js
var require_converge = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _map = require__map();
  var curryN = require_curryN();
  var max = require_max();
  var pluck = require_pluck();
  var reduce = require_reduce();
  var converge = _curry2(function converge(after, fns) {
    return curryN(reduce(max, 0, pluck("length", fns)), function() {
      var args = arguments;
      var context = this;
      return after.apply(context, _map(function(fn) {
        return fn.apply(context, args);
      }, fns));
    });
  });
  module.exports = converge;
});

// node_modules/ramda/src/count.js
var require_count = __commonJS((exports, module) => {
  var _reduce = require__reduce();
  var curry = require_curry();
  var count = curry(function(pred, list) {
    return _reduce(function(a, e) {
      return pred(e) ? a + 1 : a;
    }, 0, list);
  });
  module.exports = count;
});

// node_modules/ramda/src/internal/_xreduceBy.js
var require__xreduceBy = __commonJS((exports, module) => {
  var _xreduceBy = function(valueFn, valueAcc, keyFn) {
    return function(xf) {
      return new XReduceBy(valueFn, valueAcc, keyFn, xf);
    };
  };
  var _clone = require__clone();
  var _has = require__has();
  var _xfBase = require__xfBase();
  var XReduceBy = function() {
    function XReduceBy2(valueFn, valueAcc, keyFn, xf) {
      this.valueFn = valueFn;
      this.valueAcc = valueAcc;
      this.keyFn = keyFn;
      this.xf = xf;
      this.inputs = {};
    }
    XReduceBy2.prototype["@@transducer/init"] = _xfBase.init;
    XReduceBy2.prototype["@@transducer/result"] = function(result) {
      var key;
      for (key in this.inputs) {
        if (_has(key, this.inputs)) {
          result = this.xf["@@transducer/step"](result, this.inputs[key]);
          if (result["@@transducer/reduced"]) {
            result = result["@@transducer/value"];
            break;
          }
        }
      }
      this.inputs = null;
      return this.xf["@@transducer/result"](result);
    };
    XReduceBy2.prototype["@@transducer/step"] = function(result, input) {
      var key = this.keyFn(input);
      this.inputs[key] = this.inputs[key] || [key, _clone(this.valueAcc, false)];
      this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
      return result;
    };
    return XReduceBy2;
  }();
  module.exports = _xreduceBy;
});

// node_modules/ramda/src/reduceBy.js
var require_reduceBy = __commonJS((exports, module) => {
  var _clone = require__clone();
  var _curryN = require__curryN();
  var _dispatchable = require__dispatchable();
  var _has = require__has();
  var _reduced = require__reduced();
  var _xReduce = require__xReduce();
  var _xreduceBy = require__xreduceBy();
  var _xwrap = require__xwrap();
  var reduceBy = _curryN(4, [], _dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
    var xf = _xwrap(function(acc, elt) {
      var key = keyFn(elt);
      var value = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, false), elt);
      if (value && value["@@transducer/reduced"]) {
        return _reduced(acc);
      }
      acc[key] = value;
      return acc;
    });
    return _xReduce(xf, {}, list);
  }));
  module.exports = reduceBy;
});

// node_modules/ramda/src/countBy.js
var require_countBy = __commonJS((exports, module) => {
  var reduceBy = require_reduceBy();
  var countBy = reduceBy(function(acc, elem) {
    return acc + 1;
  }, 0);
  module.exports = countBy;
});

// node_modules/ramda/src/dec.js
var require_dec = __commonJS((exports, module) => {
  var add = require_add();
  var dec = add(-1);
  module.exports = dec;
});

// node_modules/ramda/src/defaultTo.js
var require_defaultTo = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var defaultTo = _curry2(function defaultTo(d, v) {
    return v == null || v !== v ? d : v;
  });
  module.exports = defaultTo;
});

// node_modules/ramda/src/descend.js
var require_descend = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var descend = _curry3(function descend(fn, a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa > bb ? -1 : aa < bb ? 1 : 0;
  });
  module.exports = descend;
});

// node_modules/ramda/src/internal/_Set.js
var require__Set = __commonJS((exports, module) => {
  var hasOrAdd = function(item, shouldAdd, set) {
    var type = typeof item;
    var prevSize, newSize;
    switch (type) {
      case "string":
      case "number":
        if (item === 0 && 1 / item === (-Infinity)) {
          if (set._items["-0"]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items["-0"] = true;
            }
            return false;
          }
        }
        if (set._nativeSet !== null) {
          if (shouldAdd) {
            prevSize = set._nativeSet.size;
            set._nativeSet.add(item);
            newSize = set._nativeSet.size;
            return newSize === prevSize;
          } else {
            return set._nativeSet.has(item);
          }
        } else {
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = {};
              set._items[type][item] = true;
            }
            return false;
          } else if (item in set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type][item] = true;
            }
            return false;
          }
        }
      case "boolean":
        if (type in set._items) {
          var bIdx = item ? 1 : 0;
          if (set._items[type][bIdx]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type][bIdx] = true;
            }
            return false;
          }
        } else {
          if (shouldAdd) {
            set._items[type] = item ? [false, true] : [true, false];
          }
          return false;
        }
      case "function":
        if (set._nativeSet !== null) {
          if (shouldAdd) {
            prevSize = set._nativeSet.size;
            set._nativeSet.add(item);
            newSize = set._nativeSet.size;
            return newSize === prevSize;
          } else {
            return set._nativeSet.has(item);
          }
        } else {
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          if (!_includes(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
        }
      case "undefined":
        if (set._items[type]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type] = true;
          }
          return false;
        }
      case "object":
        if (item === null) {
          if (!set._items["null"]) {
            if (shouldAdd) {
              set._items["null"] = true;
            }
            return false;
          }
          return true;
        }
      default:
        type = Object.prototype.toString.call(item);
        if (!(type in set._items)) {
          if (shouldAdd) {
            set._items[type] = [item];
          }
          return false;
        }
        if (!_includes(item, set._items[type])) {
          if (shouldAdd) {
            set._items[type].push(item);
          }
          return false;
        }
        return true;
    }
  };
  var _includes = require__includes();
  var _Set = function() {
    function _Set2() {
      this._nativeSet = typeof Set === "function" ? new Set : null;
      this._items = {};
    }
    _Set2.prototype.add = function(item) {
      return !hasOrAdd(item, true, this);
    };
    _Set2.prototype.has = function(item) {
      return hasOrAdd(item, false, this);
    };
    return _Set2;
  }();
  module.exports = _Set;
});

// node_modules/ramda/src/difference.js
var require_difference = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _Set = require__Set();
  var difference = _curry2(function difference(first, second) {
    var out = [];
    var idx = 0;
    var firstLen = first.length;
    var secondLen = second.length;
    var toFilterOut = new _Set;
    for (var i = 0;i < secondLen; i += 1) {
      toFilterOut.add(second[i]);
    }
    while (idx < firstLen) {
      if (toFilterOut.add(first[idx])) {
        out[out.length] = first[idx];
      }
      idx += 1;
    }
    return out;
  });
  module.exports = difference;
});

// node_modules/ramda/src/differenceWith.js
var require_differenceWith = __commonJS((exports, module) => {
  var _includesWith = require__includesWith();
  var _curry3 = require__curry3();
  var differenceWith = _curry3(function differenceWith(pred, first, second) {
    var out = [];
    var idx = 0;
    var firstLen = first.length;
    while (idx < firstLen) {
      if (!_includesWith(pred, first[idx], second) && !_includesWith(pred, first[idx], out)) {
        out.push(first[idx]);
      }
      idx += 1;
    }
    return out;
  });
  module.exports = differenceWith;
});

// node_modules/ramda/src/remove.js
var require_remove = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var remove = _curry3(function remove(start, count, list) {
    var result = Array.prototype.slice.call(list, 0);
    result.splice(start, count);
    return result;
  });
  module.exports = remove;
});

// node_modules/ramda/src/internal/_dissoc.js
var require__dissoc = __commonJS((exports, module) => {
  var _dissoc = function(prop, obj) {
    if (obj == null) {
      return obj;
    }
    if (_isInteger(prop) && _isArray(obj)) {
      return remove(prop, 1, obj);
    }
    var result = {};
    for (var p in obj) {
      result[p] = obj[p];
    }
    delete result[prop];
    return result;
  };
  var _isInteger = require__isInteger();
  var _isArray = require__isArray();
  var remove = require_remove();
  module.exports = _dissoc;
});

// node_modules/ramda/src/dissocPath.js
var require_dissocPath = __commonJS((exports, module) => {
  var _shallowCloneObject = function(prop, obj) {
    if (_isInteger(prop) && _isArray(obj)) {
      return [].concat(obj);
    }
    var result = {};
    for (var p in obj) {
      result[p] = obj[p];
    }
    return result;
  };
  var _curry2 = require__curry2();
  var _dissoc = require__dissoc();
  var _isInteger = require__isInteger();
  var _isArray = require__isArray();
  var assoc = require_assoc();
  var dissocPath = _curry2(function dissocPath(path, obj) {
    if (obj == null) {
      return obj;
    }
    switch (path.length) {
      case 0:
        return obj;
      case 1:
        return _dissoc(path[0], obj);
      default:
        var head = path[0];
        var tail = Array.prototype.slice.call(path, 1);
        if (obj[head] == null) {
          return _shallowCloneObject(head, obj);
        } else {
          return assoc(head, dissocPath(tail, obj[head]), obj);
        }
    }
  });
  module.exports = dissocPath;
});

// node_modules/ramda/src/dissoc.js
var require_dissoc = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var dissocPath = require_dissocPath();
  var dissoc = _curry2(function dissoc(prop, obj) {
    return dissocPath([prop], obj);
  });
  module.exports = dissoc;
});

// node_modules/ramda/src/divide.js
var require_divide = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var divide = _curry2(function divide(a, b) {
    return a / b;
  });
  module.exports = divide;
});

// node_modules/ramda/src/internal/_xdrop.js
var require__xdrop = __commonJS((exports, module) => {
  var _xdrop = function(n) {
    return function(xf) {
      return new XDrop(n, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XDrop = function() {
    function XDrop2(n, xf) {
      this.xf = xf;
      this.n = n;
    }
    XDrop2.prototype["@@transducer/init"] = _xfBase.init;
    XDrop2.prototype["@@transducer/result"] = _xfBase.result;
    XDrop2.prototype["@@transducer/step"] = function(result, input) {
      if (this.n > 0) {
        this.n -= 1;
        return result;
      }
      return this.xf["@@transducer/step"](result, input);
    };
    return XDrop2;
  }();
  module.exports = _xdrop;
});

// node_modules/ramda/src/drop.js
var require_drop = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xdrop = require__xdrop();
  var slice = require_slice();
  var drop = _curry2(_dispatchable(["drop"], _xdrop, function drop(n, xs) {
    return slice(Math.max(0, n), Infinity, xs);
  }));
  module.exports = drop;
});

// node_modules/ramda/src/internal/_xtake.js
var require__xtake = __commonJS((exports, module) => {
  var _xtake = function(n) {
    return function(xf) {
      return new XTake(n, xf);
    };
  };
  var _reduced = require__reduced();
  var _xfBase = require__xfBase();
  var XTake = function() {
    function XTake2(n, xf) {
      this.xf = xf;
      this.n = n;
      this.i = 0;
    }
    XTake2.prototype["@@transducer/init"] = _xfBase.init;
    XTake2.prototype["@@transducer/result"] = _xfBase.result;
    XTake2.prototype["@@transducer/step"] = function(result, input) {
      this.i += 1;
      var ret = this.n === 0 ? result : this.xf["@@transducer/step"](result, input);
      return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;
    };
    return XTake2;
  }();
  module.exports = _xtake;
});

// node_modules/ramda/src/take.js
var require_take = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xtake = require__xtake();
  var slice = require_slice();
  var take = _curry2(_dispatchable(["take"], _xtake, function take(n, xs) {
    return slice(0, n < 0 ? Infinity : n, xs);
  }));
  module.exports = take;
});

// node_modules/ramda/src/internal/_dropLast.js
var require__dropLast = __commonJS((exports, module) => {
  var dropLast = function(n, xs) {
    return take(n < xs.length ? xs.length - n : 0, xs);
  };
  var take = require_take();
  module.exports = dropLast;
});

// node_modules/ramda/src/internal/_xdropLast.js
var require__xdropLast = __commonJS((exports, module) => {
  var _xdropLast = function(n) {
    return function(xf) {
      return new XDropLast(n, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XDropLast = function() {
    function XDropLast2(n, xf) {
      if (n <= 0) {
        return xf;
      }
      this.xf = xf;
      this.pos = 0;
      this.full = false;
      this.acc = new Array(n);
    }
    XDropLast2.prototype["@@transducer/init"] = _xfBase.init;
    XDropLast2.prototype["@@transducer/result"] = function(result) {
      this.acc = null;
      return this.xf["@@transducer/result"](result);
    };
    XDropLast2.prototype["@@transducer/step"] = function(result, input) {
      if (this.full) {
        result = this.xf["@@transducer/step"](result, this.acc[this.pos]);
      }
      this.store(input);
      return result;
    };
    XDropLast2.prototype.store = function(input) {
      this.acc[this.pos] = input;
      this.pos += 1;
      if (this.pos === this.acc.length) {
        this.pos = 0;
        this.full = true;
      }
    };
    return XDropLast2;
  }();
  module.exports = _xdropLast;
});

// node_modules/ramda/src/dropLast.js
var require_dropLast = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _dropLast = require__dropLast();
  var _xdropLast = require__xdropLast();
  var dropLast = _curry2(_dispatchable([], _xdropLast, _dropLast));
  module.exports = dropLast;
});

// node_modules/ramda/src/internal/_dropLastWhile.js
var require__dropLastWhile = __commonJS((exports, module) => {
  var dropLastWhile = function(pred, xs) {
    var idx = xs.length - 1;
    while (idx >= 0 && pred(xs[idx])) {
      idx -= 1;
    }
    return slice(0, idx + 1, xs);
  };
  var slice = require_slice();
  module.exports = dropLastWhile;
});

// node_modules/ramda/src/internal/_xdropLastWhile.js
var require__xdropLastWhile = __commonJS((exports, module) => {
  var _xdropLastWhile = function(fn) {
    return function(xf) {
      return new XDropLastWhile(fn, xf);
    };
  };
  var _xfBase = require__xfBase();
  var _xReduce = require__xReduce();
  var XDropLastWhile = function() {
    function XDropLastWhile2(fn, xf) {
      this.f = fn;
      this.retained = [];
      this.xf = xf;
    }
    XDropLastWhile2.prototype["@@transducer/init"] = _xfBase.init;
    XDropLastWhile2.prototype["@@transducer/result"] = function(result) {
      this.retained = null;
      return this.xf["@@transducer/result"](result);
    };
    XDropLastWhile2.prototype["@@transducer/step"] = function(result, input) {
      return this.f(input) ? this.retain(result, input) : this.flush(result, input);
    };
    XDropLastWhile2.prototype.flush = function(result, input) {
      result = _xReduce(this.xf, result, this.retained);
      this.retained = [];
      return this.xf["@@transducer/step"](result, input);
    };
    XDropLastWhile2.prototype.retain = function(result, input) {
      this.retained.push(input);
      return result;
    };
    return XDropLastWhile2;
  }();
  module.exports = _xdropLastWhile;
});

// node_modules/ramda/src/dropLastWhile.js
var require_dropLastWhile = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _dropLastWhile = require__dropLastWhile();
  var _xdropLastWhile = require__xdropLastWhile();
  var dropLastWhile = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));
  module.exports = dropLastWhile;
});

// node_modules/ramda/src/internal/_xdropRepeatsWith.js
var require__xdropRepeatsWith = __commonJS((exports, module) => {
  var _xdropRepeatsWith = function(pred) {
    return function(xf) {
      return new XDropRepeatsWith(pred, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XDropRepeatsWith = function() {
    function XDropRepeatsWith2(pred, xf) {
      this.xf = xf;
      this.pred = pred;
      this.lastValue = undefined;
      this.seenFirstValue = false;
    }
    XDropRepeatsWith2.prototype["@@transducer/init"] = _xfBase.init;
    XDropRepeatsWith2.prototype["@@transducer/result"] = _xfBase.result;
    XDropRepeatsWith2.prototype["@@transducer/step"] = function(result, input) {
      var sameAsLast = false;
      if (!this.seenFirstValue) {
        this.seenFirstValue = true;
      } else if (this.pred(this.lastValue, input)) {
        sameAsLast = true;
      }
      this.lastValue = input;
      return sameAsLast ? result : this.xf["@@transducer/step"](result, input);
    };
    return XDropRepeatsWith2;
  }();
  module.exports = _xdropRepeatsWith;
});

// node_modules/ramda/src/last.js
var require_last = __commonJS((exports, module) => {
  var nth = require_nth();
  var last = nth(-1);
  module.exports = last;
});

// node_modules/ramda/src/dropRepeatsWith.js
var require_dropRepeatsWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xdropRepeatsWith = require__xdropRepeatsWith();
  var last = require_last();
  var dropRepeatsWith = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
    var result = [];
    var idx = 1;
    var len = list.length;
    if (len !== 0) {
      result[0] = list[0];
      while (idx < len) {
        if (!pred(last(result), list[idx])) {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
    }
    return result;
  }));
  module.exports = dropRepeatsWith;
});

// node_modules/ramda/src/dropRepeats.js
var require_dropRepeats = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _dispatchable = require__dispatchable();
  var _xdropRepeatsWith = require__xdropRepeatsWith();
  var dropRepeatsWith = require_dropRepeatsWith();
  var equals = require_equals();
  var dropRepeats = _curry1(_dispatchable([], function() {
    return _xdropRepeatsWith(equals);
  }, dropRepeatsWith(equals)));
  module.exports = dropRepeats;
});

// node_modules/ramda/src/eqBy.js
var require_eqBy = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var equals = require_equals();
  var eqBy = _curry3(function eqBy(f, x, y) {
    return equals(f(x), f(y));
  });
  module.exports = eqBy;
});

// node_modules/ramda/src/dropRepeatsBy.js
var require_dropRepeatsBy = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xdropRepeatsWith = require__xdropRepeatsWith();
  var dropRepeatsWith = require_dropRepeatsWith();
  var eqBy = require_eqBy();
  var dropRepeatsBy = _curry2(function(fn, list) {
    return _dispatchable([], function() {
      return _xdropRepeatsWith(eqBy(fn));
    }, dropRepeatsWith(eqBy(fn)))(list);
  });
  module.exports = dropRepeatsBy;
});

// node_modules/ramda/src/internal/_xdropWhile.js
var require__xdropWhile = __commonJS((exports, module) => {
  var _xdropWhile = function(f) {
    return function(xf) {
      return new XDropWhile(f, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XDropWhile = function() {
    function XDropWhile2(f, xf) {
      this.xf = xf;
      this.f = f;
    }
    XDropWhile2.prototype["@@transducer/init"] = _xfBase.init;
    XDropWhile2.prototype["@@transducer/result"] = _xfBase.result;
    XDropWhile2.prototype["@@transducer/step"] = function(result, input) {
      if (this.f) {
        if (this.f(input)) {
          return result;
        }
        this.f = null;
      }
      return this.xf["@@transducer/step"](result, input);
    };
    return XDropWhile2;
  }();
  module.exports = _xdropWhile;
});

// node_modules/ramda/src/dropWhile.js
var require_dropWhile = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xdropWhile = require__xdropWhile();
  var slice = require_slice();
  var dropWhile = _curry2(_dispatchable(["dropWhile"], _xdropWhile, function dropWhile(pred, xs) {
    var idx = 0;
    var len = xs.length;
    while (idx < len && pred(xs[idx])) {
      idx += 1;
    }
    return slice(idx, Infinity, xs);
  }));
  module.exports = dropWhile;
});

// node_modules/ramda/src/or.js
var require_or = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var or = _curry2(function or(a, b) {
    return a || b;
  });
  module.exports = or;
});

// node_modules/ramda/src/either.js
var require_either = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isFunction = require__isFunction();
  var lift = require_lift();
  var or = require_or();
  var either = _curry2(function either(f, g) {
    return _isFunction(f) ? function _either() {
      return f.apply(this, arguments) || g.apply(this, arguments);
    } : lift(or)(f, g);
  });
  module.exports = either;
});

// node_modules/ramda/src/internal/_isTypedArray.js
var require__isTypedArray = __commonJS((exports, module) => {
  var _isTypedArray = function(val) {
    var type = Object.prototype.toString.call(val);
    return type === "[object Uint8ClampedArray]" || type === "[object Int8Array]" || type === "[object Uint8Array]" || type === "[object Int16Array]" || type === "[object Uint16Array]" || type === "[object Int32Array]" || type === "[object Uint32Array]" || type === "[object Float32Array]" || type === "[object Float64Array]" || type === "[object BigInt64Array]" || type === "[object BigUint64Array]";
  };
  module.exports = _isTypedArray;
});

// node_modules/ramda/src/empty.js
var require_empty = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _isArguments = require__isArguments();
  var _isArray = require__isArray();
  var _isObject = require__isObject();
  var _isString = require__isString();
  var _isTypedArray = require__isTypedArray();
  var empty = _curry1(function empty(x) {
    return x != null && typeof x["fantasy-land/empty"] === "function" ? x["fantasy-land/empty"]() : x != null && x.constructor != null && typeof x.constructor["fantasy-land/empty"] === "function" ? x.constructor["fantasy-land/empty"]() : x != null && typeof x.empty === "function" ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === "function" ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? "" : _isObject(x) ? {} : _isArguments(x) ? function() {
      return arguments;
    }() : _isTypedArray(x) ? x.constructor.from("") : undefined;
  });
  module.exports = empty;
});

// node_modules/ramda/src/takeLast.js
var require_takeLast = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var drop = require_drop();
  var takeLast = _curry2(function takeLast(n, xs) {
    return drop(n >= 0 ? xs.length - n : 0, xs);
  });
  module.exports = takeLast;
});

// node_modules/ramda/src/endsWith.js
var require_endsWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var equals = require_equals();
  var takeLast = require_takeLast();
  var endsWith = _curry2(function(suffix, list) {
    return equals(takeLast(suffix.length, list), suffix);
  });
  module.exports = endsWith;
});

// node_modules/ramda/src/eqProps.js
var require_eqProps = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var equals = require_equals();
  var eqProps = _curry3(function eqProps(prop, obj1, obj2) {
    return equals(obj1[prop], obj2[prop]);
  });
  module.exports = eqProps;
});

// node_modules/ramda/src/evolve.js
var require_evolve = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isArray = require__isArray();
  var _isObject = require__isObject();
  var evolve = _curry2(function evolve(transformations, object) {
    if (!_isObject(object) && !_isArray(object)) {
      return object;
    }
    var result = object instanceof Array ? [] : {};
    var transformation, key, type;
    for (key in object) {
      transformation = transformations[key];
      type = typeof transformation;
      result[key] = type === "function" ? transformation(object[key]) : transformation && type === "object" ? evolve(transformation, object[key]) : object[key];
    }
    return result;
  });
  module.exports = evolve;
});

// node_modules/ramda/src/internal/_xfind.js
var require__xfind = __commonJS((exports, module) => {
  var _xfind = function(f) {
    return function(xf) {
      return new XFind(f, xf);
    };
  };
  var _reduced = require__reduced();
  var _xfBase = require__xfBase();
  var XFind = function() {
    function XFind2(f, xf) {
      this.xf = xf;
      this.f = f;
      this.found = false;
    }
    XFind2.prototype["@@transducer/init"] = _xfBase.init;
    XFind2.prototype["@@transducer/result"] = function(result) {
      if (!this.found) {
        result = this.xf["@@transducer/step"](result, undefined);
      }
      return this.xf["@@transducer/result"](result);
    };
    XFind2.prototype["@@transducer/step"] = function(result, input) {
      if (this.f(input)) {
        this.found = true;
        result = _reduced(this.xf["@@transducer/step"](result, input));
      }
      return result;
    };
    return XFind2;
  }();
  module.exports = _xfind;
});

// node_modules/ramda/src/find.js
var require_find = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xfind = require__xfind();
  var find = _curry2(_dispatchable(["find"], _xfind, function find(fn, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      if (fn(list[idx])) {
        return list[idx];
      }
      idx += 1;
    }
  }));
  module.exports = find;
});

// node_modules/ramda/src/internal/_xfindIndex.js
var require__xfindIndex = __commonJS((exports, module) => {
  var _xfindIndex = function(f) {
    return function(xf) {
      return new XFindIndex(f, xf);
    };
  };
  var _reduced = require__reduced();
  var _xfBase = require__xfBase();
  var XFindIndex = function() {
    function XFindIndex2(f, xf) {
      this.xf = xf;
      this.f = f;
      this.idx = -1;
      this.found = false;
    }
    XFindIndex2.prototype["@@transducer/init"] = _xfBase.init;
    XFindIndex2.prototype["@@transducer/result"] = function(result) {
      if (!this.found) {
        result = this.xf["@@transducer/step"](result, -1);
      }
      return this.xf["@@transducer/result"](result);
    };
    XFindIndex2.prototype["@@transducer/step"] = function(result, input) {
      this.idx += 1;
      if (this.f(input)) {
        this.found = true;
        result = _reduced(this.xf["@@transducer/step"](result, this.idx));
      }
      return result;
    };
    return XFindIndex2;
  }();
  module.exports = _xfindIndex;
});

// node_modules/ramda/src/findIndex.js
var require_findIndex = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xfindIndex = require__xfindIndex();
  var findIndex = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      if (fn(list[idx])) {
        return idx;
      }
      idx += 1;
    }
    return -1;
  }));
  module.exports = findIndex;
});

// node_modules/ramda/src/internal/_xfindLast.js
var require__xfindLast = __commonJS((exports, module) => {
  var _xfindLast = function(f) {
    return function(xf) {
      return new XFindLast(f, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XFindLast = function() {
    function XFindLast2(f, xf) {
      this.xf = xf;
      this.f = f;
    }
    XFindLast2.prototype["@@transducer/init"] = _xfBase.init;
    XFindLast2.prototype["@@transducer/result"] = function(result) {
      return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.last));
    };
    XFindLast2.prototype["@@transducer/step"] = function(result, input) {
      if (this.f(input)) {
        this.last = input;
      }
      return result;
    };
    return XFindLast2;
  }();
  module.exports = _xfindLast;
});

// node_modules/ramda/src/findLast.js
var require_findLast = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xfindLast = require__xfindLast();
  var findLast = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {
    var idx = list.length - 1;
    while (idx >= 0) {
      if (fn(list[idx])) {
        return list[idx];
      }
      idx -= 1;
    }
  }));
  module.exports = findLast;
});

// node_modules/ramda/src/internal/_xfindLastIndex.js
var require__xfindLastIndex = __commonJS((exports, module) => {
  var _xfindLastIndex = function(f) {
    return function(xf) {
      return new XFindLastIndex(f, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XFindLastIndex = function() {
    function XFindLastIndex2(f, xf) {
      this.xf = xf;
      this.f = f;
      this.idx = -1;
      this.lastIdx = -1;
    }
    XFindLastIndex2.prototype["@@transducer/init"] = _xfBase.init;
    XFindLastIndex2.prototype["@@transducer/result"] = function(result) {
      return this.xf["@@transducer/result"](this.xf["@@transducer/step"](result, this.lastIdx));
    };
    XFindLastIndex2.prototype["@@transducer/step"] = function(result, input) {
      this.idx += 1;
      if (this.f(input)) {
        this.lastIdx = this.idx;
      }
      return result;
    };
    return XFindLastIndex2;
  }();
  module.exports = _xfindLastIndex;
});

// node_modules/ramda/src/findLastIndex.js
var require_findLastIndex = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xfindLastIndex = require__xfindLastIndex();
  var findLastIndex = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {
    var idx = list.length - 1;
    while (idx >= 0) {
      if (fn(list[idx])) {
        return idx;
      }
      idx -= 1;
    }
    return -1;
  }));
  module.exports = findLastIndex;
});

// node_modules/ramda/src/flatten.js
var require_flatten = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _makeFlat = require__makeFlat();
  var flatten = _curry1(_makeFlat(true));
  module.exports = flatten;
});

// node_modules/ramda/src/flip.js
var require_flip = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var flip = _curry1(function flip(fn) {
    return curryN(fn.length, function(a, b) {
      var args = Array.prototype.slice.call(arguments, 0);
      args[0] = b;
      args[1] = a;
      return fn.apply(this, args);
    });
  });
  module.exports = flip;
});

// node_modules/ramda/src/forEach.js
var require_forEach = __commonJS((exports, module) => {
  var _checkForMethod = require__checkForMethod();
  var _curry2 = require__curry2();
  var forEach = _curry2(_checkForMethod("forEach", function forEach(fn, list) {
    var len = list.length;
    var idx = 0;
    while (idx < len) {
      fn(list[idx]);
      idx += 1;
    }
    return list;
  }));
  module.exports = forEach;
});

// node_modules/ramda/src/forEachObjIndexed.js
var require_forEachObjIndexed = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var keys = require_keys();
  var forEachObjIndexed = _curry2(function forEachObjIndexed(fn, obj) {
    var keyList = keys(obj);
    var idx = 0;
    while (idx < keyList.length) {
      var key = keyList[idx];
      fn(obj[key], key, obj);
      idx += 1;
    }
    return obj;
  });
  module.exports = forEachObjIndexed;
});

// node_modules/ramda/src/fromPairs.js
var require_fromPairs = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var fromPairs = _curry1(function fromPairs(pairs) {
    var result = {};
    var idx = 0;
    while (idx < pairs.length) {
      result[pairs[idx][0]] = pairs[idx][1];
      idx += 1;
    }
    return result;
  });
  module.exports = fromPairs;
});

// node_modules/ramda/src/groupBy.js
var require_groupBy = __commonJS((exports, module) => {
  var _checkForMethod = require__checkForMethod();
  var _curry2 = require__curry2();
  var reduceBy = require_reduceBy();
  var groupBy = _curry2(_checkForMethod("groupBy", reduceBy(function(acc, item) {
    acc.push(item);
    return acc;
  }, [])));
  module.exports = groupBy;
});

// node_modules/ramda/src/groupWith.js
var require_groupWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var groupWith = _curry2(function(fn, list) {
    var res = [];
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      var nextidx = idx + 1;
      while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {
        nextidx += 1;
      }
      res.push(list.slice(idx, nextidx));
      idx = nextidx;
    }
    return res;
  });
  module.exports = groupWith;
});

// node_modules/ramda/src/gt.js
var require_gt = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var gt = _curry2(function gt(a, b) {
    return a > b;
  });
  module.exports = gt;
});

// node_modules/ramda/src/gte.js
var require_gte = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var gte = _curry2(function gte(a, b) {
    return a >= b;
  });
  module.exports = gte;
});

// node_modules/ramda/src/hasPath.js
var require_hasPath = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _has = require__has();
  var isNil = require_isNil();
  var hasPath = _curry2(function hasPath(_path, obj) {
    if (_path.length === 0 || isNil(obj)) {
      return false;
    }
    var val = obj;
    var idx = 0;
    while (idx < _path.length) {
      if (!isNil(val) && _has(_path[idx], val)) {
        val = val[_path[idx]];
        idx += 1;
      } else {
        return false;
      }
    }
    return true;
  });
  module.exports = hasPath;
});

// node_modules/ramda/src/has.js
var require_has = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var hasPath = require_hasPath();
  var has = _curry2(function has(prop, obj) {
    return hasPath([prop], obj);
  });
  module.exports = has;
});

// node_modules/ramda/src/hasIn.js
var require_hasIn = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var isNil = require_isNil();
  var hasIn = _curry2(function hasIn(prop, obj) {
    if (isNil(obj)) {
      return false;
    }
    return prop in obj;
  });
  module.exports = hasIn;
});

// node_modules/ramda/src/identical.js
var require_identical = __commonJS((exports, module) => {
  var _objectIs = require__objectIs();
  var identical = function(a, b) {
    switch (arguments.length) {
      case 0:
        return identical;
      case 1:
        return function() {
          return function unaryIdentical(_b) {
            switch (arguments.length) {
              case 0:
                return unaryIdentical;
              default:
                return _objectIs(a, _b);
            }
          };
        }();
      default:
        return _objectIs(a, b);
    }
  };
  module.exports = identical;
});

// node_modules/ramda/src/ifElse.js
var require_ifElse = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var curryN = require_curryN();
  var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {
    return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {
      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);
    });
  });
  module.exports = ifElse;
});

// node_modules/ramda/src/inc.js
var require_inc = __commonJS((exports, module) => {
  var add = require_add();
  var inc = add(1);
  module.exports = inc;
});

// node_modules/ramda/src/includes.js
var require_includes = __commonJS((exports, module) => {
  var _includes = require__includes();
  var _curry2 = require__curry2();
  var includes = _curry2(_includes);
  module.exports = includes;
});

// node_modules/ramda/src/indexBy.js
var require_indexBy = __commonJS((exports, module) => {
  var reduceBy = require_reduceBy();
  var indexBy = reduceBy(function(acc, elem) {
    return elem;
  }, null);
  module.exports = indexBy;
});

// node_modules/ramda/src/indexOf.js
var require_indexOf = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _indexOf = require__indexOf();
  var _isArray = require__isArray();
  var indexOf = _curry2(function indexOf(target, xs) {
    return typeof xs.indexOf === "function" && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);
  });
  module.exports = indexOf;
});

// node_modules/ramda/src/init.js
var require_init = __commonJS((exports, module) => {
  var slice = require_slice();
  var init = slice(0, -1);
  module.exports = init;
});

// node_modules/ramda/src/innerJoin.js
var require_innerJoin = __commonJS((exports, module) => {
  var _includesWith = require__includesWith();
  var _curry3 = require__curry3();
  var _filter = require__filter();
  var innerJoin = _curry3(function innerJoin(pred, xs, ys) {
    return _filter(function(x) {
      return _includesWith(pred, x, ys);
    }, xs);
  });
  module.exports = innerJoin;
});

// node_modules/ramda/src/insert.js
var require_insert = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var insert = _curry3(function insert(idx, elt, list) {
    idx = idx < list.length && idx >= 0 ? idx : list.length;
    var result = Array.prototype.slice.call(list, 0);
    result.splice(idx, 0, elt);
    return result;
  });
  module.exports = insert;
});

// node_modules/ramda/src/insertAll.js
var require_insertAll = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var insertAll = _curry3(function insertAll(idx, elts, list) {
    idx = idx < list.length && idx >= 0 ? idx : list.length;
    return [].concat(Array.prototype.slice.call(list, 0, idx), elts, Array.prototype.slice.call(list, idx));
  });
  module.exports = insertAll;
});

// node_modules/ramda/src/internal/_xuniqBy.js
var require__xuniqBy = __commonJS((exports, module) => {
  var _xuniqBy = function(f) {
    return function(xf) {
      return new XUniqBy(f, xf);
    };
  };
  var _Set = require__Set();
  var _xfBase = require__xfBase();
  var XUniqBy = function() {
    function XUniqBy2(f, xf) {
      this.xf = xf;
      this.f = f;
      this.set = new _Set;
    }
    XUniqBy2.prototype["@@transducer/init"] = _xfBase.init;
    XUniqBy2.prototype["@@transducer/result"] = _xfBase.result;
    XUniqBy2.prototype["@@transducer/step"] = function(result, input) {
      return this.set.add(this.f(input)) ? this.xf["@@transducer/step"](result, input) : result;
    };
    return XUniqBy2;
  }();
  module.exports = _xuniqBy;
});

// node_modules/ramda/src/uniqBy.js
var require_uniqBy = __commonJS((exports, module) => {
  var _Set = require__Set();
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xuniqBy = require__xuniqBy();
  var uniqBy = _curry2(_dispatchable([], _xuniqBy, function(fn, list) {
    var set = new _Set;
    var result = [];
    var idx = 0;
    var appliedItem, item;
    while (idx < list.length) {
      item = list[idx];
      appliedItem = fn(item);
      if (set.add(appliedItem)) {
        result.push(item);
      }
      idx += 1;
    }
    return result;
  }));
  module.exports = uniqBy;
});

// node_modules/ramda/src/uniq.js
var require_uniq = __commonJS((exports, module) => {
  var identity = require_identity2();
  var uniqBy = require_uniqBy();
  var uniq = uniqBy(identity);
  module.exports = uniq;
});

// node_modules/ramda/src/intersection.js
var require_intersection = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _filter = require__filter();
  var _Set = require__Set();
  var uniq = require_uniq();
  var intersection = _curry2(function intersection(list1, list2) {
    var toKeep = new _Set;
    for (var i = 0;i < list1.length; i += 1) {
      toKeep.add(list1[i]);
    }
    return uniq(_filter(toKeep.has.bind(toKeep), list2));
  });
  module.exports = intersection;
});

// node_modules/ramda/src/intersperse.js
var require_intersperse = __commonJS((exports, module) => {
  var _checkForMethod = require__checkForMethod();
  var _curry2 = require__curry2();
  var intersperse = _curry2(_checkForMethod("intersperse", function intersperse(separator, list) {
    var out = [];
    var idx = 0;
    var length = list.length;
    while (idx < length) {
      if (idx === length - 1) {
        out.push(list[idx]);
      } else {
        out.push(list[idx], separator);
      }
      idx += 1;
    }
    return out;
  }));
  module.exports = intersperse;
});

// node_modules/ramda/src/internal/_objectAssign.js
var require__objectAssign = __commonJS((exports, module) => {
  var _objectAssign = function(target) {
    if (target == null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    var output = Object(target);
    var idx = 1;
    var length = arguments.length;
    while (idx < length) {
      var source = arguments[idx];
      if (source != null) {
        for (var nextKey in source) {
          if (_has(nextKey, source)) {
            output[nextKey] = source[nextKey];
          }
        }
      }
      idx += 1;
    }
    return output;
  };
  var _has = require__has();
  module.exports = typeof Object.assign === "function" ? Object.assign : _objectAssign;
});

// node_modules/ramda/src/objOf.js
var require_objOf = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var objOf = _curry2(function objOf(key, val) {
    var obj = {};
    obj[key] = val;
    return obj;
  });
  module.exports = objOf;
});

// node_modules/ramda/src/internal/_stepCat.js
var require__stepCat = __commonJS((exports, module) => {
  var _stepCat = function(obj) {
    if (_isTransformer(obj)) {
      return obj;
    }
    if (_isArrayLike(obj)) {
      return _stepCatArray;
    }
    if (typeof obj === "string") {
      return _stepCatString;
    }
    if (typeof obj === "object") {
      return _stepCatObject;
    }
    throw new Error("Cannot create transformer for " + obj);
  };
  var _objectAssign = require__objectAssign();
  var _identity = require__identity();
  var _isArrayLike = require__isArrayLike();
  var _isTransformer = require__isTransformer();
  var objOf = require_objOf();
  var _stepCatArray = {
    "@@transducer/init": Array,
    "@@transducer/step": function(xs, x) {
      xs.push(x);
      return xs;
    },
    "@@transducer/result": _identity
  };
  var _stepCatString = {
    "@@transducer/init": String,
    "@@transducer/step": function(a, b) {
      return a + b;
    },
    "@@transducer/result": _identity
  };
  var _stepCatObject = {
    "@@transducer/init": Object,
    "@@transducer/step": function(result, input) {
      return _objectAssign(result, _isArrayLike(input) ? objOf(input[0], input[1]) : input);
    },
    "@@transducer/result": _identity
  };
  module.exports = _stepCat;
});

// node_modules/ramda/src/into.js
var require_into = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _isTransformer = require__isTransformer();
  var _xReduce = require__xReduce();
  var _stepCat = require__stepCat();
  var into = _curry3(function into(acc, transducer, list) {
    var xf = transducer(_isTransformer(acc) ? acc : _stepCat(acc));
    return _xReduce(xf, xf["@@transducer/init"](), list);
  });
  module.exports = into;
});

// node_modules/ramda/src/invert.js
var require_invert = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _has = require__has();
  var keys = require_keys();
  var invert = _curry1(function invert(obj) {
    var props = keys(obj);
    var len = props.length;
    var idx = 0;
    var out = {};
    while (idx < len) {
      var key = props[idx];
      var val = obj[key];
      var list = _has(val, out) ? out[val] : out[val] = [];
      list[list.length] = key;
      idx += 1;
    }
    return out;
  });
  module.exports = invert;
});

// node_modules/ramda/src/invertObj.js
var require_invertObj = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var keys = require_keys();
  var invertObj = _curry1(function invertObj(obj) {
    var props = keys(obj);
    var len = props.length;
    var idx = 0;
    var out = {};
    while (idx < len) {
      var key = props[idx];
      out[obj[key]] = key;
      idx += 1;
    }
    return out;
  });
  module.exports = invertObj;
});

// node_modules/ramda/src/invoker.js
var require_invoker = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isFunction = require__isFunction();
  var curryN = require_curryN();
  var toString = require_toString();
  var invoker = _curry2(function invoker(arity, method) {
    return curryN(arity + 1, function() {
      var target = arguments[arity];
      if (target != null && _isFunction(target[method])) {
        return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
      }
      throw new TypeError(toString(target) + ' does not have a method named "' + method + '"');
    });
  });
  module.exports = invoker;
});

// node_modules/ramda/src/is.js
var require_is = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var is = _curry2(function is(Ctor, val) {
    return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === "Object" && typeof val === "object");
  });
  module.exports = is;
});

// node_modules/ramda/src/isEmpty.js
var require_isEmpty = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var empty = require_empty();
  var equals = require_equals();
  var isEmpty = _curry1(function isEmpty(x) {
    return x != null && equals(x, empty(x));
  });
  module.exports = isEmpty;
});

// node_modules/ramda/src/isNotNil.js
var require_isNotNil = __commonJS((exports, module) => {
  var isNil = require_isNil();
  var _curry1 = require__curry1();
  var isNotNil = _curry1(function isNotNil(x) {
    return !isNil(x);
  });
  module.exports = isNotNil;
});

// node_modules/ramda/src/join.js
var require_join = __commonJS((exports, module) => {
  var invoker = require_invoker();
  var join = invoker(1, "join");
  module.exports = join;
});

// node_modules/ramda/src/juxt.js
var require_juxt = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var converge = require_converge();
  var juxt = _curry1(function juxt(fns) {
    return converge(function() {
      return Array.prototype.slice.call(arguments, 0);
    }, fns);
  });
  module.exports = juxt;
});

// node_modules/ramda/src/keysIn.js
var require_keysIn = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var keysIn = _curry1(function keysIn(obj) {
    var prop;
    var ks = [];
    for (prop in obj) {
      ks[ks.length] = prop;
    }
    return ks;
  });
  module.exports = keysIn;
});

// node_modules/ramda/src/lastIndexOf.js
var require_lastIndexOf = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isArray = require__isArray();
  var equals = require_equals();
  var lastIndexOf = _curry2(function lastIndexOf(target, xs) {
    if (typeof xs.lastIndexOf === "function" && !_isArray(xs)) {
      return xs.lastIndexOf(target);
    } else {
      var idx = xs.length - 1;
      while (idx >= 0) {
        if (equals(xs[idx], target)) {
          return idx;
        }
        idx -= 1;
      }
      return -1;
    }
  });
  module.exports = lastIndexOf;
});

// node_modules/ramda/src/internal/_isNumber.js
var require__isNumber = __commonJS((exports, module) => {
  var _isNumber = function(x) {
    return Object.prototype.toString.call(x) === "[object Number]";
  };
  module.exports = _isNumber;
});

// node_modules/ramda/src/length.js
var require_length = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _isNumber = require__isNumber();
  var length = _curry1(function length(list) {
    return list != null && _isNumber(list.length) ? list.length : NaN;
  });
  module.exports = length;
});

// node_modules/ramda/src/lens.js
var require_lens = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var map = require_map3();
  var lens = _curry2(function lens(getter, setter) {
    return function(toFunctorFn) {
      return function(target) {
        return map(function(focus) {
          return setter(focus, target);
        }, toFunctorFn(getter(target)));
      };
    };
  });
  module.exports = lens;
});

// node_modules/ramda/src/update.js
var require_update = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var adjust = require_adjust();
  var always = require_always();
  var update = _curry3(function update(idx, x, list) {
    return adjust(idx, always(x), list);
  });
  module.exports = update;
});

// node_modules/ramda/src/lensIndex.js
var require_lensIndex = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var lens = require_lens();
  var nth = require_nth();
  var update = require_update();
  var lensIndex = _curry1(function lensIndex(n) {
    return lens(nth(n), update(n));
  });
  module.exports = lensIndex;
});

// node_modules/ramda/src/paths.js
var require_paths = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isInteger = require__isInteger();
  var nth = require_nth();
  var paths = _curry2(function paths(pathsArray, obj) {
    return pathsArray.map(function(paths2) {
      var val = obj;
      var idx = 0;
      var p;
      while (idx < paths2.length) {
        if (val == null) {
          return;
        }
        p = paths2[idx];
        val = _isInteger(p) ? nth(p, val) : val[p];
        idx += 1;
      }
      return val;
    });
  });
  module.exports = paths;
});

// node_modules/ramda/src/path.js
var require_path2 = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var paths = require_paths();
  var path = _curry2(function path(pathAr, obj) {
    return paths([pathAr], obj)[0];
  });
  module.exports = path;
});

// node_modules/ramda/src/lensPath.js
var require_lensPath = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var assocPath = require_assocPath();
  var lens = require_lens();
  var path = require_path2();
  var lensPath = _curry1(function lensPath(p) {
    return lens(path(p), assocPath(p));
  });
  module.exports = lensPath;
});

// node_modules/ramda/src/lensProp.js
var require_lensProp = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var assoc = require_assoc();
  var lens = require_lens();
  var prop = require_prop();
  var lensProp = _curry1(function lensProp(k) {
    return lens(prop(k), assoc(k));
  });
  module.exports = lensProp;
});

// node_modules/ramda/src/lt.js
var require_lt = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var lt = _curry2(function lt(a, b) {
    return a < b;
  });
  module.exports = lt;
});

// node_modules/ramda/src/lte.js
var require_lte = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var lte = _curry2(function lte(a, b) {
    return a <= b;
  });
  module.exports = lte;
});

// node_modules/ramda/src/mapAccum.js
var require_mapAccum = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var mapAccum = _curry3(function mapAccum(fn, acc, list) {
    var idx = 0;
    var len = list.length;
    var result = [];
    var tuple = [acc];
    while (idx < len) {
      tuple = fn(tuple[0], list[idx]);
      result[idx] = tuple[1];
      idx += 1;
    }
    return [tuple[0], result];
  });
  module.exports = mapAccum;
});

// node_modules/ramda/src/mapAccumRight.js
var require_mapAccumRight = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {
    var idx = list.length - 1;
    var result = [];
    var tuple = [acc];
    while (idx >= 0) {
      tuple = fn(tuple[0], list[idx]);
      result[idx] = tuple[1];
      idx -= 1;
    }
    return [tuple[0], result];
  });
  module.exports = mapAccumRight;
});

// node_modules/ramda/src/mapObjIndexed.js
var require_mapObjIndexed = __commonJS((exports, module) => {
  var _arrayReduce = require__arrayReduce();
  var _curry2 = require__curry2();
  var keys = require_keys();
  var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {
    return _arrayReduce(function(acc, key) {
      acc[key] = fn(obj[key], key, obj);
      return acc;
    }, {}, keys(obj));
  });
  module.exports = mapObjIndexed;
});

// node_modules/ramda/src/match.js
var require_match = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var match = _curry2(function match(rx, str) {
    return str.match(rx) || [];
  });
  module.exports = match;
});

// node_modules/ramda/src/mathMod.js
var require_mathMod = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isInteger = require__isInteger();
  var mathMod = _curry2(function mathMod(m, p) {
    if (!_isInteger(m)) {
      return NaN;
    }
    if (!_isInteger(p) || p < 1) {
      return NaN;
    }
    return (m % p + p) % p;
  });
  module.exports = mathMod;
});

// node_modules/ramda/src/maxBy.js
var require_maxBy = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var max = require_max();
  var maxBy = _curry3(function maxBy(f, a, b) {
    var resultB = f(b);
    return max(f(a), resultB) === resultB ? b : a;
  });
  module.exports = maxBy;
});

// node_modules/ramda/src/sum.js
var require_sum = __commonJS((exports, module) => {
  var add = require_add();
  var reduce = require_reduce();
  var sum = reduce(add, 0);
  module.exports = sum;
});

// node_modules/ramda/src/mean.js
var require_mean = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var sum = require_sum();
  var mean = _curry1(function mean(list) {
    return sum(list) / list.length;
  });
  module.exports = mean;
});

// node_modules/ramda/src/median.js
var require_median = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var mean = require_mean();
  var median = _curry1(function median(list) {
    var len = list.length;
    if (len === 0) {
      return NaN;
    }
    var width = 2 - len % 2;
    var idx = (len - width) / 2;
    return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {
      return a < b ? -1 : a > b ? 1 : 0;
    }).slice(idx, idx + width));
  });
  module.exports = median;
});

// node_modules/ramda/src/memoizeWith.js
var require_memoizeWith = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _curry2 = require__curry2();
  var _has = require__has();
  var memoizeWith = _curry2(function memoizeWith(keyGen, fn) {
    var cache = {};
    return _arity(fn.length, function() {
      var key = keyGen.apply(this, arguments);
      if (!_has(key, cache)) {
        cache[key] = fn.apply(this, arguments);
      }
      return cache[key];
    });
  });
  module.exports = memoizeWith;
});

// node_modules/ramda/src/mergeAll.js
var require_mergeAll = __commonJS((exports, module) => {
  var _objectAssign = require__objectAssign();
  var _curry1 = require__curry1();
  var mergeAll = _curry1(function mergeAll(list) {
    return _objectAssign.apply(null, [{}].concat(list));
  });
  module.exports = mergeAll;
});

// node_modules/ramda/src/mergeWithKey.js
var require_mergeWithKey = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _has = require__has();
  var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {
    var result = {};
    var k;
    l = l || {};
    r = r || {};
    for (k in l) {
      if (_has(k, l)) {
        result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
      }
    }
    for (k in r) {
      if (_has(k, r) && !_has(k, result)) {
        result[k] = r[k];
      }
    }
    return result;
  });
  module.exports = mergeWithKey;
});

// node_modules/ramda/src/mergeDeepWithKey.js
var require_mergeDeepWithKey = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _isObject = require__isObject();
  var mergeWithKey = require_mergeWithKey();
  var mergeDeepWithKey = _curry3(function mergeDeepWithKey(fn, lObj, rObj) {
    return mergeWithKey(function(k, lVal, rVal) {
      if (_isObject(lVal) && _isObject(rVal)) {
        return mergeDeepWithKey(fn, lVal, rVal);
      } else {
        return fn(k, lVal, rVal);
      }
    }, lObj, rObj);
  });
  module.exports = mergeDeepWithKey;
});

// node_modules/ramda/src/mergeDeepLeft.js
var require_mergeDeepLeft = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var mergeDeepWithKey = require_mergeDeepWithKey();
  var mergeDeepLeft = _curry2(function mergeDeepLeft(lObj, rObj) {
    return mergeDeepWithKey(function(k, lVal, rVal) {
      return lVal;
    }, lObj, rObj);
  });
  module.exports = mergeDeepLeft;
});

// node_modules/ramda/src/mergeDeepRight.js
var require_mergeDeepRight = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var mergeDeepWithKey = require_mergeDeepWithKey();
  var mergeDeepRight = _curry2(function mergeDeepRight(lObj, rObj) {
    return mergeDeepWithKey(function(k, lVal, rVal) {
      return rVal;
    }, lObj, rObj);
  });
  module.exports = mergeDeepRight;
});

// node_modules/ramda/src/mergeDeepWith.js
var require_mergeDeepWith = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var mergeDeepWithKey = require_mergeDeepWithKey();
  var mergeDeepWith = _curry3(function mergeDeepWith(fn, lObj, rObj) {
    return mergeDeepWithKey(function(k, lVal, rVal) {
      return fn(lVal, rVal);
    }, lObj, rObj);
  });
  module.exports = mergeDeepWith;
});

// node_modules/ramda/src/mergeLeft.js
var require_mergeLeft = __commonJS((exports, module) => {
  var _objectAssign = require__objectAssign();
  var _curry2 = require__curry2();
  var mergeLeft = _curry2(function mergeLeft(l, r) {
    return _objectAssign({}, r, l);
  });
  module.exports = mergeLeft;
});

// node_modules/ramda/src/mergeRight.js
var require_mergeRight = __commonJS((exports, module) => {
  var _objectAssign = require__objectAssign();
  var _curry2 = require__curry2();
  var mergeRight = _curry2(function mergeRight(l, r) {
    return _objectAssign({}, l, r);
  });
  module.exports = mergeRight;
});

// node_modules/ramda/src/mergeWith.js
var require_mergeWith = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var mergeWithKey = require_mergeWithKey();
  var mergeWith = _curry3(function mergeWith(fn, l, r) {
    return mergeWithKey(function(_, _l, _r) {
      return fn(_l, _r);
    }, l, r);
  });
  module.exports = mergeWith;
});

// node_modules/ramda/src/min.js
var require_min = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var toString = require_toString();
  var min = _curry2(function min(a, b) {
    if (a === b) {
      return a;
    }
    function safeMin(x, y) {
      if (x < y !== y < x) {
        return y < x ? y : x;
      }
      return;
    }
    var minByValue = safeMin(a, b);
    if (minByValue !== undefined) {
      return minByValue;
    }
    var minByType = safeMin(typeof a, typeof b);
    if (minByType !== undefined) {
      return minByType === typeof a ? a : b;
    }
    var stringA = toString(a);
    var minByStringValue = safeMin(stringA, toString(b));
    if (minByStringValue !== undefined) {
      return minByStringValue === stringA ? a : b;
    }
    return a;
  });
  module.exports = min;
});

// node_modules/ramda/src/minBy.js
var require_minBy = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var min = require_min();
  var minBy = _curry3(function minBy(f, a, b) {
    var resultB = f(b);
    return min(f(a), resultB) === resultB ? b : a;
  });
  module.exports = minBy;
});

// node_modules/ramda/src/internal/_modify.js
var require__modify = __commonJS((exports, module) => {
  var _modify = function(prop, fn, obj) {
    if (_isInteger(prop) && _isArray(obj)) {
      var arr = [].concat(obj);
      arr[prop] = fn(arr[prop]);
      return arr;
    }
    var result = {};
    for (var p in obj) {
      result[p] = obj[p];
    }
    result[prop] = fn(result[prop]);
    return result;
  };
  var _isArray = require__isArray();
  var _isInteger = require__isInteger();
  module.exports = _modify;
});

// node_modules/ramda/src/modifyPath.js
var require_modifyPath = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _isArray = require__isArray();
  var _isObject = require__isObject();
  var _has = require__has();
  var _assoc = require__assoc();
  var _modify = require__modify();
  var modifyPath = _curry3(function modifyPath(path, fn, object) {
    if (!_isObject(object) && !_isArray(object) || path.length === 0) {
      return object;
    }
    var idx = path[0];
    if (!_has(idx, object)) {
      return object;
    }
    if (path.length === 1) {
      return _modify(idx, fn, object);
    }
    var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);
    if (val === object[idx]) {
      return object;
    }
    return _assoc(idx, val, object);
  });
  module.exports = modifyPath;
});

// node_modules/ramda/src/modify.js
var require_modify = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var modifyPath = require_modifyPath();
  var modify = _curry3(function modify(prop, fn, object) {
    return modifyPath([prop], fn, object);
  });
  module.exports = modify;
});

// node_modules/ramda/src/modulo.js
var require_modulo = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var modulo = _curry2(function modulo(a, b) {
    return a % b;
  });
  module.exports = modulo;
});

// node_modules/ramda/src/move.js
var require_move = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var move = _curry3(function(from, to, list) {
    var length = list.length;
    var result = list.slice();
    var positiveFrom = from < 0 ? length + from : from;
    var positiveTo = to < 0 ? length + to : to;
    var item = result.splice(positiveFrom, 1);
    return positiveFrom < 0 || positiveFrom >= list.length || positiveTo < 0 || positiveTo >= list.length ? list : [].concat(result.slice(0, positiveTo)).concat(item).concat(result.slice(positiveTo, list.length));
  });
  module.exports = move;
});

// node_modules/ramda/src/multiply.js
var require_multiply = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var multiply = _curry2(function multiply(a, b) {
    return a * b;
  });
  module.exports = multiply;
});

// node_modules/ramda/src/partialObject.js
var require_partialObject = __commonJS((exports, module) => {
  var mergeDeepRight = require_mergeDeepRight();
  var _curry2 = require__curry2();
  var partialObject = _curry2((f, o) => (props) => f.call(exports, mergeDeepRight(o, props)));
  module.exports = partialObject;
});

// node_modules/ramda/src/negate.js
var require_negate = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var negate = _curry1(function negate(n) {
    return -n;
  });
  module.exports = negate;
});

// node_modules/ramda/src/none.js
var require_none = __commonJS((exports, module) => {
  var _complement = require__complement();
  var _curry2 = require__curry2();
  var all = require_all();
  var none = _curry2(function none(fn, input) {
    return all(_complement(fn), input);
  });
  module.exports = none;
});

// node_modules/ramda/src/nthArg.js
var require_nthArg = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var curryN = require_curryN();
  var nth = require_nth();
  var nthArg = _curry1(function nthArg(n) {
    var arity = n < 0 ? 1 : n + 1;
    return curryN(arity, function() {
      return nth(n, arguments);
    });
  });
  module.exports = nthArg;
});

// node_modules/ramda/src/o.js
var require_o = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var o = _curry3(function o(f, g, x) {
    return f(g(x));
  });
  module.exports = o;
});

// node_modules/ramda/src/of.js
var require_of = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var of = _curry2(function of(Ctor, val) {
    return typeof Ctor["fantasy-land/of"] === "function" ? Ctor["fantasy-land/of"](val) : typeof Ctor.of === "function" ? Ctor.of(val) : [val];
  });
  module.exports = of;
});

// node_modules/ramda/src/omit.js
var require_omit = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var omit = _curry2(function omit(names, obj) {
    var result = {};
    var index = {};
    var idx = 0;
    var len = names.length;
    while (idx < len) {
      index[names[idx]] = 1;
      idx += 1;
    }
    for (var prop in obj) {
      if (!index.hasOwnProperty(prop)) {
        result[prop] = obj[prop];
      }
    }
    return result;
  });
  module.exports = omit;
});

// node_modules/ramda/src/on.js
var require_on = __commonJS((exports, module) => {
  var curryN = require__curryN();
  var on = curryN(4, [], function on(f, g, a, b) {
    return f(g(a), g(b));
  });
  module.exports = on;
});

// node_modules/ramda/src/once.js
var require_once = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _curry1 = require__curry1();
  var once = _curry1(function once(fn) {
    var called = false;
    var result;
    return _arity(fn.length, function() {
      if (called) {
        return result;
      }
      called = true;
      result = fn.apply(this, arguments);
      return result;
    });
  });
  module.exports = once;
});

// node_modules/ramda/src/internal/_assertPromise.js
var require__assertPromise = __commonJS((exports, module) => {
  var _assertPromise = function(name, p) {
    if (p == null || !_isFunction(p.then)) {
      throw new TypeError("`" + name + "` expected a Promise, received " + _toString(p, []));
    }
  };
  var _isFunction = require__isFunction();
  var _toString = require__toString();
  module.exports = _assertPromise;
});

// node_modules/ramda/src/otherwise.js
var require_otherwise = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _assertPromise = require__assertPromise();
  var otherwise = _curry2(function otherwise(f, p) {
    _assertPromise("otherwise", p);
    return p.then(null, f);
  });
  module.exports = otherwise;
});

// node_modules/ramda/src/over.js
var require_over = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var Identity = function(x) {
    return {
      value: x,
      map: function(f) {
        return Identity(f(x));
      }
    };
  };
  var over = _curry3(function over(lens, f, x) {
    return lens(function(y) {
      return Identity(f(y));
    })(x).value;
  });
  module.exports = over;
});

// node_modules/ramda/src/pair.js
var require_pair = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var pair = _curry2(function pair(fst, snd) {
    return [fst, snd];
  });
  module.exports = pair;
});

// node_modules/ramda/src/internal/_createPartialApplicator.js
var require__createPartialApplicator = __commonJS((exports, module) => {
  var _createPartialApplicator = function(concat) {
    return _curry2(function(fn, args) {
      return _arity(Math.max(0, fn.length - args.length), function() {
        return fn.apply(this, concat(args, arguments));
      });
    });
  };
  var _arity = require__arity();
  var _curry2 = require__curry2();
  module.exports = _createPartialApplicator;
});

// node_modules/ramda/src/partial.js
var require_partial = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _createPartialApplicator = require__createPartialApplicator();
  var partial = _createPartialApplicator(_concat);
  module.exports = partial;
});

// node_modules/ramda/src/partialRight.js
var require_partialRight = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _createPartialApplicator = require__createPartialApplicator();
  var flip = require_flip();
  var partialRight = _createPartialApplicator(flip(_concat));
  module.exports = partialRight;
});

// node_modules/ramda/src/partition.js
var require_partition = __commonJS((exports, module) => {
  var filter = require_filter();
  var juxt = require_juxt();
  var reject = require_reject();
  var partition = juxt([filter, reject]);
  module.exports = partition;
});

// node_modules/ramda/src/pathEq.js
var require_pathEq = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var equals = require_equals();
  var path = require_path2();
  var pathEq = _curry3(function pathEq(val, _path, obj) {
    return equals(path(_path, obj), val);
  });
  module.exports = pathEq;
});

// node_modules/ramda/src/pathOr.js
var require_pathOr = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var defaultTo = require_defaultTo();
  var path = require_path2();
  var pathOr = _curry3(function pathOr(d, p, obj) {
    return defaultTo(d, path(p, obj));
  });
  module.exports = pathOr;
});

// node_modules/ramda/src/pathSatisfies.js
var require_pathSatisfies = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var path = require_path2();
  var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {
    return pred(path(propPath, obj));
  });
  module.exports = pathSatisfies;
});

// node_modules/ramda/src/pick.js
var require_pick = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var pick = _curry2(function pick(names, obj) {
    var result = {};
    var idx = 0;
    while (idx < names.length) {
      if (names[idx] in obj) {
        result[names[idx]] = obj[names[idx]];
      }
      idx += 1;
    }
    return result;
  });
  module.exports = pick;
});

// node_modules/ramda/src/pickAll.js
var require_pickAll = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var pickAll = _curry2(function pickAll(names, obj) {
    var result = {};
    var idx = 0;
    var len = names.length;
    while (idx < len) {
      var name = names[idx];
      result[name] = obj[name];
      idx += 1;
    }
    return result;
  });
  module.exports = pickAll;
});

// node_modules/ramda/src/pickBy.js
var require_pickBy = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var pickBy = _curry2(function pickBy(test, obj) {
    var result = {};
    for (var prop in obj) {
      if (test(obj[prop], prop, obj)) {
        result[prop] = obj[prop];
      }
    }
    return result;
  });
  module.exports = pickBy;
});

// node_modules/ramda/src/prepend.js
var require_prepend = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry2 = require__curry2();
  var prepend = _curry2(function prepend(el, list) {
    return _concat([el], list);
  });
  module.exports = prepend;
});

// node_modules/ramda/src/product.js
var require_product = __commonJS((exports, module) => {
  var multiply = require_multiply();
  var reduce = require_reduce();
  var product = reduce(multiply, 1);
  module.exports = product;
});

// node_modules/ramda/src/useWith.js
var require_useWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var curryN = require_curryN();
  var useWith = _curry2(function useWith(fn, transformers) {
    return curryN(transformers.length, function() {
      var args = [];
      var idx = 0;
      while (idx < transformers.length) {
        args.push(transformers[idx].call(this, arguments[idx]));
        idx += 1;
      }
      return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
    });
  });
  module.exports = useWith;
});

// node_modules/ramda/src/project.js
var require_project = __commonJS((exports, module) => {
  var _map = require__map();
  var identity = require_identity2();
  var pickAll = require_pickAll();
  var useWith = require_useWith();
  var project = useWith(_map, [pickAll, identity]);
  module.exports = project;
});

// node_modules/ramda/src/internal/_promap.js
var require__promap = __commonJS((exports, module) => {
  var _promap = function(f, g, profunctor) {
    return function(x) {
      return g(profunctor(f(x)));
    };
  };
  module.exports = _promap;
});

// node_modules/ramda/src/internal/_xpromap.js
var require__xpromap = __commonJS((exports, module) => {
  var _xpromap = function(f, g) {
    return function(xf) {
      return new XPromap(f, g, xf);
    };
  };
  var _xfBase = require__xfBase();
  var _promap = require__promap();
  var XPromap = function() {
    function XPromap2(f, g, xf) {
      this.xf = xf;
      this.f = f;
      this.g = g;
    }
    XPromap2.prototype["@@transducer/init"] = _xfBase.init;
    XPromap2.prototype["@@transducer/result"] = _xfBase.result;
    XPromap2.prototype["@@transducer/step"] = function(result, input) {
      return this.xf["@@transducer/step"](result, _promap(this.f, this.g, input));
    };
    return XPromap2;
  }();
  module.exports = _xpromap;
});

// node_modules/ramda/src/promap.js
var require_promap = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _dispatchable = require__dispatchable();
  var _promap = require__promap();
  var _xpromap = require__xpromap();
  var promap = _curry3(_dispatchable(["fantasy-land/promap", "promap"], _xpromap, _promap));
  module.exports = promap;
});

// node_modules/ramda/src/propEq.js
var require_propEq = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var prop = require_prop();
  var equals = require_equals();
  var propEq = _curry3(function propEq(val, name, obj) {
    return equals(val, prop(name, obj));
  });
  module.exports = propEq;
});

// node_modules/ramda/src/propIs.js
var require_propIs = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var prop = require_prop();
  var is = require_is();
  var propIs = _curry3(function propIs(type, name, obj) {
    return is(type, prop(name, obj));
  });
  module.exports = propIs;
});

// node_modules/ramda/src/propOr.js
var require_propOr = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var defaultTo = require_defaultTo();
  var prop = require_prop();
  var propOr = _curry3(function propOr(val, p, obj) {
    return defaultTo(val, prop(p, obj));
  });
  module.exports = propOr;
});

// node_modules/ramda/src/propSatisfies.js
var require_propSatisfies = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var prop = require_prop();
  var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {
    return pred(prop(name, obj));
  });
  module.exports = propSatisfies;
});

// node_modules/ramda/src/props.js
var require_props = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var path = require_path2();
  var props = _curry2(function props(ps, obj) {
    return ps.map(function(p) {
      return path([p], obj);
    });
  });
  module.exports = props;
});

// node_modules/ramda/src/range.js
var require_range = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isNumber = require__isNumber();
  var range = _curry2(function range(from, to) {
    if (!(_isNumber(from) && _isNumber(to))) {
      throw new TypeError("Both arguments to range must be numbers");
    }
    var result = [];
    var n = from;
    while (n < to) {
      result.push(n);
      n += 1;
    }
    return result;
  });
  module.exports = range;
});

// node_modules/ramda/src/reduceRight.js
var require_reduceRight = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var reduceRight = _curry3(function reduceRight(fn, acc, list) {
    var idx = list.length - 1;
    while (idx >= 0) {
      acc = fn(list[idx], acc);
      if (acc && acc["@@transducer/reduced"]) {
        acc = acc["@@transducer/value"];
        break;
      }
      idx -= 1;
    }
    return acc;
  });
  module.exports = reduceRight;
});

// node_modules/ramda/src/reduceWhile.js
var require_reduceWhile = __commonJS((exports, module) => {
  var _curryN = require__curryN();
  var _xReduce = require__xReduce();
  var _xwrap = require__xwrap();
  var _reduced = require__reduced();
  var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {
    var xf = _xwrap(function(acc, x) {
      return pred(acc, x) ? fn(acc, x) : _reduced(acc);
    });
    return _xReduce(xf, a, list);
  });
  module.exports = reduceWhile;
});

// node_modules/ramda/src/reduced.js
var require_reduced = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _reduced = require__reduced();
  var reduced = _curry1(_reduced);
  module.exports = reduced;
});

// node_modules/ramda/src/times.js
var require_times = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var times = _curry2(function times(fn, n) {
    var len = Number(n);
    var idx = 0;
    var list;
    if (len < 0 || isNaN(len)) {
      throw new RangeError("n must be a non-negative number");
    }
    list = [];
    while (idx < len) {
      list.push(fn(idx));
      idx += 1;
    }
    return list;
  });
  module.exports = times;
});

// node_modules/ramda/src/repeat.js
var require_repeat = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var always = require_always();
  var times = require_times();
  var repeat = _curry2(function repeat(value, n) {
    return times(always(value), n);
  });
  module.exports = repeat;
});

// node_modules/ramda/src/replace.js
var require_replace = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var replace = _curry3(function replace(regex, replacement, str) {
    return str.replace(regex, replacement);
  });
  module.exports = replace;
});

// node_modules/ramda/src/internal/_xscan.js
var require__xscan = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _xfBase = require__xfBase();
  var tInit = "@@transducer/init";
  var tStep = "@@transducer/step";
  var XScan = function() {
    function XScan2(reducer, acc, xf) {
      this.xf = xf;
      this.f = reducer;
      this.acc = acc;
    }
    XScan2.prototype[tInit] = function() {
      return this.xf[tStep](this.xf[tInit](), this.acc);
    };
    XScan2.prototype["@@transducer/result"] = _xfBase.result;
    XScan2.prototype[tStep] = function(result, input) {
      if (result["@@transducer/reduced"]) {
        return result;
      }
      this.acc = this.f(this.acc, input);
      return this.xf[tStep](result, this.acc);
    };
    return XScan2;
  }();
  var _xscan = _curry3(function _xscan(reducer, acc, xf) {
    return new XScan(reducer, acc, xf);
  });
  module.exports = _xscan;
});

// node_modules/ramda/src/scan.js
var require_scan = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _dispatchable = require__dispatchable();
  var _xscan = require__xscan();
  var scan = _curry3(_dispatchable([], _xscan, function scan(fn, acc, list) {
    var idx = 0;
    var len = list.length;
    var result = [acc];
    while (idx < len) {
      acc = fn(acc, list[idx]);
      result[idx + 1] = acc;
      idx += 1;
    }
    return result;
  }));
  module.exports = scan;
});

// node_modules/ramda/src/sequence.js
var require_sequence = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var ap = require_ap();
  var map = require_map3();
  var prepend = require_prepend();
  var reduceRight = require_reduceRight();
  var identity = require__identity();
  var sequence = _curry2(function sequence(F, traversable) {
    var of = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
    var TypeRep = {
      "fantasy-land/of": of
    };
    return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](TypeRep, identity) : typeof traversable.traverse === "function" ? traversable.traverse(TypeRep, identity) : reduceRight(function(x, acc) {
      return ap(map(prepend, x), acc);
    }, of([]), traversable);
  });
  module.exports = sequence;
});

// node_modules/ramda/src/set.js
var require_set3 = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var always = require_always();
  var over = require_over();
  var set = _curry3(function set(lens, v, x) {
    return over(lens, always(v), x);
  });
  module.exports = set;
});

// node_modules/ramda/src/sort.js
var require_sort = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var sort = _curry2(function sort(comparator, list) {
    return Array.prototype.slice.call(list, 0).sort(comparator);
  });
  module.exports = sort;
});

// node_modules/ramda/src/sortBy.js
var require_sortBy = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var sortBy = _curry2(function sortBy(fn, list) {
    return Array.prototype.slice.call(list, 0).sort(function(a, b) {
      var aa = fn(a);
      var bb = fn(b);
      return aa < bb ? -1 : aa > bb ? 1 : 0;
    });
  });
  module.exports = sortBy;
});

// node_modules/ramda/src/sortWith.js
var require_sortWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var sortWith = _curry2(function sortWith(fns, list) {
    return Array.prototype.slice.call(list, 0).sort(function(a, b) {
      var result = 0;
      var i = 0;
      while (result === 0 && i < fns.length) {
        result = fns[i](a, b);
        i += 1;
      }
      return result;
    });
  });
  module.exports = sortWith;
});

// node_modules/ramda/src/split.js
var require_split = __commonJS((exports, module) => {
  var invoker = require_invoker();
  var split = invoker(1, "split");
  module.exports = split;
});

// node_modules/ramda/src/splitAt.js
var require_splitAt = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var length = require_length();
  var slice = require_slice();
  var splitAt = _curry2(function splitAt(index, array) {
    return [slice(0, index, array), slice(index, length(array), array)];
  });
  module.exports = splitAt;
});

// node_modules/ramda/src/splitEvery.js
var require_splitEvery = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var slice = require_slice();
  var splitEvery = _curry2(function splitEvery(n, list) {
    if (n <= 0) {
      throw new Error("First argument to splitEvery must be a positive integer");
    }
    var result = [];
    var idx = 0;
    while (idx < list.length) {
      result.push(slice(idx, idx += n, list));
    }
    return result;
  });
  module.exports = splitEvery;
});

// node_modules/ramda/src/splitWhen.js
var require_splitWhen = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var splitWhen = _curry2(function splitWhen(pred, list) {
    var idx = 0;
    var len = list.length;
    var prefix = [];
    while (idx < len && !pred(list[idx])) {
      prefix.push(list[idx]);
      idx += 1;
    }
    return [prefix, Array.prototype.slice.call(list, idx)];
  });
  module.exports = splitWhen;
});

// node_modules/ramda/src/splitWhenever.js
var require_splitWhenever = __commonJS((exports, module) => {
  var _curryN = require__curryN();
  var splitWhenever = _curryN(2, [], function splitWhenever(pred, list) {
    var acc = [];
    var curr = [];
    for (var i = 0;i < list.length; i = i + 1) {
      if (!pred(list[i])) {
        curr.push(list[i]);
      }
      if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {
        acc.push(curr);
        curr = [];
      }
    }
    return acc;
  });
  module.exports = splitWhenever;
});

// node_modules/ramda/src/startsWith.js
var require_startsWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var equals = require_equals();
  var take = require_take();
  var startsWith = _curry2(function(prefix, list) {
    return equals(take(prefix.length, list), prefix);
  });
  module.exports = startsWith;
});

// node_modules/ramda/src/subtract.js
var require_subtract = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var subtract = _curry2(function subtract(a, b) {
    return Number(a) - Number(b);
  });
  module.exports = subtract;
});

// node_modules/ramda/src/swap.js
var require_swap = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var _isArray = require__isArray();
  var _isString = require__isString();
  var clone = require_clone();
  var swapObject = function(indexA, indexB, o) {
    var copy = clone(o);
    var properties = Object.getOwnPropertyNames(copy);
    if (properties.includes(indexA) && properties.includes(indexB)) {
      var tmp = copy[indexA];
      copy[indexA] = copy[indexB];
      copy[indexB] = tmp;
    }
    return copy;
  };
  var swapList = function(indexA, indexB, list) {
    var length = list.length;
    var result = list.slice();
    var positiveIndexA = indexA < 0 ? length + indexA : indexA;
    var positiveIndexB = indexB < 0 ? length + indexB : indexB;
    var positiveMin = Math.min(positiveIndexA, positiveIndexB);
    var positiveMax = Math.max(positiveIndexA, positiveIndexB);
    if (positiveIndexA < 0 || positiveIndexA > length) {
      return result;
    }
    if (positiveIndexB < 0 || positiveIndexB > length) {
      return result;
    }
    if (positiveIndexA === positiveIndexB) {
      return result;
    }
    result = [].concat(result.slice(0, positiveMin)).concat(result[positiveMax]).concat(result.slice(positiveMin + 1, positiveMax)).concat(result[positiveMin]).concat(result.slice(positiveMax + 1, length));
    return result;
  };
  var swapString = function(indexA, indexB, s) {
    var result = swapList(indexA, indexB, s);
    return _isArray(result) ? result.join("") : result;
  };
  var swap = _curry3(function(indexA, indexB, o) {
    if (_isArray(o)) {
      return swapList(indexA, indexB, o);
    } else if (_isString(o)) {
      return swapString(indexA, indexB, o);
    } else {
      return swapObject(indexA, indexB, o);
    }
  });
  module.exports = swap;
});

// node_modules/ramda/src/symmetricDifference.js
var require_symmetricDifference = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var concat = require_concat();
  var difference = require_difference();
  var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {
    return concat(difference(list1, list2), difference(list2, list1));
  });
  module.exports = symmetricDifference;
});

// node_modules/ramda/src/symmetricDifferenceWith.js
var require_symmetricDifferenceWith = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var concat = require_concat();
  var differenceWith = require_differenceWith();
  var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {
    return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));
  });
  module.exports = symmetricDifferenceWith;
});

// node_modules/ramda/src/takeLastWhile.js
var require_takeLastWhile = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var slice = require_slice();
  var takeLastWhile = _curry2(function takeLastWhile(fn, xs) {
    var idx = xs.length - 1;
    while (idx >= 0 && fn(xs[idx])) {
      idx -= 1;
    }
    return slice(idx + 1, Infinity, xs);
  });
  module.exports = takeLastWhile;
});

// node_modules/ramda/src/internal/_xtakeWhile.js
var require__xtakeWhile = __commonJS((exports, module) => {
  var _xtakeWhile = function(f) {
    return function(xf) {
      return new XTakeWhile(f, xf);
    };
  };
  var _reduced = require__reduced();
  var _xfBase = require__xfBase();
  var XTakeWhile = function() {
    function XTakeWhile2(f, xf) {
      this.xf = xf;
      this.f = f;
    }
    XTakeWhile2.prototype["@@transducer/init"] = _xfBase.init;
    XTakeWhile2.prototype["@@transducer/result"] = _xfBase.result;
    XTakeWhile2.prototype["@@transducer/step"] = function(result, input) {
      return this.f(input) ? this.xf["@@transducer/step"](result, input) : _reduced(result);
    };
    return XTakeWhile2;
  }();
  module.exports = _xtakeWhile;
});

// node_modules/ramda/src/takeWhile.js
var require_takeWhile = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xtakeWhile = require__xtakeWhile();
  var slice = require_slice();
  var takeWhile = _curry2(_dispatchable(["takeWhile"], _xtakeWhile, function takeWhile(fn, xs) {
    var idx = 0;
    var len = xs.length;
    while (idx < len && fn(xs[idx])) {
      idx += 1;
    }
    return slice(0, idx, xs);
  }));
  module.exports = takeWhile;
});

// node_modules/ramda/src/internal/_xtap.js
var require__xtap = __commonJS((exports, module) => {
  var _xtap = function(f) {
    return function(xf) {
      return new XTap(f, xf);
    };
  };
  var _xfBase = require__xfBase();
  var XTap = function() {
    function XTap2(f, xf) {
      this.xf = xf;
      this.f = f;
    }
    XTap2.prototype["@@transducer/init"] = _xfBase.init;
    XTap2.prototype["@@transducer/result"] = _xfBase.result;
    XTap2.prototype["@@transducer/step"] = function(result, input) {
      this.f(input);
      return this.xf["@@transducer/step"](result, input);
    };
    return XTap2;
  }();
  module.exports = _xtap;
});

// node_modules/ramda/src/tap.js
var require_tap = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _xtap = require__xtap();
  var tap = _curry2(_dispatchable([], _xtap, function tap(fn, x) {
    fn(x);
    return x;
  }));
  module.exports = tap;
});

// node_modules/ramda/src/internal/_isRegExp.js
var require__isRegExp = __commonJS((exports, module) => {
  var _isRegExp = function(x) {
    return Object.prototype.toString.call(x) === "[object RegExp]";
  };
  module.exports = _isRegExp;
});

// node_modules/ramda/src/test.js
var require_test = __commonJS((exports, module) => {
  var _cloneRegExp = require__cloneRegExp();
  var _curry2 = require__curry2();
  var _isRegExp = require__isRegExp();
  var toString = require_toString();
  var test = _curry2(function test(pattern, str) {
    if (!_isRegExp(pattern)) {
      throw new TypeError("\u2018test\u2019 requires a value of type RegExp as its first argument; received " + toString(pattern));
    }
    return _cloneRegExp(pattern).test(str);
  });
  module.exports = test;
});

// node_modules/ramda/src/andThen.js
var require_andThen = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _assertPromise = require__assertPromise();
  var andThen = _curry2(function andThen(f, p) {
    _assertPromise("andThen", p);
    return p.then(f);
  });
  module.exports = andThen;
});

// node_modules/ramda/src/toLower.js
var require_toLower = __commonJS((exports, module) => {
  var invoker = require_invoker();
  var toLower = invoker(0, "toLowerCase");
  module.exports = toLower;
});

// node_modules/ramda/src/toPairs.js
var require_toPairs = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var _has = require__has();
  var toPairs = _curry1(function toPairs(obj) {
    var pairs = [];
    for (var prop in obj) {
      if (_has(prop, obj)) {
        pairs[pairs.length] = [prop, obj[prop]];
      }
    }
    return pairs;
  });
  module.exports = toPairs;
});

// node_modules/ramda/src/toPairsIn.js
var require_toPairsIn = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var toPairsIn = _curry1(function toPairsIn(obj) {
    var pairs = [];
    for (var prop in obj) {
      pairs[pairs.length] = [prop, obj[prop]];
    }
    return pairs;
  });
  module.exports = toPairsIn;
});

// node_modules/ramda/src/toUpper.js
var require_toUpper = __commonJS((exports, module) => {
  var invoker = require_invoker();
  var toUpper = invoker(0, "toUpperCase");
  module.exports = toUpper;
});

// node_modules/ramda/src/transduce.js
var require_transduce = __commonJS((exports, module) => {
  var _xReduce = require__xReduce();
  var _xwrap = require__xwrap();
  var curryN = require_curryN();
  var transduce = curryN(4, function transduce(xf, fn, acc, list) {
    return _xReduce(xf(typeof fn === "function" ? _xwrap(fn) : fn), acc, list);
  });
  module.exports = transduce;
});

// node_modules/ramda/src/transpose.js
var require_transpose = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var transpose = _curry1(function transpose(outerlist) {
    var i = 0;
    var result = [];
    while (i < outerlist.length) {
      var innerlist = outerlist[i];
      var j = 0;
      while (j < innerlist.length) {
        if (typeof result[j] === "undefined") {
          result[j] = [];
        }
        result[j].push(innerlist[j]);
        j += 1;
      }
      i += 1;
    }
    return result;
  });
  module.exports = transpose;
});

// node_modules/ramda/src/traverse.js
var require_traverse = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var map = require_map3();
  var sequence = require_sequence();
  var traverse = _curry3(function traverse(F, f, traversable) {
    var of = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
    var TypeRep = {
      "fantasy-land/of": of
    };
    return typeof traversable["fantasy-land/traverse"] === "function" ? traversable["fantasy-land/traverse"](TypeRep, f) : typeof traversable.traverse === "function" ? traversable.traverse(TypeRep, f) : sequence(TypeRep, map(f, traversable));
  });
  module.exports = traverse;
});

// node_modules/ramda/src/trim.js
var require_trim = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var ws = `	
\r \xA0\u1680\u2000\u2001\u2002\u2003` + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028" + "\u2029\uFEFF";
  var zeroWidth = "\u200B";
  var hasProtoTrim = typeof String.prototype.trim === "function";
  var trim = !hasProtoTrim || ws.trim() || !zeroWidth.trim() ? _curry1(function trim(str) {
    var beginRx = new RegExp("^[" + ws + "][" + ws + "]*");
    var endRx = new RegExp("[" + ws + "][" + ws + "]*$");
    return str.replace(beginRx, "").replace(endRx, "");
  }) : _curry1(function trim(str) {
    return str.trim();
  });
  module.exports = trim;
});

// node_modules/ramda/src/tryCatch.js
var require_tryCatch = __commonJS((exports, module) => {
  var _arity = require__arity();
  var _concat = require__concat();
  var _curry2 = require__curry2();
  var tryCatch = _curry2(function _tryCatch(tryer, catcher) {
    return _arity(tryer.length, function() {
      try {
        return tryer.apply(this, arguments);
      } catch (e) {
        return catcher.apply(this, _concat([e], arguments));
      }
    });
  });
  module.exports = tryCatch;
});

// node_modules/ramda/src/unapply.js
var require_unapply = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var unapply = _curry1(function unapply(fn) {
    return function() {
      return fn(Array.prototype.slice.call(arguments, 0));
    };
  });
  module.exports = unapply;
});

// node_modules/ramda/src/unary.js
var require_unary = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var nAry = require_nAry();
  var unary = _curry1(function unary(fn) {
    return nAry(1, fn);
  });
  module.exports = unary;
});

// node_modules/ramda/src/uncurryN.js
var require_uncurryN = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var curryN = require_curryN();
  var uncurryN = _curry2(function uncurryN(depth, fn) {
    return curryN(depth, function() {
      var currentDepth = 1;
      var value = fn;
      var idx = 0;
      var endIdx;
      while (currentDepth <= depth && typeof value === "function") {
        endIdx = currentDepth === depth ? arguments.length : idx + value.length;
        value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));
        currentDepth += 1;
        idx = endIdx;
      }
      return value;
    });
  });
  module.exports = uncurryN;
});

// node_modules/ramda/src/unfold.js
var require_unfold = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var unfold = _curry2(function unfold(fn, seed) {
    var pair = fn(seed);
    var result = [];
    while (pair && pair.length) {
      result[result.length] = pair[0];
      pair = fn(pair[1]);
    }
    return result;
  });
  module.exports = unfold;
});

// node_modules/ramda/src/union.js
var require_union = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry2 = require__curry2();
  var compose = require_compose();
  var uniq = require_uniq();
  var union = _curry2(compose(uniq, _concat));
  module.exports = union;
});

// node_modules/ramda/src/internal/_xuniqWith.js
var require__xuniqWith = __commonJS((exports, module) => {
  var _xuniqWith = function(pred) {
    return function(xf) {
      return new XUniqWith(pred, xf);
    };
  };
  var _includesWith = require__includesWith();
  var _xfBase = require__xfBase();
  var XUniqWith = function() {
    function XUniqWith2(pred, xf) {
      this.xf = xf;
      this.pred = pred;
      this.items = [];
    }
    XUniqWith2.prototype["@@transducer/init"] = _xfBase.init;
    XUniqWith2.prototype["@@transducer/result"] = _xfBase.result;
    XUniqWith2.prototype["@@transducer/step"] = function(result, input) {
      if (_includesWith(this.pred, input, this.items)) {
        return result;
      } else {
        this.items.push(input);
        return this.xf["@@transducer/step"](result, input);
      }
    };
    return XUniqWith2;
  }();
  module.exports = _xuniqWith;
});

// node_modules/ramda/src/uniqWith.js
var require_uniqWith = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _dispatchable = require__dispatchable();
  var _includesWith = require__includesWith();
  var _xuniqWith = require__xuniqWith();
  var uniqWith = _curry2(_dispatchable([], _xuniqWith, function(pred, list) {
    var idx = 0;
    var len = list.length;
    var result = [];
    var item;
    while (idx < len) {
      item = list[idx];
      if (!_includesWith(pred, item, result)) {
        result[result.length] = item;
      }
      idx += 1;
    }
    return result;
  }));
  module.exports = uniqWith;
});

// node_modules/ramda/src/unionWith.js
var require_unionWith = __commonJS((exports, module) => {
  var _concat = require__concat();
  var _curry3 = require__curry3();
  var uniqWith = require_uniqWith();
  var unionWith = _curry3(function unionWith(pred, list1, list2) {
    return uniqWith(pred, _concat(list1, list2));
  });
  module.exports = unionWith;
});

// node_modules/ramda/src/unless.js
var require_unless = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var unless = _curry3(function unless(pred, whenFalseFn, x) {
    return pred(x) ? x : whenFalseFn(x);
  });
  module.exports = unless;
});

// node_modules/ramda/src/unnest.js
var require_unnest = __commonJS((exports, module) => {
  var _identity = require__identity();
  var chain = require_chain();
  var unnest = chain(_identity);
  module.exports = unnest;
});

// node_modules/ramda/src/until.js
var require_until = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var until = _curry3(function until(pred, fn, init) {
    var val = init;
    while (!pred(val)) {
      val = fn(val);
    }
    return val;
  });
  module.exports = until;
});

// node_modules/ramda/src/unwind.js
var require_unwind = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _isArray = require__isArray();
  var _map = require__map();
  var _assoc = require__assoc();
  var unwind = _curry2(function(key, object) {
    if (!((key in object) && _isArray(object[key]))) {
      return [object];
    }
    return _map(function(item) {
      return _assoc(key, item, object);
    }, object[key]);
  });
  module.exports = unwind;
});

// node_modules/ramda/src/valuesIn.js
var require_valuesIn = __commonJS((exports, module) => {
  var _curry1 = require__curry1();
  var valuesIn = _curry1(function valuesIn(obj) {
    var prop;
    var vs = [];
    for (prop in obj) {
      vs[vs.length] = obj[prop];
    }
    return vs;
  });
  module.exports = valuesIn;
});

// node_modules/ramda/src/view.js
var require_view = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var Const = function(x) {
    return {
      value: x,
      "fantasy-land/map": function() {
        return this;
      }
    };
  };
  var view = _curry2(function view(lens, x) {
    return lens(Const)(x).value;
  });
  module.exports = view;
});

// node_modules/ramda/src/when.js
var require_when = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var when = _curry3(function when(pred, whenTrueFn, x) {
    return pred(x) ? whenTrueFn(x) : x;
  });
  module.exports = when;
});

// node_modules/ramda/src/where.js
var require_where = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _has = require__has();
  var where = _curry2(function where(spec, testObj) {
    for (var prop in spec) {
      if (_has(prop, spec) && !spec[prop](testObj[prop])) {
        return false;
      }
    }
    return true;
  });
  module.exports = where;
});

// node_modules/ramda/src/whereAny.js
var require_whereAny = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _has = require__has();
  var whereAny = _curry2(function whereAny(spec, testObj) {
    for (var prop in spec) {
      if (_has(prop, spec) && spec[prop](testObj[prop])) {
        return true;
      }
    }
    return false;
  });
  module.exports = whereAny;
});

// node_modules/ramda/src/whereEq.js
var require_whereEq = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var equals = require_equals();
  var map = require_map3();
  var where = require_where();
  var whereEq = _curry2(function whereEq(spec, testObj) {
    return where(map(equals, spec), testObj);
  });
  module.exports = whereEq;
});

// node_modules/ramda/src/without.js
var require_without = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var _Set = require__Set();
  var reject = require_reject();
  var without = _curry2(function without(xs, list) {
    var toRemove = new _Set;
    for (var i = 0;i < xs.length; i += 1) {
      toRemove.add(xs[i]);
    }
    return reject(toRemove.has.bind(toRemove), list);
  });
  module.exports = without;
});

// node_modules/ramda/src/xor.js
var require_xor = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var xor = _curry2(function xor(a, b) {
    return Boolean(!a ^ !b);
  });
  module.exports = xor;
});

// node_modules/ramda/src/xprod.js
var require_xprod = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var xprod = _curry2(function xprod(a, b) {
    var idx = 0;
    var ilen = a.length;
    var j;
    var jlen = b.length;
    var result = [];
    while (idx < ilen) {
      j = 0;
      while (j < jlen) {
        result[result.length] = [a[idx], b[j]];
        j += 1;
      }
      idx += 1;
    }
    return result;
  });
  module.exports = xprod;
});

// node_modules/ramda/src/zip.js
var require_zip = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var zip = _curry2(function zip(a, b) {
    var rv = [];
    var idx = 0;
    var len = Math.min(a.length, b.length);
    while (idx < len) {
      rv[idx] = [a[idx], b[idx]];
      idx += 1;
    }
    return rv;
  });
  module.exports = zip;
});

// node_modules/ramda/src/zipObj.js
var require_zipObj = __commonJS((exports, module) => {
  var _curry2 = require__curry2();
  var zipObj = _curry2(function zipObj(keys, values) {
    var idx = 0;
    var len = Math.min(keys.length, values.length);
    var out = {};
    while (idx < len) {
      out[keys[idx]] = values[idx];
      idx += 1;
    }
    return out;
  });
  module.exports = zipObj;
});

// node_modules/ramda/src/zipWith.js
var require_zipWith = __commonJS((exports, module) => {
  var _curry3 = require__curry3();
  var zipWith = _curry3(function zipWith(fn, a, b) {
    var rv = [];
    var idx = 0;
    var len = Math.min(a.length, b.length);
    while (idx < len) {
      rv[idx] = fn(a[idx], b[idx]);
      idx += 1;
    }
    return rv;
  });
  module.exports = zipWith;
});

// node_modules/ramda/src/thunkify.js
var require_thunkify = __commonJS((exports, module) => {
  var curryN = require_curryN();
  var _curry1 = require__curry1();
  var thunkify = _curry1(function thunkify(fn) {
    return curryN(fn.length, function createThunk() {
      var fnArgs = arguments;
      return function invokeThunk() {
        return fn.apply(this, fnArgs);
      };
    });
  });
  module.exports = thunkify;
});

// node_modules/ramda/src/index.js
var require_src2 = __commonJS((exports, module) => {
  module.exports = {};
  module.exports.F = require_F();
  module.exports.T = require_T();
  module.exports.__ = require___();
  module.exports.add = require_add();
  module.exports.addIndex = require_addIndex();
  module.exports.addIndexRight = require_addIndexRight();
  module.exports.adjust = require_adjust();
  module.exports.all = require_all();
  module.exports.allPass = require_allPass();
  module.exports.always = require_always();
  module.exports.and = require_and();
  module.exports.any = require_any();
  module.exports.anyPass = require_anyPass();
  module.exports.ap = require_ap();
  module.exports.aperture = require_aperture();
  module.exports.append = require_append();
  module.exports.apply = require_apply();
  module.exports.applySpec = require_applySpec();
  module.exports.applyTo = require_applyTo();
  module.exports.ascend = require_ascend();
  module.exports.assoc = require_assoc();
  module.exports.assocPath = require_assocPath();
  module.exports.binary = require_binary3();
  module.exports.bind = require_bind();
  module.exports.both = require_both();
  module.exports.call = require_call();
  module.exports.chain = require_chain();
  module.exports.clamp = require_clamp();
  module.exports.clone = require_clone();
  module.exports.collectBy = require_collectBy();
  module.exports.comparator = require_comparator();
  module.exports.complement = require_complement();
  module.exports.compose = require_compose();
  module.exports.composeWith = require_composeWith();
  module.exports.concat = require_concat();
  module.exports.cond = require_cond();
  module.exports.construct = require_construct();
  module.exports.constructN = require_constructN();
  module.exports.converge = require_converge();
  module.exports.count = require_count();
  module.exports.countBy = require_countBy();
  module.exports.curry = require_curry();
  module.exports.curryN = require_curryN();
  module.exports.dec = require_dec();
  module.exports.defaultTo = require_defaultTo();
  module.exports.descend = require_descend();
  module.exports.difference = require_difference();
  module.exports.differenceWith = require_differenceWith();
  module.exports.dissoc = require_dissoc();
  module.exports.dissocPath = require_dissocPath();
  module.exports.divide = require_divide();
  module.exports.drop = require_drop();
  module.exports.dropLast = require_dropLast();
  module.exports.dropLastWhile = require_dropLastWhile();
  module.exports.dropRepeats = require_dropRepeats();
  module.exports.dropRepeatsBy = require_dropRepeatsBy();
  module.exports.dropRepeatsWith = require_dropRepeatsWith();
  module.exports.dropWhile = require_dropWhile();
  module.exports.either = require_either();
  module.exports.empty = require_empty();
  module.exports.endsWith = require_endsWith();
  module.exports.eqBy = require_eqBy();
  module.exports.eqProps = require_eqProps();
  module.exports.equals = require_equals();
  module.exports.evolve = require_evolve();
  module.exports.filter = require_filter();
  module.exports.find = require_find();
  module.exports.findIndex = require_findIndex();
  module.exports.findLast = require_findLast();
  module.exports.findLastIndex = require_findLastIndex();
  module.exports.flatten = require_flatten();
  module.exports.flip = require_flip();
  module.exports.forEach = require_forEach();
  module.exports.forEachObjIndexed = require_forEachObjIndexed();
  module.exports.fromPairs = require_fromPairs();
  module.exports.groupBy = require_groupBy();
  module.exports.groupWith = require_groupWith();
  module.exports.gt = require_gt();
  module.exports.gte = require_gte();
  module.exports.has = require_has();
  module.exports.hasIn = require_hasIn();
  module.exports.hasPath = require_hasPath();
  module.exports.head = require_head();
  module.exports.identical = require_identical();
  module.exports.identity = require_identity2();
  module.exports.ifElse = require_ifElse();
  module.exports.inc = require_inc();
  module.exports.includes = require_includes();
  module.exports.indexBy = require_indexBy();
  module.exports.indexOf = require_indexOf();
  module.exports.init = require_init();
  module.exports.innerJoin = require_innerJoin();
  module.exports.insert = require_insert();
  module.exports.insertAll = require_insertAll();
  module.exports.intersection = require_intersection();
  module.exports.intersperse = require_intersperse();
  module.exports.into = require_into();
  module.exports.invert = require_invert();
  module.exports.invertObj = require_invertObj();
  module.exports.invoker = require_invoker();
  module.exports.is = require_is();
  module.exports.isEmpty = require_isEmpty();
  module.exports.isNil = require_isNil();
  module.exports.isNotNil = require_isNotNil();
  module.exports.join = require_join();
  module.exports.juxt = require_juxt();
  module.exports.keys = require_keys();
  module.exports.keysIn = require_keysIn();
  module.exports.last = require_last();
  module.exports.lastIndexOf = require_lastIndexOf();
  module.exports.length = require_length();
  module.exports.lens = require_lens();
  module.exports.lensIndex = require_lensIndex();
  module.exports.lensPath = require_lensPath();
  module.exports.lensProp = require_lensProp();
  module.exports.lift = require_lift();
  module.exports.liftN = require_liftN();
  module.exports.lt = require_lt();
  module.exports.lte = require_lte();
  module.exports.map = require_map3();
  module.exports.mapAccum = require_mapAccum();
  module.exports.mapAccumRight = require_mapAccumRight();
  module.exports.mapObjIndexed = require_mapObjIndexed();
  module.exports.match = require_match();
  module.exports.mathMod = require_mathMod();
  module.exports.max = require_max();
  module.exports.maxBy = require_maxBy();
  module.exports.mean = require_mean();
  module.exports.median = require_median();
  module.exports.memoizeWith = require_memoizeWith();
  module.exports.mergeAll = require_mergeAll();
  module.exports.mergeDeepLeft = require_mergeDeepLeft();
  module.exports.mergeDeepRight = require_mergeDeepRight();
  module.exports.mergeDeepWith = require_mergeDeepWith();
  module.exports.mergeDeepWithKey = require_mergeDeepWithKey();
  module.exports.mergeLeft = require_mergeLeft();
  module.exports.mergeRight = require_mergeRight();
  module.exports.mergeWith = require_mergeWith();
  module.exports.mergeWithKey = require_mergeWithKey();
  module.exports.min = require_min();
  module.exports.minBy = require_minBy();
  module.exports.modify = require_modify();
  module.exports.modifyPath = require_modifyPath();
  module.exports.modulo = require_modulo();
  module.exports.move = require_move();
  module.exports.multiply = require_multiply();
  module.exports.nAry = require_nAry();
  module.exports.partialObject = require_partialObject();
  module.exports.negate = require_negate();
  module.exports.none = require_none();
  module.exports.not = require_not();
  module.exports.nth = require_nth();
  module.exports.nthArg = require_nthArg();
  module.exports.o = require_o();
  module.exports.objOf = require_objOf();
  module.exports.of = require_of();
  module.exports.omit = require_omit();
  module.exports.on = require_on();
  module.exports.once = require_once();
  module.exports.or = require_or();
  module.exports.otherwise = require_otherwise();
  module.exports.over = require_over();
  module.exports.pair = require_pair();
  module.exports.partial = require_partial();
  module.exports.partialRight = require_partialRight();
  module.exports.partition = require_partition();
  module.exports.path = require_path2();
  module.exports.paths = require_paths();
  module.exports.pathEq = require_pathEq();
  module.exports.pathOr = require_pathOr();
  module.exports.pathSatisfies = require_pathSatisfies();
  module.exports.pick = require_pick();
  module.exports.pickAll = require_pickAll();
  module.exports.pickBy = require_pickBy();
  module.exports.pipe = require_pipe();
  module.exports.pipeWith = require_pipeWith();
  module.exports.pluck = require_pluck();
  module.exports.prepend = require_prepend();
  module.exports.product = require_product();
  module.exports.project = require_project();
  module.exports.promap = require_promap();
  module.exports.prop = require_prop();
  module.exports.propEq = require_propEq();
  module.exports.propIs = require_propIs();
  module.exports.propOr = require_propOr();
  module.exports.propSatisfies = require_propSatisfies();
  module.exports.props = require_props();
  module.exports.range = require_range();
  module.exports.reduce = require_reduce();
  module.exports.reduceBy = require_reduceBy();
  module.exports.reduceRight = require_reduceRight();
  module.exports.reduceWhile = require_reduceWhile();
  module.exports.reduced = require_reduced();
  module.exports.reject = require_reject();
  module.exports.remove = require_remove();
  module.exports.repeat = require_repeat();
  module.exports.replace = require_replace();
  module.exports.reverse = require_reverse();
  module.exports.scan = require_scan();
  module.exports.sequence = require_sequence();
  module.exports.set = require_set3();
  module.exports.slice = require_slice();
  module.exports.sort = require_sort();
  module.exports.sortBy = require_sortBy();
  module.exports.sortWith = require_sortWith();
  module.exports.split = require_split();
  module.exports.splitAt = require_splitAt();
  module.exports.splitEvery = require_splitEvery();
  module.exports.splitWhen = require_splitWhen();
  module.exports.splitWhenever = require_splitWhenever();
  module.exports.startsWith = require_startsWith();
  module.exports.subtract = require_subtract();
  module.exports.sum = require_sum();
  module.exports.swap = require_swap();
  module.exports.symmetricDifference = require_symmetricDifference();
  module.exports.symmetricDifferenceWith = require_symmetricDifferenceWith();
  module.exports.tail = require_tail();
  module.exports.take = require_take();
  module.exports.takeLast = require_takeLast();
  module.exports.takeLastWhile = require_takeLastWhile();
  module.exports.takeWhile = require_takeWhile();
  module.exports.tap = require_tap();
  module.exports.test = require_test();
  module.exports.andThen = require_andThen();
  module.exports.times = require_times();
  module.exports.toLower = require_toLower();
  module.exports.toPairs = require_toPairs();
  module.exports.toPairsIn = require_toPairsIn();
  module.exports.toString = require_toString();
  module.exports.toUpper = require_toUpper();
  module.exports.transduce = require_transduce();
  module.exports.transpose = require_transpose();
  module.exports.traverse = require_traverse();
  module.exports.trim = require_trim();
  module.exports.tryCatch = require_tryCatch();
  module.exports.type = require_type2();
  module.exports.unapply = require_unapply();
  module.exports.unary = require_unary();
  module.exports.uncurryN = require_uncurryN();
  module.exports.unfold = require_unfold();
  module.exports.union = require_union();
  module.exports.unionWith = require_unionWith();
  module.exports.uniq = require_uniq();
  module.exports.uniqBy = require_uniqBy();
  module.exports.uniqWith = require_uniqWith();
  module.exports.unless = require_unless();
  module.exports.unnest = require_unnest();
  module.exports.until = require_until();
  module.exports.unwind = require_unwind();
  module.exports.update = require_update();
  module.exports.useWith = require_useWith();
  module.exports.values = require_values();
  module.exports.valuesIn = require_valuesIn();
  module.exports.view = require_view();
  module.exports.when = require_when();
  module.exports.where = require_where();
  module.exports.whereAny = require_whereAny();
  module.exports.whereEq = require_whereEq();
  module.exports.without = require_without();
  module.exports.xor = require_xor();
  module.exports.xprod = require_xprod();
  module.exports.zip = require_zip();
  module.exports.zipObj = require_zipObj();
  module.exports.zipWith = require_zipWith();
  module.exports.thunkify = require_thunkify();
});

// node_modules/ramda-adjunct/lib/stubUndefined.js
var require_stubUndefined = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var stubUndefined = (0, _ramda.always)(undefined);
  var _default = stubUndefined;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isUndefined.js
var require_isUndefined = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _stubUndefined = _interopRequireDefault(require_stubUndefined());
  var isUndefined = (0, _ramda.equals)((0, _stubUndefined["default"])());
  var _default = isUndefined;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotUndefined.js
var require_isNotUndefined = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isUndefined = _interopRequireDefault(require_isUndefined());
  var isNotUndefined = (0, _ramda.complement)(_isUndefined["default"]);
  var _default = isNotUndefined;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNull.js
var require_isNull = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isNull = (0, _ramda.equals)(null);
  var _default = isNull;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotNull.js
var require_isNotNull = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNull = _interopRequireDefault(require_isNull());
  var isNotNull = (0, _ramda.complement)(_isNull["default"]);
  var _default = isNotNull;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotNil.js
var require_isNotNil2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isNotNil = (0, _ramda.complement)(_ramda.isNil);
  var _default = isNotNil;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isGeneratorFunction.js
var require_isGeneratorFunction = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isGeneratorFunction = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("GeneratorFunction")));
  var _default = isGeneratorFunction;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isAsyncFunction.js
var require_isAsyncFunction = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isAsyncFunction = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("AsyncFunction")));
  var _default = isAsyncFunction;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isFunction.js
var require_isFunction = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isGeneratorFunction = _interopRequireDefault(require_isGeneratorFunction());
  var _isAsyncFunction = _interopRequireDefault(require_isAsyncFunction());
  var isFunction = (0, _ramda.anyPass)([(0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Function")), _isGeneratorFunction["default"], _isAsyncFunction["default"]]);
  var _default = isFunction;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isArray.js
var require_isArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var isArray = (0, _ramda.curryN)(1, (0, _isFunction["default"])(Array.isArray) ? Array.isArray : (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Array")));
  var _default = isArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isIterable.js
var require_isIterable = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var isIterable = (0, _ramda.curryN)(1, function(val) {
    if (typeof Symbol === "undefined") {
      return false;
    }
    return (0, _ramda.hasIn)(Symbol.iterator, Object(val)) && (0, _isFunction["default"])(val[Symbol.iterator]);
  });
  var _default = isIterable;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isEmptyArray.js
var require_isEmptyArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArray = _interopRequireDefault(require_isArray());
  var isEmptyArray = (0, _ramda.both)(_isArray["default"], _ramda.isEmpty);
  var _default = isEmptyArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotArray.js
var require_isNotArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArray = _interopRequireDefault(require_isArray());
  var isNotArray = (0, _ramda.complement)(_isArray["default"]);
  var _default = isNotArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotEmpty.js
var require_isNotEmpty = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isNotEmpty = (0, _ramda.complement)(_ramda.isEmpty);
  var _default = isNotEmpty;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNonEmptyArray.js
var require_isNonEmptyArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotEmpty = _interopRequireDefault(require_isNotEmpty());
  var _isArray = _interopRequireDefault(require_isArray());
  var isNonEmptyArray = (0, _ramda.both)(_isArray["default"], _isNotEmpty["default"]);
  var _default = isNonEmptyArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isBoolean.js
var require_isBoolean = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isBoolean = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Boolean")));
  var _default = isBoolean;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotBoolean.js
var require_isNotBoolean = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isBoolean = _interopRequireDefault(require_isBoolean());
  var isNotBoolean = (0, _ramda.complement)(_isBoolean["default"]);
  var _default = isNotBoolean;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNilOrEmpty.js
var require_isNilOrEmpty = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isNilOrEmpty = (0, _ramda.curryN)(1, (0, _ramda.either)(_ramda.isNil, _ramda.isEmpty));
  var _default = isNilOrEmpty;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isString.js
var require_isString = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isString = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("String")));
  var _default = isString;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isEmptyString.js
var require_isEmptyString = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isEmptyString = (0, _ramda.equals)("");
  var _default = isEmptyString;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotString.js
var require_isNotString = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isString = _interopRequireDefault(require_isString());
  var isNotString = (0, _ramda.complement)(_isString["default"]);
  var _default = isNotString;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/isOfTypeObject.js
var require_isOfTypeObject = __commonJS((exports) => {
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  exports.__esModule = true;
  exports.default = undefined;
  var isOfTypeObject = function isOfTypeObject(val) {
    return _typeof(val) === "object";
  };
  var _default = isOfTypeObject;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isObj.js
var require_isObj = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotNull = _interopRequireDefault(require_isNotNull());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _isOfTypeObject = _interopRequireDefault(require_isOfTypeObject());
  var isObj = (0, _ramda.curryN)(1, (0, _ramda.both)(_isNotNull["default"], (0, _ramda.either)(_isOfTypeObject["default"], _isFunction["default"])));
  var _default = isObj;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotObj.js
var require_isNotObj = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isObj = _interopRequireDefault(require_isObj());
  var isNotObj = (0, _ramda.complement)(_isObj["default"]);
  var _default = isNotObj;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNonEmptyString.js
var require_isNonEmptyString = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isString = _interopRequireDefault(require_isString());
  var _isNotObj = _interopRequireDefault(require_isNotObj());
  var _isNotEmpty = _interopRequireDefault(require_isNotEmpty());
  var isNonEmptyString = (0, _ramda.allPass)([_isString["default"], _isNotObj["default"], _isNotEmpty["default"]]);
  var _default = isNonEmptyString;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isArrayLike.js
var require_isArrayLike = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArray = _interopRequireDefault(require_isArray());
  var _isString = _interopRequireDefault(require_isString());
  var isArrayLike = (0, _ramda.curryN)(1, function(val) {
    if ((0, _isArray["default"])(val)) {
      return true;
    }
    if (!val) {
      return false;
    }
    if ((0, _isString["default"])(val)) {
      return false;
    }
    if (_typeof(val) !== "object") {
      return false;
    }
    if (val.nodeType === 1) {
      return !!val.length;
    }
    if (val.length === 0) {
      return true;
    }
    if (val.length > 0) {
      return (0, _ramda.has)(0, val) && (0, _ramda.has)(val.length - 1, val);
    }
    return false;
  });
  var _default = isArrayLike;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotArrayLike.js
var require_isNotArrayLike = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArrayLike = _interopRequireDefault(require_isArrayLike());
  var isNotArrayLike = (0, _ramda.complement)(_isArrayLike["default"]);
  var _default = isNotArrayLike;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotGeneratorFunction.js
var require_isNotGeneratorFunction = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isGeneratorFunction = _interopRequireDefault(require_isGeneratorFunction());
  var isNotGeneratorFunction = (0, _ramda.complement)(_isGeneratorFunction["default"]);
  var _default = isNotGeneratorFunction;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotAsyncFunction.js
var require_isNotAsyncFunction = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isAsyncFunction = _interopRequireDefault(require_isAsyncFunction());
  var isNotAsyncFunction = (0, _ramda.complement)(_isAsyncFunction["default"]);
  var _default = isNotAsyncFunction;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotFunction.js
var require_isNotFunction = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var isNotFunction = (0, _ramda.complement)(_isFunction["default"]);
  var _default = isNotFunction;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isObjLike.js
var require_isObjLike = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotNull = _interopRequireDefault(require_isNotNull());
  var _isOfTypeObject = _interopRequireDefault(require_isOfTypeObject());
  var isObjLike = (0, _ramda.curryN)(1, (0, _ramda.both)(_isNotNull["default"], _isOfTypeObject["default"]));
  var _default = isObjLike;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotObjLike.js
var require_isNotObjLike = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isObjLike = _interopRequireDefault(require_isObjLike());
  var isNotObjLike = (0, _ramda.complement)(_isObjLike["default"]);
  var _default = isNotObjLike;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPlainObj.js
var require_isPlainObj = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNull = _interopRequireDefault(require_isNull());
  var _isObjLike = _interopRequireDefault(require_isObjLike());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var isObject = (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Object"));
  var isObjectConstructor = (0, _ramda.pipe)(_ramda.toString, (0, _ramda.equals)((0, _ramda.toString)(Object)));
  var hasObjectConstructor = (0, _ramda.pathSatisfies)((0, _ramda.both)(_isFunction["default"], isObjectConstructor), ["constructor"]);
  var isPlainObj = (0, _ramda.curryN)(1, function(val) {
    if (!(0, _isObjLike["default"])(val) || !isObject(val)) {
      return false;
    }
    var proto = Object.getPrototypeOf(val);
    if ((0, _isNull["default"])(proto)) {
      return true;
    }
    return hasObjectConstructor(proto);
  });
  var _default = isPlainObj;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotPlainObj.js
var require_isNotPlainObj = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isPlainObj = _interopRequireDefault(require_isPlainObj());
  var isNotPlainObj = (0, _ramda.complement)(_isPlainObj["default"]);
  var _default = isNotPlainObj;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isDate.js
var require_isDate = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isDate = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Date")));
  var _default = isDate;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotDate.js
var require_isNotDate = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isDate = _interopRequireDefault(require_isDate());
  var isNotDate = (0, _ramda.complement)(_isDate["default"]);
  var _default = isNotDate;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNumber.js
var require_isNumber = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isNumber = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Number")));
  var _default = isNumber;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Number.isNaN.js
var require_Number_isNaN = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isNaNPonyfill = (0, _ramda.both)(_isNumber["default"], isNaN);
  var _default = isNaNPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNaN.js
var require_isNaN = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.isNaNPonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Number = _interopRequireDefault(require_Number_isNaN());
  var isNaNPonyfill = (0, _ramda.curryN)(1, _Number["default"]);
  exports.isNaNPonyfill = isNaNPonyfill;
  var _isNaN = (0, _isFunction["default"])(Number.isNaN) ? (0, _ramda.curryN)(1, Number.isNaN) : isNaNPonyfill;
  var _default = _isNaN;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotNaN.js
var require_isNotNaN = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNaN2 = _interopRequireDefault(require_isNaN());
  var isNotNaN = (0, _ramda.complement)(_isNaN2["default"]);
  var _default = isNotNaN;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isValidDate.js
var require_isValidDate = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isDate = _interopRequireDefault(require_isDate());
  var _isNotNaN = _interopRequireDefault(require_isNotNaN());
  var isValidDate = (0, _ramda.curryN)(1, (0, _ramda.both)(_isDate["default"], (0, _ramda.pipe)((0, _ramda.invoker)(0, "getTime"), _isNotNaN["default"])));
  var _default = isValidDate;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotValidDate.js
var require_isNotValidDate = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isValidDate = _interopRequireDefault(require_isValidDate());
  var isNotValidDate = (0, _ramda.complement)(_isValidDate["default"]);
  var _default = isNotValidDate;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotNumber.js
var require_isNotNumber = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isNotNumber = (0, _ramda.complement)(_isNumber["default"]);
  var _default = isNotNumber;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPositive.js
var require_isPositive = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isPositive = (0, _ramda.both)(_isNumber["default"], (0, _ramda.lt)(0));
  var _default = isPositive;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNegative.js
var require_isNegative = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isNegative = (0, _ramda.curryN)(1, (0, _ramda.both)(_isNumber["default"], (0, _ramda.gt)(0)));
  var _default = isNegative;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPositiveZero.js
var require_isPositiveZero = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isPositiveZero = (0, _ramda.curryN)(1, (0, _ramda.identical)(0));
  var _default = isPositiveZero;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNegativeZero.js
var require_isNegativeZero = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isNegativeZero = (0, _ramda.curryN)(1, (0, _ramda.identical)(-0));
  var _default = isNegativeZero;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotNilOrEmpty.js
var require_isNotNilOrEmpty = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNilOrEmpty = _interopRequireDefault(require_isNilOrEmpty());
  var isNotNilOrEmpty = (0, _ramda.complement)(_isNilOrEmpty["default"]);
  var _default = isNotNilOrEmpty;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNonPositive.js
var require_isNonPositive = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isNonPositive = (0, _ramda.curryN)(1, (0, _ramda.both)(_isNumber["default"], (0, _ramda.flip)(_ramda.lte)(0)));
  var _default = isNonPositive;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNonNegative.js
var require_isNonNegative = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isNonNegative = (0, _ramda.curryN)(1, (0, _ramda.both)(_isNumber["default"], (0, _ramda.flip)(_ramda.gte)(0)));
  var _default = isNonNegative;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isMap.js
var require_isMap = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isMap = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Map")));
  var _default = isMap;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotMap.js
var require_isNotMap = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isMap = _interopRequireDefault(require_isMap());
  var isNotMap = (0, _ramda.complement)(_isMap["default"]);
  var _default = isNotMap;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Number.isFinite.js
var require_Number_isFinite = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNumber = _interopRequireDefault(require_isNumber());
  var isFinitePonyfill = (0, _ramda.both)(_isNumber["default"], isFinite);
  var _default = isFinitePonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isFinite.js
var require_isFinite = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.isFinitePonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Number = _interopRequireDefault(require_Number_isFinite());
  var isFinitePonyfill = (0, _ramda.curryN)(1, _Number["default"]);
  exports.isFinitePonyfill = isFinitePonyfill;
  var _isFinite = (0, _isFunction["default"])(Number.isFinite) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Number.isFinite, Number)) : isFinitePonyfill;
  var _default = _isFinite;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotFinite.js
var require_isNotFinite = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFinite2 = _interopRequireDefault(require_isFinite());
  var isNotFinite = (0, _ramda.complement)(_isFinite2["default"]);
  var _default = isNotFinite;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Number.isInteger.js
var require_Number_isInteger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFinite = _interopRequireDefault(require_isFinite());
  var isIntegerPonyfill = (0, _ramda.both)(_isFinite["default"], (0, _ramda.converge)(_ramda.equals, [Math.floor, _ramda.identity]));
  var _default = isIntegerPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isInteger.js
var require_isInteger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.isIntegerPonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Number = _interopRequireDefault(require_Number_isInteger());
  var isIntegerPonyfill = (0, _ramda.curryN)(1, _Number["default"]);
  exports.isIntegerPonyfill = isIntegerPonyfill;
  var isInteger = (0, _isFunction["default"])(Number.isInteger) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Number.isInteger, Number)) : isIntegerPonyfill;
  var _default = isInteger;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/toInteger32.js
var require_toInteger32 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var toInteger32 = (0, _ramda.curryN)(1, function(val) {
    return val >> 0;
  });
  var _default = toInteger32;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isInteger32.js
var require_isInteger32 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _toInteger = _interopRequireDefault(require_toInteger32());
  var isInteger32 = (0, _ramda.curryN)(1, function(val) {
    return (0, _toInteger["default"])(val) === val;
  });
  var _default = isInteger32;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/toUinteger32.js
var require_toUinteger32 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var toUinteger32 = (0, _ramda.curryN)(1, function(val) {
    return val >>> 0;
  });
  var _default = toUinteger32;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isUinteger32.js
var require_isUinteger32 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _toUinteger = _interopRequireDefault(require_toUinteger32());
  var isUinteger32 = (0, _ramda.curryN)(1, function(val) {
    return (0, _toUinteger["default"])(val) === val;
  });
  var _default = isUinteger32;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotInteger.js
var require_isNotInteger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger());
  var isNotInteger = (0, _ramda.complement)(_isInteger["default"]);
  var _default = isNotInteger;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isBigInt.js
var require_isBigInt = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isBigInt = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("BigInt")));
  var _default = isBigInt;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isFloat.js
var require_isFloat = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger());
  var _isFinite = _interopRequireDefault(require_isFinite());
  var isFloat = (0, _ramda.both)(_isFinite["default"], (0, _ramda.complement)(_isInteger["default"]));
  var _default = isFloat;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotFloat.js
var require_isNotFloat = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFloat = _interopRequireDefault(require_isFloat());
  var isNotFloat = (0, _ramda.curryN)(1, (0, _ramda.complement)(_isFloat["default"]));
  var _default = isNotFloat;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isValidNumber.js
var require_isValidNumber = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFloat = _interopRequireDefault(require_isFloat());
  var _isInteger = _interopRequireDefault(require_isInteger());
  var isValidNumber = (0, _ramda.curryN)(1, (0, _ramda.either)(_isInteger["default"], _isFloat["default"]));
  var _default = isValidNumber;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotValidNumber.js
var require_isNotValidNumber = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isValidNumber = _interopRequireDefault(require_isValidNumber());
  var isNotValidNumber = (0, _ramda.complement)(_isValidNumber["default"]);
  var _default = isNotValidNumber;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isOdd.js
var require_isOdd = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger());
  var isOdd = (0, _ramda.curryN)(1, (0, _ramda.both)(_isInteger["default"], (0, _ramda.pipe)((0, _ramda.flip)(_ramda.modulo)(2), (0, _ramda.complement)(_ramda.equals)(0))));
  var _default = isOdd;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isEven.js
var require_isEven = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger());
  var _isOdd = _interopRequireDefault(require_isOdd());
  var isEven = (0, _ramda.curryN)(1, (0, _ramda.both)(_isInteger["default"], (0, _ramda.complement)(_isOdd["default"])));
  var _default = isEven;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPair.js
var require_isPair = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArray = _interopRequireDefault(require_isArray());
  var isPair = (0, _ramda.curryN)(1, (0, _ramda.both)(_isArray["default"], (0, _ramda.pipe)(_ramda.length, (0, _ramda.equals)(2))));
  var _default = isPair;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotPair.js
var require_isNotPair = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isPair = _interopRequireDefault(require_isPair());
  var isNotPair = (0, _ramda.complement)(_isPair["default"]);
  var _default = isNotPair;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isThenable.js
var require_isThenable = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var isThenable = (0, _ramda.pathSatisfies)(_isFunction["default"], ["then"]);
  var _default = isThenable;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPromise.js
var require_isPromise = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isObj = _interopRequireDefault(require_isObj());
  var isPromise = (0, _ramda.curryN)(1, (0, _ramda.both)(_isObj["default"], (0, _ramda.pipe)(_ramda.toString, (0, _ramda.equals)("[object Promise]"))));
  var _default = isPromise;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isTrue.js
var require_isTrue = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isTrue = (0, _ramda.curryN)(1, (0, _ramda.identical)(true));
  var _default = isTrue;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isFalse.js
var require_isFalse = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isFalse = (0, _ramda.curryN)(1, (0, _ramda.identical)(false));
  var _default = isFalse;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isTruthy.js
var require_isTruthy = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isTruthy = (0, _ramda.curryN)(1, Boolean);
  var _default = isTruthy;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isFalsy.js
var require_isFalsy = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isTruthy = _interopRequireDefault(require_isTruthy());
  var isFalsy = (0, _ramda.complement)(_isTruthy["default"]);
  var _default = isFalsy;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isRegExp.js
var require_isRegExp = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isRegExp = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("RegExp")));
  var _default = isRegExp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotRegExp.js
var require_isNotRegExp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isRegExp = _interopRequireDefault(require_isRegExp());
  var isNotRegExp = (0, _ramda.complement)(_isRegExp["default"]);
  var _default = isNotRegExp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isSet.js
var require_isSet = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isSet = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Set")));
  var _default = isSet;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotSet.js
var require_isNotSet = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isSet = _interopRequireDefault(require_isSet());
  var isNotSet = (0, _ramda.complement)(_isSet["default"]);
  var _default = isNotSet;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isSparseArray.js
var require_isSparseArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArray = _interopRequireDefault(require_isArray());
  var isSparseArray = (0, _ramda.both)(_isArray["default"], (0, _ramda.converge)((0, _ramda.complement)(_ramda.identical), [(0, _ramda.pipe)(_ramda.values, _ramda.length), _ramda.length]));
  var _default = isSparseArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isSymbol.js
var require_isSymbol = __commonJS((exports) => {
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isSymbol = (0, _ramda.curryN)(1, function(val) {
    return _typeof(val) === "symbol" || _typeof(val) === "object" && (0, _ramda.type)(val) === "Symbol";
  });
  var _default = isSymbol;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Number.MAX_SAFE_INTEGER.js
var require_Number_MAX_SAFE_INTEGER = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
  var _default = MAX_SAFE_INTEGER;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Number.isSafeInteger.js
var require_Number_isSafeInteger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger());
  var _Number = _interopRequireDefault(require_Number_MAX_SAFE_INTEGER());
  var isSafeIntegerPonyfill = (0, _ramda.both)(_isInteger["default"], function(value) {
    return Math.abs(value) <= _Number["default"];
  });
  var _default = isSafeIntegerPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isSafeInteger.js
var require_isSafeInteger = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.isSafeIntegerPonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Number = _interopRequireDefault(require_Number_isSafeInteger());
  var isSafeIntegerPonyfill = (0, _ramda.curryN)(1, _Number["default"]);
  exports.isSafeIntegerPonyfill = isSafeIntegerPonyfill;
  var isSafeInteger = (0, _isFunction["default"])(Number.isSafeInteger) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Number.isSafeInteger, Number)) : isSafeIntegerPonyfill;
  var _default = isSafeInteger;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isIndexed.js
var require_isIndexed = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isArray = _interopRequireDefault(require_isArray());
  var _isString = _interopRequireDefault(require_isString());
  var isIndexed = (0, _ramda.curryN)(1, (0, _ramda.either)(_isString["default"], _isArray["default"]));
  var _default = isIndexed;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isError.js
var require_isError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isError = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.type, (0, _ramda.identical)("Error")));
  var _default = isError;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNaturalNumber.js
var require_isNaturalNumber = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger());
  var _isNegative = _interopRequireDefault(require_isNegative());
  var isNaturalNumber = (0, _ramda.curryN)(1, (0, _ramda.both)(_isInteger["default"], (0, _ramda.complement)(_isNegative["default"])));
  var _default = isNaturalNumber;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPrimitive.js
var require_isPrimitive = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotObj = _interopRequireDefault(require_isNotObj());
  var _isString = _interopRequireDefault(require_isString());
  var _isNumber = _interopRequireDefault(require_isNumber());
  var _isBigInt = _interopRequireDefault(require_isBigInt());
  var _isBoolean = _interopRequireDefault(require_isBoolean());
  var _isUndefined = _interopRequireDefault(require_isUndefined());
  var _isNull = _interopRequireDefault(require_isNull());
  var _isSymbol = _interopRequireDefault(require_isSymbol());
  var isPrimitive = (0, _ramda.both)(_isNotObj["default"], (0, _ramda.anyPass)([_isString["default"], _isNumber["default"], _isBigInt["default"], _isBoolean["default"], _isUndefined["default"], _isNull["default"], _isSymbol["default"]]));
  var _default = isPrimitive;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isNotPrimitive.js
var require_isNotPrimitive = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isPrimitive = _interopRequireDefault(require_isPrimitive());
  var isNotPrimitive = (0, _ramda.curryN)(1, (0, _ramda.complement)(_isPrimitive["default"]));
  var _default = isNotPrimitive;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isSentinelValue.js
var require_isSentinelValue = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isInteger = _interopRequireDefault(require_isInteger32());
  var isSentinelValue = (0, _ramda.curryN)(1, function(val) {
    return (0, _isInteger["default"])(val) && ~val === 0;
  });
  var _default = isSentinelValue;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isBlank.js
var require_isBlank = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFalse = _interopRequireDefault(require_isFalse());
  var isBlank = (0, _ramda.anyPass)([_isFalse["default"], _ramda.isNil, _ramda.isEmpty, (0, _ramda.test)(/^\s+$/gm)]);
  var _default = isBlank;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/stubNull.js
var require_stubNull = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var stubNull = (0, _ramda.always)(null);
  var _default = stubNull;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/stubObj.js
var require_stubObj = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var stubObj = function stubObj() {
    return {};
  };
  var _default = stubObj;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/stubString.js
var require_stubString = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var stubString = (0, _ramda.always)("");
  var _default = stubString;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/stubArray.js
var require_stubArray = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var stubArray = function stubArray() {
    return [];
  };
  var _default = stubArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/noop.js
var require_noop = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _stubUndefined = _interopRequireDefault(require_stubUndefined());
  var noop = (0, _ramda.always)((0, _stubUndefined["default"])());
  var _default = noop;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/fantasy-land/mapping.js
var require_mapping = __commonJS((exports) => {
  exports.__esModule = true;
  exports.zero = exports.traverse = exports.reduce = exports.promap = exports.of = exports.map = exports.lte = exports.id = exports.extract = exports.extend = exports.equals = exports.empty = exports.contramap = exports.concat = exports.compose = exports.chainRec = exports.chain = exports.bimap = exports.ap = exports.alt = undefined;
  var equals = "fantasy-land/equals";
  exports.equals = equals;
  var lte = "fantasy-land/lte";
  exports.lte = lte;
  var compose = "fantasy-land/compose";
  exports.compose = compose;
  var id = "fantasy-land/id";
  exports.id = id;
  var concat = "fantasy-land/concat";
  exports.concat = concat;
  var empty = "fantasy-land/empty";
  exports.empty = empty;
  var map = "fantasy-land/map";
  exports.map = map;
  var contramap = "fantasy-land/contramap";
  exports.contramap = contramap;
  var ap = "fantasy-land/ap";
  exports.ap = ap;
  var of = "fantasy-land/of";
  exports.of = of;
  var alt = "fantasy-land/alt";
  exports.alt = alt;
  var zero = "fantasy-land/zero";
  exports.zero = zero;
  var reduce = "fantasy-land/reduce";
  exports.reduce = reduce;
  var traverse = "fantasy-land/traverse";
  exports.traverse = traverse;
  var chain = "fantasy-land/chain";
  exports.chain = chain;
  var chainRec = "fantasy-land/chainRec";
  exports.chainRec = chainRec;
  var extend = "fantasy-land/extend";
  exports.extend = extend;
  var extract = "fantasy-land/extract";
  exports.extract = extract;
  var bimap = "fantasy-land/bimap";
  exports.bimap = bimap;
  var promap = "fantasy-land/promap";
  exports.promap = promap;
});

// node_modules/ramda-adjunct/lib/internal/ap.js
var require_ap2 = __commonJS((exports) => {
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var _getRequireWildcardCache = function(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  };
  var _interopRequireWildcard = function(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var fl = _interopRequireWildcard(require_mapping());
  var isFunctor = (0, _ramda.either)((0, _ramda.pathSatisfies)(_isFunction["default"], ["map"]), (0, _ramda.pathSatisfies)(_isFunction["default"], [fl.map]));
  var isApply = (0, _ramda.both)(isFunctor, (0, _ramda.either)((0, _ramda.pathSatisfies)(_isFunction["default"], ["ap"]), (0, _ramda.pathSatisfies)(_isFunction["default"], [fl.ap])));
  var ap = (0, _ramda.curryN)(2, function(applyF, applyX) {
    if (!isApply(applyF) || !isApply(applyX)) {
      return (0, _ramda.ap)(applyF, applyX);
    }
    try {
      return applyF.ap(applyX);
    } catch (e) {
      return applyX.ap(applyF);
    }
  });
  var _default = ap;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/liftFN.js
var require_liftFN = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _ap = _interopRequireDefault(require_ap2());
  var liftFN = (0, _ramda.curry)(function(arity, fn) {
    var lifted = (0, _ramda.curryN)(arity, fn);
    return (0, _ramda.curryN)(arity, function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var accumulator = (0, _ramda.map)(lifted, (0, _ramda.head)(args));
      var apps = (0, _ramda.slice)(1, Infinity, args);
      return (0, _ramda.reduce)(_ap["default"], accumulator, apps);
    });
  });
  var _default = liftFN;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/liftF.js
var require_liftF = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _liftFN = _interopRequireDefault(require_liftFN());
  var liftF = (0, _ramda.curryN)(1, function(fn) {
    return (0, _liftFN["default"])(fn.length, fn);
  });
  var _default = liftF;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/cata.js
var require_cata = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var catamorphism = (0, _ramda.curry)(function(leftFn, rightFn, catamorphicObj) {
    if ((0, _isFunction["default"])(catamorphicObj.matchWith)) {
      return catamorphicObj.matchWith({
        Ok: function Ok(_ref) {
          var value2 = _ref.value;
          return rightFn(value2);
        },
        Error: function Error(_ref2) {
          var value2 = _ref2.value;
          return leftFn(value2);
        },
        Just: function Just(_ref3) {
          var value2 = _ref3.value;
          return rightFn(value2);
        },
        Nothing: function Nothing() {
          return leftFn(undefined);
        },
        Success: function Success(_ref4) {
          var value2 = _ref4.value;
          return rightFn(value2);
        },
        Failure: function Failure(_ref5) {
          var value2 = _ref5.value;
          return leftFn(value2);
        }
      });
    }
    if ((0, _isFunction["default"])(catamorphicObj.cata)) {
      return catamorphicObj.cata(leftFn, rightFn);
    }
    if ((0, _isFunction["default"])(catamorphicObj.getOrElse)) {
      var elseValue = "RA.cata".concat(Math.random());
      var value = catamorphicObj.getOrElse(elseValue);
      return value === elseValue ? leftFn() : rightFn(value);
    }
    return catamorphicObj.either(leftFn, rightFn);
  });
  var _default = catamorphism;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/weave.js
var require_weave = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var weave = (0, _ramda.curryN)(2, function(fn, config) {
    return (0, _ramda.curryN)(fn.length, function() {
      return fn.apply(undefined, arguments).run(config);
    });
  });
  var _default = weave;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/weaveLazy.js
var require_weaveLazy = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var weaveLazy = (0, _ramda.curryN)(2, function(fn, configAccessor) {
    return (0, _ramda.curryN)(fn.length, function() {
      return fn.apply(undefined, arguments).run(configAccessor());
    });
  });
  var _default = weaveLazy;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/curryRightN.js
var require_curryRightN = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var curryRightN = (0, _ramda.curryN)(2, function(arity, fn) {
    return (0, _ramda.curryN)(arity, function wrapper() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return fn.apply(this, (0, _ramda.reverse)(args));
    });
  });
  var _default = curryRightN;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/curryRight.js
var require_curryRight = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _curryRightN = _interopRequireDefault(require_curryRightN());
  var curryRight = (0, _ramda.converge)(_curryRightN["default"], [_ramda.length, _ramda.identity]);
  var _default = curryRight;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allP.js
var require_allP = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var allP = (0, _ramda.curryN)(1, (0, _ramda.bind)(Promise.all, Promise));
  var _default = allP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/catchP.js
var require_catchP = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var catchP = (0, _ramda.invoker)(1, "catch");
  var _default = catchP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/rejectP.js
var require_rejectP = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var rejectP = (0, _ramda.bind)(Promise.reject, Promise);
  var _default = rejectP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/resolveP.js
var require_resolveP = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var resolveP = (0, _ramda.bind)(Promise.resolve, Promise);
  var _default = resolveP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/noneP.js
var require_noneP = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _allP = _interopRequireDefault(require_allP());
  var _rejectP = _interopRequireDefault(require_rejectP());
  var _resolveP = _interopRequireDefault(require_resolveP());
  var noneP = (0, _ramda.curryN)(1, (0, _ramda.pipe)((0, _ramda.map)(_resolveP["default"]), (0, _ramda.map)(function(p) {
    return p.then(_rejectP["default"], _resolveP["default"]);
  }), _allP["default"]));
  var _default = noneP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/delayP.js
var require_delayP = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNonNegative = _interopRequireDefault(require_isNonNegative());
  var _isInteger = _interopRequireDefault(require_isInteger());
  var makeDelay = (0, _ramda.curry)(function(settleFnPicker, opts) {
    var timeout;
    var value;
    if ((0, _isInteger["default"])(opts) && (0, _isNonNegative["default"])(opts)) {
      timeout = opts;
    } else {
      timeout = (0, _ramda.propOr)(0, "timeout", opts);
      value = (0, _ramda.propOr)(value, "value", opts);
    }
    return new Promise(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var settleFn = settleFnPicker(args);
      setTimeout((0, _ramda.partial)(settleFn, [value]), timeout);
    });
  });
  var delayP = makeDelay((0, _ramda.nth)(0));
  delayP.reject = makeDelay((0, _ramda.nth)(1));
  var _default = delayP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/thenCatchP.js
var require_thenCatchP = __commonJS((exports) => {
  exports.__esModule = true;
  exports.thenCatchP = exports.default = undefined;
  var _ramda = require_src2();
  var thenCatchP = (0, _ramda.invoker)(2, "then");
  exports.thenCatchP = thenCatchP;
  var _default = thenCatchP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Promise.allSettled.js
var require_Promise_allSettled = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _toConsumableArray = function(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  };
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _allP = _interopRequireDefault(require_allP());
  var _resolveP = _interopRequireDefault(require_resolveP());
  var onFulfill = function onFulfill(value) {
    return {
      status: "fulfilled",
      value
    };
  };
  var onReject = function onReject(reason) {
    return {
      status: "rejected",
      reason
    };
  };
  var allSettledPonyfill = function allSettledPonyfill(iterable) {
    var array = (0, _ramda.map)(function(p) {
      return (0, _resolveP["default"])(p).then(onFulfill)["catch"](onReject);
    }, _toConsumableArray(iterable));
    return (0, _allP["default"])(array);
  };
  var _default = allSettledPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allSettledP.js
var require_allSettledP = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = exports.allSettledPPonyfill = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Promise = _interopRequireDefault(require_Promise_allSettled());
  var allSettledPPonyfill = (0, _ramda.curryN)(1, _Promise["default"]);
  exports.allSettledPPonyfill = allSettledPPonyfill;
  var allSettledP = (0, _isFunction["default"])(Promise.allSettled) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Promise.allSettled, Promise)) : allSettledPPonyfill;
  var _default = allSettledP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/Y.js
var require_Y = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var Y = (0, _ramda.curryN)(1, function(le) {
    return function(f) {
      return f(f);
    }(function(g) {
      return le(function(x) {
        return g(g)(x);
      });
    });
  });
  var _default = Y;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/seq.js
var require_seq3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var seq = (0, _ramda.curry)(function(fns, x) {
    return (0, _ramda.tap)(function(tx) {
      return (0, _ramda.map)(function(fn) {
        return fn(tx);
      })(fns);
    })(x);
  });
  var _default = seq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/dispatch.js
var require_dispatch = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _toConsumableArray = function(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  };
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotNil = _interopRequireDefault(require_isNotNil2());
  var _isNonEmptyArray = _interopRequireDefault(require_isNonEmptyArray());
  var _stubUndefined = _interopRequireDefault(require_stubUndefined());
  var byArity = (0, _ramda.comparator)(function(a, b) {
    return a.length > b.length;
  });
  var getMaxArity = (0, _ramda.pipe)((0, _ramda.sort)(byArity), _ramda.head, (0, _ramda.prop)("length"));
  var iteratorFn = (0, _ramda.curry)(function(args, accumulator, fn) {
    var result = fn.apply(undefined, _toConsumableArray(args));
    return (0, _isNotNil["default"])(result) ? (0, _ramda.reduced)(result) : accumulator;
  });
  var dispatchImpl = function dispatchImpl(functions) {
    var arity = getMaxArity(functions);
    return (0, _ramda.curryN)(arity, function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return (0, _ramda.reduce)(iteratorFn(args), undefined, functions);
    });
  };
  var dispatch = (0, _ramda.ifElse)(_isNonEmptyArray["default"], dispatchImpl, _stubUndefined["default"]);
  var _default = dispatch;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/async.js
var require_async = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _resolveP = _interopRequireDefault(require_resolveP());
  var _rejectP = _interopRequireDefault(require_rejectP());
  var async = (0, _ramda.curryN)(1, function(generatorFn) {
    function asyncWrapper() {
      var iterator = (0, _ramda.bind)(generatorFn, this).apply(undefined, arguments);
      var handle = function handle(result) {
        var resolved = (0, _resolveP["default"])(result.value);
        return result.done ? resolved : resolved.then(function(value) {
          return handle(iterator.next(value));
        }, function(error) {
          return handle(iterator["throw"](error));
        });
      };
      try {
        return handle(iterator.next());
      } catch (error) {
        return (0, _rejectP["default"])(error);
      }
    }
    if (generatorFn.length > 0) {
      return (0, _ramda.curryN)(generatorFn.length, asyncWrapper);
    }
    return asyncWrapper;
  });
  var _default = async;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Promise.any.js
var require_Promise_any = __commonJS((exports) => {
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _toConsumableArray = function(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  };
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  var _defineProperties = function(target, props) {
    for (var i = 0;i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  };
  var _createClass = function(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  };
  var _toPropertyKey = function(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  };
  var _toPrimitive = function(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  };
  var _classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var _inherits = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  };
  var _createSuper = function(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  };
  var _possibleConstructorReturn = function(self2, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
      return call;
    } else if (call !== undefined) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self2);
  };
  var _assertThisInitialized = function(self2) {
    if (self2 === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  };
  var _wrapNativeSuper = function(Class) {
    var _cache = typeof Map === "function" ? new Map : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
      return _setPrototypeOf(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  };
  var _construct = function(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct(Parent2, args2, Class2) {
        var a = [null];
        a.push.apply(a, args2);
        var Constructor = Function.bind.apply(Parent2, a);
        var instance = new Constructor;
        if (Class2)
          _setPrototypeOf(instance, Class2.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  };
  var _isNativeReflectConstruct = function() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  };
  var _isNativeFunction = function(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  };
  var _setPrototypeOf = function(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  };
  var _getPrototypeOf = function(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  };
  exports.__esModule = true;
  exports.default = exports.AggregatedError = undefined;
  var _ramda = require_src2();
  var _resolveP = _interopRequireDefault(require_resolveP());
  var AggregatedError = function(_Error) {
    _inherits(AggregatedError2, _Error);
    var _super = _createSuper(AggregatedError2);
    function AggregatedError2() {
      var _this;
      var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      _classCallCheck(this, AggregatedError2);
      _this = _super.call(this, message);
      _this.errors = errors;
      return _this;
    }
    return _createClass(AggregatedError2);
  }(_wrapNativeSuper(Error));
  exports.AggregatedError = AggregatedError;
  var anyPonyfill = function anyPonyfill(iterable) {
    var exceptions = [];
    return new Promise(function(resolve, reject) {
      var onReject = function onReject(e) {
        exceptions.push(e);
        if (exceptions.length === iterable.length) {
          reject(new AggregatedError(exceptions));
        }
      };
      (0, _ramda.map)(function(p) {
        return (0, _resolveP["default"])(p).then(resolve)["catch"](onReject);
      }, _toConsumableArray(iterable));
    });
  };
  var _default = anyPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/anyP.js
var require_anyP = __commonJS((exports) => {
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var _getRequireWildcardCache = function(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  };
  var _interopRequireWildcard = function(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = exports.anyPPonyfill = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Promise = _interopRequireWildcard(require_Promise_any());
  exports.AggregatedError = _Promise.AggregatedError;
  var anyPPonyfill = (0, _ramda.curryN)(1, _Promise["default"]);
  exports.anyPPonyfill = anyPPonyfill;
  var anyP = (0, _isFunction["default"])(Promise.any) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Promise.any, Promise)) : anyPPonyfill;
  var _default = anyP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/compareLength.js
var require_compareLength = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var compareLength = (0, _ramda.curry)(function(comparator, value, list) {
    return (0, _ramda.compose)(comparator(value), _ramda.length)(list);
  });
  var _default = compareLength;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lengthEq.js
var require_lengthEq = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _compareLength = _interopRequireDefault(require_compareLength());
  var lengthEq = (0, _compareLength["default"])(_ramda.equals);
  var _default = lengthEq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lengthGte.js
var require_lengthGte = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _compareLength = _interopRequireDefault(require_compareLength());
  var lengthGte = (0, _compareLength["default"])((0, _ramda.flip)(_ramda.gte));
  var _default = lengthGte;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lastP.js
var require_lastP = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _toConsumableArray = function(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  };
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _allP = _interopRequireDefault(require_allP());
  var _lengthEq = _interopRequireDefault(require_lengthEq());
  var _lengthGte = _interopRequireDefault(require_lengthGte());
  var _rejectP = _interopRequireDefault(require_rejectP());
  var _resolveP = _interopRequireDefault(require_resolveP());
  var lastP = (0, _ramda.curryN)(1, function(iterable) {
    var fulfilled = [];
    var rejected = [];
    var onFulfill = (0, _ramda.bind)(fulfilled.push, fulfilled);
    var onReject = (0, _ramda.bind)(rejected.push, rejected);
    var listOfPromises = (0, _ramda.map)(function(p) {
      return (0, _resolveP["default"])(p).then(onFulfill)["catch"](onReject);
    }, _toConsumableArray(iterable));
    return (0, _allP["default"])(listOfPromises).then(function() {
      if ((0, _lengthEq["default"])(0, fulfilled) && (0, _lengthEq["default"])(0, rejected)) {
        return;
      }
      if ((0, _lengthGte["default"])(1, fulfilled)) {
        return (0, _ramda.last)(fulfilled);
      }
      return (0, _rejectP["default"])(rejected);
    });
  });
  var _default = lastP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/defaultWhen.js
var require_defaultWhen = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var defaultWhen = (0, _ramda.curry)(function(predicate, defaultVal, val) {
    return predicate(val) ? defaultVal : val;
  });
  var _default = defaultWhen;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/mapIndexed.js
var require_mapIndexed = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var mapIndexed = (0, _ramda.addIndex)(_ramda.map);
  var _default = mapIndexed;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/fnull.js
var require_fnull = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _defaultWhen = _interopRequireDefault(require_defaultWhen());
  var _mapIndexed = _interopRequireDefault(require_mapIndexed());
  var fnull = (0, _ramda.curry)(function(fn, defaults) {
    return (0, _ramda.curryN)(fn.length, function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var argsWithDefaults = (0, _mapIndexed["default"])(function(val, idx) {
        return (0, _defaultWhen["default"])(_ramda.isNil, defaults[idx], val);
      }, args);
      return (0, _ramda.apply)(fn, argsWithDefaults);
    });
  });
  var _default = fnull;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/reduceIndexed.js
var require_reduceIndexed = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var reduceIndexed = (0, _ramda.addIndex)(_ramda.reduce);
  var _default = reduceIndexed;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/filterIndexed.js
var require_filterIndexed = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var filterIndexed = (0, _ramda.addIndex)(_ramda.filter);
  var _default = filterIndexed;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/pickIndexes.js
var require_pickIndexes = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var filterIndexed = (0, _ramda.addIndex)(_ramda.filter);
  var containsIndex = (0, _ramda.curry)(function(indexes, val, index) {
    return (0, _ramda.includes)(index, indexes);
  });
  var pickIndexes = (0, _ramda.curry)(function(indexes, list) {
    return filterIndexed(containsIndex(indexes), list);
  });
  var _default = pickIndexes;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/list.js
var require_list = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var list = (0, _ramda.unapply)(_ramda.identity);
  var _default = list;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/ensureArray.js
var require_ensureArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotArray = _interopRequireDefault(require_isNotArray());
  var ensureArray = (0, _ramda.when)(_isNotArray["default"], (0, _ramda.of)(Array));
  var _default = ensureArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/concatAll.js
var require_concatAll = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _stubUndefined = _interopRequireDefault(require_stubUndefined());
  var leftIdentitySemigroup = {
    concat: _ramda.identity
  };
  var concatAll = (0, _ramda.pipe)((0, _ramda.reduce)(_ramda.concat, leftIdentitySemigroup), (0, _ramda.when)((0, _ramda.identical)(leftIdentitySemigroup), _stubUndefined["default"]));
  var _default = concatAll;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/concatRight.js
var require_concatRight = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var concatRight = (0, _ramda.flip)(_ramda.concat);
  var _default = concatRight;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/reduceP.js
var require_reduceP = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _slicedToArray = function(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  };
  var _nonIterableRest = function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  var _iterableToArrayLimit = function(arr, i) {
    var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i != null) {
      var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
      try {
        if (_x = (_i = _i.call(arr)).next, i === 0) {
          if (Object(_i) !== _i)
            return;
          _n = false;
        } else
          for (;!(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
            ;
      } catch (err) {
        _d = true, _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null && (_r = _i["return"](), Object(_r) !== _r))
            return;
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
  };
  var _arrayWithHoles = function(arr) {
    if (Array.isArray(arr))
      return arr;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isUndefined = _interopRequireDefault(require_isUndefined());
  var _resolveP = _interopRequireDefault(require_resolveP());
  var _allP = _interopRequireDefault(require_allP());
  var reduceP = (0, _ramda.curryN)(3, function(fn, acc, list) {
    return (0, _resolveP["default"])(list).then(function(iterable) {
      var listLength = (0, _ramda.length)(iterable);
      if (listLength === 0) {
        return acc;
      }
      var reducer = (0, _ramda.reduce)(function(accP, currentValueP) {
        return accP.then(function(previousValue) {
          return (0, _allP["default"])([previousValue, currentValueP]);
        }).then(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), previousValue = _ref2[0], currentValue = _ref2[1];
          if ((0, _isUndefined["default"])(previousValue) && listLength === 1) {
            return currentValue;
          }
          return fn(previousValue, currentValue);
        });
      });
      return reducer((0, _resolveP["default"])(acc), iterable);
    });
  });
  var _default = reduceP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/reduceRightP.js
var require_reduceRightP = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _slicedToArray = function(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  };
  var _nonIterableRest = function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  var _iterableToArrayLimit = function(arr, i) {
    var _i = arr == null ? null : typeof Symbol != "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i != null) {
      var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
      try {
        if (_x = (_i = _i.call(arr)).next, i === 0) {
          if (Object(_i) !== _i)
            return;
          _n = false;
        } else
          for (;!(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = true)
            ;
      } catch (err) {
        _d = true, _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null && (_r = _i["return"](), Object(_r) !== _r))
            return;
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
  };
  var _arrayWithHoles = function(arr) {
    if (Array.isArray(arr))
      return arr;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isUndefined = _interopRequireDefault(require_isUndefined());
  var _resolveP = _interopRequireDefault(require_resolveP());
  var _allP = _interopRequireDefault(require_allP());
  var flipArgs = (0, _ramda.pipe)((0, _ramda.reduceRight)(_ramda.concat, ""), (0, _ramda.equals)("ba"))(["a", "b"]);
  var reduceRightP = (0, _ramda.curryN)(3, function(fn, acc, list) {
    return (0, _resolveP["default"])(list).then(function(iterable) {
      var listLength = (0, _ramda.length)(iterable);
      if (listLength === 0) {
        return acc;
      }
      var reducer = (0, _ramda.reduceRight)(function(arg1, arg2) {
        var accP;
        var currentValueP;
        if (flipArgs) {
          accP = arg1;
          currentValueP = arg2;
        } else {
          accP = arg2;
          currentValueP = arg1;
        }
        return accP.then(function(previousValue) {
          return (0, _allP["default"])([previousValue, currentValueP]);
        }).then(function(_ref) {
          var _ref2 = _slicedToArray(_ref, 2), previousValue = _ref2[0], currentValue = _ref2[1];
          if ((0, _isUndefined["default"])(previousValue) && listLength === 1) {
            return currentValue;
          }
          return fn(currentValue, previousValue);
        });
      });
      return reducer((0, _resolveP["default"])(acc), iterable);
    });
  });
  var _default = reduceRightP;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/sliceFrom.js
var require_sliceFrom = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var sliceFrom = (0, _ramda.slice)(_ramda.__, Infinity);
  var _default = sliceFrom;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/sliceTo.js
var require_sliceTo = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var sliceTo = (0, _ramda.slice)(0);
  var _default = sliceTo;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/omitIndexes.js
var require_omitIndexes = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var rejectIndexed = (0, _ramda.addIndex)(_ramda.reject);
  var containsIndex = (0, _ramda.curry)(function(indexes, val, index) {
    return (0, _ramda.includes)(index, indexes);
  });
  var omitIndexes = (0, _ramda.curry)(function(indexes, list) {
    return rejectIndexed(containsIndex(indexes), list);
  });
  var _default = omitIndexes;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/compact.js
var require_compact = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isFalsy = _interopRequireDefault(require_isFalsy());
  var compact = (0, _ramda.reject)(_isFalsy["default"]);
  var _default = compact;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/appendFlipped.js
var require_appendFlipped = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var appendFlipped = (0, _ramda.flip)(_ramda.append);
  var _default = appendFlipped;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/included.js
var require_included = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var included = (0, _ramda.flip)(_ramda.includes);
  var _default = included;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/move.js
var require_move2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var move = (0, _ramda.curry)(function(fromIdx, toIdx, list) {
    return (0, _ramda.compose)((0, _ramda.insert)(toIdx, (0, _ramda.nth)(fromIdx, list)), (0, _ramda.remove)(fromIdx, 1))(list);
  });
  var _default = move;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lengthGt.js
var require_lengthGt = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _compareLength = _interopRequireDefault(require_compareLength());
  var lengthGt = (0, _compareLength["default"])((0, _ramda.flip)(_ramda.gt));
  var _default = lengthGt;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lengthLt.js
var require_lengthLt = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _compareLength = _interopRequireDefault(require_compareLength());
  var lengthLt = (0, _compareLength["default"])((0, _ramda.flip)(_ramda.lt));
  var _default = lengthLt;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lengthLte.js
var require_lengthLte = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _compareLength = _interopRequireDefault(require_compareLength());
  var lengthLte = (0, _compareLength["default"])((0, _ramda.flip)(_ramda.lte));
  var _default = lengthLte;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lengthNotEq.js
var require_lengthNotEq = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _compareLength = _interopRequireDefault(require_compareLength());
  var lengthNotEq = (0, _compareLength["default"])((0, _ramda.complement)(_ramda.equals));
  var _default = lengthNotEq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allEqual.js
var require_allEqual = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _lengthLte = _interopRequireDefault(require_lengthLte());
  var allEqual = (0, _ramda.curryN)(1, (0, _ramda.pipe)(_ramda.uniq, (0, _lengthLte["default"])(1)));
  var _default = allEqual;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/String.repeat.js
var require_String_repeat = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _isNotFinite = _interopRequireDefault(require_isNotFinite());
  var _isNegative = _interopRequireDefault(require_isNegative());
  var repeat = function repeat(value, count) {
    var validCount = Number(count);
    if (validCount !== count) {
      validCount = 0;
    }
    if ((0, _isNegative["default"])(validCount)) {
      throw new RangeError("repeat count must be non-negative");
    }
    if ((0, _isNotFinite["default"])(validCount)) {
      throw new RangeError("repeat count must be less than infinity");
    }
    validCount = Math.floor(validCount);
    if (value.length === 0 || validCount === 0) {
      return "";
    }
    if (value.length * validCount >= 1 << 28) {
      throw new RangeError("repeat count must not overflow maximum string size");
    }
    var maxCount = value.length * validCount;
    validCount = Math.floor(Math.log(validCount) / Math.log(2));
    var result = value;
    while (validCount) {
      result += value;
      validCount -= 1;
    }
    result += result.substring(0, maxCount - result.length);
    return result;
  };
  var _default = repeat;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/repeatStr.js
var require_repeatStr = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.repeatStrPonyfill = exports.repeatStrInvoker = exports.default = undefined;
  var _ramda = require_src2();
  var _String = _interopRequireDefault(require_String_repeat());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var repeatStrPonyfill = (0, _ramda.curry)(_String["default"]);
  exports.repeatStrPonyfill = repeatStrPonyfill;
  var repeatStrInvoker = (0, _ramda.flip)((0, _ramda.invoker)(1, "repeat"));
  exports.repeatStrInvoker = repeatStrInvoker;
  var repeatStr = (0, _isFunction["default"])(String.prototype.repeat) ? repeatStrInvoker : repeatStrPonyfill;
  var _default = repeatStr;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allIdentical.js
var require_allIdentical = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _lengthLte = _interopRequireDefault(require_lengthLte());
  var allIdentical = (0, _ramda.curryN)(1, (0, _ramda.pipe)((0, _ramda.uniqWith)(_ramda.identical), (0, _lengthLte["default"])(1)));
  var _default = allIdentical;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allIdenticalTo.js
var require_allIdenticalTo = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var allIdenticalTo = (0, _ramda.curry)(function(val, list) {
    return (0, _ramda.all)((0, _ramda.identical)(val), list);
  });
  var _default = allIdenticalTo;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allEqualTo.js
var require_allEqualTo = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var allEqualTo = (0, _ramda.curry)(function(val, list) {
    return (0, _ramda.all)((0, _ramda.equals)(val), list);
  });
  var _default = allEqualTo;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/makeFlat.js
var require_makeFlat = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _isArrayLike = _interopRequireDefault(require_isArrayLike());
  var makeFlat = function makeFlat(recursive) {
    return function flatt(list) {
      var value;
      var jlen;
      var j;
      var result = [];
      var idx = 0;
      while (idx < list.length) {
        if ((0, _isArrayLike["default"])(list[idx])) {
          value = recursive ? flatt(list[idx]) : list[idx];
          j = 0;
          jlen = value.length;
          while (j < jlen) {
            result[result.length] = value[j];
            j += 1;
          }
        } else {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    };
  };
  var _default = makeFlat;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/flattenDepth.js
var require_flattenDepth = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _toConsumableArray = function(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  };
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _makeFlat2 = _interopRequireDefault(require_makeFlat());
  var flatten1 = (0, _makeFlat2["default"])(false);
  var flattenDepth = (0, _ramda.curry)(function(depth, list) {
    var currentDept = depth;
    var flatList = _toConsumableArray(list);
    while (currentDept > 0) {
      flatList = flatten1(flatList);
      currentDept -= 1;
    }
    return flatList;
  });
  var _default = flattenDepth;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Array.from.js
var require_Array_from = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _toConsumableArray = function(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  };
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isIterable = _interopRequireDefault(require_isIterable());
  var _isNotUndefined = _interopRequireDefault(require_isNotUndefined());
  var _isNotNil = _interopRequireDefault(require_isNotNil2());
  var _isNotFunction = _interopRequireDefault(require_isNotFunction());
  var copyArray = function copyArray(items, mapFn, thisArg) {
    var boundMapFn = (0, _isNotUndefined["default"])(thisArg) ? (0, _ramda.bind)(mapFn, thisArg) : mapFn;
    return (0, _isNotUndefined["default"])(mapFn) ? _toConsumableArray(items).map(boundMapFn) : _toConsumableArray(items);
  };
  var fromArray = function fromArray(items, mapFn, thisArg) {
    if (items == null) {
      throw new TypeError("Array.from requires an array-like object - not null or undefined");
    }
    if ((0, _isNotNil["default"])(mapFn) && (0, _isNotFunction["default"])(mapFn)) {
      throw new TypeError("Array.from: when provided, the second argument must be a function");
    }
    if ((0, _isIterable["default"])(items)) {
      return copyArray(items, mapFn, thisArg);
    }
    return [];
  };
  var _default = fromArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/toArray.js
var require_toArray = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.fromPonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _isIterable = _interopRequireDefault(require_isIterable());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Array = _interopRequireDefault(require_Array_from());
  var fromPonyfill = (0, _ramda.curryN)(1, _Array["default"]);
  exports.fromPonyfill = fromPonyfill;
  var fromArray = (0, _isFunction["default"])(Array.from) ? (0, _ramda.curryN)(1, Array.from) : fromPonyfill;
  var toArray = (0, _ramda.ifElse)(_isIterable["default"], fromArray, _ramda.values);
  var _default = toArray;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/allUnique.js
var require_allUnique = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _lengthEq = _interopRequireDefault(require_lengthEq());
  var allUnique = (0, _ramda.converge)(_lengthEq["default"], [_ramda.length, _ramda.uniq]);
  var _default = allUnique;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/notAllUnique.js
var require_notAllUnique = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _allUnique = _interopRequireDefault(require_allUnique());
  var notAllUnique = (0, _ramda.complement)(_allUnique["default"]);
  var _default = notAllUnique;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/sortByProps.js
var require_sortByProps = __commonJS((exports) => {
  var _toArray = function(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
  };
  var _nonIterableRest = function() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  };
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  var _arrayWithHoles = function(arr) {
    if (Array.isArray(arr))
      return arr;
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var sortByProps = (0, _ramda.curry)(function(props, list) {
    var firstTruthy = function firstTruthy(_ref) {
      var _ref2 = _toArray(_ref), head = _ref2[0], tail = _ref2.slice(1);
      return (0, _ramda.reduce)(_ramda.either, head, tail);
    };
    var makeComparator = function makeComparator(propName) {
      return (0, _ramda.comparator)(function(a, b) {
        return (0, _ramda.lt)((0, _ramda.prop)(propName, a), (0, _ramda.prop)(propName, b));
      });
    };
    return (0, _ramda.sort)(firstTruthy((0, _ramda.map)(makeComparator, props)), list);
  });
  var _default = sortByProps;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/sortByProp.js
var require_sortByProp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _sortByProps = _interopRequireDefault(require_sortByProps());
  var addValueInAnArray = (0, _ramda.append)(_ramda.__, []);
  var sortByProp = (0, _ramda.useWith)(_sortByProps["default"], [addValueInAnArray, _ramda.identity]);
  var _default = sortByProp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/sortByPaths.js
var require_sortByPaths = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var pathToAscendSort = (0, _ramda.pipe)(_ramda.path, _ramda.ascend);
  var mapPathsToAscendSort = (0, _ramda.map)(pathToAscendSort);
  var sortByPaths = (0, _ramda.useWith)(_ramda.sortWith, [mapPathsToAscendSort, _ramda.identity]);
  var _default = sortByPaths;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/skipTake.js
var require_skipTake = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var skipTake = (0, _ramda.curry)(function(n, list) {
    return (0, _ramda.addIndex)(_ramda.filter)((0, _ramda.pipe)((0, _ramda.nthArg)(1), (0, _ramda.modulo)(_ramda.__, n), (0, _ramda.identical)(0)))(list);
  });
  var _default = skipTake;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/floor.js
var require_floor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var floor = (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.floor, Math));
  var _default = floor;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/rangeStep.js
var require_rangeStep = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _floor = _interopRequireDefault(require_floor());
  var rangeStep = (0, _ramda.curryN)(3, function(step, from, to) {
    var callback = step === 0 ? (0, _ramda.always)(from) : function(n) {
      return from + step * n;
    };
    var rangeEnd = step === 0 ? to - from : (0, _floor["default"])((to - from) / step);
    return (0, _ramda.map)(callback, (0, _ramda.range)(0, rangeEnd));
  });
  var _default = rangeStep;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/findOr.js
var require_findOr = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var findOr = (0, _ramda.curry)(function(defaultVal, fn, list) {
    return (0, _ramda.pipe)((0, _ramda.find)(fn), (0, _ramda.defaultTo)(defaultVal))(list);
  });
  var _default = findOr;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/invokeArgs.js
var require_invokeArgs = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotFunction = _interopRequireDefault(require_isNotFunction());
  var _isEmptyArray = _interopRequireDefault(require_isEmptyArray());
  var invokeArgs = (0, _ramda.curryN)(3, function(mpath, args, obj) {
    var method = (0, _ramda.path)(mpath, obj);
    var context = (0, _ramda.path)((0, _ramda.init)(mpath), obj);
    if ((0, _isNotFunction["default"])(method))
      return;
    if ((0, _isEmptyArray["default"])(mpath))
      return;
    var boundMethod = (0, _ramda.bind)(method, context);
    return (0, _ramda.apply)(boundMethod, args);
  });
  var _default = invokeArgs;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/invoke.js
var require_invoke = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _invokeArgs = _interopRequireDefault(require_invokeArgs());
  var invoke = (0, _invokeArgs["default"])(_ramda.__, [], _ramda.__);
  var _default = invoke;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/paths.js
var require_paths2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var paths = (0, _ramda.curry)(function(ps, obj) {
    return (0, _ramda.ap)([(0, _ramda.path)(_ramda.__, obj)], ps);
  });
  var _default = paths;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/renameKeysWith.js
var require_renameKeysWith = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var renameKeysWith = (0, _ramda.curry)(function(fn, obj) {
    return (0, _ramda.pipe)(_ramda.toPairs, (0, _ramda.map)((0, _ramda.over)((0, _ramda.lensIndex)(0), fn)), _ramda.fromPairs)(obj);
  });
  var _default = renameKeysWith;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/renameKeys.js
var require_renameKeys = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _renameKeysWith = _interopRequireDefault(require_renameKeysWith());
  var valueOrKey = function valueOrKey(keysMap) {
    return function(key) {
      if ((0, _ramda.has)(key, keysMap)) {
        return keysMap[key];
      }
      return key;
    };
  };
  var renameKeys = (0, _ramda.curry)(function(keysMap, obj) {
    return (0, _renameKeysWith["default"])(valueOrKey(keysMap), obj);
  });
  var _default = renameKeys;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/renameKey.js
var require_renameKey = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var _defineProperty = function(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  };
  var _toPropertyKey = function(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  };
  var _toPrimitive = function(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _renameKeys2 = _interopRequireDefault(require_renameKeys());
  var renameKey = (0, _ramda.curry)(function(oldKey, newKey, obj) {
    return (0, _renameKeys2["default"])(_defineProperty({}, oldKey, newKey), obj);
  });
  var _default = renameKey;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/renameKeyWith.js
var require_renameKeyWith = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _renameKeysWith = _interopRequireDefault(require_renameKeysWith());
  var renameKeyWith = (0, _ramda.curry)(function(fn, key, obj) {
    return (0, _renameKeysWith["default"])((0, _ramda.when)((0, _ramda.equals)(key), fn), obj);
  });
  var _default = renameKeyWith;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/copyKeys.js
var require_copyKeys = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var ownKeys = function(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  };
  var _objectSpread = function(target) {
    for (var i = 1;i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  };
  var _defineProperty = function(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  };
  var _toPropertyKey = function(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  };
  var _toPrimitive = function(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _renameKeys = _interopRequireDefault(require_renameKeys());
  var copyKeys = (0, _ramda.curryN)(2, function(keysMap, obj) {
    return _objectSpread(_objectSpread({}, obj), (0, _renameKeys["default"])(keysMap, obj));
  });
  var _default = copyKeys;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/mergeProps.js
var require_mergeProps = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var mergeProps = (0, _ramda.curryN)(2, (0, _ramda.pipe)(_ramda.props, _ramda.mergeAll));
  var _default = mergeProps;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/mergePaths.js
var require_mergePaths = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _paths = _interopRequireDefault(require_paths2());
  var mergePaths = (0, _ramda.curryN)(2, (0, _ramda.pipe)(_paths["default"], _ramda.mergeAll));
  var _default = mergePaths;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/mergePath.js
var require_mergePath = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var mergePath = (0, _ramda.curry)(function(path, source, obj) {
    return (0, _ramda.over)((0, _ramda.lensPath)(path), (0, _ramda.mergeLeft)(source), obj);
  });
  var _default = mergePath;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/mergeProp.js
var require_mergeProp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _mergePath = _interopRequireDefault(require_mergePath());
  var mergeProp = (0, _ramda.curry)(function(p, subj, obj) {
    return (0, _mergePath["default"])((0, _ramda.of)(Array, p), subj, obj);
  });
  var _default = mergeProp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/omitBy.js
var require_omitBy = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var omitBy = (0, _ramda.useWith)(_ramda.pickBy, [_ramda.complement, _ramda.identity]);
  var _default = omitBy;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/pathOrLazy.js
var require_pathOrLazy = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var pathOrLazy = (0, _ramda.curryN)(3, function(defaultFn, path, obj) {
    return (0, _ramda.when)((0, _ramda.identical)(defaultFn), (0, _ramda.partial)((0, _ramda.unary)(defaultFn), [obj]), (0, _ramda.pathOr)(defaultFn, path, obj));
  });
  var _default = pathOrLazy;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/viewOr.js
var require_viewOr = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var viewOr = (0, _ramda.curryN)(3, function(defaultValue, lens, data) {
    return (0, _ramda.defaultTo)(defaultValue, (0, _ramda.view)(lens, data));
  });
  var _default = viewOr;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/spreadPath.js
var require_spreadPath = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var spreadPath = (0, _ramda.curryN)(2, (0, _ramda.converge)(_ramda.mergeRight, [_ramda.dissocPath, (0, _ramda.pathOr)({})]));
  var _default = spreadPath;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/spreadProp.js
var require_spreadProp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _spreadPath = _interopRequireDefault(require_spreadPath());
  var spreadProp = (0, _ramda.curry)(function(prop, obj) {
    return (0, _spreadPath["default"])((0, _ramda.of)(Array, prop), obj);
  });
  var _default = spreadProp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/flattenPath.js
var require_flattenPath = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var flattenPath = (0, _ramda.curry)(function(path, obj) {
    return (0, _ramda.mergeRight)(obj, (0, _ramda.pathOr)({}, path, obj));
  });
  var _default = flattenPath;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/flattenProp.js
var require_flattenProp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _flattenPath = _interopRequireDefault(require_flattenPath());
  var flattenProp = (0, _ramda.curry)(function(prop, obj) {
    return (0, _flattenPath["default"])((0, _ramda.of)(Array, prop), obj);
  });
  var _default = flattenProp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/unzipObjWith.js
var require_unzipObjWith = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _lengthEq = _interopRequireDefault(require_lengthEq());
  var unzipObjWith = (0, _ramda.curryN)(2, function(fn, obj) {
    return (0, _ramda.pipe)(_ramda.toPairs, (0, _ramda.map)((0, _ramda.pipe)(_ramda.flip, _ramda.apply)(fn)), _ramda.transpose, (0, _ramda.when)((0, _lengthEq["default"])(0), function() {
      return [[], []];
    }))(obj);
  });
  var _default = unzipObjWith;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/zipObjWith.js
var require_zipObjWith = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var zipObjWith = (0, _ramda.curryN)(3, function(fn, keys, values) {
    return (0, _ramda.pipe)(_ramda.zip, (0, _ramda.map)((0, _ramda.apply)(fn)), _ramda.fromPairs)(values, keys);
  });
  var _default = zipObjWith;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/isPrototypeOf.js
var require_isPrototypeOf = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _invokeArgs = _interopRequireDefault(require_invokeArgs());
  var isPrototypeOf = (0, _ramda.curry)(function(type, object) {
    return Boolean((0, _invokeArgs["default"])(["prototype", "isPrototypeOf"], [object], type));
  });
  var _default = isPrototypeOf;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lensEq.js
var require_lensEq = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var lensEq = (0, _ramda.curryN)(3, function(lens, val, data) {
    return (0, _ramda.pipe)((0, _ramda.view)(lens), (0, _ramda.equals)(val))(data);
  });
  var _default = lensEq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lensNotEq.js
var require_lensNotEq = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _lensEq = _interopRequireDefault(require_lensEq());
  var lensNotEq = (0, _ramda.complement)(_lensEq["default"]);
  var _default = lensNotEq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lensSatisfies.js
var require_lensSatisfies = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isTrue = _interopRequireDefault(require_isTrue());
  var lensSatisfies = (0, _ramda.curryN)(3, function(predicate, lens, data) {
    return (0, _ramda.pipe)((0, _ramda.view)(lens), predicate, _isTrue["default"])(data);
  });
  var _default = lensSatisfies;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lensNotSatisfy.js
var require_lensNotSatisfy = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _lensSatisfies = _interopRequireDefault(require_lensSatisfies());
  var lensNotSatisfy = (0, _ramda.complement)(_lensSatisfies["default"]);
  var _default = lensNotSatisfy;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/fantasy-land/util.js
var require_util8 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.typeEquals = exports.type = exports.isSameType = exports.isNotSameType = undefined;
  var _ramda = require_src2();
  var type = (0, _ramda.either)((0, _ramda.path)(["@@type"]), (0, _ramda.path)(["constructor", "@@type"]));
  exports.type = type;
  var typeEquals = (0, _ramda.curry)(function(typeIdent, monad) {
    return type(monad) === typeIdent;
  });
  exports.typeEquals = typeEquals;
  var isSameType = (0, _ramda.curryN)(2, (0, _ramda.useWith)(_ramda.equals, [type, type]));
  exports.isSameType = isSameType;
  var isNotSameType = (0, _ramda.complement)(isSameType);
  exports.isNotSameType = isNotSameType;
});

// node_modules/ramda-adjunct/lib/fantasy-land/traits.js
var require_traits = __commonJS((exports) => {
  var _getRequireWildcardCache = function(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  };
  var _interopRequireWildcard = function(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  };
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var _defineProperty = function(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  };
  var _toPropertyKey = function(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  };
  var _toPrimitive = function(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  };
  exports.__esModule = true;
  exports.setoidTrait = exports.semigroupTrait = exports.ordTrait = exports.functorTrait = exports.chainTrait = exports.applyTrait = undefined;
  var _ramda = require_src2();
  var _isString = _interopRequireDefault(require_isString());
  var _isNumber = _interopRequireDefault(require_isNumber());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _util = require_util8();
  var fl = _interopRequireWildcard(require_mapping());
  var functorTrait = _defineProperty({}, fl.map, function(fn) {
    return this.constructor[fl.of](fn(this.value));
  });
  exports.functorTrait = functorTrait;
  var applyTrait = _defineProperty({}, fl.ap, function(applyWithFn) {
    var _this = this;
    return applyWithFn.map(function(fn) {
      return fn(_this.value);
    });
  });
  exports.applyTrait = applyTrait;
  var setoidTrait = _defineProperty({}, fl.equals, function(setoid) {
    return (0, _util.isSameType)(this, setoid) && (0, _ramda.equals)(this.value, setoid.value);
  });
  exports.setoidTrait = setoidTrait;
  var semigroupTrait = _defineProperty({}, fl.concat, function(semigroup) {
    var concatenatedValue = this.value;
    if ((0, _isString["default"])(this.value) || (0, _isNumber["default"])(this.value)) {
      concatenatedValue = this.value + semigroup.value;
    } else if ((0, _ramda.pathSatisfies)(_isFunction["default"], ["value", fl.concat], this)) {
      concatenatedValue = this.value[fl.concat](semigroup.value);
    } else if ((0, _ramda.pathSatisfies)(_isFunction["default"], ["value", "concat"], this)) {
      concatenatedValue = this.value.concat(semigroup.value);
    }
    return this.constructor[fl.of](concatenatedValue);
  });
  exports.semigroupTrait = semigroupTrait;
  var chainTrait = _defineProperty({}, fl.chain, function(fn) {
    var newChain = fn(this.value);
    return (0, _util.isSameType)(this, newChain) ? newChain : this;
  });
  exports.chainTrait = chainTrait;
  var ordTrait = _defineProperty({}, fl.lte, function(ord) {
    return (0, _util.isSameType)(this, ord) && (this.value < ord.value || this[fl.equals](ord));
  });
  exports.ordTrait = ordTrait;
});

// node_modules/ramda-adjunct/lib/fantasy-land/Identity.js
var require_Identity = __commonJS((exports) => {
  var _getRequireWildcardCache = function(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap;
    var cacheNodeInterop = new WeakMap;
    return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  };
  var _interopRequireWildcard = function(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return { default: obj };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  };
  var _typeof = function(obj) {
    return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  };
  var _classCallCheck = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };
  var _defineProperties = function(target, props) {
    for (var i = 0;i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  };
  var _createClass = function(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  };
  var _toPropertyKey = function(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  };
  var _toPrimitive = function(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var fl = _interopRequireWildcard(require_mapping());
  var _traits = require_traits();
  var Identity = function(_fl$of, _fl$ap, _fl$map, _fl$equals, _fl$concat, _fl$chain, _fl$lte, _fl$empty, _fl$contramap) {
    function Identity2(value) {
      _classCallCheck(this, Identity2);
      this.value = value;
    }
    _createClass(Identity2, [{
      key: "get",
      value: function get() {
        return this.value;
      }
    }, {
      key: _fl$ap,
      value: function value(applyWithFn) {
        return _traits.applyTrait[fl.ap].call(this, applyWithFn);
      }
    }, {
      key: "ap",
      value: function ap(applyWithFn) {
        return this[fl.ap](applyWithFn);
      }
    }, {
      key: _fl$map,
      value: function value(fn) {
        return _traits.functorTrait[fl.map].call(this, fn);
      }
    }, {
      key: "map",
      value: function map(fn) {
        return this[fl.map](fn);
      }
    }, {
      key: _fl$equals,
      value: function value(setoid) {
        return _traits.setoidTrait[fl.equals].call(this, setoid);
      }
    }, {
      key: "equals",
      value: function equals(setoid) {
        return this[fl.equals](setoid);
      }
    }, {
      key: _fl$concat,
      value: function value(semigroup) {
        return _traits.semigroupTrait[fl.concat].call(this, semigroup);
      }
    }, {
      key: "concat",
      value: function concat(semigroup) {
        return this[fl.concat](semigroup);
      }
    }, {
      key: _fl$chain,
      value: function value(fn) {
        return _traits.chainTrait[fl.chain].call(this, fn);
      }
    }, {
      key: "chain",
      value: function chain(fn) {
        return this[fl.chain](fn);
      }
    }, {
      key: _fl$lte,
      value: function value(ord) {
        return _traits.ordTrait[fl.lte].call(this, ord);
      }
    }, {
      key: "lte",
      value: function lte(ord) {
        return this[fl.lte](ord);
      }
    }, {
      key: _fl$empty,
      value: function value() {
        return this.constructor.of((0, _ramda.empty)(this.value));
      }
    }, {
      key: "empty",
      value: function empty() {
        return this[fl.empty]();
      }
    }, {
      key: _fl$contramap,
      value: function value(fn) {
        var _this = this;
        return this.constructor.of(function(value) {
          return _this.value(fn(value));
        });
      }
    }, {
      key: "contramap",
      value: function contramap(fn) {
        return this[fl.contramap](fn);
      }
    }], [{
      key: _fl$of,
      value: function value(_value) {
        return new Identity2(_value);
      }
    }, {
      key: "of",
      value: function of(value) {
        return new Identity2(value);
      }
    }, {
      key: "@@type",
      get: function get() {
        return "RA/Identity";
      }
    }]);
    return Identity2;
  }(fl.of, fl.ap, fl.map, fl.equals, fl.concat, fl.chain, fl.lte, fl.empty, fl.contramap);
  var _default = Identity;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lensTraverse.js
var require_lensTraverse = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _Identity = _interopRequireDefault(require_Identity());
  var lensTraverse = (0, _ramda.curryN)(1, function(F) {
    var of = typeof F["fantasy-land/of"] === "function" ? F["fantasy-land/of"] : typeof F.of === "function" ? F.of : F;
    var TypeRep = {
      "fantasy-land/of": of
    };
    return (0, _ramda.curry)(function(toFunctorFn, target) {
      return _Identity["default"].of((0, _ramda.traverse)(TypeRep, (0, _ramda.pipe)(toFunctorFn, (0, _ramda.prop)("value")), target));
    });
  });
  var _default = lensTraverse;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/lensIso.js
var require_lensIso = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var isomorphic = function isomorphic(to, from2) {
    var isomorphism = function isomorphism(x) {
      return to(x);
    };
    isomorphism.from = from2;
    return isomorphism;
  };
  var isomorphisms = function isomorphisms(to, from2) {
    return isomorphic((0, _ramda.curry)(function(toFunctorFn, target) {
      return (0, _ramda.map)(from2, toFunctorFn(to(target)));
    }), (0, _ramda.curry)(function(toFunctorFn, target) {
      return (0, _ramda.map)(to, toFunctorFn(from2(target)));
    }));
  };
  var from = (0, _ramda.curry)(function(isomorphism, x) {
    return isomorphism.from(x);
  });
  var lensIso = (0, _ramda.curry)(isomorphisms);
  lensIso.from = from;
  var _default = lensIso;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/propNotEq.js
var require_propNotEq = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var propNotEq = (0, _ramda.complement)(_ramda.propEq);
  var _default = propNotEq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/pathNotEq.js
var require_pathNotEq = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var pathNotEq = (0, _ramda.complement)(_ramda.pathEq);
  var _default = pathNotEq;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/inRange.js
var require_inRange = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var inRangeImp = (0, _ramda.ifElse)(_ramda.gte, function() {
    throw new Error("low must not be greater than high in inRange(low, high, value)");
  }, (0, _ramda.useWith)(_ramda.both, [_ramda.lte, _ramda.gt]));
  var _default = (0, _ramda.curry)(function(low, high, value) {
    return inRangeImp(low, high)(value);
  });
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/notEqual.js
var require_notEqual = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var notEqual = (0, _ramda.complement)(_ramda.equals);
  var _default = notEqual;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/overlaps.js
var require_overlaps = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isNotEmpty = _interopRequireDefault(require_isNotEmpty());
  var overlaps = (0, _ramda.curryN)(2, function(list1, list2) {
    if ((0, _ramda.isEmpty)(list1)) {
      return true;
    }
    return (0, _ramda.pipe)(_ramda.intersection, _isNotEmpty["default"])(list1, list2);
  });
  var _default = overlaps;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/notBoth.js
var require_notBoth = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var notBoth = (0, _ramda.curry)((0, _ramda.compose)(_ramda.complement, _ramda.both));
  var _default = notBoth;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/nand.js
var require_nand = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var nand = (0, _ramda.complement)(_ramda.and);
  var _default = nand;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/neither.js
var require_neither = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var neither = (0, _ramda.curry)((0, _ramda.compose)(_ramda.complement, _ramda.either));
  var _default = neither;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/nor.js
var require_nor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var nor = (0, _ramda.complement)(_ramda.or);
  var _default = nor;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/notAllPass.js
var require_notAllPass = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var notAllPass = (0, _ramda.curry)((0, _ramda.compose)(_ramda.complement, _ramda.allPass));
  var _default = notAllPass;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/nonePass.js
var require_nonePass = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var nonePass = (0, _ramda.curryN)(1, (0, _ramda.compose)(_ramda.complement, _ramda.anyPass));
  var _default = nonePass;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/argsPass.js
var require_argsPass = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _list = _interopRequireDefault(require_list());
  var _isTruthy = _interopRequireDefault(require_isTruthy());
  var argsPass = (0, _ramda.curry)(function(combiningPredicate, predicates) {
    return (0, _ramda.useWith)((0, _ramda.compose)(combiningPredicate(_isTruthy["default"]), _list["default"]), predicates);
  });
  var _default = argsPass;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/dropArgs.js
var require_dropArgs = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var dropArgs = (0, _ramda.nAry)(0);
  var _default = dropArgs;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/round.js
var require_round = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var round = (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.round, Math));
  var _default = round;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/ceil.js
var require_ceil = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var ceil = (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.ceil, Math));
  var _default = ceil;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/divideNum.js
var require_divideNum = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var divideNum = (0, _ramda.flip)(_ramda.divide);
  var _default = divideNum;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Math.trunc.js
var require_Math_trunc = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _isFinite = _interopRequireDefault(require_isFinite());
  var truncPonyfill = function truncPonyfill(v) {
    var numV = Number(v);
    if (!(0, _isFinite["default"])(numV)) {
      return numV;
    }
    return numV - numV % 1 || (numV < 0 ? -0 : numV === 0 ? numV : 0);
  };
  var _default = truncPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/trunc.js
var require_trunc = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.truncPonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _Math = _interopRequireDefault(require_Math_trunc());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var truncPonyfill = (0, _ramda.curryN)(1, _Math["default"]);
  exports.truncPonyfill = truncPonyfill;
  var trunc = (0, _isFunction["default"])(Math.trunc) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.trunc, Math)) : truncPonyfill;
  var _default = trunc;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/Math.sign.js
var require_Math_sign = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var signPonyfill = function signPonyfill(number) {
    return (number > 0) - (number < 0) || +number;
  };
  var _default = signPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/sign.js
var require_sign = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.signPonyfill = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _Math = _interopRequireDefault(require_Math_sign());
  var signPonyfill = (0, _ramda.curryN)(1, _Math["default"]);
  exports.signPonyfill = signPonyfill;
  var sign = (0, _isFunction["default"])(Math.sign) ? (0, _ramda.curryN)(1, (0, _ramda.bind)(Math.sign, Math)) : signPonyfill;
  var _default = sign;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/subtractNum.js
var require_subtractNum = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var subtractNum = (0, _ramda.flip)(_ramda.subtract);
  var _default = subtractNum;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/isCoercible.js
var require_isCoercible = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isObj = _interopRequireDefault(require_isObj());
  var _isSymbol = _interopRequireDefault(require_isSymbol());
  var _neither = _interopRequireDefault(require_neither());
  var isCoercible = (0, _neither["default"])(_isSymbol["default"], (0, _ramda.both)(_isObj["default"], (0, _neither["default"])((0, _ramda.hasIn)("toString"), (0, _ramda.hasIn)("valueOf"))));
  var _default = isCoercible;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/toNumber.js
var require_toNumber = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isCoercible = _interopRequireDefault(require_isCoercible());
  var toNumber = (0, _ramda.ifElse)(_isCoercible["default"], Number, (0, _ramda.always)(NaN));
  var _default = toNumber;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/escapeRegExp.js
var require_escapeRegExp = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isString = _interopRequireDefault(require_isString());
  var escapeRegExp = (0, _ramda.when)(_isString["default"], (0, _ramda.replace)(/[.*+?^${}()|[\]\\-]/g, "\\$&"));
  var _default = escapeRegExp;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/String.replaceAll.js
var require_String_replaceAll = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _isRegExp = _interopRequireDefault(require_isRegExp());
  var _escapeRegExp = _interopRequireDefault(require_escapeRegExp());
  var checkArguments = function checkArguments(searchValue, replaceValue, str) {
    if (str == null || searchValue == null || replaceValue == null) {
      throw TypeError("Input values must not be `null` or `undefined`");
    }
  };
  var checkValue = function checkValue(value, valueName) {
    if (typeof value !== "string") {
      if (!(value instanceof String)) {
        throw TypeError("`".concat(valueName, "` must be a string"));
      }
    }
  };
  var checkSearchValue = function checkSearchValue(searchValue) {
    if (typeof searchValue !== "string" && !(searchValue instanceof String) && !(searchValue instanceof RegExp)) {
      throw TypeError("`searchValue` must be a string or an regexp");
    }
  };
  var replaceAll = function replaceAll(searchValue, replaceValue, str) {
    checkArguments(searchValue, replaceValue, str);
    checkValue(str, "str");
    checkValue(replaceValue, "replaceValue");
    checkSearchValue(searchValue);
    var regexp = new RegExp((0, _isRegExp["default"])(searchValue) ? searchValue : (0, _escapeRegExp["default"])(searchValue), "g");
    return (0, _ramda.replace)(regexp, replaceValue, str);
  };
  var _default = replaceAll;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/replaceAll.js
var require_replaceAll = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.replaceAllPonyfill = exports.replaceAllInvoker = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _String = _interopRequireDefault(require_String_replaceAll());
  var replaceAllPonyfill = (0, _ramda.curryN)(3, _String["default"]);
  exports.replaceAllPonyfill = replaceAllPonyfill;
  var replaceAllInvoker = (0, _ramda.invoker)(2, "replaceAll");
  exports.replaceAllInvoker = replaceAllInvoker;
  var replaceAll = (0, _isFunction["default"])(String.prototype.replaceAll) ? replaceAllInvoker : replaceAllPonyfill;
  var _default = replaceAll;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/String.trimStart.js
var require_String_trimStart = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var trimStart = (0, _ramda.replace)(/^[\s\uFEFF\xA0]+/, "");
  var _default = trimStart;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/trimStart.js
var require_trimStart = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.trimStartPonyfill = exports.trimStartInvoker = exports.default = undefined;
  var _ramda = require_src2();
  var _String = _interopRequireDefault(require_String_trimStart());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var trimStartPonyfill = _String["default"];
  exports.trimStartPonyfill = trimStartPonyfill;
  var trimStartInvoker = (0, _ramda.invoker)(0, "trimStart");
  exports.trimStartInvoker = trimStartInvoker;
  var trimStart = (0, _isFunction["default"])(String.prototype.trimStart) ? trimStartInvoker : trimStartPonyfill;
  var _default = trimStart;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/String.trimEnd.js
var require_String_trimEnd = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var trimStart = (0, _ramda.replace)(/[\s\uFEFF\xA0]+$/, "");
  var _default = trimStart;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/trimEnd.js
var require_trimEnd = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.trimEndPonyfill = exports.trimEndInvoker = exports.default = undefined;
  var _ramda = require_src2();
  var _String = _interopRequireDefault(require_String_trimEnd());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var trimEndPonyfill = _String["default"];
  exports.trimEndPonyfill = trimEndPonyfill;
  var trimEndInvoker = (0, _ramda.invoker)(0, "trimEnd");
  exports.trimEndInvoker = trimEndInvoker;
  var trimEnd = (0, _isFunction["default"])(String.prototype.trimEnd) ? trimEndInvoker : trimEndPonyfill;
  var _default = trimEnd;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/trimCharsEnd.js
var require_trimCharsEnd = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _included = _interopRequireDefault(require_included());
  var trimCharsEnd = (0, _ramda.curry)(function(chars, value) {
    return (0, _ramda.pipe)((0, _ramda.split)(""), (0, _ramda.dropLastWhile)((0, _included["default"])(chars)), (0, _ramda.join)(""))(value);
  });
  var _default = trimCharsEnd;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/trimCharsStart.js
var require_trimCharsStart = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _included = _interopRequireDefault(require_included());
  var trimCharsStart = (0, _ramda.curry)(function(chars, value) {
    return (0, _ramda.pipe)((0, _ramda.split)(""), (0, _ramda.dropWhile)((0, _included["default"])(chars)), (0, _ramda.join)(""))(value);
  });
  var _default = trimCharsStart;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/String.padStart.js
var require_String_padStart = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _isNotUndefined = _interopRequireDefault(require_isNotUndefined());
  var _String = _interopRequireDefault(require_String_repeat());
  var padStartPonyfill = function padStartPonyfill(padString, targetLength, value) {
    var finalLength = targetLength >> 0;
    var finalPadString = String((0, _isNotUndefined["default"])(padString) ? padString : " ");
    if (value.length >= finalLength) {
      return String(value);
    }
    finalLength -= value.length;
    if (finalLength > finalPadString.length) {
      var lenghtToPad = finalLength / finalPadString.length;
      finalPadString += (0, _isFunction["default"])(String.prototype.repeat) ? finalPadString.repeat(lenghtToPad) : (0, _String["default"])(finalPadString, lenghtToPad);
    }
    return finalPadString.slice(0, finalLength) + String(value);
  };
  var _default = padStartPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/padCharsStart.js
var require_padCharsStart = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.padStartPonyfill = exports.padStartInvoker = exports.default = undefined;
  var _ramda = require_src2();
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _String = _interopRequireDefault(require_String_padStart());
  var padStartInvoker = (0, _ramda.flip)((0, _ramda.invoker)(2, "padStart"));
  exports.padStartInvoker = padStartInvoker;
  var padStartPonyfill = (0, _ramda.curry)(_String["default"]);
  exports.padStartPonyfill = padStartPonyfill;
  var padCharsStart = (0, _isFunction["default"])(String.prototype.padStart) ? padStartInvoker : padStartPonyfill;
  var _default = padCharsStart;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/internal/ponyfills/String.padEnd.js
var require_String_padEnd = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _isFunction = _interopRequireDefault(require_isFunction());
  var _isNotUndefined = _interopRequireDefault(require_isNotUndefined());
  var _String = _interopRequireDefault(require_String_repeat());
  var padEndPonyfill = function padEndPonyfill(padString, targetLength, value) {
    var finalLength = targetLength >> 0;
    var finalPadString = String((0, _isNotUndefined["default"])(padString) ? padString : " ");
    if (value.length > finalLength) {
      return String(value);
    }
    finalLength -= value.length;
    if (finalLength > finalPadString.length) {
      var remainingLength = finalLength / finalPadString.length;
      finalPadString += (0, _isFunction["default"])(String.prototype.repeat) ? finalPadString.repeat(remainingLength) : (0, _String["default"])(finalPadString, remainingLength);
    }
    return String(value) + finalPadString.slice(0, finalLength);
  };
  var _default = padEndPonyfill;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/padCharsEnd.js
var require_padCharsEnd = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.padEndPonyfill = exports.padEndInvoker = exports.default = undefined;
  var _ramda = require_src2();
  var _String = _interopRequireDefault(require_String_padEnd());
  var _isFunction = _interopRequireDefault(require_isFunction());
  var padEndPonyfill = (0, _ramda.curry)(_String["default"]);
  exports.padEndPonyfill = padEndPonyfill;
  var padEndInvoker = (0, _ramda.flip)((0, _ramda.invoker)(2, "padEnd"));
  exports.padEndInvoker = padEndInvoker;
  var padCharsEnd = (0, _isFunction["default"])(String.prototype.padEnd) ? padEndInvoker : padEndPonyfill;
  var _default = padCharsEnd;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/padEnd.js
var require_padEnd = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _padCharsEnd = _interopRequireDefault(require_padCharsEnd());
  var padEnd = (0, _padCharsEnd["default"])(" ");
  var _default = padEnd;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/padStart.js
var require_padStart = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _padCharsStart = _interopRequireDefault(require_padCharsStart());
  var padStart = (0, _padCharsStart["default"])(" ");
  var _default = padStart;
  exports.default = _default;
});

// node_modules/ramda-adjunct/lib/index.js
var require_lib6 = __commonJS((exports) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  };
  exports.__esModule = true;
  exports.isNotRegExp = exports.isNotPrimitive = exports.isNotPlainObject = exports.isNotPlainObj = exports.isNotPair = exports.isNotObjectLike = exports.isNotObject = exports.isNotObjLike = exports.isNotObj = exports.isNotNumber = exports.isNotNull = exports.isNotNilOrEmpty = exports.isNotNil = exports.isNotNaN = exports.isNotMap = exports.isNotInteger = exports.isNotGeneratorFunction = exports.isNotFunction = exports.isNotFloat = exports.isNotFinite = exports.isNotEmpty = exports.isNotDate = exports.isNotBoolean = exports.isNotAsyncFunction = exports.isNotArrayLike = exports.isNotArray = exports.isNonPositive = exports.isNonNegative = exports.isNonEmptyString = exports.isNonEmptyArray = exports.isNilOrEmpty = exports.isNegativeZero = exports.isNegative = exports.isNaturalNumber = exports.isNaN = exports.isMap = exports.isIterable = exports.isInvalidDate = exports.isInteger32 = exports.isInteger = exports.isInt32 = exports.isIndexed = exports.isGeneratorFunction = exports.isFunction = exports.isFloat = exports.isFinite = exports.isFalsy = exports.isFalse = exports.isEven = exports.isError = exports.isEmptyString = exports.isEmptyArray = exports.isDate = exports.isBoolean = exports.isBlank = exports.isBigInt = exports.isAsyncFunction = exports.isArrayLike = exports.isArray = exports.invokeArgs = exports.invoke = exports.included = exports.inRange = exports.fnull = exports.floor = exports.flattenProp = exports.flattenPath = exports.flattenDepth = exports.firstP = exports.findOr = exports.filterIndexed = exports.escapeRegExp = exports.ensureArray = exports.dropArgs = exports.divideNum = exports.dispatch = exports.delayP = exports.defaultWhen = exports.curryRightN = exports.curryRight = exports.copyKeys = exports.concatRight = exports.concatAll = exports.compact = exports.ceil = exports.catchP = exports.cata = exports.async = exports.argsPass = exports.appendFlipped = exports.anyP = exports.allUnique = exports.allSettledP = exports.allP = exports.allIdenticalTo = exports.allIdentical = exports.allEqualTo = exports.allEqual = exports.Y = exports.Identity = undefined;
  exports.sortByProp = exports.sortByPaths = exports.sliceTo = exports.sliceFrom = exports.skipTake = exports.sign = exports.sequencing = exports.seq = exports.round = exports.resolveP = exports.replaceAll = exports.repeatStr = exports.renameKeysWith = exports.renameKeys = exports.renameKeyWith = exports.renameKey = exports.rejectP = exports.reduceRightP = exports.reduceP = exports.reduceIndexed = exports.rangeStep = exports.propNotEq = exports.pickIndexes = exports.paths = exports.pathOrLazy = exports.pathNotEq = exports.padStart = exports.padEnd = exports.padCharsStart = exports.padCharsEnd = exports.overlaps = exports.omitIndexes = exports.omitBy = exports.notEqual = exports.notBoth = exports.notAllUnique = exports.notAllPass = exports.nor = exports.noop = exports.nonePass = exports.noneP = exports.neither = exports.nand = exports.move = exports.mergeProps = exports.mergeProp = exports.mergePaths = exports.mergePath = exports.mapIndexed = exports.list = exports.liftFN = exports.liftF = exports.lensTraverse = exports.lensSatisfies = exports.lensNotSatisfy = exports.lensNotEq = exports.lensIso = exports.lensEq = exports.lengthNotEq = exports.lengthLte = exports.lengthLt = exports.lengthGte = exports.lengthGt = exports.lengthEq = exports.lastP = exports.isValidNumber = exports.isValidDate = exports.isUndefined = exports.isUinteger32 = exports.isUint32 = exports.isTruthy = exports.isTrue = exports.isThenable = exports.isSymbol = exports.isString = exports.isSparseArray = exports.isSet = exports.isSentinelValue = exports.isSafeInteger = exports.isRegExp = exports.isPrototypeOf = exports.isPromise = exports.isPrimitive = exports.isPositiveZero = exports.isPositive = exports.isPlainObject = exports.isPlainObj = exports.isPair = exports.isOdd = exports.isObjectLike = exports.isObject = exports.isObjLike = exports.isObj = exports.isNumber = exports.isNull = exports.isNotValidNumber = exports.isNotValidDate = exports.isNotUndefined = exports.isNotString = exports.isNotSet = undefined;
  exports.zipObjWith = exports.weaveLazy = exports.weave = exports.viewOr = exports.unzipObjWith = exports.trunc = exports.trimStart = exports.trimRight = exports.trimLeft = exports.trimEnd = exports.trimCharsStart = exports.trimCharsEnd = exports.toUinteger32 = exports.toUint32 = exports.toNumber = exports.toInteger32 = exports.toInt32 = exports.toArray = exports.thenCatchP = exports.subtractNum = exports.stubUndefined = exports.stubString = exports.stubObject = exports.stubObj = exports.stubNull = exports.stubArray = exports.spreadProp = exports.spreadPath = exports.sortByProps = undefined;
  var _isNotUndefined = _interopRequireDefault(require_isNotUndefined());
  exports.isNotUndefined = _isNotUndefined["default"];
  var _isUndefined = _interopRequireDefault(require_isUndefined());
  exports.isUndefined = _isUndefined["default"];
  var _isNull = _interopRequireDefault(require_isNull());
  exports.isNull = _isNull["default"];
  var _isNotNull = _interopRequireDefault(require_isNotNull());
  exports.isNotNull = _isNotNull["default"];
  var _isNotNil = _interopRequireDefault(require_isNotNil2());
  exports.isNotNil = _isNotNil["default"];
  var _isArray = _interopRequireDefault(require_isArray());
  exports.isArray = _isArray["default"];
  var _isIterable = _interopRequireDefault(require_isIterable());
  exports.isIterable = _isIterable["default"];
  var _isEmptyArray = _interopRequireDefault(require_isEmptyArray());
  exports.isEmptyArray = _isEmptyArray["default"];
  var _isNotArray = _interopRequireDefault(require_isNotArray());
  exports.isNotArray = _isNotArray["default"];
  var _isNonEmptyArray = _interopRequireDefault(require_isNonEmptyArray());
  exports.isNonEmptyArray = _isNonEmptyArray["default"];
  var _isBoolean = _interopRequireDefault(require_isBoolean());
  exports.isBoolean = _isBoolean["default"];
  var _isNotBoolean = _interopRequireDefault(require_isNotBoolean());
  exports.isNotBoolean = _isNotBoolean["default"];
  var _isNilOrEmpty = _interopRequireDefault(require_isNilOrEmpty());
  exports.isNilOrEmpty = _isNilOrEmpty["default"];
  var _isString = _interopRequireDefault(require_isString());
  exports.isString = _isString["default"];
  var _isEmptyString = _interopRequireDefault(require_isEmptyString());
  exports.isEmptyString = _isEmptyString["default"];
  var _isNotString = _interopRequireDefault(require_isNotString());
  exports.isNotString = _isNotString["default"];
  var _isNonEmptyString = _interopRequireDefault(require_isNonEmptyString());
  exports.isNonEmptyString = _isNonEmptyString["default"];
  var _isArrayLike = _interopRequireDefault(require_isArrayLike());
  exports.isArrayLike = _isArrayLike["default"];
  var _isNotArrayLike = _interopRequireDefault(require_isNotArrayLike());
  exports.isNotArrayLike = _isNotArrayLike["default"];
  var _isGeneratorFunction = _interopRequireDefault(require_isGeneratorFunction());
  exports.isGeneratorFunction = _isGeneratorFunction["default"];
  var _isNotGeneratorFunction = _interopRequireDefault(require_isNotGeneratorFunction());
  exports.isNotGeneratorFunction = _isNotGeneratorFunction["default"];
  var _isAsyncFunction = _interopRequireDefault(require_isAsyncFunction());
  exports.isAsyncFunction = _isAsyncFunction["default"];
  var _isNotAsyncFunction = _interopRequireDefault(require_isNotAsyncFunction());
  exports.isNotAsyncFunction = _isNotAsyncFunction["default"];
  var _isFunction = _interopRequireDefault(require_isFunction());
  exports.isFunction = _isFunction["default"];
  var _isNotFunction = _interopRequireDefault(require_isNotFunction());
  exports.isNotFunction = _isNotFunction["default"];
  var _isObj = _interopRequireDefault(require_isObj());
  exports.isObj = _isObj["default"];
  exports.isObject = _isObj["default"];
  var _isNotObj = _interopRequireDefault(require_isNotObj());
  exports.isNotObj = _isNotObj["default"];
  exports.isNotObject = _isNotObj["default"];
  var _isObjLike = _interopRequireDefault(require_isObjLike());
  exports.isObjLike = _isObjLike["default"];
  exports.isObjectLike = _isObjLike["default"];
  var _isNotObjLike = _interopRequireDefault(require_isNotObjLike());
  exports.isNotObjLike = _isNotObjLike["default"];
  exports.isNotObjectLike = _isNotObjLike["default"];
  var _isPlainObj = _interopRequireDefault(require_isPlainObj());
  exports.isPlainObj = _isPlainObj["default"];
  exports.isPlainObject = _isPlainObj["default"];
  var _isNotPlainObj = _interopRequireDefault(require_isNotPlainObj());
  exports.isNotPlainObj = _isNotPlainObj["default"];
  exports.isNotPlainObject = _isNotPlainObj["default"];
  var _isDate = _interopRequireDefault(require_isDate());
  exports.isDate = _isDate["default"];
  var _isNotDate = _interopRequireDefault(require_isNotDate());
  exports.isNotDate = _isNotDate["default"];
  var _isValidDate = _interopRequireDefault(require_isValidDate());
  exports.isValidDate = _isValidDate["default"];
  var _isNotValidDate = _interopRequireDefault(require_isNotValidDate());
  exports.isNotValidDate = _isNotValidDate["default"];
  exports.isInvalidDate = _isNotValidDate["default"];
  var _isNumber = _interopRequireDefault(require_isNumber());
  exports.isNumber = _isNumber["default"];
  var _isNotNumber = _interopRequireDefault(require_isNotNumber());
  exports.isNotNumber = _isNotNumber["default"];
  var _isPositive = _interopRequireDefault(require_isPositive());
  exports.isPositive = _isPositive["default"];
  var _isNegative = _interopRequireDefault(require_isNegative());
  exports.isNegative = _isNegative["default"];
  var _isPositiveZero = _interopRequireDefault(require_isPositiveZero());
  exports.isPositiveZero = _isPositiveZero["default"];
  var _isNegativeZero = _interopRequireDefault(require_isNegativeZero());
  exports.isNegativeZero = _isNegativeZero["default"];
  var _isNotNilOrEmpty = _interopRequireDefault(require_isNotNilOrEmpty());
  exports.isNotNilOrEmpty = _isNotNilOrEmpty["default"];
  var _isNonPositive = _interopRequireDefault(require_isNonPositive());
  exports.isNonPositive = _isNonPositive["default"];
  var _isNonNegative = _interopRequireDefault(require_isNonNegative());
  exports.isNonNegative = _isNonNegative["default"];
  var _isMap = _interopRequireDefault(require_isMap());
  exports.isMap = _isMap["default"];
  var _isNotMap = _interopRequireDefault(require_isNotMap());
  exports.isNotMap = _isNotMap["default"];
  var _isNaN = _interopRequireDefault(require_isNaN());
  exports.isNaN = _isNaN["default"];
  var _isNotNaN = _interopRequireDefault(require_isNotNaN());
  exports.isNotNaN = _isNotNaN["default"];
  var _isFinite = _interopRequireDefault(require_isFinite());
  exports.isFinite = _isFinite["default"];
  var _isNotFinite = _interopRequireDefault(require_isNotFinite());
  exports.isNotFinite = _isNotFinite["default"];
  var _isInteger = _interopRequireDefault(require_isInteger());
  exports.isInteger = _isInteger["default"];
  var _isInteger2 = _interopRequireDefault(require_isInteger32());
  exports.isInteger32 = _isInteger2["default"];
  exports.isInt32 = _isInteger2["default"];
  var _isUinteger = _interopRequireDefault(require_isUinteger32());
  exports.isUinteger32 = _isUinteger["default"];
  exports.isUint32 = _isUinteger["default"];
  var _isNotInteger = _interopRequireDefault(require_isNotInteger());
  exports.isNotInteger = _isNotInteger["default"];
  var _isBigInt = _interopRequireDefault(require_isBigInt());
  exports.isBigInt = _isBigInt["default"];
  var _isFloat = _interopRequireDefault(require_isFloat());
  exports.isFloat = _isFloat["default"];
  var _isNotFloat = _interopRequireDefault(require_isNotFloat());
  exports.isNotFloat = _isNotFloat["default"];
  var _isValidNumber = _interopRequireDefault(require_isValidNumber());
  exports.isValidNumber = _isValidNumber["default"];
  var _isNotValidNumber = _interopRequireDefault(require_isNotValidNumber());
  exports.isNotValidNumber = _isNotValidNumber["default"];
  var _isOdd = _interopRequireDefault(require_isOdd());
  exports.isOdd = _isOdd["default"];
  var _isEven = _interopRequireDefault(require_isEven());
  exports.isEven = _isEven["default"];
  var _isPair = _interopRequireDefault(require_isPair());
  exports.isPair = _isPair["default"];
  var _isNotPair = _interopRequireDefault(require_isNotPair());
  exports.isNotPair = _isNotPair["default"];
  var _isThenable = _interopRequireDefault(require_isThenable());
  exports.isThenable = _isThenable["default"];
  var _isPromise = _interopRequireDefault(require_isPromise());
  exports.isPromise = _isPromise["default"];
  var _isTrue = _interopRequireDefault(require_isTrue());
  exports.isTrue = _isTrue["default"];
  var _isFalse = _interopRequireDefault(require_isFalse());
  exports.isFalse = _isFalse["default"];
  var _isTruthy = _interopRequireDefault(require_isTruthy());
  exports.isTruthy = _isTruthy["default"];
  var _isFalsy = _interopRequireDefault(require_isFalsy());
  exports.isFalsy = _isFalsy["default"];
  var _isRegExp = _interopRequireDefault(require_isRegExp());
  exports.isRegExp = _isRegExp["default"];
  var _isNotRegExp = _interopRequireDefault(require_isNotRegExp());
  exports.isNotRegExp = _isNotRegExp["default"];
  var _isSet = _interopRequireDefault(require_isSet());
  exports.isSet = _isSet["default"];
  var _isNotSet = _interopRequireDefault(require_isNotSet());
  exports.isNotSet = _isNotSet["default"];
  var _isSparseArray = _interopRequireDefault(require_isSparseArray());
  exports.isSparseArray = _isSparseArray["default"];
  var _isSymbol = _interopRequireDefault(require_isSymbol());
  exports.isSymbol = _isSymbol["default"];
  var _isSafeInteger = _interopRequireDefault(require_isSafeInteger());
  exports.isSafeInteger = _isSafeInteger["default"];
  var _isIndexed = _interopRequireDefault(require_isIndexed());
  exports.isIndexed = _isIndexed["default"];
  var _isError = _interopRequireDefault(require_isError());
  exports.isError = _isError["default"];
  var _isNaturalNumber = _interopRequireDefault(require_isNaturalNumber());
  exports.isNaturalNumber = _isNaturalNumber["default"];
  var _isPrimitive = _interopRequireDefault(require_isPrimitive());
  exports.isPrimitive = _isPrimitive["default"];
  var _isNotPrimitive = _interopRequireDefault(require_isNotPrimitive());
  exports.isNotPrimitive = _isNotPrimitive["default"];
  var _isSentinelValue = _interopRequireDefault(require_isSentinelValue());
  exports.isSentinelValue = _isSentinelValue["default"];
  var _isBlank = _interopRequireDefault(require_isBlank());
  exports.isBlank = _isBlank["default"];
  var _stubUndefined = _interopRequireDefault(require_stubUndefined());
  exports.stubUndefined = _stubUndefined["default"];
  var _stubNull = _interopRequireDefault(require_stubNull());
  exports.stubNull = _stubNull["default"];
  var _stubObj = _interopRequireDefault(require_stubObj());
  exports.stubObj = _stubObj["default"];
  exports.stubObject = _stubObj["default"];
  var _stubString = _interopRequireDefault(require_stubString());
  exports.stubString = _stubString["default"];
  var _stubArray = _interopRequireDefault(require_stubArray());
  exports.stubArray = _stubArray["default"];
  var _noop = _interopRequireDefault(require_noop());
  exports.noop = _noop["default"];
  var _liftFN = _interopRequireDefault(require_liftFN());
  exports.liftFN = _liftFN["default"];
  var _liftF = _interopRequireDefault(require_liftF());
  exports.liftF = _liftF["default"];
  var _cata = _interopRequireDefault(require_cata());
  exports.cata = _cata["default"];
  var _weave = _interopRequireDefault(require_weave());
  exports.weave = _weave["default"];
  var _weaveLazy = _interopRequireDefault(require_weaveLazy());
  exports.weaveLazy = _weaveLazy["default"];
  var _curryRightN = _interopRequireDefault(require_curryRightN());
  exports.curryRightN = _curryRightN["default"];
  var _curryRight = _interopRequireDefault(require_curryRight());
  exports.curryRight = _curryRight["default"];
  var _allP = _interopRequireDefault(require_allP());
  exports.allP = _allP["default"];
  var _catchP = _interopRequireDefault(require_catchP());
  exports.catchP = _catchP["default"];
  var _noneP = _interopRequireDefault(require_noneP());
  exports.noneP = _noneP["default"];
  var _resolveP = _interopRequireDefault(require_resolveP());
  exports.resolveP = _resolveP["default"];
  var _rejectP = _interopRequireDefault(require_rejectP());
  exports.rejectP = _rejectP["default"];
  var _delayP = _interopRequireDefault(require_delayP());
  exports.delayP = _delayP["default"];
  var _thenCatchP = _interopRequireDefault(require_thenCatchP());
  exports.thenCatchP = _thenCatchP["default"];
  var _allSettledP = _interopRequireDefault(require_allSettledP());
  exports.allSettledP = _allSettledP["default"];
  var _Y = _interopRequireDefault(require_Y());
  exports.Y = _Y["default"];
  var _seq = _interopRequireDefault(require_seq3());
  exports.seq = _seq["default"];
  exports.sequencing = _seq["default"];
  var _dispatch = _interopRequireDefault(require_dispatch());
  exports.dispatch = _dispatch["default"];
  var _async = _interopRequireDefault(require_async());
  exports.async = _async["default"];
  var _anyP = _interopRequireDefault(require_anyP());
  exports.anyP = _anyP["default"];
  exports.firstP = _anyP["default"];
  var _lastP = _interopRequireDefault(require_lastP());
  exports.lastP = _lastP["default"];
  var _fnull = _interopRequireDefault(require_fnull());
  exports.fnull = _fnull["default"];
  var _mapIndexed = _interopRequireDefault(require_mapIndexed());
  exports.mapIndexed = _mapIndexed["default"];
  var _reduceIndexed = _interopRequireDefault(require_reduceIndexed());
  exports.reduceIndexed = _reduceIndexed["default"];
  var _filterIndexed = _interopRequireDefault(require_filterIndexed());
  exports.filterIndexed = _filterIndexed["default"];
  var _pickIndexes = _interopRequireDefault(require_pickIndexes());
  exports.pickIndexes = _pickIndexes["default"];
  var _list = _interopRequireDefault(require_list());
  exports.list = _list["default"];
  var _ensureArray = _interopRequireDefault(require_ensureArray());
  exports.ensureArray = _ensureArray["default"];
  var _concatAll = _interopRequireDefault(require_concatAll());
  exports.concatAll = _concatAll["default"];
  var _concatRight = _interopRequireDefault(require_concatRight());
  exports.concatRight = _concatRight["default"];
  var _reduceP = _interopRequireDefault(require_reduceP());
  exports.reduceP = _reduceP["default"];
  var _reduceRightP = _interopRequireDefault(require_reduceRightP());
  exports.reduceRightP = _reduceRightP["default"];
  var _sliceFrom = _interopRequireDefault(require_sliceFrom());
  exports.sliceFrom = _sliceFrom["default"];
  var _sliceTo = _interopRequireDefault(require_sliceTo());
  exports.sliceTo = _sliceTo["default"];
  var _omitIndexes = _interopRequireDefault(require_omitIndexes());
  exports.omitIndexes = _omitIndexes["default"];
  var _compact = _interopRequireDefault(require_compact());
  exports.compact = _compact["default"];
  var _appendFlipped = _interopRequireDefault(require_appendFlipped());
  exports.appendFlipped = _appendFlipped["default"];
  var _included = _interopRequireDefault(require_included());
  exports.included = _included["default"];
  var _move = _interopRequireDefault(require_move2());
  exports.move = _move["default"];
  var _lengthGt = _interopRequireDefault(require_lengthGt());
  exports.lengthGt = _lengthGt["default"];
  var _lengthLt = _interopRequireDefault(require_lengthLt());
  exports.lengthLt = _lengthLt["default"];
  var _lengthGte = _interopRequireDefault(require_lengthGte());
  exports.lengthGte = _lengthGte["default"];
  var _lengthLte = _interopRequireDefault(require_lengthLte());
  exports.lengthLte = _lengthLte["default"];
  var _lengthEq = _interopRequireDefault(require_lengthEq());
  exports.lengthEq = _lengthEq["default"];
  var _lengthNotEq = _interopRequireDefault(require_lengthNotEq());
  exports.lengthNotEq = _lengthNotEq["default"];
  var _allEqual = _interopRequireDefault(require_allEqual());
  exports.allEqual = _allEqual["default"];
  var _repeatStr = _interopRequireDefault(require_repeatStr());
  exports.repeatStr = _repeatStr["default"];
  var _allIdentical = _interopRequireDefault(require_allIdentical());
  exports.allIdentical = _allIdentical["default"];
  var _allIdenticalTo = _interopRequireDefault(require_allIdenticalTo());
  exports.allIdenticalTo = _allIdenticalTo["default"];
  var _allEqualTo = _interopRequireDefault(require_allEqualTo());
  exports.allEqualTo = _allEqualTo["default"];
  var _flattenDepth = _interopRequireDefault(require_flattenDepth());
  exports.flattenDepth = _flattenDepth["default"];
  var _toArray = _interopRequireDefault(require_toArray());
  exports.toArray = _toArray["default"];
  var _allUnique = _interopRequireDefault(require_allUnique());
  exports.allUnique = _allUnique["default"];
  var _notAllUnique = _interopRequireDefault(require_notAllUnique());
  exports.notAllUnique = _notAllUnique["default"];
  var _sortByProps = _interopRequireDefault(require_sortByProps());
  exports.sortByProps = _sortByProps["default"];
  var _sortByProp = _interopRequireDefault(require_sortByProp());
  exports.sortByProp = _sortByProp["default"];
  var _sortByPaths = _interopRequireDefault(require_sortByPaths());
  exports.sortByPaths = _sortByPaths["default"];
  var _skipTake = _interopRequireDefault(require_skipTake());
  exports.skipTake = _skipTake["default"];
  var _rangeStep = _interopRequireDefault(require_rangeStep());
  exports.rangeStep = _rangeStep["default"];
  var _findOr = _interopRequireDefault(require_findOr());
  exports.findOr = _findOr["default"];
  var _invoke = _interopRequireDefault(require_invoke());
  exports.invoke = _invoke["default"];
  var _invokeArgs = _interopRequireDefault(require_invokeArgs());
  exports.invokeArgs = _invokeArgs["default"];
  var _paths = _interopRequireDefault(require_paths2());
  exports.paths = _paths["default"];
  var _renameKey = _interopRequireDefault(require_renameKey());
  exports.renameKey = _renameKey["default"];
  var _renameKeys = _interopRequireDefault(require_renameKeys());
  exports.renameKeys = _renameKeys["default"];
  var _renameKeysWith = _interopRequireDefault(require_renameKeysWith());
  exports.renameKeysWith = _renameKeysWith["default"];
  var _renameKeyWith = _interopRequireDefault(require_renameKeyWith());
  exports.renameKeyWith = _renameKeyWith["default"];
  var _copyKeys = _interopRequireDefault(require_copyKeys());
  exports.copyKeys = _copyKeys["default"];
  var _mergeProps = _interopRequireDefault(require_mergeProps());
  exports.mergeProps = _mergeProps["default"];
  var _mergePaths = _interopRequireDefault(require_mergePaths());
  exports.mergePaths = _mergePaths["default"];
  var _mergeProp = _interopRequireDefault(require_mergeProp());
  exports.mergeProp = _mergeProp["default"];
  var _mergePath = _interopRequireDefault(require_mergePath());
  exports.mergePath = _mergePath["default"];
  var _omitBy = _interopRequireDefault(require_omitBy());
  exports.omitBy = _omitBy["default"];
  var _pathOrLazy = _interopRequireDefault(require_pathOrLazy());
  exports.pathOrLazy = _pathOrLazy["default"];
  var _viewOr = _interopRequireDefault(require_viewOr());
  exports.viewOr = _viewOr["default"];
  var _spreadProp = _interopRequireDefault(require_spreadProp());
  exports.spreadProp = _spreadProp["default"];
  var _spreadPath = _interopRequireDefault(require_spreadPath());
  exports.spreadPath = _spreadPath["default"];
  var _flattenProp = _interopRequireDefault(require_flattenProp());
  exports.flattenProp = _flattenProp["default"];
  var _flattenPath = _interopRequireDefault(require_flattenPath());
  exports.flattenPath = _flattenPath["default"];
  var _unzipObjWith = _interopRequireDefault(require_unzipObjWith());
  exports.unzipObjWith = _unzipObjWith["default"];
  var _zipObjWith = _interopRequireDefault(require_zipObjWith());
  exports.zipObjWith = _zipObjWith["default"];
  var _isPrototypeOf = _interopRequireDefault(require_isPrototypeOf());
  exports.isPrototypeOf = _isPrototypeOf["default"];
  var _lensEq = _interopRequireDefault(require_lensEq());
  exports.lensEq = _lensEq["default"];
  var _lensNotEq = _interopRequireDefault(require_lensNotEq());
  exports.lensNotEq = _lensNotEq["default"];
  var _lensSatisfies = _interopRequireDefault(require_lensSatisfies());
  exports.lensSatisfies = _lensSatisfies["default"];
  var _lensNotSatisfy = _interopRequireDefault(require_lensNotSatisfy());
  exports.lensNotSatisfy = _lensNotSatisfy["default"];
  var _lensTraverse = _interopRequireDefault(require_lensTraverse());
  exports.lensTraverse = _lensTraverse["default"];
  var _lensIso = _interopRequireDefault(require_lensIso());
  exports.lensIso = _lensIso["default"];
  var _propNotEq = _interopRequireDefault(require_propNotEq());
  exports.propNotEq = _propNotEq["default"];
  var _pathNotEq = _interopRequireDefault(require_pathNotEq());
  exports.pathNotEq = _pathNotEq["default"];
  var _inRange = _interopRequireDefault(require_inRange());
  exports.inRange = _inRange["default"];
  var _notEqual = _interopRequireDefault(require_notEqual());
  exports.notEqual = _notEqual["default"];
  var _overlaps = _interopRequireDefault(require_overlaps());
  exports.overlaps = _overlaps["default"];
  var _isNotEmpty = _interopRequireDefault(require_isNotEmpty());
  exports.isNotEmpty = _isNotEmpty["default"];
  var _defaultWhen = _interopRequireDefault(require_defaultWhen());
  exports.defaultWhen = _defaultWhen["default"];
  var _notBoth = _interopRequireDefault(require_notBoth());
  exports.notBoth = _notBoth["default"];
  var _nand = _interopRequireDefault(require_nand());
  exports.nand = _nand["default"];
  var _neither = _interopRequireDefault(require_neither());
  exports.neither = _neither["default"];
  var _nor = _interopRequireDefault(require_nor());
  exports.nor = _nor["default"];
  var _notAllPass = _interopRequireDefault(require_notAllPass());
  exports.notAllPass = _notAllPass["default"];
  var _nonePass = _interopRequireDefault(require_nonePass());
  exports.nonePass = _nonePass["default"];
  var _argsPass = _interopRequireDefault(require_argsPass());
  exports.argsPass = _argsPass["default"];
  var _dropArgs = _interopRequireDefault(require_dropArgs());
  exports.dropArgs = _dropArgs["default"];
  var _round = _interopRequireDefault(require_round());
  exports.round = _round["default"];
  var _ceil = _interopRequireDefault(require_ceil());
  exports.ceil = _ceil["default"];
  var _divideNum = _interopRequireDefault(require_divideNum());
  exports.divideNum = _divideNum["default"];
  var _floor = _interopRequireDefault(require_floor());
  exports.floor = _floor["default"];
  var _trunc = _interopRequireDefault(require_trunc());
  exports.trunc = _trunc["default"];
  var _sign = _interopRequireDefault(require_sign());
  exports.sign = _sign["default"];
  var _subtractNum = _interopRequireDefault(require_subtractNum());
  exports.subtractNum = _subtractNum["default"];
  var _toInteger = _interopRequireDefault(require_toInteger32());
  exports.toInteger32 = _toInteger["default"];
  exports.toInt32 = _toInteger["default"];
  var _toUinteger = _interopRequireDefault(require_toUinteger32());
  exports.toUinteger32 = _toUinteger["default"];
  exports.toUint32 = _toUinteger["default"];
  var _toNumber = _interopRequireDefault(require_toNumber());
  exports.toNumber = _toNumber["default"];
  var _replaceAll = _interopRequireDefault(require_replaceAll());
  exports.replaceAll = _replaceAll["default"];
  var _escapeRegExp = _interopRequireDefault(require_escapeRegExp());
  exports.escapeRegExp = _escapeRegExp["default"];
  var _trimStart = _interopRequireDefault(require_trimStart());
  exports.trimStart = _trimStart["default"];
  exports.trimLeft = _trimStart["default"];
  var _trimEnd = _interopRequireDefault(require_trimEnd());
  exports.trimEnd = _trimEnd["default"];
  exports.trimRight = _trimEnd["default"];
  var _trimCharsEnd = _interopRequireDefault(require_trimCharsEnd());
  exports.trimCharsEnd = _trimCharsEnd["default"];
  var _trimCharsStart = _interopRequireDefault(require_trimCharsStart());
  exports.trimCharsStart = _trimCharsStart["default"];
  var _padCharsStart = _interopRequireDefault(require_padCharsStart());
  exports.padCharsStart = _padCharsStart["default"];
  var _padCharsEnd = _interopRequireDefault(require_padCharsEnd());
  exports.padCharsEnd = _padCharsEnd["default"];
  var _padEnd = _interopRequireDefault(require_padEnd());
  exports.padEnd = _padEnd["default"];
  var _padStart = _interopRequireDefault(require_padStart());
  exports.padStart = _padStart["default"];
  var _Identity = _interopRequireDefault(require_Identity());
  exports.Identity = _Identity["default"];
});

// node_modules/core-js-pure/internals/is-regexp.js
var require_is_regexp = __commonJS((exports, module) => {
  var isObject = require_is_object();
  var classof = require_classof_raw();
  var wellKnownSymbol = require_well_known_symbol();
  var MATCH = wellKnownSymbol("match");
  module.exports = function(it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) === "RegExp");
  };
});

// node_modules/core-js-pure/internals/regexp-flags.js
var require_regexp_flags = __commonJS((exports, module) => {
  var anObject = require_an_object();
  module.exports = function() {
    var that = anObject(this);
    var result = "";
    if (that.hasIndices)
      result += "d";
    if (that.global)
      result += "g";
    if (that.ignoreCase)
      result += "i";
    if (that.multiline)
      result += "m";
    if (that.dotAll)
      result += "s";
    if (that.unicode)
      result += "u";
    if (that.unicodeSets)
      result += "v";
    if (that.sticky)
      result += "y";
    return result;
  };
});

// node_modules/core-js-pure/internals/regexp-get-flags.js
var require_regexp_get_flags = __commonJS((exports, module) => {
  var call = require_function_call();
  var hasOwn = require_has_own_property();
  var isPrototypeOf = require_object_is_prototype_of();
  var regExpFlags = require_regexp_flags();
  var RegExpPrototype = RegExp.prototype;
  module.exports = function(R) {
    var flags = R.flags;
    return flags === undefined && !("flags" in RegExpPrototype) && !hasOwn(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
  };
});

// node_modules/core-js-pure/internals/get-substitution.js
var require_get_substitution = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var toObject = require_to_object();
  var floor = Math.floor;
  var charAt = uncurryThis("".charAt);
  var replace = uncurryThis("".replace);
  var stringSlice = uncurryThis("".slice);
  var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
  module.exports = function(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return replace(replacement, symbols, function(match, ch) {
      var capture;
      switch (charAt(ch, 0)) {
        case "$":
          return "$";
        case "&":
          return matched;
        case "`":
          return stringSlice(str, 0, position);
        case "'":
          return stringSlice(str, tailPos);
        case "<":
          capture = namedCaptures[stringSlice(ch, 1, -1)];
          break;
        default:
          var n = +ch;
          if (n === 0)
            return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0)
              return match;
            if (f <= m)
              return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? "" : capture;
    });
  };
});

// node_modules/core-js-pure/modules/es.string.replace-all.js
var require_es_string_replace_all = __commonJS(() => {
  var $ = require_export();
  var call = require_function_call();
  var uncurryThis = require_function_uncurry_this();
  var requireObjectCoercible = require_require_object_coercible();
  var isCallable = require_is_callable();
  var isNullOrUndefined = require_is_null_or_undefined();
  var isRegExp = require_is_regexp();
  var toString = require_to_string();
  var getMethod = require_get_method();
  var getRegExpFlags = require_regexp_get_flags();
  var getSubstitution = require_get_substitution();
  var wellKnownSymbol = require_well_known_symbol();
  var IS_PURE = require_is_pure();
  var REPLACE = wellKnownSymbol("replace");
  var $TypeError = TypeError;
  var indexOf = uncurryThis("".indexOf);
  var replace = uncurryThis("".replace);
  var stringSlice = uncurryThis("".slice);
  var max = Math.max;
  var stringIndexOf = function(string, searchValue, fromIndex) {
    if (fromIndex > string.length)
      return -1;
    if (searchValue === "")
      return fromIndex;
    return indexOf(string, searchValue, fromIndex);
  };
  $({ target: "String", proto: true }, {
    replaceAll: function replaceAll(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
      var position = 0;
      var endOfLastMatch = 0;
      var result = "";
      if (!isNullOrUndefined(searchValue)) {
        IS_REG_EXP = isRegExp(searchValue);
        if (IS_REG_EXP) {
          flags = toString(requireObjectCoercible(getRegExpFlags(searchValue)));
          if (!~indexOf(flags, "g"))
            throw $TypeError("`.replaceAll` does not allow non-global regexes");
        }
        replacer = getMethod(searchValue, REPLACE);
        if (replacer) {
          return call(replacer, searchValue, O, replaceValue);
        } else if (IS_PURE && IS_REG_EXP) {
          return replace(toString(O), searchValue, replaceValue);
        }
      }
      string = toString(O);
      searchString = toString(searchValue);
      functionalReplace = isCallable(replaceValue);
      if (!functionalReplace)
        replaceValue = toString(replaceValue);
      searchLength = searchString.length;
      advanceBy = max(1, searchLength);
      position = stringIndexOf(string, searchString, 0);
      while (position !== -1) {
        replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);
        result += stringSlice(string, endOfLastMatch, position) + replacement;
        endOfLastMatch = position + searchLength;
        position = stringIndexOf(string, searchString, position + advanceBy);
      }
      if (endOfLastMatch < string.length) {
        result += stringSlice(string, endOfLastMatch);
      }
      return result;
    }
  });
});

// node_modules/core-js-pure/modules/esnext.string.replace-all.js
var require_esnext_string_replace_all = __commonJS(() => {
  require_es_string_replace_all();
});

// node_modules/core-js-pure/modules/es.regexp.exec.js
var exports_es_regexp_exec = {};
var init_es_regexp_exec = __esm(() => {
});

// node_modules/core-js-pure/modules/es.string.replace.js
var exports_es_string_replace = {};
var init_es_string_replace = __esm(() => {
});

// node_modules/core-js-pure/internals/entry-virtual.js
var require_entry_virtual = __commonJS((exports, module) => {
  var path = require_path();
  module.exports = function(CONSTRUCTOR) {
    return path[CONSTRUCTOR + "Prototype"];
  };
});

// node_modules/core-js-pure/es/string/virtual/replace-all.js
var require_replace_all = __commonJS((exports, module) => {
  init_es_regexp_exec();
  init_es_string_replace();
  require_es_string_replace_all();
  var entryVirtual = require_entry_virtual();
  module.exports = entryVirtual("String").replaceAll;
});

// node_modules/core-js-pure/es/instance/replace-all.js
var require_replace_all2 = __commonJS((exports, module) => {
  var isPrototypeOf = require_object_is_prototype_of();
  var method = require_replace_all();
  var StringPrototype = String.prototype;
  module.exports = function(it) {
    var own = it.replaceAll;
    return typeof it == "string" || it === StringPrototype || isPrototypeOf(StringPrototype, it) && own === StringPrototype.replaceAll ? method : own;
  };
});

// node_modules/core-js-pure/stable/instance/replace-all.js
var require_replace_all3 = __commonJS((exports, module) => {
  var parent = require_replace_all2();
  module.exports = parent;
});

// node_modules/core-js-pure/actual/instance/replace-all.js
var require_replace_all4 = __commonJS((exports, module) => {
  var parent = require_replace_all3();
  module.exports = parent;
});

// node_modules/core-js-pure/full/instance/replace-all.js
var require_replace_all5 = __commonJS((exports, module) => {
  require_esnext_string_replace_all();
  var parent = require_replace_all4();
  module.exports = parent;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/url.cjs
var require_url = __commonJS((exports) => {
  var _replaceAllInstanceProperty = require_replace_all5();
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.unsanitize = exports.toFileSystemPath = exports.stripHash = exports.sanitize = exports.resolve = exports.isURI = exports.isHttpUrl = exports.isFileSystemPath = exports.hasProtocol = exports.getProtocol = exports.getHash = exports.getExtension = exports.fromFileSystemPath = exports.cwd = undefined;
  var _process = _interopRequireDefault(__require("process"));
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var isWindows = () => (0, _ramda.pathSatisfies)((0, _ramda.test)(/^win/), ["platform"], _process.default);
  var getProtocol = (url) => {
    try {
      const parsedUrl = new URL(url);
      return (0, _ramdaAdjunct.trimCharsEnd)(":", parsedUrl.protocol);
    } catch {
      return;
    }
  };
  exports.getProtocol = getProtocol;
  var hasProtocol = (0, _ramda.pipe)(getProtocol, _ramdaAdjunct.isNotUndefined);
  exports.hasProtocol = hasProtocol;
  var getExtension = (url) => {
    const lastDotPosition = url.lastIndexOf(".");
    if (lastDotPosition >= 0) {
      return url.substr(lastDotPosition).toLowerCase();
    }
    return "";
  };
  exports.getExtension = getExtension;
  var isFileSystemPath = (uri) => {
    if (_process.default.browser) {
      return false;
    }
    const protocol = getProtocol(uri);
    return (0, _ramdaAdjunct.isUndefined)(protocol) || protocol === "file" || /^[a-zA-Z]$/.test(protocol);
  };
  exports.isFileSystemPath = isFileSystemPath;
  var isHttpUrl = (url) => {
    const protocol = getProtocol(url);
    return protocol === "http" || protocol === "https";
  };
  exports.isHttpUrl = isHttpUrl;
  var isURI = (uri) => {
    try {
      return new URL(uri) && true;
    } catch {
      return false;
    }
  };
  exports.isURI = isURI;
  var toFileSystemPath = (uri, options) => {
    const urlDecodePatterns = [/%23/g, "#", /%24/g, "$", /%26/g, "&", /%2C/g, ",", /%40/g, "@"];
    const keepFileProtocol = (0, _ramda.propOr)(false, "keepFileProtocol", options);
    const isWindowsPredicate = (0, _ramda.propOr)(isWindows, "isWindows", options);
    let path = decodeURI(uri);
    for (let i = 0;i < urlDecodePatterns.length; i += 2) {
      path = path.replace(urlDecodePatterns[i], urlDecodePatterns[i + 1]);
    }
    let isFileUrl = path.substr(0, 7).toLowerCase() === "file://";
    if (isFileUrl) {
      path = path[7] === "/" ? path.substr(8) : path.substr(7);
      if (isWindowsPredicate() && path[1] === "/") {
        path = `${path[0]}:${path.substr(1)}`;
      }
      if (keepFileProtocol) {
        path = `file:///${path}`;
      } else {
        isFileUrl = false;
        path = isWindowsPredicate() ? path : `/${path}`;
      }
    }
    if (isWindowsPredicate() && !isFileUrl) {
      path = (0, _replaceAllInstanceProperty(_ramdaAdjunct))("/", "\\", path);
      if (path.substr(1, 2) === ":\\") {
        path = path[0].toUpperCase() + path.substr(1);
      }
    }
    return path;
  };
  exports.toFileSystemPath = toFileSystemPath;
  var fromFileSystemPath = (uri) => {
    const urlEncodePatterns = [/\?/g, "%3F", /#/g, "%23"];
    let path = uri;
    if (isWindows()) {
      path = path.replace(/\\/g, "/");
    }
    path = encodeURI(path);
    for (let i = 0;i < urlEncodePatterns.length; i += 2) {
      path = path.replace(urlEncodePatterns[i], urlEncodePatterns[i + 1]);
    }
    return path;
  };
  exports.fromFileSystemPath = fromFileSystemPath;
  var getHash = (uri) => {
    const hashIndex = uri.indexOf("#");
    if (hashIndex !== -1) {
      return uri.substr(hashIndex);
    }
    return "#";
  };
  exports.getHash = getHash;
  var stripHash = (uri) => {
    const hashIndex = uri.indexOf("#");
    let hashStrippedUri = uri;
    if (hashIndex >= 0) {
      hashStrippedUri = uri.substr(0, hashIndex);
    }
    return hashStrippedUri;
  };
  exports.stripHash = stripHash;
  var cwd = () => {
    if (_process.default.browser) {
      return stripHash(globalThis.location.href);
    }
    const path = _process.default.cwd();
    const lastChar = (0, _ramda.last)(path);
    if (["/", "\\"].includes(lastChar)) {
      return path;
    }
    return path + (isWindows() ? "\\" : "/");
  };
  exports.cwd = cwd;
  var resolve = (from, to) => {
    const resolvedUrl = new URL(to, new URL(from, "resolve://"));
    if (resolvedUrl.protocol === "resolve:") {
      const {
        pathname,
        search,
        hash
      } = resolvedUrl;
      return pathname + search + hash;
    }
    return resolvedUrl.toString();
  };
  exports.resolve = resolve;
  var sanitize = (uri) => {
    if (isFileSystemPath(uri)) {
      return fromFileSystemPath(toFileSystemPath(uri));
    }
    return encodeURI(decodeURI(uri)).replace(/%5B/g, "[").replace(/%5D/g, "]");
  };
  exports.sanitize = sanitize;
  var unsanitize = (uri) => {
    if (isFileSystemPath(uri)) {
      return toFileSystemPath(uri);
    }
    return decodeURI(uri);
  };
  exports.unsanitize = unsanitize;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/File.cjs
var require_File = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var url = _interopRequireWildcard(require_url());
  var File2 = (0, _stampit.default)({
    props: {
      uri: null,
      mediaType: "text/plain",
      data: null,
      parseResult: null
    },
    init({
      uri = this.uri,
      mediaType = this.mediaType,
      data = this.data,
      parseResult = this.parseResult
    } = {}) {
      this.uri = uri;
      this.mediaType = mediaType;
      this.data = data;
      this.parseResult = parseResult;
    },
    methods: {
      get extension() {
        if ((0, _ramdaAdjunct.isString)(this.uri)) {
          return url.getExtension(this.uri);
        }
        return "";
      },
      toString() {
        if (typeof this.data === "string") {
          return this.data;
        }
        if (this.data instanceof ArrayBuffer || ["ArrayBuffer"].includes((0, _ramda.type)(this.data)) || ArrayBuffer.isView(this.data)) {
          const textDecoder = new TextDecoder("utf-8");
          return textDecoder.decode(this.data);
        }
        return String(this.data);
      }
    }
  });
  var _default = File2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/options/index.cjs
var require_options2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var defaultOptions = {
    parse: {
      mediaType: "text/plain",
      parsers: [],
      parserOpts: {}
    },
    resolve: {
      baseURI: "",
      resolvers: [],
      resolverOpts: {},
      strategies: [],
      external: true,
      maxDepth: Infinity
    },
    dereference: {
      strategies: [],
      refSet: null,
      maxDepth: Infinity
    }
  };
  var _default = defaultOptions;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/options/util.cjs
var require_util9 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.merge = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _url = require_url();
  var baseURILens = (0, _ramda.lens)((0, _ramda.path)(["resolve", "baseURI"]), (0, _ramda.assocPath)(["resolve", "baseURI"]));
  var baseURIDefault = (baseURI) => (0, _ramdaAdjunct.isEmptyString)(baseURI) ? (0, _url.cwd)() : baseURI;
  var merge = (lObj, rObj) => {
    const withoutDefaults = (0, _ramda.mergeDeepRight)(lObj, rObj);
    return (0, _ramda.over)(baseURILens, baseURIDefault, withoutDefaults);
  };
  exports.merge = merge;
});

// node_modules/core-js-pure/internals/own-keys.js
var require_own_keys = __commonJS((exports, module) => {
  var getBuiltIn = require_get_built_in();
  var uncurryThis = require_function_uncurry_this();
  var getOwnPropertyNamesModule = require_object_get_own_property_names();
  var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
  var anObject = require_an_object();
  var concat = uncurryThis([].concat);
  module.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys(it) {
    var keys = getOwnPropertyNamesModule.f(anObject(it));
    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
  };
});

// node_modules/core-js-pure/internals/copy-constructor-properties.js
var require_copy_constructor_properties = __commonJS((exports, module) => {
  var hasOwn = require_has_own_property();
  var ownKeys = require_own_keys();
  var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
  var definePropertyModule = require_object_define_property();
  module.exports = function(target, source, exceptions) {
    var keys = ownKeys(source);
    var defineProperty = definePropertyModule.f;
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    for (var i = 0;i < keys.length; i++) {
      var key = keys[i];
      if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
        defineProperty(target, key, getOwnPropertyDescriptor(source, key));
      }
    }
  };
});

// node_modules/core-js-pure/internals/install-error-cause.js
var require_install_error_cause = __commonJS((exports, module) => {
  var isObject = require_is_object();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  module.exports = function(O, options) {
    if (isObject(options) && ("cause" in options)) {
      createNonEnumerableProperty(O, "cause", options.cause);
    }
  };
});

// node_modules/core-js-pure/internals/error-stack-clear.js
var require_error_stack_clear = __commonJS((exports, module) => {
  var uncurryThis = require_function_uncurry_this();
  var $Error = Error;
  var replace = uncurryThis("".replace);
  var TEST = function(arg) {
    return String($Error(arg).stack);
  }("zxcasd");
  var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
  var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
  module.exports = function(stack, dropEntries) {
    if (IS_V8_OR_CHAKRA_STACK && typeof stack == "string" && !$Error.prepareStackTrace) {
      while (dropEntries--)
        stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, "");
    }
    return stack;
  };
});

// node_modules/core-js-pure/internals/error-stack-installable.js
var require_error_stack_installable = __commonJS((exports, module) => {
  var fails = require_fails();
  var createPropertyDescriptor = require_create_property_descriptor();
  module.exports = !fails(function() {
    var error = Error("a");
    if (!("stack" in error))
      return true;
    Object.defineProperty(error, "stack", createPropertyDescriptor(1, 7));
    return error.stack !== 7;
  });
});

// node_modules/core-js-pure/internals/error-stack-install.js
var require_error_stack_install = __commonJS((exports, module) => {
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var clearErrorStack = require_error_stack_clear();
  var ERROR_STACK_INSTALLABLE = require_error_stack_installable();
  var captureStackTrace = Error.captureStackTrace;
  module.exports = function(error, C, stack, dropEntries) {
    if (ERROR_STACK_INSTALLABLE) {
      if (captureStackTrace)
        captureStackTrace(error, C);
      else
        createNonEnumerableProperty(error, "stack", clearErrorStack(stack, dropEntries));
    }
  };
});

// node_modules/core-js-pure/internals/normalize-string-argument.js
var require_normalize_string_argument = __commonJS((exports, module) => {
  var toString = require_to_string();
  module.exports = function(argument, $default) {
    return argument === undefined ? arguments.length < 2 ? "" : $default : toString(argument);
  };
});

// node_modules/core-js-pure/modules/es.aggregate-error.constructor.js
var require_es_aggregate_error_constructor = __commonJS(() => {
  var $ = require_export();
  var isPrototypeOf = require_object_is_prototype_of();
  var getPrototypeOf = require_object_get_prototype_of();
  var setPrototypeOf = require_object_set_prototype_of();
  var copyConstructorProperties = require_copy_constructor_properties();
  var create = require_object_create();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var createPropertyDescriptor = require_create_property_descriptor();
  var installErrorCause = require_install_error_cause();
  var installErrorStack = require_error_stack_install();
  var iterate = require_iterate();
  var normalizeStringArgument = require_normalize_string_argument();
  var wellKnownSymbol = require_well_known_symbol();
  var TO_STRING_TAG = wellKnownSymbol("toStringTag");
  var $Error = Error;
  var push = [].push;
  var $AggregateError = function AggregateError(errors, message) {
    var isInstance = isPrototypeOf(AggregateErrorPrototype, this);
    var that;
    if (setPrototypeOf) {
      that = setPrototypeOf($Error(), isInstance ? getPrototypeOf(this) : AggregateErrorPrototype);
    } else {
      that = isInstance ? this : create(AggregateErrorPrototype);
      createNonEnumerableProperty(that, TO_STRING_TAG, "Error");
    }
    if (message !== undefined)
      createNonEnumerableProperty(that, "message", normalizeStringArgument(message));
    installErrorStack(that, $AggregateError, that.stack, 1);
    if (arguments.length > 2)
      installErrorCause(that, arguments[2]);
    var errorsArray = [];
    iterate(errors, push, { that: errorsArray });
    createNonEnumerableProperty(that, "errors", errorsArray);
    return that;
  };
  if (setPrototypeOf)
    setPrototypeOf($AggregateError, $Error);
  else
    copyConstructorProperties($AggregateError, $Error, { name: true });
  var AggregateErrorPrototype = $AggregateError.prototype = create($Error.prototype, {
    constructor: createPropertyDescriptor(1, $AggregateError),
    message: createPropertyDescriptor(1, ""),
    name: createPropertyDescriptor(1, "AggregateError")
  });
  $({ global: true, constructor: true, arity: 2 }, {
    AggregateError: $AggregateError
  });
});

// node_modules/core-js-pure/modules/es.aggregate-error.js
var require_es_aggregate_error = __commonJS(() => {
  require_es_aggregate_error_constructor();
});

// node_modules/core-js-pure/modules/esnext.aggregate-error.js
var require_esnext_aggregate_error = __commonJS(() => {
  require_es_aggregate_error();
});

// node_modules/core-js-pure/internals/proxy-accessor.js
var require_proxy_accessor = __commonJS((exports, module) => {
  var defineProperty = require_object_define_property().f;
  module.exports = function(Target, Source, key) {
    (key in Target) || defineProperty(Target, key, {
      configurable: true,
      get: function() {
        return Source[key];
      },
      set: function(it) {
        Source[key] = it;
      }
    });
  };
});

// node_modules/core-js-pure/internals/inherit-if-required.js
var require_inherit_if_required = __commonJS((exports, module) => {
  var isCallable = require_is_callable();
  var isObject = require_is_object();
  var setPrototypeOf = require_object_set_prototype_of();
  module.exports = function($this, dummy, Wrapper) {
    var NewTarget, NewTargetPrototype;
    if (setPrototypeOf && isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype)
      setPrototypeOf($this, NewTargetPrototype);
    return $this;
  };
});

// node_modules/core-js-pure/internals/wrap-error-constructor-with-cause.js
var require_wrap_error_constructor_with_cause = __commonJS((exports, module) => {
  var getBuiltIn = require_get_built_in();
  var hasOwn = require_has_own_property();
  var createNonEnumerableProperty = require_create_non_enumerable_property();
  var isPrototypeOf = require_object_is_prototype_of();
  var setPrototypeOf = require_object_set_prototype_of();
  var copyConstructorProperties = require_copy_constructor_properties();
  var proxyAccessor = require_proxy_accessor();
  var inheritIfRequired = require_inherit_if_required();
  var normalizeStringArgument = require_normalize_string_argument();
  var installErrorCause = require_install_error_cause();
  var installErrorStack = require_error_stack_install();
  var DESCRIPTORS = require_descriptors();
  var IS_PURE = require_is_pure();
  module.exports = function(FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
    var STACK_TRACE_LIMIT = "stackTraceLimit";
    var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
    var path = FULL_NAME.split(".");
    var ERROR_NAME = path[path.length - 1];
    var OriginalError = getBuiltIn.apply(null, path);
    if (!OriginalError)
      return;
    var OriginalErrorPrototype = OriginalError.prototype;
    if (!IS_PURE && hasOwn(OriginalErrorPrototype, "cause"))
      delete OriginalErrorPrototype.cause;
    if (!FORCED)
      return OriginalError;
    var BaseError = getBuiltIn("Error");
    var WrappedError = wrapper(function(a, b) {
      var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, undefined);
      var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError;
      if (message !== undefined)
        createNonEnumerableProperty(result, "message", message);
      installErrorStack(result, WrappedError, result.stack, 2);
      if (this && isPrototypeOf(OriginalErrorPrototype, this))
        inheritIfRequired(result, this, WrappedError);
      if (arguments.length > OPTIONS_POSITION)
        installErrorCause(result, arguments[OPTIONS_POSITION]);
      return result;
    });
    WrappedError.prototype = OriginalErrorPrototype;
    if (ERROR_NAME !== "Error") {
      if (setPrototypeOf)
        setPrototypeOf(WrappedError, BaseError);
      else
        copyConstructorProperties(WrappedError, BaseError, { name: true });
    } else if (DESCRIPTORS && (STACK_TRACE_LIMIT in OriginalError)) {
      proxyAccessor(WrappedError, OriginalError, STACK_TRACE_LIMIT);
      proxyAccessor(WrappedError, OriginalError, "prepareStackTrace");
    }
    copyConstructorProperties(WrappedError, OriginalError);
    if (!IS_PURE)
      try {
        if (OriginalErrorPrototype.name !== ERROR_NAME) {
          createNonEnumerableProperty(OriginalErrorPrototype, "name", ERROR_NAME);
        }
        OriginalErrorPrototype.constructor = WrappedError;
      } catch (error) {
      }
    return WrappedError;
  };
});

// node_modules/core-js-pure/modules/es.error.cause.js
var require_es_error_cause = __commonJS(() => {
  var $ = require_export();
  var global2 = require_global();
  var apply = require_function_apply();
  var wrapErrorConstructorWithCause = require_wrap_error_constructor_with_cause();
  var WEB_ASSEMBLY = "WebAssembly";
  var WebAssembly2 = global2[WEB_ASSEMBLY];
  var FORCED = Error("e", { cause: 7 }).cause !== 7;
  var exportGlobalErrorCauseWrapper = function(ERROR_NAME, wrapper) {
    var O = {};
    O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED);
    $({ global: true, constructor: true, arity: 1, forced: FORCED }, O);
  };
  var exportWebAssemblyErrorCauseWrapper = function(ERROR_NAME, wrapper) {
    if (WebAssembly2 && WebAssembly2[ERROR_NAME]) {
      var O = {};
      O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + "." + ERROR_NAME, wrapper, FORCED);
      $({ target: WEB_ASSEMBLY, stat: true, constructor: true, arity: 1, forced: FORCED }, O);
    }
  };
  exportGlobalErrorCauseWrapper("Error", function(init) {
    return function Error(message) {
      return apply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper("EvalError", function(init) {
    return function EvalError(message) {
      return apply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper("RangeError", function(init) {
    return function RangeError(message) {
      return apply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper("ReferenceError", function(init) {
    return function ReferenceError(message) {
      return apply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper("SyntaxError", function(init) {
    return function SyntaxError(message) {
      return apply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper("TypeError", function(init) {
    return function TypeError(message) {
      return apply(init, this, arguments);
    };
  });
  exportGlobalErrorCauseWrapper("URIError", function(init) {
    return function URIError(message) {
      return apply(init, this, arguments);
    };
  });
  exportWebAssemblyErrorCauseWrapper("CompileError", function(init) {
    return function CompileError(message) {
      return apply(init, this, arguments);
    };
  });
  exportWebAssemblyErrorCauseWrapper("LinkError", function(init) {
    return function LinkError(message) {
      return apply(init, this, arguments);
    };
  });
  exportWebAssemblyErrorCauseWrapper("RuntimeError", function(init) {
    return function RuntimeError(message) {
      return apply(init, this, arguments);
    };
  });
});

// node_modules/core-js-pure/modules/es.aggregate-error.cause.js
var require_es_aggregate_error_cause = __commonJS(() => {
  var $ = require_export();
  var getBuiltIn = require_get_built_in();
  var apply = require_function_apply();
  var fails = require_fails();
  var wrapErrorConstructorWithCause = require_wrap_error_constructor_with_cause();
  var AGGREGATE_ERROR = "AggregateError";
  var $AggregateError = getBuiltIn(AGGREGATE_ERROR);
  var FORCED = !fails(function() {
    return $AggregateError([1]).errors[0] !== 1;
  }) && fails(function() {
    return $AggregateError([1], AGGREGATE_ERROR, { cause: 7 }).cause !== 7;
  });
  $({ global: true, constructor: true, arity: 2, forced: FORCED }, {
    AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function(init) {
      return function AggregateError(errors, message) {
        return apply(init, this, arguments);
      };
    }, FORCED, true)
  });
});

// node_modules/core-js-pure/es/aggregate-error.js
var require_aggregate_error = __commonJS((exports, module) => {
  require_es_error_cause();
  require_es_aggregate_error();
  require_es_aggregate_error_cause();
  require_es_array_iterator();
  require_es_string_iterator();
  var path = require_path();
  module.exports = path.AggregateError;
});

// node_modules/core-js-pure/stable/aggregate-error.js
var require_aggregate_error2 = __commonJS((exports, module) => {
  require_esnext_aggregate_error();
  var parent = require_aggregate_error();
  require_web_dom_collections_iterator();
  module.exports = parent;
});

// node_modules/core-js-pure/actual/aggregate-error.js
var require_aggregate_error3 = __commonJS((exports, module) => {
  var parent = require_aggregate_error2();
  module.exports = parent;
});

// node_modules/core-js-pure/full/aggregate-error.js
var require_aggregate_error4 = __commonJS((exports, module) => {
  require_esnext_aggregate_error();
  var parent = require_aggregate_error3();
  module.exports = parent;
});

// node_modules/@swagger-api/apidom-error/cjs/ApiDOMAggregateError.cjs
var require_ApiDOMAggregateError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _aggregateError = _interopRequireDefault(require_aggregate_error4());
  var _ramdaAdjunct = require_lib6();
  var _ramda = require_src2();

  class ApiDOMAggregateError extends _aggregateError.default {
    constructor(errors, message, options) {
      super(errors, message, options);
      this.name = this.constructor.name;
      if (typeof message === "string") {
        this.message = message;
      }
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error(message).stack;
      }
      if ((0, _ramdaAdjunct.isPlainObject)(options) && (0, _ramda.hasIn)("cause", options) && !(0, _ramda.hasIn)("cause", this)) {
        const {
          cause
        } = options;
        this.cause = cause;
        if (cause instanceof Error && (0, _ramda.hasIn)("stack", cause)) {
          this.stack = `${this.stack}\nCAUSE: ${cause == null ? undefined : cause.stack}`;
        }
      }
    }
  }
  var _default = ApiDOMAggregateError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-error/cjs/ApiDOMError.cjs
var require_ApiDOMError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _ApiDOMAggregateError = _interopRequireDefault(require_ApiDOMAggregateError());

  class ApiDOMError extends Error {
    static [Symbol.hasInstance](instance) {
      return Function.prototype[Symbol.hasInstance].call(ApiDOMError, instance) || Function.prototype[Symbol.hasInstance].call(_ApiDOMAggregateError.default, instance);
    }
    constructor(message, options) {
      super(message, options);
      this.name = this.constructor.name;
      if (typeof message === "string") {
        this.message = message;
      }
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error(message).stack;
      }
      if ((0, _ramdaAdjunct.isPlainObject)(options) && (0, _ramda.hasIn)("cause", options) && !(0, _ramda.hasIn)("cause", this)) {
        const {
          cause
        } = options;
        this.cause = cause;
        if (cause instanceof Error && (0, _ramda.hasIn)("stack", cause)) {
          this.stack = `${this.stack}\nCAUSE: ${cause == null ? undefined : cause.stack}`;
        }
      }
    }
  }
  var _default = ApiDOMError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-error/cjs/ApiDOMStructuredError.cjs
var require_ApiDOMStructuredError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _ApiDOMError = _interopRequireDefault(require_ApiDOMError());

  class ApiDOMStructuredError extends _ApiDOMError.default {
    constructor(message, structuredOptions) {
      super(message, structuredOptions);
      if (typeof structuredOptions !== "undefined") {
        Object.assign(this, (0, _ramda.omit)(["cause"], structuredOptions));
      }
    }
  }
  var _default = ApiDOMStructuredError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-error/cjs/UnsupportedOperationError.cjs
var require_UnsupportedOperationError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ApiDOMError = _interopRequireDefault(require_ApiDOMError());

  class UnsupportedOperationError extends _ApiDOMError.default {
  }
  var _default = UnsupportedOperationError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-error/cjs/NotImplementedError.cjs
var require_NotImplementedError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _UnsupportedOperationError = _interopRequireDefault(require_UnsupportedOperationError());

  class NotImplementedError extends _UnsupportedOperationError.default {
  }
  var _default = NotImplementedError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-error/cjs/index.cjs
var require_cjs2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.UnsupportedOperationError = exports.NotImplementedError = exports.ApiDOMStructuredError = exports.ApiDOMError = exports.ApiDOMAggregateError = undefined;
  var _ApiDOMError = _interopRequireDefault(require_ApiDOMError());
  exports.ApiDOMError = _ApiDOMError.default;
  var _ApiDOMAggregateError = _interopRequireDefault(require_ApiDOMAggregateError());
  exports.ApiDOMAggregateError = _ApiDOMAggregateError.default;
  var _ApiDOMStructuredError = _interopRequireDefault(require_ApiDOMStructuredError());
  exports.ApiDOMStructuredError = _ApiDOMStructuredError.default;
  var _UnsupportedOperationError = _interopRequireDefault(require_UnsupportedOperationError());
  exports.UnsupportedOperationError = _UnsupportedOperationError.default;
  var _NotImplementedError = _interopRequireDefault(require_NotImplementedError());
  exports.NotImplementedError = _NotImplementedError.default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/NotImplementedError.cjs
var require_NotImplementedError2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class NotImplementedError extends _apidomError.ApiDOMError {
    constructor(message = "Not Implemented", options) {
      super(message, options);
    }
  }
  var _default = NotImplementedError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/ResolverError.cjs
var require_ResolverError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class ResolverError extends _apidomError.ApiDOMError {
  }
  var _default = ResolverError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/UnmatchedResolverError.cjs
var require_UnmatchedResolverError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ResolverError = _interopRequireDefault(require_ResolverError());

  class UnmatchedResolverError extends _ResolverError.default {
  }
  var _default = UnmatchedResolverError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/ParserError.cjs
var require_ParserError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class ParserError extends _apidomError.ApiDOMError {
  }
  var _default = ParserError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/UnmatchedResolveStrategyError.cjs
var require_UnmatchedResolveStrategyError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ParserError = _interopRequireDefault(require_ParserError());

  class UnmatchedResolveStrategyError extends _ParserError.default {
  }
  var _default = UnmatchedResolveStrategyError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/PluginError.cjs
var require_PluginError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class PluginError extends _apidomError.ApiDOMError {
    constructor(message, options) {
      super(message, {
        cause: options.cause
      });
      this.plugin = options.plugin;
    }
  }
  var _default = PluginError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/InvalidSelectorError.cjs
var require_InvalidSelectorError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class InvalidSelectorError extends _apidomError.ApiDOMError {
  }
  var _default = InvalidSelectorError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/MaximumResolverDepthError.cjs
var require_MaximumResolverDepthError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ResolverError = _interopRequireDefault(require_ResolverError());

  class MaximumResolverDepthError extends _ResolverError.default {
  }
  var _default = MaximumResolverDepthError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/DereferenceError.cjs
var require_DereferenceError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class DereferenceError extends _apidomError.ApiDOMError {
  }
  var _default = DereferenceError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/UnmatchedDereferenceStrategyError.cjs
var require_UnmatchedDereferenceStrategyError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ParserError = _interopRequireDefault(require_ParserError());

  class UnmatchedDereferenceStrategyError extends _ParserError.default {
  }
  var _default = UnmatchedDereferenceStrategyError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/MaximumDereferenceDepthError.cjs
var require_MaximumDereferenceDepthError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _DereferenceError = _interopRequireDefault(require_DereferenceError());

  class MaximumDereferenceDepthError extends _DereferenceError.default {
  }
  var _default = MaximumDereferenceDepthError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/errors/index.cjs
var require_errors3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.UnmatchedResolverError = exports.UnmatchedResolveStrategyError = exports.UnmatchedDereferenceStrategyError = exports.ResolverError = exports.PluginError = exports.ParserError = exports.NotImplementedError = exports.MaximumResolverDepthError = exports.MaximumDereferenceDepthError = exports.InvalidSelectorError = exports.DereferenceError = undefined;
  var _NotImplementedError = _interopRequireDefault(require_NotImplementedError2());
  exports.NotImplementedError = _NotImplementedError.default;
  var _ResolverError = _interopRequireDefault(require_ResolverError());
  exports.ResolverError = _ResolverError.default;
  var _UnmatchedResolverError = _interopRequireDefault(require_UnmatchedResolverError());
  exports.UnmatchedResolverError = _UnmatchedResolverError.default;
  var _ParserError = _interopRequireDefault(require_ParserError());
  exports.ParserError = _ParserError.default;
  var _UnmatchedResolveStrategyError = _interopRequireDefault(require_UnmatchedResolveStrategyError());
  exports.UnmatchedResolveStrategyError = _UnmatchedResolveStrategyError.default;
  var _PluginError = _interopRequireDefault(require_PluginError());
  exports.PluginError = _PluginError.default;
  var _InvalidSelectorError = _interopRequireDefault(require_InvalidSelectorError());
  exports.InvalidSelectorError = _InvalidSelectorError.default;
  var _MaximumResolverDepthError = _interopRequireDefault(require_MaximumResolverDepthError());
  exports.MaximumResolverDepthError = _MaximumResolverDepthError.default;
  var _DereferenceError = _interopRequireDefault(require_DereferenceError());
  exports.DereferenceError = _DereferenceError.default;
  var _UnmatchedDereferenceStrategyError = _interopRequireDefault(require_UnmatchedDereferenceStrategyError());
  exports.UnmatchedDereferenceStrategyError = _UnmatchedDereferenceStrategyError.default;
  var _MaximumDereferenceDepthError = _interopRequireDefault(require_MaximumDereferenceDepthError());
  exports.MaximumDereferenceDepthError = _MaximumDereferenceDepthError.default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/plugins.cjs
var require_plugins = __commonJS((exports) => {
  exports.__esModule = true;
  exports.run = exports.filter = undefined;
  var _ramdaAdjunct = require_lib6();
  var _index = require_errors3();
  var filter = async (method, file, plugins) => {
    const pluginResults = await Promise.all(plugins.map((0, _ramdaAdjunct.invokeArgs)([method], [file])));
    return plugins.filter((plugin, index) => pluginResults[index]);
  };
  exports.filter = filter;
  var run = async (method, parameters, plugins) => {
    let lastError;
    for (const plugin of plugins) {
      try {
        const result = await plugin[method].call(plugin, ...parameters);
        return {
          plugin,
          result
        };
      } catch (error) {
        lastError = new _index.PluginError("Error while running plugin", {
          cause: error,
          plugin
        });
      }
    }
    return Promise.reject(lastError);
  };
  exports.run = run;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/util.cjs
var require_util10 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.readFile = undefined;
  var _ramda = require_src2();
  var plugins = _interopRequireWildcard(require_plugins());
  var _index = require_errors3();
  var readFile = async (file, options) => {
    const optsBoundResolvers = options.resolve.resolvers.map((resolver) => {
      const clonedResolver = Object.create(resolver);
      return Object.assign(clonedResolver, options.resolve.resolverOpts);
    });
    const resolvers = await plugins.filter("canRead", file, optsBoundResolvers);
    if ((0, _ramda.isEmpty)(resolvers)) {
      throw new _index.UnmatchedResolverError(file.uri);
    }
    try {
      const {
        result
      } = await plugins.run("read", [file], resolvers);
      return result;
    } catch (error) {
      throw new _index.ResolverError(`Error while reading file "${file.uri}"`, {
        cause: error
      });
    }
  };
  exports.readFile = readFile;
});

// node_modules/@swagger-api/apidom-reference/cjs/parse/index.cjs
var require_parse3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var url = _interopRequireWildcard(require_url());
  var _File = _interopRequireDefault(require_File());
  var plugins = _interopRequireWildcard(require_plugins());
  var _index = require_errors3();
  var _util = require_util10();
  var parseFile = async (file, options) => {
    const optsBoundParsers = options.parse.parsers.map((parser) => {
      const clonedParser = Object.create(parser);
      return Object.assign(clonedParser, options.parse.parserOpts);
    });
    const parsers = await plugins.filter("canParse", file, optsBoundParsers);
    if ((0, _ramda.isEmpty)(parsers)) {
      throw new _index.UnmatchedResolverError(file.uri);
    }
    try {
      const {
        plugin,
        result
      } = await plugins.run("parse", [file], parsers);
      if (!plugin.allowEmpty && result.isEmpty) {
        return Promise.reject(new _index.ParserError(`Error while parsing file "${file.uri}". File is empty.`));
      }
      return result;
    } catch (error) {
      throw new _index.ParserError(`Error while parsing file "${file.uri}"`, {
        cause: error
      });
    }
  };
  var parse = async (uri, options) => {
    const file = (0, _File.default)({
      uri: url.sanitize(url.stripHash(uri)),
      mediaType: options.parse.mediaType
    });
    const data = await (0, _util.readFile)(file, options);
    return parseFile((0, _File.default)({
      ...file,
      data
    }), options);
  };
  var _default = parse;
  exports.default = _default;
});

// node_modules/lodash/isNull.js
var require_isNull2 = __commonJS((exports, module) => {
  var isNull = function(value) {
    return value === null;
  };
  module.exports = isNull;
});

// node_modules/lodash/_freeGlobal.js
var require__freeGlobal = __commonJS((exports, module) => {
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  module.exports = freeGlobal;
});

// node_modules/lodash/_root.js
var require__root = __commonJS((exports, module) => {
  var freeGlobal = require__freeGlobal();
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  module.exports = root;
});

// node_modules/lodash/_Symbol.js
var require__Symbol = __commonJS((exports, module) => {
  var root = require__root();
  var Symbol2 = root.Symbol;
  module.exports = Symbol2;
});

// node_modules/lodash/_getRawTag.js
var require__getRawTag = __commonJS((exports, module) => {
  var getRawTag = function(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  };
  var Symbol2 = require__Symbol();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var nativeObjectToString = objectProto.toString;
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined;
  module.exports = getRawTag;
});

// node_modules/lodash/_objectToString.js
var require__objectToString = __commonJS((exports, module) => {
  var objectToString = function(value) {
    return nativeObjectToString.call(value);
  };
  var objectProto = Object.prototype;
  var nativeObjectToString = objectProto.toString;
  module.exports = objectToString;
});

// node_modules/lodash/_baseGetTag.js
var require__baseGetTag = __commonJS((exports, module) => {
  var baseGetTag = function(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && (symToStringTag in Object(value)) ? getRawTag(value) : objectToString(value);
  };
  var Symbol2 = require__Symbol();
  var getRawTag = require__getRawTag();
  var objectToString = require__objectToString();
  var nullTag = "[object Null]";
  var undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined;
  module.exports = baseGetTag;
});

// node_modules/lodash/isArray.js
var require_isArray2 = __commonJS((exports, module) => {
  var isArray = Array.isArray;
  module.exports = isArray;
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS((exports, module) => {
  var isObjectLike = function(value) {
    return value != null && typeof value == "object";
  };
  module.exports = isObjectLike;
});

// node_modules/lodash/isString.js
var require_isString2 = __commonJS((exports, module) => {
  var isString = function(value) {
    return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
  };
  var baseGetTag = require__baseGetTag();
  var isArray = require_isArray2();
  var isObjectLike = require_isObjectLike();
  var stringTag = "[object String]";
  module.exports = isString;
});

// node_modules/lodash/isNumber.js
var require_isNumber2 = __commonJS((exports, module) => {
  var isNumber = function(value) {
    return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
  };
  var baseGetTag = require__baseGetTag();
  var isObjectLike = require_isObjectLike();
  var numberTag = "[object Number]";
  module.exports = isNumber;
});

// node_modules/lodash/isBoolean.js
var require_isBoolean2 = __commonJS((exports, module) => {
  var isBoolean = function(value) {
    return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
  };
  var baseGetTag = require__baseGetTag();
  var isObjectLike = require_isObjectLike();
  var boolTag = "[object Boolean]";
  module.exports = isBoolean;
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS((exports, module) => {
  var isObject = function(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
  };
  module.exports = isObject;
});

// node_modules/minim/lib/serialisers/JSONSerialiser.js
var require_JSONSerialiser = __commonJS((exports, module) => {
  class JSONSerialiser {
    constructor(namespace) {
      this.namespace = namespace || new this.Namespace;
    }
    serialise(element) {
      if (!(element instanceof this.namespace.elements.Element)) {
        throw new TypeError(`Given element \`${element}\` is not an Element instance`);
      }
      const payload = {
        element: element.element
      };
      if (element._meta && element._meta.length > 0) {
        payload.meta = this.serialiseObject(element.meta);
      }
      if (element._attributes && element._attributes.length > 0) {
        payload.attributes = this.serialiseObject(element.attributes);
      }
      const content = this.serialiseContent(element.content);
      if (content !== undefined) {
        payload.content = content;
      }
      return payload;
    }
    deserialise(value) {
      if (!value.element) {
        throw new Error("Given value is not an object containing an element name");
      }
      const ElementClass = this.namespace.getElementClass(value.element);
      const element = new ElementClass;
      if (element.element !== value.element) {
        element.element = value.element;
      }
      if (value.meta) {
        this.deserialiseObject(value.meta, element.meta);
      }
      if (value.attributes) {
        this.deserialiseObject(value.attributes, element.attributes);
      }
      const content = this.deserialiseContent(value.content);
      if (content !== undefined || element.content === null) {
        element.content = content;
      }
      return element;
    }
    serialiseContent(content) {
      if (content instanceof this.namespace.elements.Element) {
        return this.serialise(content);
      }
      if (content instanceof this.namespace.KeyValuePair) {
        const pair = {
          key: this.serialise(content.key)
        };
        if (content.value) {
          pair.value = this.serialise(content.value);
        }
        return pair;
      }
      if (content && content.map) {
        if (content.length === 0) {
          return;
        }
        return content.map(this.serialise, this);
      }
      return content;
    }
    deserialiseContent(content) {
      if (content) {
        if (content.element) {
          return this.deserialise(content);
        }
        if (content.key) {
          const pair = new this.namespace.KeyValuePair(this.deserialise(content.key));
          if (content.value) {
            pair.value = this.deserialise(content.value);
          }
          return pair;
        }
        if (content.map) {
          return content.map(this.deserialise, this);
        }
      }
      return content;
    }
    serialiseObject(obj) {
      const result = {};
      obj.forEach((value, key) => {
        if (value) {
          result[key.toValue()] = this.serialise(value);
        }
      });
      if (Object.keys(result).length === 0) {
        return;
      }
      return result;
    }
    deserialiseObject(from, to) {
      Object.keys(from).forEach((key) => {
        to.set(key, this.deserialise(from[key]));
      });
    }
  }
  module.exports = JSONSerialiser;
});

// node_modules/lodash/_listCacheClear.js
var require__listCacheClear = __commonJS((exports, module) => {
  var listCacheClear = function() {
    this.__data__ = [];
    this.size = 0;
  };
  module.exports = listCacheClear;
});

// node_modules/lodash/eq.js
var require_eq = __commonJS((exports, module) => {
  var eq = function(value, other) {
    return value === other || value !== value && other !== other;
  };
  module.exports = eq;
});

// node_modules/lodash/_assocIndexOf.js
var require__assocIndexOf = __commonJS((exports, module) => {
  var assocIndexOf = function(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  };
  var eq = require_eq();
  module.exports = assocIndexOf;
});

// node_modules/lodash/_listCacheDelete.js
var require__listCacheDelete = __commonJS((exports, module) => {
  var listCacheDelete = function(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  };
  var assocIndexOf = require__assocIndexOf();
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  module.exports = listCacheDelete;
});

// node_modules/lodash/_listCacheGet.js
var require__listCacheGet = __commonJS((exports, module) => {
  var listCacheGet = function(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  };
  var assocIndexOf = require__assocIndexOf();
  module.exports = listCacheGet;
});

// node_modules/lodash/_listCacheHas.js
var require__listCacheHas = __commonJS((exports, module) => {
  var listCacheHas = function(key) {
    return assocIndexOf(this.__data__, key) > -1;
  };
  var assocIndexOf = require__assocIndexOf();
  module.exports = listCacheHas;
});

// node_modules/lodash/_listCacheSet.js
var require__listCacheSet = __commonJS((exports, module) => {
  var listCacheSet = function(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  };
  var assocIndexOf = require__assocIndexOf();
  module.exports = listCacheSet;
});

// node_modules/lodash/_ListCache.js
var require__ListCache = __commonJS((exports, module) => {
  var ListCache = function(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  };
  var listCacheClear = require__listCacheClear();
  var listCacheDelete = require__listCacheDelete();
  var listCacheGet = require__listCacheGet();
  var listCacheHas = require__listCacheHas();
  var listCacheSet = require__listCacheSet();
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  module.exports = ListCache;
});

// node_modules/lodash/_stackClear.js
var require__stackClear = __commonJS((exports, module) => {
  var stackClear = function() {
    this.__data__ = new ListCache;
    this.size = 0;
  };
  var ListCache = require__ListCache();
  module.exports = stackClear;
});

// node_modules/lodash/_stackDelete.js
var require__stackDelete = __commonJS((exports, module) => {
  var stackDelete = function(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  };
  module.exports = stackDelete;
});

// node_modules/lodash/_stackGet.js
var require__stackGet = __commonJS((exports, module) => {
  var stackGet = function(key) {
    return this.__data__.get(key);
  };
  module.exports = stackGet;
});

// node_modules/lodash/_stackHas.js
var require__stackHas = __commonJS((exports, module) => {
  var stackHas = function(key) {
    return this.__data__.has(key);
  };
  module.exports = stackHas;
});

// node_modules/lodash/isFunction.js
var require_isFunction2 = __commonJS((exports, module) => {
  var isFunction = function(value) {
    if (!isObject(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  };
  var baseGetTag = require__baseGetTag();
  var isObject = require_isObject();
  var asyncTag = "[object AsyncFunction]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var proxyTag = "[object Proxy]";
  module.exports = isFunction;
});

// node_modules/lodash/_coreJsData.js
var require__coreJsData = __commonJS((exports, module) => {
  var root = require__root();
  var coreJsData = root["__core-js_shared__"];
  module.exports = coreJsData;
});

// node_modules/lodash/_isMasked.js
var require__isMasked = __commonJS((exports, module) => {
  var isMasked = function(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  };
  var coreJsData = require__coreJsData();
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  module.exports = isMasked;
});

// node_modules/lodash/_toSource.js
var require__toSource = __commonJS((exports, module) => {
  var toSource = function(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  };
  var funcProto = Function.prototype;
  var funcToString = funcProto.toString;
  module.exports = toSource;
});

// node_modules/lodash/_baseIsNative.js
var require__baseIsNative = __commonJS((exports, module) => {
  var baseIsNative = function(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  };
  var isFunction = require_isFunction2();
  var isMasked = require__isMasked();
  var isObject = require_isObject();
  var toSource = require__toSource();
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  module.exports = baseIsNative;
});

// node_modules/lodash/_getValue.js
var require__getValue = __commonJS((exports, module) => {
  var getValue = function(object, key) {
    return object == null ? undefined : object[key];
  };
  module.exports = getValue;
});

// node_modules/lodash/_getNative.js
var require__getNative = __commonJS((exports, module) => {
  var getNative = function(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  };
  var baseIsNative = require__baseIsNative();
  var getValue = require__getValue();
  module.exports = getNative;
});

// node_modules/lodash/_Map.js
var require__Map = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var root = require__root();
  var Map2 = getNative(root, "Map");
  module.exports = Map2;
});

// node_modules/lodash/_nativeCreate.js
var require__nativeCreate = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var nativeCreate = getNative(Object, "create");
  module.exports = nativeCreate;
});

// node_modules/lodash/_hashClear.js
var require__hashClear = __commonJS((exports, module) => {
  var hashClear = function() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  };
  var nativeCreate = require__nativeCreate();
  module.exports = hashClear;
});

// node_modules/lodash/_hashDelete.js
var require__hashDelete = __commonJS((exports, module) => {
  var hashDelete = function(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  };
  module.exports = hashDelete;
});

// node_modules/lodash/_hashGet.js
var require__hashGet = __commonJS((exports, module) => {
  var hashGet = function(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  };
  var nativeCreate = require__nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  module.exports = hashGet;
});

// node_modules/lodash/_hashHas.js
var require__hashHas = __commonJS((exports, module) => {
  var hashHas = function(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  };
  var nativeCreate = require__nativeCreate();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  module.exports = hashHas;
});

// node_modules/lodash/_hashSet.js
var require__hashSet = __commonJS((exports, module) => {
  var hashSet = function(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  };
  var nativeCreate = require__nativeCreate();
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  module.exports = hashSet;
});

// node_modules/lodash/_Hash.js
var require__Hash = __commonJS((exports, module) => {
  var Hash = function(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  };
  var hashClear = require__hashClear();
  var hashDelete = require__hashDelete();
  var hashGet = require__hashGet();
  var hashHas = require__hashHas();
  var hashSet = require__hashSet();
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  module.exports = Hash;
});

// node_modules/lodash/_mapCacheClear.js
var require__mapCacheClear = __commonJS((exports, module) => {
  var mapCacheClear = function() {
    this.size = 0;
    this.__data__ = {
      hash: new Hash,
      map: new (Map2 || ListCache),
      string: new Hash
    };
  };
  var Hash = require__Hash();
  var ListCache = require__ListCache();
  var Map2 = require__Map();
  module.exports = mapCacheClear;
});

// node_modules/lodash/_isKeyable.js
var require__isKeyable = __commonJS((exports, module) => {
  var isKeyable = function(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  };
  module.exports = isKeyable;
});

// node_modules/lodash/_getMapData.js
var require__getMapData = __commonJS((exports, module) => {
  var getMapData = function(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  };
  var isKeyable = require__isKeyable();
  module.exports = getMapData;
});

// node_modules/lodash/_mapCacheDelete.js
var require__mapCacheDelete = __commonJS((exports, module) => {
  var mapCacheDelete = function(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  };
  var getMapData = require__getMapData();
  module.exports = mapCacheDelete;
});

// node_modules/lodash/_mapCacheGet.js
var require__mapCacheGet = __commonJS((exports, module) => {
  var mapCacheGet = function(key) {
    return getMapData(this, key).get(key);
  };
  var getMapData = require__getMapData();
  module.exports = mapCacheGet;
});

// node_modules/lodash/_mapCacheHas.js
var require__mapCacheHas = __commonJS((exports, module) => {
  var mapCacheHas = function(key) {
    return getMapData(this, key).has(key);
  };
  var getMapData = require__getMapData();
  module.exports = mapCacheHas;
});

// node_modules/lodash/_mapCacheSet.js
var require__mapCacheSet = __commonJS((exports, module) => {
  var mapCacheSet = function(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  };
  var getMapData = require__getMapData();
  module.exports = mapCacheSet;
});

// node_modules/lodash/_MapCache.js
var require__MapCache = __commonJS((exports, module) => {
  var MapCache = function(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  };
  var mapCacheClear = require__mapCacheClear();
  var mapCacheDelete = require__mapCacheDelete();
  var mapCacheGet = require__mapCacheGet();
  var mapCacheHas = require__mapCacheHas();
  var mapCacheSet = require__mapCacheSet();
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  module.exports = MapCache;
});

// node_modules/lodash/_stackSet.js
var require__stackSet = __commonJS((exports, module) => {
  var stackSet = function(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  };
  var ListCache = require__ListCache();
  var Map2 = require__Map();
  var MapCache = require__MapCache();
  var LARGE_ARRAY_SIZE = 200;
  module.exports = stackSet;
});

// node_modules/lodash/_Stack.js
var require__Stack = __commonJS((exports, module) => {
  var Stack = function(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  };
  var ListCache = require__ListCache();
  var stackClear = require__stackClear();
  var stackDelete = require__stackDelete();
  var stackGet = require__stackGet();
  var stackHas = require__stackHas();
  var stackSet = require__stackSet();
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  module.exports = Stack;
});

// node_modules/lodash/_setCacheAdd.js
var require__setCacheAdd = __commonJS((exports, module) => {
  var setCacheAdd = function(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  };
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  module.exports = setCacheAdd;
});

// node_modules/lodash/_setCacheHas.js
var require__setCacheHas = __commonJS((exports, module) => {
  var setCacheHas = function(value) {
    return this.__data__.has(value);
  };
  module.exports = setCacheHas;
});

// node_modules/lodash/_SetCache.js
var require__SetCache = __commonJS((exports, module) => {
  var SetCache = function(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  };
  var MapCache = require__MapCache();
  var setCacheAdd = require__setCacheAdd();
  var setCacheHas = require__setCacheHas();
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  module.exports = SetCache;
});

// node_modules/lodash/_arraySome.js
var require__arraySome = __commonJS((exports, module) => {
  var arraySome = function(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  };
  module.exports = arraySome;
});

// node_modules/lodash/_cacheHas.js
var require__cacheHas = __commonJS((exports, module) => {
  var cacheHas = function(cache, key) {
    return cache.has(key);
  };
  module.exports = cacheHas;
});

// node_modules/lodash/_equalArrays.js
var require__equalArrays = __commonJS((exports, module) => {
  var equalArrays = function(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  };
  var SetCache = require__SetCache();
  var arraySome = require__arraySome();
  var cacheHas = require__cacheHas();
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  module.exports = equalArrays;
});

// node_modules/lodash/_Uint8Array.js
var require__Uint8Array = __commonJS((exports, module) => {
  var root = require__root();
  var Uint8Array2 = root.Uint8Array;
  module.exports = Uint8Array2;
});

// node_modules/lodash/_mapToArray.js
var require__mapToArray = __commonJS((exports, module) => {
  var mapToArray = function(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  };
  module.exports = mapToArray;
});

// node_modules/lodash/_setToArray.js
var require__setToArray = __commonJS((exports, module) => {
  var setToArray = function(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  };
  module.exports = setToArray;
});

// node_modules/lodash/_equalByTag.js
var require__equalByTag = __commonJS((exports, module) => {
  var equalByTag = function(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  };
  var Symbol2 = require__Symbol();
  var Uint8Array2 = require__Uint8Array();
  var eq = require_eq();
  var equalArrays = require__equalArrays();
  var mapToArray = require__mapToArray();
  var setToArray = require__setToArray();
  var COMPARE_PARTIAL_FLAG = 1;
  var COMPARE_UNORDERED_FLAG = 2;
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var symbolProto = Symbol2 ? Symbol2.prototype : undefined;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  module.exports = equalByTag;
});

// node_modules/lodash/_arrayPush.js
var require__arrayPush = __commonJS((exports, module) => {
  var arrayPush = function(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  };
  module.exports = arrayPush;
});

// node_modules/lodash/_baseGetAllKeys.js
var require__baseGetAllKeys = __commonJS((exports, module) => {
  var baseGetAllKeys = function(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  };
  var arrayPush = require__arrayPush();
  var isArray = require_isArray2();
  module.exports = baseGetAllKeys;
});

// node_modules/lodash/_arrayFilter.js
var require__arrayFilter = __commonJS((exports, module) => {
  var arrayFilter = function(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  };
  module.exports = arrayFilter;
});

// node_modules/lodash/stubArray.js
var require_stubArray2 = __commonJS((exports, module) => {
  var stubArray = function() {
    return [];
  };
  module.exports = stubArray;
});

// node_modules/lodash/_getSymbols.js
var require__getSymbols = __commonJS((exports, module) => {
  var arrayFilter = require__arrayFilter();
  var stubArray = require_stubArray2();
  var objectProto = Object.prototype;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  module.exports = getSymbols;
});

// node_modules/lodash/_baseTimes.js
var require__baseTimes = __commonJS((exports, module) => {
  var baseTimes = function(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  };
  module.exports = baseTimes;
});

// node_modules/lodash/_baseIsArguments.js
var require__baseIsArguments = __commonJS((exports, module) => {
  var baseIsArguments = function(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  };
  var baseGetTag = require__baseGetTag();
  var isObjectLike = require_isObjectLike();
  var argsTag = "[object Arguments]";
  module.exports = baseIsArguments;
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS((exports, module) => {
  var baseIsArguments = require__baseIsArguments();
  var isObjectLike = require_isObjectLike();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var isArguments = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  module.exports = isArguments;
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS((exports, module) => {
  var stubFalse = function() {
    return false;
  };
  module.exports = stubFalse;
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS((exports, module) => {
  var root = require__root();
  var stubFalse = require_stubFalse();
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer2 = moduleExports ? root.Buffer : undefined;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined;
  var isBuffer = nativeIsBuffer || stubFalse;
  module.exports = isBuffer;
});

// node_modules/lodash/_isIndex.js
var require__isIndex = __commonJS((exports, module) => {
  var isIndex = function(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  };
  var MAX_SAFE_INTEGER = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  module.exports = isIndex;
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS((exports, module) => {
  var isLength = function(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  };
  var MAX_SAFE_INTEGER = 9007199254740991;
  module.exports = isLength;
});

// node_modules/lodash/_baseIsTypedArray.js
var require__baseIsTypedArray = __commonJS((exports, module) => {
  var baseIsTypedArray = function(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  };
  var baseGetTag = require__baseGetTag();
  var isLength = require_isLength();
  var isObjectLike = require_isObjectLike();
  var argsTag = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag = "[object Function]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var objectTag = "[object Object]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  module.exports = baseIsTypedArray;
});

// node_modules/lodash/_baseUnary.js
var require__baseUnary = __commonJS((exports, module) => {
  var baseUnary = function(func) {
    return function(value) {
      return func(value);
    };
  };
  module.exports = baseUnary;
});

// node_modules/lodash/_nodeUtil.js
var require__nodeUtil = __commonJS((exports, module) => {
  var freeGlobal = require__freeGlobal();
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  module.exports = nodeUtil;
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS((exports, module) => {
  var baseIsTypedArray = require__baseIsTypedArray();
  var baseUnary = require__baseUnary();
  var nodeUtil = require__nodeUtil();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  module.exports = isTypedArray;
});

// node_modules/lodash/_arrayLikeKeys.js
var require__arrayLikeKeys = __commonJS((exports, module) => {
  var arrayLikeKeys = function(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  };
  var baseTimes = require__baseTimes();
  var isArguments = require_isArguments();
  var isArray = require_isArray2();
  var isBuffer = require_isBuffer();
  var isIndex = require__isIndex();
  var isTypedArray = require_isTypedArray();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  module.exports = arrayLikeKeys;
});

// node_modules/lodash/_isPrototype.js
var require__isPrototype = __commonJS((exports, module) => {
  var isPrototype = function(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  };
  var objectProto = Object.prototype;
  module.exports = isPrototype;
});

// node_modules/lodash/_overArg.js
var require__overArg = __commonJS((exports, module) => {
  var overArg = function(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  };
  module.exports = overArg;
});

// node_modules/lodash/_nativeKeys.js
var require__nativeKeys = __commonJS((exports, module) => {
  var overArg = require__overArg();
  var nativeKeys = overArg(Object.keys, Object);
  module.exports = nativeKeys;
});

// node_modules/lodash/_baseKeys.js
var require__baseKeys = __commonJS((exports, module) => {
  var baseKeys = function(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  };
  var isPrototype = require__isPrototype();
  var nativeKeys = require__nativeKeys();
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  module.exports = baseKeys;
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike2 = __commonJS((exports, module) => {
  var isArrayLike = function(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  };
  var isFunction = require_isFunction2();
  var isLength = require_isLength();
  module.exports = isArrayLike;
});

// node_modules/lodash/keys.js
var require_keys2 = __commonJS((exports, module) => {
  var keys = function(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  };
  var arrayLikeKeys = require__arrayLikeKeys();
  var baseKeys = require__baseKeys();
  var isArrayLike = require_isArrayLike2();
  module.exports = keys;
});

// node_modules/lodash/_getAllKeys.js
var require__getAllKeys = __commonJS((exports, module) => {
  var getAllKeys = function(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  };
  var baseGetAllKeys = require__baseGetAllKeys();
  var getSymbols = require__getSymbols();
  var keys = require_keys2();
  module.exports = getAllKeys;
});

// node_modules/lodash/_equalObjects.js
var require__equalObjects = __commonJS((exports, module) => {
  var equalObjects = function(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && (("constructor" in object) && ("constructor" in other)) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  };
  var getAllKeys = require__getAllKeys();
  var COMPARE_PARTIAL_FLAG = 1;
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  module.exports = equalObjects;
});

// node_modules/lodash/_DataView.js
var require__DataView = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var root = require__root();
  var DataView2 = getNative(root, "DataView");
  module.exports = DataView2;
});

// node_modules/lodash/_Promise.js
var require__Promise = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var root = require__root();
  var Promise2 = getNative(root, "Promise");
  module.exports = Promise2;
});

// node_modules/lodash/_Set.js
var require__Set2 = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var root = require__root();
  var Set2 = getNative(root, "Set");
  module.exports = Set2;
});

// node_modules/lodash/_WeakMap.js
var require__WeakMap = __commonJS((exports, module) => {
  var getNative = require__getNative();
  var root = require__root();
  var WeakMap2 = getNative(root, "WeakMap");
  module.exports = WeakMap2;
});

// node_modules/lodash/_getTag.js
var require__getTag = __commonJS((exports, module) => {
  var DataView2 = require__DataView();
  var Map2 = require__Map();
  var Promise2 = require__Promise();
  var Set2 = require__Set2();
  var WeakMap2 = require__WeakMap();
  var baseGetTag = require__baseGetTag();
  var toSource = require__toSource();
  var mapTag = "[object Map]";
  var objectTag = "[object Object]";
  var promiseTag = "[object Promise]";
  var setTag = "[object Set]";
  var weakMapTag = "[object WeakMap]";
  var dataViewTag = "[object DataView]";
  var dataViewCtorString = toSource(DataView2);
  var mapCtorString = toSource(Map2);
  var promiseCtorString = toSource(Promise2);
  var setCtorString = toSource(Set2);
  var weakMapCtorString = toSource(WeakMap2);
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2) != setTag || WeakMap2 && getTag(new WeakMap2) != weakMapTag) {
    getTag = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  module.exports = getTag;
});

// node_modules/lodash/_baseIsEqualDeep.js
var require__baseIsEqualDeep = __commonJS((exports, module) => {
  var baseIsEqualDeep = function(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  };
  var Stack = require__Stack();
  var equalArrays = require__equalArrays();
  var equalByTag = require__equalByTag();
  var equalObjects = require__equalObjects();
  var getTag = require__getTag();
  var isArray = require_isArray2();
  var isBuffer = require_isBuffer();
  var isTypedArray = require_isTypedArray();
  var COMPARE_PARTIAL_FLAG = 1;
  var argsTag = "[object Arguments]";
  var arrayTag = "[object Array]";
  var objectTag = "[object Object]";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  module.exports = baseIsEqualDeep;
});

// node_modules/lodash/_baseIsEqual.js
var require__baseIsEqual = __commonJS((exports, module) => {
  var baseIsEqual = function(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  };
  var baseIsEqualDeep = require__baseIsEqualDeep();
  var isObjectLike = require_isObjectLike();
  module.exports = baseIsEqual;
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS((exports, module) => {
  var isEqual = function(value, other) {
    return baseIsEqual(value, other);
  };
  var baseIsEqual = require__baseIsEqual();
  module.exports = isEqual;
});

// node_modules/minim/lib/KeyValuePair.js
var require_KeyValuePair = __commonJS((exports, module) => {
  class KeyValuePair {
    constructor(key, value) {
      this.key = key;
      this.value = value;
    }
    clone() {
      const clone = new KeyValuePair;
      if (this.key) {
        clone.key = this.key.clone();
      }
      if (this.value) {
        clone.value = this.value.clone();
      }
      return clone;
    }
  }
  module.exports = KeyValuePair;
});

// node_modules/lodash/negate.js
var require_negate2 = __commonJS((exports, module) => {
  var negate = function(predicate) {
    if (typeof predicate != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function() {
      var args = arguments;
      switch (args.length) {
        case 0:
          return !predicate.call(this);
        case 1:
          return !predicate.call(this, args[0]);
        case 2:
          return !predicate.call(this, args[0], args[1]);
        case 3:
          return !predicate.call(this, args[0], args[1], args[2]);
      }
      return !predicate.apply(this, args);
    };
  };
  var FUNC_ERROR_TEXT = "Expected a function";
  module.exports = negate;
});

// node_modules/minim/lib/ArraySlice.js
var require_ArraySlice = __commonJS((exports, module) => {
  var coerceElementMatchingCallback = function(value) {
    if (typeof value === "string") {
      return (element) => element.element === value;
    }
    if (value.constructor && value.extend) {
      return (element) => element instanceof value;
    }
    return value;
  };
  var negate = require_negate2();

  class ArraySlice {
    constructor(elements) {
      this.elements = elements || [];
    }
    toValue() {
      return this.elements.map((element) => element.toValue());
    }
    map(callback, thisArg) {
      return this.elements.map(callback, thisArg);
    }
    flatMap(callback, thisArg) {
      return this.map(callback, thisArg).reduce((a, b) => a.concat(b), []);
    }
    compactMap(transform, thisArg) {
      const results = [];
      this.forEach((element) => {
        const result = transform.bind(thisArg)(element);
        if (result) {
          results.push(result);
        }
      });
      return results;
    }
    filter(callback, thisArg) {
      callback = coerceElementMatchingCallback(callback);
      return new ArraySlice(this.elements.filter(callback, thisArg));
    }
    reject(callback, thisArg) {
      callback = coerceElementMatchingCallback(callback);
      return new ArraySlice(this.elements.filter(negate(callback), thisArg));
    }
    find(callback, thisArg) {
      callback = coerceElementMatchingCallback(callback);
      return this.elements.find(callback, thisArg);
    }
    forEach(callback, thisArg) {
      this.elements.forEach(callback, thisArg);
    }
    reduce(callback, initialValue) {
      return this.elements.reduce(callback, initialValue);
    }
    includes(value) {
      return this.elements.some((element) => element.equals(value));
    }
    shift() {
      return this.elements.shift();
    }
    unshift(value) {
      this.elements.unshift(this.refract(value));
    }
    push(value) {
      this.elements.push(this.refract(value));
      return this;
    }
    add(value) {
      this.push(value);
    }
    get(index) {
      return this.elements[index];
    }
    getValue(index) {
      const element = this.elements[index];
      if (element) {
        return element.toValue();
      }
      return;
    }
    get length() {
      return this.elements.length;
    }
    get isEmpty() {
      return this.elements.length === 0;
    }
    get first() {
      return this.elements[0];
    }
  }
  if (typeof Symbol !== "undefined") {
    ArraySlice.prototype[Symbol.iterator] = function symbol() {
      return this.elements[Symbol.iterator]();
    };
  }
  module.exports = ArraySlice;
});

// node_modules/minim/lib/primitives/Element.js
var require_Element = __commonJS((exports, module) => {
  var isEqual = require_isEqual();
  var KeyValuePair = require_KeyValuePair();
  var ArraySlice = require_ArraySlice();

  class Element {
    constructor(content, meta, attributes) {
      if (meta) {
        this.meta = meta;
      }
      if (attributes) {
        this.attributes = attributes;
      }
      this.content = content;
    }
    freeze() {
      if (Object.isFrozen(this)) {
        return;
      }
      if (this._meta) {
        this.meta.parent = this;
        this.meta.freeze();
      }
      if (this._attributes) {
        this.attributes.parent = this;
        this.attributes.freeze();
      }
      this.children.forEach((element) => {
        element.parent = this;
        element.freeze();
      }, this);
      if (this.content && Array.isArray(this.content)) {
        Object.freeze(this.content);
      }
      Object.freeze(this);
    }
    primitive() {
    }
    clone() {
      const copy = new this.constructor;
      copy.element = this.element;
      if (this.meta.length) {
        copy._meta = this.meta.clone();
      }
      if (this.attributes.length) {
        copy._attributes = this.attributes.clone();
      }
      if (this.content) {
        if (this.content.clone) {
          copy.content = this.content.clone();
        } else if (Array.isArray(this.content)) {
          copy.content = this.content.map((element) => element.clone());
        } else {
          copy.content = this.content;
        }
      } else {
        copy.content = this.content;
      }
      return copy;
    }
    toValue() {
      if (this.content instanceof Element) {
        return this.content.toValue();
      }
      if (this.content instanceof KeyValuePair) {
        return {
          key: this.content.key.toValue(),
          value: this.content.value ? this.content.value.toValue() : undefined
        };
      }
      if (this.content && this.content.map) {
        return this.content.map((element) => element.toValue(), this);
      }
      return this.content;
    }
    toRef(path) {
      if (this.id.toValue() === "") {
        throw Error("Cannot create reference to an element that does not contain an ID");
      }
      const ref = new this.RefElement(this.id.toValue());
      if (path) {
        ref.path = path;
      }
      return ref;
    }
    findRecursive(...elementNames) {
      if (arguments.length > 1 && !this.isFrozen) {
        throw new Error("Cannot find recursive with multiple element names without first freezing the element. Call `element.freeze()`");
      }
      const elementName = elementNames.pop();
      let elements = new ArraySlice;
      const append = (array, element) => {
        array.push(element);
        return array;
      };
      const checkElement = (array, element) => {
        if (element.element === elementName) {
          array.push(element);
        }
        const items = element.findRecursive(elementName);
        if (items) {
          items.reduce(append, array);
        }
        if (element.content instanceof KeyValuePair) {
          if (element.content.key) {
            checkElement(array, element.content.key);
          }
          if (element.content.value) {
            checkElement(array, element.content.value);
          }
        }
        return array;
      };
      if (this.content) {
        if (this.content.element) {
          checkElement(elements, this.content);
        }
        if (Array.isArray(this.content)) {
          this.content.reduce(checkElement, elements);
        }
      }
      if (!elementNames.isEmpty) {
        elements = elements.filter((element) => {
          let parentElements = element.parents.map((e) => e.element);
          for (const namesIndex in elementNames) {
            const name = elementNames[namesIndex];
            const index = parentElements.indexOf(name);
            if (index !== -1) {
              parentElements = parentElements.splice(0, index);
            } else {
              return false;
            }
          }
          return true;
        });
      }
      return elements;
    }
    set(content) {
      this.content = content;
      return this;
    }
    equals(value) {
      return isEqual(this.toValue(), value);
    }
    getMetaProperty(name, value) {
      if (!this.meta.hasKey(name)) {
        if (this.isFrozen) {
          const element = this.refract(value);
          element.freeze();
          return element;
        }
        this.meta.set(name, value);
      }
      return this.meta.get(name);
    }
    setMetaProperty(name, value) {
      this.meta.set(name, value);
    }
    get element() {
      return this._storedElement || "element";
    }
    set element(element) {
      this._storedElement = element;
    }
    get content() {
      return this._content;
    }
    set content(value) {
      if (value instanceof Element) {
        this._content = value;
      } else if (value instanceof ArraySlice) {
        this.content = value.elements;
      } else if (typeof value == "string" || typeof value == "number" || typeof value == "boolean" || value === "null" || value == undefined) {
        this._content = value;
      } else if (value instanceof KeyValuePair) {
        this._content = value;
      } else if (Array.isArray(value)) {
        this._content = value.map(this.refract);
      } else if (typeof value === "object") {
        this._content = Object.keys(value).map((key) => new this.MemberElement(key, value[key]));
      } else {
        throw new Error("Cannot set content to given value");
      }
    }
    get meta() {
      if (!this._meta) {
        if (this.isFrozen) {
          const meta = new this.ObjectElement;
          meta.freeze();
          return meta;
        }
        this._meta = new this.ObjectElement;
      }
      return this._meta;
    }
    set meta(value) {
      if (value instanceof this.ObjectElement) {
        this._meta = value;
      } else {
        this.meta.set(value || {});
      }
    }
    get attributes() {
      if (!this._attributes) {
        if (this.isFrozen) {
          const meta = new this.ObjectElement;
          meta.freeze();
          return meta;
        }
        this._attributes = new this.ObjectElement;
      }
      return this._attributes;
    }
    set attributes(value) {
      if (value instanceof this.ObjectElement) {
        this._attributes = value;
      } else {
        this.attributes.set(value || {});
      }
    }
    get id() {
      return this.getMetaProperty("id", "");
    }
    set id(element) {
      this.setMetaProperty("id", element);
    }
    get classes() {
      return this.getMetaProperty("classes", []);
    }
    set classes(element) {
      this.setMetaProperty("classes", element);
    }
    get title() {
      return this.getMetaProperty("title", "");
    }
    set title(element) {
      this.setMetaProperty("title", element);
    }
    get description() {
      return this.getMetaProperty("description", "");
    }
    set description(element) {
      this.setMetaProperty("description", element);
    }
    get links() {
      return this.getMetaProperty("links", []);
    }
    set links(element) {
      this.setMetaProperty("links", element);
    }
    get isFrozen() {
      return Object.isFrozen(this);
    }
    get parents() {
      let { parent } = this;
      const parents = new ArraySlice;
      while (parent) {
        parents.push(parent);
        parent = parent.parent;
      }
      return parents;
    }
    get children() {
      if (Array.isArray(this.content)) {
        return new ArraySlice(this.content);
      }
      if (this.content instanceof KeyValuePair) {
        const children = new ArraySlice([this.content.key]);
        if (this.content.value) {
          children.push(this.content.value);
        }
        return children;
      }
      if (this.content instanceof Element) {
        return new ArraySlice([this.content]);
      }
      return new ArraySlice;
    }
    get recursiveChildren() {
      const children = new ArraySlice;
      this.children.forEach((element) => {
        children.push(element);
        element.recursiveChildren.forEach((child) => {
          children.push(child);
        });
      });
      return children;
    }
  }
  module.exports = Element;
});

// node_modules/minim/lib/primitives/NullElement.js
var require_NullElement = __commonJS((exports, module) => {
  var Element = require_Element();

  class NullElement extends Element {
    constructor(content, meta, attributes) {
      super(content || null, meta, attributes);
      this.element = "null";
    }
    primitive() {
      return "null";
    }
    set() {
      return new Error("Cannot set the value of null");
    }
  }
  module.exports = NullElement;
});

// node_modules/minim/lib/primitives/StringElement.js
var require_StringElement = __commonJS((exports, module) => {
  var Element = require_Element();
  module.exports = class StringElement extends Element {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "string";
    }
    primitive() {
      return "string";
    }
    get length() {
      return this.content.length;
    }
  };
});

// node_modules/minim/lib/primitives/NumberElement.js
var require_NumberElement = __commonJS((exports, module) => {
  var Element = require_Element();
  module.exports = class NumberElement extends Element {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "number";
    }
    primitive() {
      return "number";
    }
  };
});

// node_modules/minim/lib/primitives/BooleanElement.js
var require_BooleanElement = __commonJS((exports, module) => {
  var Element = require_Element();
  module.exports = class BooleanElement extends Element {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "boolean";
    }
    primitive() {
      return "boolean";
    }
  };
});

// node_modules/minim/lib/primitives/ArrayElement.js
var require_ArrayElement = __commonJS((exports, module) => {
  var negate = require_negate2();
  var Element = require_Element();
  var ArraySlice = require_ArraySlice();

  class ArrayElement extends Element {
    constructor(content, meta, attributes) {
      super(content || [], meta, attributes);
      this.element = "array";
    }
    primitive() {
      return "array";
    }
    get(index) {
      return this.content[index];
    }
    getValue(indexOrKey) {
      const item = this.get(indexOrKey);
      if (item) {
        return item.toValue();
      }
      return;
    }
    getIndex(index) {
      return this.content[index];
    }
    set(index, value) {
      this.content[index] = this.refract(value);
      return this;
    }
    remove(index) {
      const removed = this.content.splice(index, 1);
      if (removed.length) {
        return removed[0];
      }
      return null;
    }
    map(callback, thisArg) {
      return this.content.map(callback, thisArg);
    }
    flatMap(callback, thisArg) {
      return this.map(callback, thisArg).reduce((a, b) => a.concat(b), []);
    }
    compactMap(transform, thisArg) {
      const results = [];
      this.forEach((element) => {
        const result = transform.bind(thisArg)(element);
        if (result) {
          results.push(result);
        }
      });
      return results;
    }
    filter(callback, thisArg) {
      return new ArraySlice(this.content.filter(callback, thisArg));
    }
    reject(callback, thisArg) {
      return this.filter(negate(callback), thisArg);
    }
    reduce(callback, initialValue) {
      let startIndex;
      let memo;
      if (initialValue !== undefined) {
        startIndex = 0;
        memo = this.refract(initialValue);
      } else {
        startIndex = 1;
        memo = this.primitive() === "object" ? this.first.value : this.first;
      }
      for (let i = startIndex;i < this.length; i += 1) {
        const item = this.content[i];
        if (this.primitive() === "object") {
          memo = this.refract(callback(memo, item.value, item.key, item, this));
        } else {
          memo = this.refract(callback(memo, item, i, this));
        }
      }
      return memo;
    }
    forEach(callback, thisArg) {
      this.content.forEach((item, index) => {
        callback.bind(thisArg)(item, this.refract(index));
      });
    }
    shift() {
      return this.content.shift();
    }
    unshift(value) {
      this.content.unshift(this.refract(value));
    }
    push(value) {
      this.content.push(this.refract(value));
      return this;
    }
    add(value) {
      this.push(value);
    }
    findElements(condition, givenOptions) {
      const options = givenOptions || {};
      const recursive = !!options.recursive;
      const results = options.results === undefined ? [] : options.results;
      this.forEach((item, keyOrIndex, member) => {
        if (recursive && item.findElements !== undefined) {
          item.findElements(condition, {
            results,
            recursive
          });
        }
        if (condition(item, keyOrIndex, member)) {
          results.push(item);
        }
      });
      return results;
    }
    find(condition) {
      return new ArraySlice(this.findElements(condition, { recursive: true }));
    }
    findByElement(element) {
      return this.find((item) => item.element === element);
    }
    findByClass(className) {
      return this.find((item) => item.classes.includes(className));
    }
    getById(id) {
      return this.find((item) => item.id.toValue() === id).first;
    }
    includes(value) {
      return this.content.some((element) => element.equals(value));
    }
    contains(value) {
      return this.includes(value);
    }
    empty() {
      return new this.constructor([]);
    }
    ["fantasy-land/empty"]() {
      return this.empty();
    }
    concat(other) {
      return new this.constructor(this.content.concat(other.content));
    }
    ["fantasy-land/concat"](other) {
      return this.concat(other);
    }
    ["fantasy-land/map"](transform) {
      return new this.constructor(this.map(transform));
    }
    ["fantasy-land/chain"](transform) {
      return this.map((element) => transform(element), this).reduce((a, b) => a.concat(b), this.empty());
    }
    ["fantasy-land/filter"](callback) {
      return new this.constructor(this.content.filter(callback));
    }
    ["fantasy-land/reduce"](transform, initialValue) {
      return this.content.reduce(transform, initialValue);
    }
    get length() {
      return this.content.length;
    }
    get isEmpty() {
      return this.content.length === 0;
    }
    get first() {
      return this.getIndex(0);
    }
    get second() {
      return this.getIndex(1);
    }
    get last() {
      return this.getIndex(this.length - 1);
    }
  }
  ArrayElement.empty = function empty() {
    return new this;
  };
  ArrayElement["fantasy-land/empty"] = ArrayElement.empty;
  if (typeof Symbol !== "undefined") {
    ArrayElement.prototype[Symbol.iterator] = function symbol() {
      return this.content[Symbol.iterator]();
    };
  }
  module.exports = ArrayElement;
});

// node_modules/minim/lib/primitives/MemberElement.js
var require_MemberElement = __commonJS((exports, module) => {
  var KeyValuePair = require_KeyValuePair();
  var Element = require_Element();
  module.exports = class MemberElement extends Element {
    constructor(key, value, meta, attributes) {
      super(new KeyValuePair, meta, attributes);
      this.element = "member";
      this.key = key;
      this.value = value;
    }
    get key() {
      return this.content.key;
    }
    set key(key) {
      this.content.key = this.refract(key);
    }
    get value() {
      return this.content.value;
    }
    set value(value) {
      this.content.value = this.refract(value);
    }
  };
});

// node_modules/minim/lib/ObjectSlice.js
var require_ObjectSlice = __commonJS((exports, module) => {
  var negate = require_negate2();
  var ArraySlice = require_ArraySlice();

  class ObjectSlice extends ArraySlice {
    map(callback, thisArg) {
      return this.elements.map((member) => callback.bind(thisArg)(member.value, member.key, member));
    }
    filter(callback, thisArg) {
      return new ObjectSlice(this.elements.filter((member) => callback.bind(thisArg)(member.value, member.key, member)));
    }
    reject(callback, thisArg) {
      return this.filter(negate(callback.bind(thisArg)));
    }
    forEach(callback, thisArg) {
      return this.elements.forEach((member, index) => {
        callback.bind(thisArg)(member.value, member.key, member, index);
      });
    }
    keys() {
      return this.map((value, key) => key.toValue());
    }
    values() {
      return this.map((value) => value.toValue());
    }
  }
  module.exports = ObjectSlice;
});

// node_modules/minim/lib/primitives/ObjectElement.js
var require_ObjectElement = __commonJS((exports, module) => {
  var negate = require_negate2();
  var isObject = require_isObject();
  var ArrayElement = require_ArrayElement();
  var MemberElement = require_MemberElement();
  var ObjectSlice = require_ObjectSlice();

  class ObjectElement extends ArrayElement {
    constructor(content, meta, attributes) {
      super(content || [], meta, attributes);
      this.element = "object";
    }
    primitive() {
      return "object";
    }
    toValue() {
      return this.content.reduce((results, el) => {
        results[el.key.toValue()] = el.value ? el.value.toValue() : undefined;
        return results;
      }, {});
    }
    get(name) {
      const member = this.getMember(name);
      if (member) {
        return member.value;
      }
      return;
    }
    getMember(name) {
      if (name === undefined) {
        return;
      }
      return this.content.find((element) => element.key.toValue() === name);
    }
    remove(name) {
      let removed = null;
      this.content = this.content.filter((item) => {
        if (item.key.toValue() === name) {
          removed = item;
          return false;
        }
        return true;
      });
      return removed;
    }
    getKey(name) {
      const member = this.getMember(name);
      if (member) {
        return member.key;
      }
      return;
    }
    set(keyOrObject, value) {
      if (isObject(keyOrObject)) {
        Object.keys(keyOrObject).forEach((objectKey) => {
          this.set(objectKey, keyOrObject[objectKey]);
        });
        return this;
      }
      const key = keyOrObject;
      const member = this.getMember(key);
      if (member) {
        member.value = value;
      } else {
        this.content.push(new MemberElement(key, value));
      }
      return this;
    }
    keys() {
      return this.content.map((item) => item.key.toValue());
    }
    values() {
      return this.content.map((item) => item.value.toValue());
    }
    hasKey(value) {
      return this.content.some((member) => member.key.equals(value));
    }
    items() {
      return this.content.map((item) => [item.key.toValue(), item.value.toValue()]);
    }
    map(callback, thisArg) {
      return this.content.map((item) => callback.bind(thisArg)(item.value, item.key, item));
    }
    compactMap(callback, thisArg) {
      const results = [];
      this.forEach((value, key, member) => {
        const result = callback.bind(thisArg)(value, key, member);
        if (result) {
          results.push(result);
        }
      });
      return results;
    }
    filter(callback, thisArg) {
      return new ObjectSlice(this.content).filter(callback, thisArg);
    }
    reject(callback, thisArg) {
      return this.filter(negate(callback), thisArg);
    }
    forEach(callback, thisArg) {
      return this.content.forEach((item) => callback.bind(thisArg)(item.value, item.key, item));
    }
  }
  module.exports = ObjectElement;
});

// node_modules/minim/lib/elements/LinkElement.js
var require_LinkElement = __commonJS((exports, module) => {
  var Element = require_Element();
  module.exports = class LinkElement extends Element {
    constructor(content, meta, attributes) {
      super(content || [], meta, attributes);
      this.element = "link";
    }
    get relation() {
      return this.attributes.get("relation");
    }
    set relation(relation) {
      this.attributes.set("relation", relation);
    }
    get href() {
      return this.attributes.get("href");
    }
    set href(href) {
      this.attributes.set("href", href);
    }
  };
});

// node_modules/minim/lib/elements/RefElement.js
var require_RefElement = __commonJS((exports, module) => {
  var Element = require_Element();
  module.exports = class RefElement extends Element {
    constructor(content, meta, attributes) {
      super(content || [], meta, attributes);
      this.element = "ref";
      if (!this.path) {
        this.path = "element";
      }
    }
    get path() {
      return this.attributes.get("path");
    }
    set path(newValue) {
      this.attributes.set("path", newValue);
    }
  };
});

// node_modules/minim/lib/elements.js
var require_elements = __commonJS((exports, module) => {
  var refract = function(value) {
    if (value instanceof Element) {
      return value;
    }
    if (typeof value === "string") {
      return new StringElement(value);
    }
    if (typeof value === "number") {
      return new NumberElement(value);
    }
    if (typeof value === "boolean") {
      return new BooleanElement(value);
    }
    if (value === null) {
      return new NullElement;
    }
    if (Array.isArray(value)) {
      return new ArrayElement(value.map(refract));
    }
    if (typeof value === "object") {
      const element = new ObjectElement(value);
      return element;
    }
    return value;
  };
  var Element = require_Element();
  var NullElement = require_NullElement();
  var StringElement = require_StringElement();
  var NumberElement = require_NumberElement();
  var BooleanElement = require_BooleanElement();
  var ArrayElement = require_ArrayElement();
  var MemberElement = require_MemberElement();
  var ObjectElement = require_ObjectElement();
  var LinkElement = require_LinkElement();
  var RefElement = require_RefElement();
  var ArraySlice = require_ArraySlice();
  var ObjectSlice = require_ObjectSlice();
  var KeyValuePair = require_KeyValuePair();
  Element.prototype.ObjectElement = ObjectElement;
  Element.prototype.RefElement = RefElement;
  Element.prototype.MemberElement = MemberElement;
  Element.prototype.refract = refract;
  ArraySlice.prototype.refract = refract;
  module.exports = {
    Element,
    NullElement,
    StringElement,
    NumberElement,
    BooleanElement,
    ArrayElement,
    MemberElement,
    ObjectElement,
    LinkElement,
    RefElement,
    refract,
    ArraySlice,
    ObjectSlice,
    KeyValuePair
  };
});

// node_modules/minim/lib/Namespace.js
var require_Namespace = __commonJS((exports, module) => {
  var isNull = require_isNull2();
  var isString = require_isString2();
  var isNumber = require_isNumber2();
  var isBoolean = require_isBoolean2();
  var isObject = require_isObject();
  var JSONSerialiser = require_JSONSerialiser();
  var elements = require_elements();

  class Namespace {
    constructor(options) {
      this.elementMap = {};
      this.elementDetection = [];
      this.Element = elements.Element;
      this.KeyValuePair = elements.KeyValuePair;
      if (!options || !options.noDefault) {
        this.useDefault();
      }
      this._attributeElementKeys = [];
      this._attributeElementArrayKeys = [];
    }
    use(plugin) {
      if (plugin.namespace) {
        plugin.namespace({ base: this });
      }
      if (plugin.load) {
        plugin.load({ base: this });
      }
      return this;
    }
    useDefault() {
      this.register("null", elements.NullElement).register("string", elements.StringElement).register("number", elements.NumberElement).register("boolean", elements.BooleanElement).register("array", elements.ArrayElement).register("object", elements.ObjectElement).register("member", elements.MemberElement).register("ref", elements.RefElement).register("link", elements.LinkElement);
      this.detect(isNull, elements.NullElement, false).detect(isString, elements.StringElement, false).detect(isNumber, elements.NumberElement, false).detect(isBoolean, elements.BooleanElement, false).detect(Array.isArray, elements.ArrayElement, false).detect(isObject, elements.ObjectElement, false);
      return this;
    }
    register(name, ElementClass) {
      this._elements = undefined;
      this.elementMap[name] = ElementClass;
      return this;
    }
    unregister(name) {
      this._elements = undefined;
      delete this.elementMap[name];
      return this;
    }
    detect(test, ElementClass, givenPrepend) {
      const prepend = givenPrepend === undefined ? true : givenPrepend;
      if (prepend) {
        this.elementDetection.unshift([test, ElementClass]);
      } else {
        this.elementDetection.push([test, ElementClass]);
      }
      return this;
    }
    toElement(value) {
      if (value instanceof this.Element) {
        return value;
      }
      let element;
      for (let i = 0;i < this.elementDetection.length; i += 1) {
        const test = this.elementDetection[i][0];
        const ElementClass = this.elementDetection[i][1];
        if (test(value)) {
          element = new ElementClass(value);
          break;
        }
      }
      return element;
    }
    getElementClass(element) {
      const ElementClass = this.elementMap[element];
      if (ElementClass === undefined) {
        return this.Element;
      }
      return ElementClass;
    }
    fromRefract(doc) {
      return this.serialiser.deserialise(doc);
    }
    toRefract(element) {
      return this.serialiser.serialise(element);
    }
    get elements() {
      if (this._elements === undefined) {
        this._elements = {
          Element: this.Element
        };
        Object.keys(this.elementMap).forEach((name) => {
          const pascal = name[0].toUpperCase() + name.substr(1);
          this._elements[pascal] = this.elementMap[name];
        });
      }
      return this._elements;
    }
    get serialiser() {
      return new JSONSerialiser(this);
    }
  }
  JSONSerialiser.prototype.Namespace = Namespace;
  module.exports = Namespace;
});

// node_modules/minim/lib/serialisers/JSON06Serialiser.js
var require_JSON06Serialiser = __commonJS((exports, module) => {
  var JSONSerialiser = require_JSONSerialiser();
  module.exports = class JSON06Serialiser extends JSONSerialiser {
    serialise(element) {
      if (!(element instanceof this.namespace.elements.Element)) {
        throw new TypeError(`Given element \`${element}\` is not an Element instance`);
      }
      let variable;
      if (element._attributes && element.attributes.get("variable")) {
        variable = element.attributes.get("variable");
      }
      const payload = {
        element: element.element
      };
      if (element._meta && element._meta.length > 0) {
        payload.meta = this.serialiseObject(element.meta);
      }
      const isEnum = element.element === "enum" || element.attributes.keys().indexOf("enumerations") !== -1;
      if (isEnum) {
        const attributes = this.enumSerialiseAttributes(element);
        if (attributes) {
          payload.attributes = attributes;
        }
      } else if (element._attributes && element._attributes.length > 0) {
        let { attributes } = element;
        if (attributes.get("metadata")) {
          attributes = attributes.clone();
          attributes.set("meta", attributes.get("metadata"));
          attributes.remove("metadata");
        }
        if (element.element === "member" && variable) {
          attributes = attributes.clone();
          attributes.remove("variable");
        }
        if (attributes.length > 0) {
          payload.attributes = this.serialiseObject(attributes);
        }
      }
      if (isEnum) {
        payload.content = this.enumSerialiseContent(element, payload);
      } else if (this[`${element.element}SerialiseContent`]) {
        payload.content = this[`${element.element}SerialiseContent`](element, payload);
      } else if (element.content !== undefined) {
        let content;
        if (variable && element.content.key) {
          content = element.content.clone();
          content.key.attributes.set("variable", variable);
          content = this.serialiseContent(content);
        } else {
          content = this.serialiseContent(element.content);
        }
        if (this.shouldSerialiseContent(element, content)) {
          payload.content = content;
        }
      } else if (this.shouldSerialiseContent(element, element.content) && element instanceof this.namespace.elements.Array) {
        payload.content = [];
      }
      return payload;
    }
    shouldSerialiseContent(element, content) {
      if (element.element === "parseResult" || element.element === "httpRequest" || element.element === "httpResponse" || element.element === "category" || element.element === "link") {
        return true;
      }
      if (content === undefined) {
        return false;
      }
      if (Array.isArray(content) && content.length === 0) {
        return false;
      }
      return true;
    }
    refSerialiseContent(element, payload) {
      delete payload.attributes;
      return {
        href: element.toValue(),
        path: element.path.toValue()
      };
    }
    sourceMapSerialiseContent(element) {
      return element.toValue();
    }
    dataStructureSerialiseContent(element) {
      return [this.serialiseContent(element.content)];
    }
    enumSerialiseAttributes(element) {
      const attributes = element.attributes.clone();
      const enumerations = attributes.remove("enumerations") || new this.namespace.elements.Array([]);
      const defaultValue = attributes.get("default");
      let samples = attributes.get("samples") || new this.namespace.elements.Array([]);
      if (defaultValue && defaultValue.content) {
        if (defaultValue.content.attributes) {
          defaultValue.content.attributes.remove("typeAttributes");
        }
        attributes.set("default", new this.namespace.elements.Array([defaultValue.content]));
      }
      samples.forEach((sample) => {
        if (sample.content && sample.content.element) {
          sample.content.attributes.remove("typeAttributes");
        }
      });
      if (element.content && enumerations.length !== 0) {
        samples.unshift(element.content);
      }
      samples = samples.map((sample) => {
        if (sample instanceof this.namespace.elements.Array) {
          return [sample];
        }
        return new this.namespace.elements.Array([sample.content]);
      });
      if (samples.length) {
        attributes.set("samples", samples);
      }
      if (attributes.length > 0) {
        return this.serialiseObject(attributes);
      }
      return;
    }
    enumSerialiseContent(element) {
      if (element._attributes) {
        const enumerations = element.attributes.get("enumerations");
        if (enumerations && enumerations.length > 0) {
          return enumerations.content.map((enumeration) => {
            const e = enumeration.clone();
            e.attributes.remove("typeAttributes");
            return this.serialise(e);
          });
        }
      }
      if (element.content) {
        const value = element.content.clone();
        value.attributes.remove("typeAttributes");
        return [this.serialise(value)];
      }
      return [];
    }
    deserialise(value) {
      if (typeof value === "string") {
        return new this.namespace.elements.String(value);
      }
      if (typeof value === "number") {
        return new this.namespace.elements.Number(value);
      }
      if (typeof value === "boolean") {
        return new this.namespace.elements.Boolean(value);
      }
      if (value === null) {
        return new this.namespace.elements.Null;
      }
      if (Array.isArray(value)) {
        return new this.namespace.elements.Array(value.map(this.deserialise, this));
      }
      const ElementClass = this.namespace.getElementClass(value.element);
      const element = new ElementClass;
      if (element.element !== value.element) {
        element.element = value.element;
      }
      if (value.meta) {
        this.deserialiseObject(value.meta, element.meta);
      }
      if (value.attributes) {
        this.deserialiseObject(value.attributes, element.attributes);
      }
      const content = this.deserialiseContent(value.content);
      if (content !== undefined || element.content === null) {
        element.content = content;
      }
      if (element.element === "enum") {
        if (element.content) {
          element.attributes.set("enumerations", element.content);
        }
        let samples = element.attributes.get("samples");
        element.attributes.remove("samples");
        if (samples) {
          const existingSamples = samples;
          samples = new this.namespace.elements.Array;
          existingSamples.forEach((existingSample) => {
            existingSample.forEach((sample2) => {
              const enumElement = new ElementClass(sample2);
              enumElement.element = element.element;
              samples.push(enumElement);
            });
          });
          const sample = samples.shift();
          if (sample) {
            element.content = sample.content;
          } else {
            element.content = undefined;
          }
          element.attributes.set("samples", samples);
        } else {
          element.content = undefined;
        }
        let defaultValue = element.attributes.get("default");
        if (defaultValue && defaultValue.length > 0) {
          defaultValue = defaultValue.get(0);
          const defaultElement = new ElementClass(defaultValue);
          defaultElement.element = element.element;
          element.attributes.set("default", defaultElement);
        }
      } else if (element.element === "dataStructure" && Array.isArray(element.content)) {
        [element.content] = element.content;
      } else if (element.element === "category") {
        const metadata = element.attributes.get("meta");
        if (metadata) {
          element.attributes.set("metadata", metadata);
          element.attributes.remove("meta");
        }
      } else if (element.element === "member" && element.key && element.key._attributes && element.key._attributes.getValue("variable")) {
        element.attributes.set("variable", element.key.attributes.get("variable"));
        element.key.attributes.remove("variable");
      }
      return element;
    }
    serialiseContent(content) {
      if (content instanceof this.namespace.elements.Element) {
        return this.serialise(content);
      }
      if (content instanceof this.namespace.KeyValuePair) {
        const pair = {
          key: this.serialise(content.key)
        };
        if (content.value) {
          pair.value = this.serialise(content.value);
        }
        return pair;
      }
      if (content && content.map) {
        return content.map(this.serialise, this);
      }
      return content;
    }
    deserialiseContent(content) {
      if (content) {
        if (content.element) {
          return this.deserialise(content);
        }
        if (content.key) {
          const pair = new this.namespace.KeyValuePair(this.deserialise(content.key));
          if (content.value) {
            pair.value = this.deserialise(content.value);
          }
          return pair;
        }
        if (content.map) {
          return content.map(this.deserialise, this);
        }
      }
      return content;
    }
    shouldRefract(element) {
      if (element._attributes && element.attributes.keys().length || element._meta && element.meta.keys().length) {
        return true;
      }
      if (element.element === "enum") {
        return false;
      }
      if (element.element !== element.primitive() || element.element === "member") {
        return true;
      }
      return false;
    }
    convertKeyToRefract(key, item) {
      if (this.shouldRefract(item)) {
        return this.serialise(item);
      }
      if (item.element === "enum") {
        return this.serialiseEnum(item);
      }
      if (item.element === "array") {
        return item.map((subItem) => {
          if (this.shouldRefract(subItem) || key === "default") {
            return this.serialise(subItem);
          }
          if (subItem.element === "array" || subItem.element === "object" || subItem.element === "enum") {
            return subItem.children.map((subSubItem) => this.serialise(subSubItem));
          }
          return subItem.toValue();
        });
      }
      if (item.element === "object") {
        return (item.content || []).map(this.serialise, this);
      }
      return item.toValue();
    }
    serialiseEnum(element) {
      return element.children.map((item) => this.serialise(item));
    }
    serialiseObject(obj) {
      const result = {};
      obj.forEach((value, key) => {
        if (value) {
          const keyValue = key.toValue();
          result[keyValue] = this.convertKeyToRefract(keyValue, value);
        }
      });
      return result;
    }
    deserialiseObject(from, to) {
      Object.keys(from).forEach((key) => {
        to.set(key, this.deserialise(from[key]));
      });
    }
  };
});

// node_modules/minim/lib/minim.js
var require_minim = __commonJS((exports) => {
  var Namespace = require_Namespace();
  var elements = require_elements();
  exports.Namespace = Namespace;
  exports.namespace = function namespace(options) {
    return new Namespace(options);
  };
  exports.KeyValuePair = require_KeyValuePair();
  exports.ArraySlice = elements.ArraySlice;
  exports.ObjectSlice = elements.ObjectSlice;
  exports.Element = elements.Element;
  exports.StringElement = elements.StringElement;
  exports.NumberElement = elements.NumberElement;
  exports.BooleanElement = elements.BooleanElement;
  exports.NullElement = elements.NullElement;
  exports.ArrayElement = elements.ArrayElement;
  exports.ObjectElement = elements.ObjectElement;
  exports.MemberElement = elements.MemberElement;
  exports.RefElement = elements.RefElement;
  exports.LinkElement = elements.LinkElement;
  exports.refract = elements.refract;
  exports.JSONSerialiser = require_JSONSerialiser();
  exports.JSON06Serialiser = require_JSON06Serialiser();
});

// node_modules/@swagger-api/apidom-core/cjs/elements/Annotation.cjs
var require_Annotation = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _minim = require_minim();

  class Annotation extends _minim.StringElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "annotation";
    }
    get code() {
      return this.attributes.get("code");
    }
    set code(value) {
      this.attributes.set("code", value);
    }
  }
  var _default = Annotation;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/elements/Comment.cjs
var require_Comment = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _minim = require_minim();

  class Comment extends _minim.StringElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "comment";
    }
  }
  var _default = Comment;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/elements/ParseResult.cjs
var require_ParseResult = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _minim = require_minim();
  var _ramdaAdjunct = require_lib6();

  class ParseResult extends _minim.ArrayElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "parseResult";
    }
    get api() {
      return this.children.filter((item) => item.classes.contains("api")).first;
    }
    get results() {
      return this.children.filter((item) => item.classes.contains("result"));
    }
    get result() {
      return this.results.first;
    }
    get annotations() {
      return this.children.filter((item) => item.element === "annotation");
    }
    get warnings() {
      return this.children.filter((item) => item.element === "annotation" && item.classes.contains("warning"));
    }
    get errors() {
      return this.children.filter((item) => item.element === "annotation" && item.classes.contains("error"));
    }
    get isEmpty() {
      return this.children.reject((item) => item.element === "annotation").isEmpty;
    }
    replaceResult(replacement) {
      const {
        result
      } = this;
      if ((0, _ramdaAdjunct.isUndefined)(result)) {
        return false;
      }
      const searchIndex = this.content.findIndex((e) => e === result);
      if (searchIndex === -1) {
        return false;
      }
      this.content[searchIndex] = replacement;
      return true;
    }
  }
  var _default = ParseResult;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/elements/SourceMap.cjs
var require_SourceMap = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _minim = require_minim();

  class SourceMap extends _minim.ArrayElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "sourceMap";
    }
    get positionStart() {
      return this.children.filter((item) => item.classes.contains("position")).get(0);
    }
    get positionEnd() {
      return this.children.filter((item) => item.classes.contains("position")).get(1);
    }
    set position(position) {
      if (position === null) {
        return;
      }
      const start = new _minim.ArrayElement([position.start.row, position.start.column, position.start.char]);
      const end = new _minim.ArrayElement([position.end.row, position.end.column, position.end.char]);
      start.classes.push("position");
      end.classes.push("position");
      this.push(start).push(end);
    }
  }
  var _default = SourceMap;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/namespace.cjs
var require_namespace = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.createNamespace = exports.Namespace = undefined;
  var _minim = require_minim();
  var _ramdaAdjunct = require_lib6();
  var _Annotation = _interopRequireDefault(require_Annotation());
  var _Comment = _interopRequireDefault(require_Comment());
  var _ParseResult = _interopRequireDefault(require_ParseResult());
  var _SourceMap = _interopRequireDefault(require_SourceMap());

  class Namespace extends _minim.Namespace {
    constructor() {
      super();
      this.register("annotation", _Annotation.default);
      this.register("comment", _Comment.default);
      this.register("parseResult", _ParseResult.default);
      this.register("sourceMap", _SourceMap.default);
    }
  }
  exports.Namespace = Namespace;
  var namespace = new Namespace;
  var createNamespace = (namespacePlugin) => {
    const namespaceInstance = new Namespace;
    if ((0, _ramdaAdjunct.isPlainObject)(namespacePlugin)) {
      namespaceInstance.use(namespacePlugin);
    }
    return namespaceInstance;
  };
  exports.createNamespace = createNamespace;
  var _default = namespace;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/Node.cjs
var require_Node2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var Node = (0, _stampit.default)({
    props: {
      type: null,
      position: null,
      children: []
    },
    init({
      children = [],
      position = null,
      isMissing = false
    } = {}, {
      stamp = {}
    }) {
      this.type = stamp.type;
      this.isMissing = isMissing;
      this.children = children;
      this.position = position;
    },
    methods: {
      clone() {
        const copy = Object.create(Object.getPrototypeOf(this));
        Object.getOwnPropertyNames(this).forEach((propKey) => {
          const descriptor = Object.getOwnPropertyDescriptor(this, propKey);
          Object.defineProperty(copy, propKey, descriptor);
        });
        return copy;
      }
    }
  });
  var _default = Node;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonNode.cjs
var require_JsonNode = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var JsonNode = (0, _stampit.default)(_Node.default);
  var _default = JsonNode;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonDocument.cjs
var require_JsonDocument = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  var JsonDocument = (0, _stampit.default)(_JsonNode.default, {
    statics: {
      type: "document"
    },
    methods: {
      get child() {
        return (0, _ramda.head)(this.children);
      }
    }
  });
  var _default = JsonDocument;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/predicates.cjs
var require_predicates = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isPosition = exports.isPoint = exports.isParseResult = exports.isNodeType = exports.isLiteral = undefined;
  var isNodeType = (type, node) => (node == null ? undefined : node.type) === type;
  exports.isNodeType = isNodeType;
  var isLiteral = isNodeType.bind(undefined, "literal");
  exports.isLiteral = isLiteral;
  var isPosition = isNodeType.bind(undefined, "position");
  exports.isPosition = isPosition;
  var isPoint = isNodeType.bind(undefined, "point");
  exports.isPoint = isPoint;
  var isParseResult = isNodeType.bind(undefined, "parseResult");
  exports.isParseResult = isParseResult;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/predicates.cjs
var require_predicates2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isTrue = exports.isStringContent = exports.isString = exports.isProperty = exports.isObject = exports.isNumber = exports.isNull = exports.isKey = exports.isFalse = exports.isEscapeSequence = exports.isDocument = exports.isArray = undefined;
  var _predicates = require_predicates();
  var isDocument = _predicates.isNodeType.bind(undefined, "document");
  exports.isDocument = isDocument;
  var isString = _predicates.isNodeType.bind(undefined, "string");
  exports.isString = isString;
  var isFalse = _predicates.isNodeType.bind(undefined, "false");
  exports.isFalse = isFalse;
  var isTrue = _predicates.isNodeType.bind(undefined, "true");
  exports.isTrue = isTrue;
  var isNull = _predicates.isNodeType.bind(undefined, "null");
  exports.isNull = isNull;
  var isNumber = _predicates.isNodeType.bind(undefined, "number");
  exports.isNumber = isNumber;
  var isArray = _predicates.isNodeType.bind(undefined, "array");
  exports.isArray = isArray;
  var isObject = _predicates.isNodeType.bind(undefined, "object");
  exports.isObject = isObject;
  var isStringContent = _predicates.isNodeType.bind(undefined, "stringContent");
  exports.isStringContent = isStringContent;
  var isEscapeSequence = _predicates.isNodeType.bind(undefined, "escapeSequence");
  exports.isEscapeSequence = isEscapeSequence;
  var isProperty = _predicates.isNodeType.bind(undefined, "property");
  exports.isProperty = isProperty;
  var isKey = _predicates.isNodeType.bind(undefined, "key");
  exports.isKey = isKey;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonObject.cjs
var require_JsonObject = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  var _predicates = require_predicates2();
  var JsonObject = (0, _stampit.default)(_JsonNode.default, {
    statics: {
      type: "object"
    },
    methods: {
      get properties() {
        return this.children.filter(_predicates.isProperty);
      }
    }
  });
  var _default = JsonObject;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonProperty.cjs
var require_JsonProperty = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  var _predicates = require_predicates2();
  var JsonProperty = (0, _stampit.default)(_JsonNode.default, {
    statics: {
      type: "property"
    },
    methods: {
      get key() {
        return this.children.find(_predicates.isKey);
      },
      get value() {
        return this.children.find((node) => (0, _predicates.isFalse)(node) || (0, _predicates.isTrue)(node) || (0, _predicates.isNull)(node) || (0, _predicates.isNumber)(node) || (0, _predicates.isString)(node) || (0, _predicates.isArray)(node) || (0, _predicates.isObject)(node));
      }
    }
  });
  var _default = JsonProperty;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonArray.cjs
var require_JsonArray = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  var _predicates = require_predicates2();
  var JsonArray = (0, _stampit.default)(_JsonNode.default, {
    statics: {
      type: "array"
    },
    methods: {
      get items() {
        return this.children.filter((node) => (0, _predicates.isFalse)(node) || (0, _predicates.isTrue)(node) || (0, _predicates.isNull)(node) || (0, _predicates.isNumber)(node) || (0, _predicates.isString)(node) || (0, _predicates.isArray)(node) || _predicates.isObject);
      }
    }
  });
  var _default = JsonArray;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonValue.cjs
var require_JsonValue = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  var JsonValue = (0, _stampit.default)(_JsonNode.default, {
    statics: {
      type: "value"
    },
    props: {
      value: null
    },
    init({
      value = null
    } = {}) {
      this.value = value;
    }
  });
  var _default = JsonValue;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonString.cjs
var require_JsonString = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  var _predicates = require_predicates2();
  var JsonString = (0, _stampit.default)(_JsonNode.default, {
    statics: {
      type: "string"
    },
    methods: {
      get value() {
        if (this.children.length === 1) {
          return this.children[0].value;
        }
        return this.children.filter((node) => (0, _predicates.isStringContent)(node) || (0, _predicates.isEscapeSequence)(node)).reduce((acc, cur) => acc + cur.value, "");
      }
    }
  });
  var _default = JsonString;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonKey.cjs
var require_JsonKey = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonString = _interopRequireDefault(require_JsonString());
  var JsonKey = (0, _stampit.default)(_JsonString.default, {
    statics: {
      type: "key"
    }
  });
  var _default = JsonKey;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonStringContent.cjs
var require_JsonStringContent = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  var JsonStringContent = (0, _stampit.default)(_JsonValue.default, {
    statics: {
      type: "stringContent"
    }
  });
  var _default = JsonStringContent;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonEscapeSequence.cjs
var require_JsonEscapeSequence = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  var JsonEscapeSequence = (0, _stampit.default)(_JsonValue.default, {
    statics: {
      type: "escapeSequence"
    }
  });
  var _default = JsonEscapeSequence;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonNumber.cjs
var require_JsonNumber = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  var JsonNumber = (0, _stampit.default)(_JsonValue.default, {
    statics: {
      type: "number"
    }
  });
  var _default = JsonNumber;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonTrue.cjs
var require_JsonTrue = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  var JsonTrue = (0, _stampit.default)(_JsonValue.default, {
    statics: {
      type: "true"
    }
  });
  var _default = JsonTrue;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonFalse.cjs
var require_JsonFalse = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  var JsonFalse = (0, _stampit.default)(_JsonValue.default, {
    statics: {
      type: "false"
    }
  });
  var _default = JsonFalse;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/json/nodes/JsonNull.cjs
var require_JsonNull = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  var JsonNull = (0, _stampit.default)(_JsonValue.default, {
    statics: {
      type: "null"
    }
  });
  var _default = JsonNull;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlAlias.cjs
var require_YamlAlias = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var YamlAlias = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "alias"
    },
    props: {
      content: null
    },
    init({
      content = null
    } = {}) {
      this.content = content;
    }
  });
  var _default = YamlAlias;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlNode.cjs
var require_YamlNode = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var YamlNode = (0, _stampit.default)(_Node.default, {
    props: {
      anchor: null,
      tag: null,
      style: null,
      styleGroup: null
    },
    init({
      anchor = null,
      tag = null,
      style = null,
      styleGroup = null
    } = {}) {
      this.anchor = anchor;
      this.tag = tag;
      this.style = style;
      this.styleGroup = styleGroup;
    }
  });
  var _default = YamlNode;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlCollection.cjs
var require_YamlCollection = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _YamlNode = _interopRequireDefault(require_YamlNode());
  var YamlCollection = (0, _stampit.default)(_YamlNode.default, {});
  var _default = YamlCollection;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlComment.cjs
var require_YamlComment = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var YamlComment = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "comment"
    },
    props: {
      content: null
    },
    init({
      content = null
    } = {}) {
      this.content = content;
    }
  });
  var _default = YamlComment;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlDirective.cjs
var require_YamlDirective = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Node = _interopRequireDefault(require_Node2());
  var YamlDirective = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "directive"
    },
    props: {
      name: null,
      parameters: null
    },
    init({
      name = null,
      parameters = {}
    } = {}) {
      this.name = name;
      this.parameters = (0, _ramda.mergeRight)({
        version: null,
        handle: null,
        prefix: null
      }, parameters);
    }
  });
  var _default = YamlDirective;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlDocument.cjs
var require_YamlDocument = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var YamlDocument = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "document"
    }
  });
  var _default = YamlDocument;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlStyle.cjs
var require_YamlStyle = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.YamlStyleGroup = exports.YamlStyle = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var YamlStyle = function(YamlStyle2) {
    YamlStyle2["Plain"] = "Plain";
    YamlStyle2["SingleQuoted"] = "SingleQuoted";
    YamlStyle2["DoubleQuoted"] = "DoubleQuoted";
    YamlStyle2["Literal"] = "Literal";
    YamlStyle2["Folded"] = "Folded";
    YamlStyle2["Explicit"] = "Explicit";
    YamlStyle2["SinglePair"] = "SinglePair";
    YamlStyle2["NextLine"] = "NextLine";
    YamlStyle2["InLine"] = "InLine";
    return YamlStyle2;
  }({});
  exports.YamlStyle = YamlStyle;
  var YamlStyleGroup = function(YamlStyleGroup2) {
    YamlStyleGroup2["Flow"] = "Flow";
    YamlStyleGroup2["Block"] = "Block";
    return YamlStyleGroup2;
  }({});
  exports.YamlStyleGroup = YamlStyleGroup;
  var YamlStyleModel = (0, _stampit.default)({
    props: {
      styleGroup: null,
      style: null
    }
  });
  var _default = YamlStyleModel;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/predicates.cjs
var require_predicates3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isTag = exports.isStream = exports.isSequence = exports.isScalar = exports.isMapping = exports.isKeyValuePair = exports.isDocument = exports.isDirective = exports.isComment = exports.isAlias = undefined;
  var _predicates = require_predicates();
  var isStream = _predicates.isNodeType.bind(undefined, "stream");
  exports.isStream = isStream;
  var isDocument = _predicates.isNodeType.bind(undefined, "document");
  exports.isDocument = isDocument;
  var isMapping = _predicates.isNodeType.bind(undefined, "mapping");
  exports.isMapping = isMapping;
  var isSequence = _predicates.isNodeType.bind(undefined, "sequence");
  exports.isSequence = isSequence;
  var isKeyValuePair = _predicates.isNodeType.bind(undefined, "keyValuePair");
  exports.isKeyValuePair = isKeyValuePair;
  var isTag = _predicates.isNodeType.bind(undefined, "tag");
  exports.isTag = isTag;
  var isScalar = _predicates.isNodeType.bind(undefined, "scalar");
  exports.isScalar = isScalar;
  var isAlias = _predicates.isNodeType.bind(undefined, "alias");
  exports.isAlias = isAlias;
  var isDirective = _predicates.isNodeType.bind(undefined, "directive");
  exports.isDirective = isDirective;
  var isComment = _predicates.isNodeType.bind(undefined, "comment");
  exports.isComment = isComment;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlKeyValuePair.cjs
var require_YamlKeyValuePair = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var _YamlStyle = _interopRequireDefault(require_YamlStyle());
  var _predicates = require_predicates3();
  var YamlKeyValuePair = (0, _stampit.default)(_Node.default, _YamlStyle.default, {
    statics: {
      type: "keyValuePair"
    },
    propertyDescriptors: {
      key: {
        get() {
          return this.children.filter((node) => (0, _predicates.isScalar)(node) || (0, _predicates.isMapping)(node) || (0, _predicates.isSequence)(node))[0];
        },
        enumerable: true
      },
      value: {
        get() {
          const {
            key,
            children
          } = this;
          const excludeKeyPredicate = (node) => node !== key;
          const valuePredicate = (node) => (0, _predicates.isScalar)(node) || (0, _predicates.isMapping)(node) || (0, _predicates.isSequence)(node) || (0, _predicates.isAlias)(node);
          return children.filter((node) => excludeKeyPredicate(node) && valuePredicate(node))[0];
        },
        enumerable: true
      }
    }
  });
  var _default = YamlKeyValuePair;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlMapping.cjs
var require_YamlMapping = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _YamlCollection = _interopRequireDefault(require_YamlCollection());
  var _predicates = require_predicates3();
  var YamlMapping = (0, _stampit.default)(_YamlCollection.default, {
    statics: {
      type: "mapping"
    },
    propertyDescriptors: {
      content: {
        get() {
          return Array.isArray(this.children) ? this.children.filter(_predicates.isKeyValuePair) : [];
        },
        enumerable: true
      }
    }
  });
  var _default = YamlMapping;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlScalar.cjs
var require_YamlScalar = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _YamlNode = _interopRequireDefault(require_YamlNode());
  var YamlScalar = (0, _stampit.default)(_YamlNode.default, {
    statics: {
      type: "scalar"
    },
    props: {
      content: ""
    },
    init({
      content
    } = {}) {
      this.content = content;
    }
  });
  var _default = YamlScalar;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlSequence.cjs
var require_YamlSequence = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _YamlCollection = _interopRequireDefault(require_YamlCollection());
  var _predicates = require_predicates3();
  var YamlSequence = (0, _stampit.default)(_YamlCollection.default, {
    statics: {
      type: "sequence"
    },
    propertyDescriptors: {
      content: {
        get() {
          const {
            children
          } = this;
          return Array.isArray(children) ? children.filter((node) => (0, _predicates.isSequence)(node) || (0, _predicates.isMapping)(node) || (0, _predicates.isScalar)(node) || (0, _predicates.isAlias)(node)) : [];
        },
        enumerable: true
      }
    }
  });
  var _default = YamlSequence;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlStream.cjs
var require_YamlStream = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var _predicates = require_predicates3();
  var YamlStream = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "stream"
    },
    propertyDescriptors: {
      content: {
        get() {
          return Array.isArray(this.children) ? this.children.filter((node) => (0, _predicates.isDocument)(node) || (0, _predicates.isComment)(node)) : [];
        },
        enumerable: true
      }
    }
  });
  var _default = YamlStream;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlTag.cjs
var require_YamlTag = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.YamlNodeKind = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var YamlNodeKind = function(YamlNodeKind2) {
    YamlNodeKind2["Scalar"] = "Scalar";
    YamlNodeKind2["Sequence"] = "Sequence";
    YamlNodeKind2["Mapping"] = "Mapping";
    return YamlNodeKind2;
  }({});
  exports.YamlNodeKind = YamlNodeKind;
  var YamlTag = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "tag"
    },
    props: {
      explicitName: "",
      kind: null
    },
    init({
      explicitName,
      kind
    } = {}) {
      this.explicitName = explicitName;
      this.kind = kind;
    }
  });
  var _default = YamlTag;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/nodes/YamlAnchor.cjs
var require_YamlAnchor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var YamlAnchor = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "anchor"
    },
    props: {
      name: null
    },
    init({
      name = null
    } = {}) {
      this.name = name;
    }
  });
  var _default = YamlAnchor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/errors/YamlSchemaError.cjs
var require_YamlSchemaError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class YamlSchemaError extends _apidomError.ApiDOMStructuredError {
  }
  var _default = YamlSchemaError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/errors/YamlTagError.cjs
var require_YamlTagError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _YamlSchemaError = _interopRequireDefault(require_YamlSchemaError());

  class YamlTagError extends _YamlSchemaError.default {
    constructor(message, structuredOptions) {
      super(message, structuredOptions);
      if (typeof structuredOptions !== "undefined") {
        this.specificTagName = structuredOptions.specificTagName;
        this.explicitTagName = structuredOptions.explicitTagName;
        this.tagKind = structuredOptions.tagKind;
        this.tagPosition = structuredOptions.tagPosition;
        this.nodeCanonicalContent = structuredOptions.nodeCanonicalContent;
      }
    }
  }
  var _default = YamlTagError;
  exports.default = _default;
});

// node_modules/unraw/dist/errors.js
var require_errors4 = __commonJS((exports) => {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.errorMessages = exports.ErrorType = undefined;
  var ErrorType;
  (function(ErrorType2) {
    ErrorType2["MalformedUnicode"] = "MALFORMED_UNICODE";
    ErrorType2["MalformedHexadecimal"] = "MALFORMED_HEXADECIMAL";
    ErrorType2["CodePointLimit"] = "CODE_POINT_LIMIT";
    ErrorType2["OctalDeprecation"] = "OCTAL_DEPRECATION";
    ErrorType2["EndOfString"] = "END_OF_STRING";
  })(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
  exports.errorMessages = new Map([
    [ErrorType.MalformedUnicode, "malformed Unicode character escape sequence"],
    [
      ErrorType.MalformedHexadecimal,
      "malformed hexadecimal character escape sequence"
    ],
    [
      ErrorType.CodePointLimit,
      "Unicode codepoint must not be greater than 0x10FFFF in escape sequence"
    ],
    [
      ErrorType.OctalDeprecation,
      '"0"-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the "0o" prefix instead'
    ],
    [ErrorType.EndOfString, "malformed escape sequence at end of string"]
  ]);
});

// node_modules/unraw/dist/index.js
var require_dist3 = __commonJS((exports) => {
  var parseHexToInt = function(hex) {
    const isOnlyHexChars = !hex.match(/[^a-f0-9]/i);
    return isOnlyHexChars ? parseInt(hex, 16) : NaN;
  };
  var validateAndParseHex = function(hex, errorName, enforcedLength) {
    const parsedHex = parseHexToInt(hex);
    if (Number.isNaN(parsedHex) || enforcedLength !== undefined && enforcedLength !== hex.length) {
      throw new SyntaxError(errors_1.errorMessages.get(errorName));
    }
    return parsedHex;
  };
  var parseHexadecimalCode = function(code) {
    const parsedCode = validateAndParseHex(code, errors_1.ErrorType.MalformedHexadecimal, 2);
    return String.fromCharCode(parsedCode);
  };
  var parseUnicodeCode = function(code, surrogateCode) {
    const parsedCode = validateAndParseHex(code, errors_1.ErrorType.MalformedUnicode, 4);
    if (surrogateCode !== undefined) {
      const parsedSurrogateCode = validateAndParseHex(surrogateCode, errors_1.ErrorType.MalformedUnicode, 4);
      return String.fromCharCode(parsedCode, parsedSurrogateCode);
    }
    return String.fromCharCode(parsedCode);
  };
  var isCurlyBraced = function(text) {
    return text.charAt(0) === "{" && text.charAt(text.length - 1) === "}";
  };
  var parseUnicodeCodePointCode = function(codePoint) {
    if (!isCurlyBraced(codePoint)) {
      throw new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.MalformedUnicode));
    }
    const withoutBraces = codePoint.slice(1, -1);
    const parsedCode = validateAndParseHex(withoutBraces, errors_1.ErrorType.MalformedUnicode);
    try {
      return String.fromCodePoint(parsedCode);
    } catch (err) {
      throw err instanceof RangeError ? new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.CodePointLimit)) : err;
    }
  };
  var parseOctalCode = function(code, error = false) {
    if (error) {
      throw new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.OctalDeprecation));
    }
    const parsedCode = parseInt(code, 8);
    return String.fromCharCode(parsedCode);
  };
  var parseSingleCharacterCode = function(code) {
    return singleCharacterEscapes.get(code) || code;
  };
  var unraw = function(raw, allowOctals = false) {
    return raw.replace(escapeMatch, function(_, backslash, hex, codePoint, unicodeWithSurrogate, surrogate, unicode, octal, singleCharacter) {
      if (backslash !== undefined) {
        return "\\";
      }
      if (hex !== undefined) {
        return parseHexadecimalCode(hex);
      }
      if (codePoint !== undefined) {
        return parseUnicodeCodePointCode(codePoint);
      }
      if (unicodeWithSurrogate !== undefined) {
        return parseUnicodeCode(unicodeWithSurrogate, surrogate);
      }
      if (unicode !== undefined) {
        return parseUnicodeCode(unicode);
      }
      if (octal === "0") {
        return "\0";
      }
      if (octal !== undefined) {
        return parseOctalCode(octal, !allowOctals);
      }
      if (singleCharacter !== undefined) {
        return parseSingleCharacterCode(singleCharacter);
      }
      throw new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.EndOfString));
    });
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.unraw = exports.errorMessages = exports.ErrorType = undefined;
  var errors_1 = require_errors4();
  Object.defineProperty(exports, "ErrorType", { enumerable: true, get: function() {
    return errors_1.ErrorType;
  } });
  Object.defineProperty(exports, "errorMessages", { enumerable: true, get: function() {
    return errors_1.errorMessages;
  } });
  var singleCharacterEscapes = new Map([
    ["b", "\b"],
    ["f", "\f"],
    ["n", "\n"],
    ["r", "\r"],
    ["t", "\t"],
    ["v", "\v"],
    ["0", "\0"]
  ]);
  var escapeMatch = /\\(?:(\\)|x([\s\S]{0,2})|u(\{[^}]*\}?)|u([\s\S]{4})\\u([^{][\s\S]{0,3})|u([\s\S]{0,4})|([0-3]?[0-7]{1,2})|([\s\S])|$)/g;
  exports.unraw = unraw;
  exports.default = unraw;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/canonical-format.cjs
var require_canonical_format = __commonJS((exports) => {
  exports.__esModule = true;
  exports.formatFlowSingleQuoted = exports.formatFlowPlain = exports.formatFlowDoubleQuoted = exports.formatBlockLiteral = exports.formatBlockFolded = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _unraw = require_dist3();
  var blockStyleRegExp = /^(?<style>[|>])(?<chomping>[+-]?)(?<indentation>[0-9]*)\s/;
  var getIndentationIndicator = (content) => {
    const matches = content.match(blockStyleRegExp);
    const indicator = (0, _ramda.pathOr)("", ["groups", "indentation"], matches);
    return (0, _ramdaAdjunct.isEmptyString)(indicator) ? undefined : parseInt(indicator, 10);
  };
  var getIndentation = (content) => {
    const explicitIndentationIndicator = getIndentationIndicator(content);
    if ((0, _ramdaAdjunct.isInteger)(explicitIndentationIndicator)) {
      return (0, _ramdaAdjunct.repeatStr)(" ", explicitIndentationIndicator);
    }
    const firstLine = (0, _ramda.pathOr)("", [1], content.split("\n"));
    const implicitIndentationIndicator = (0, _ramda.pathOr)(0, ["groups", "indentation", "length"], firstLine.match(/^(?<indentation>[ ]*)/));
    return (0, _ramdaAdjunct.repeatStr)(" ", implicitIndentationIndicator);
  };
  var getChompingIndicator = (content) => {
    const matches = content.match(blockStyleRegExp);
    const indicator = (0, _ramda.pathOr)("", ["groups", "chomping"], matches);
    return (0, _ramdaAdjunct.isEmptyString)(indicator) ? undefined : indicator;
  };
  var chomp = (indicator, content) => {
    if ((0, _ramdaAdjunct.isUndefined)(indicator)) {
      return `${(0, _ramdaAdjunct.trimEnd)(content)}\n`;
    }
    if (indicator === "-") {
      return (0, _ramdaAdjunct.trimEnd)(content);
    }
    if (indicator === "+") {
      return content;
    }
    return content;
  };
  var normalizeLineBreaks = (val) => val.replace(/\r\n/g, "\n");
  var preventLineBreakCollapseToSpace = (val) => val.replace(/\\\n\s*/g, "");
  var collapseLineBreakToSpace = (val) => {
    return val.replace(/(\n)?\n([^\n]+)/g, (match, p1, p2) => p1 ? match : ` ${p2.trimStart()}`).replace(/[\n]{2}/g, "\n");
  };
  var removeQuotes = (0, _ramda.curry)((quoteType, val) => val.replace(new RegExp(`^${quoteType}`), "").replace(new RegExp(`${quoteType}\$`), ""));
  var formatFlowPlain = (0, _ramda.pipe)(normalizeLineBreaks, _ramda.trim, collapseLineBreakToSpace, (0, _ramda.split)("\n"), (0, _ramda.map)(_ramdaAdjunct.trimStart), (0, _ramda.join)("\n"));
  exports.formatFlowPlain = formatFlowPlain;
  var formatFlowSingleQuoted = (0, _ramda.pipe)(normalizeLineBreaks, _ramda.trim, removeQuotes("'"), collapseLineBreakToSpace, (0, _ramda.split)("\n"), (0, _ramda.map)(_ramdaAdjunct.trimStart), (0, _ramda.join)("\n"));
  exports.formatFlowSingleQuoted = formatFlowSingleQuoted;
  var formatFlowDoubleQuoted = (0, _ramda.pipe)(normalizeLineBreaks, _ramda.trim, removeQuotes('"'), preventLineBreakCollapseToSpace, collapseLineBreakToSpace, _unraw.unraw, (0, _ramda.split)("\n"), (0, _ramda.map)(_ramdaAdjunct.trimStart), (0, _ramda.join)("\n"));
  exports.formatFlowDoubleQuoted = formatFlowDoubleQuoted;
  var formatBlockLiteral = (content) => {
    const indentation = getIndentation(content);
    const chompingIndicator = getChompingIndicator(content);
    const normalized = normalizeLineBreaks(content);
    const lines = (0, _ramda.tail)(normalized.split("\n"));
    const transducer = (0, _ramda.compose)((0, _ramda.map)((0, _ramdaAdjunct.trimCharsStart)(indentation)), (0, _ramda.map)((0, _ramdaAdjunct.concatRight)("\n")));
    const deindented = (0, _ramda.transduce)(transducer, _ramda.concat, "", lines);
    return chomp(chompingIndicator, deindented);
  };
  exports.formatBlockLiteral = formatBlockLiteral;
  var formatBlockFolded = (content) => {
    const indentation = getIndentation(content);
    const chompingIndicator = getChompingIndicator(content);
    const normalized = normalizeLineBreaks(content);
    const lines = (0, _ramda.tail)(normalized.split("\n"));
    const transducer = (0, _ramda.compose)((0, _ramda.map)((0, _ramdaAdjunct.trimCharsStart)(indentation)), (0, _ramda.map)((0, _ramdaAdjunct.concatRight)("\n")));
    const deindented = (0, _ramda.transduce)(transducer, _ramda.concat, "", lines);
    const collapsed = collapseLineBreakToSpace(deindented);
    return chomp(chompingIndicator, collapsed);
  };
  exports.formatBlockFolded = formatBlockFolded;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/ScalarTag.cjs
var require_ScalarTag = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _canonicalFormat = require_canonical_format();
  var _YamlStyle = require_YamlStyle();
  var _YamlTag = require_YamlTag();
  var ScalarTag = (0, _stampit.default)({
    methods: {
      test(node) {
        return node.tag.kind === _YamlTag.YamlNodeKind.Scalar && typeof node.content === "string";
      },
      canonicalFormat(node) {
        let canonicalForm = node.content;
        const nodeClone = node.clone();
        if (node.style === _YamlStyle.YamlStyle.Plain) {
          canonicalForm = (0, _canonicalFormat.formatFlowPlain)(node.content);
        } else if (node.style === _YamlStyle.YamlStyle.SingleQuoted) {
          canonicalForm = (0, _canonicalFormat.formatFlowSingleQuoted)(node.content);
        } else if (node.style === _YamlStyle.YamlStyle.DoubleQuoted) {
          canonicalForm = (0, _canonicalFormat.formatFlowDoubleQuoted)(node.content);
        } else if (node.style === _YamlStyle.YamlStyle.Literal) {
          canonicalForm = (0, _canonicalFormat.formatBlockLiteral)(node.content);
        } else if (node.style === _YamlStyle.YamlStyle.Folded) {
          canonicalForm = (0, _canonicalFormat.formatBlockFolded)(node.content);
        }
        nodeClone.content = canonicalForm;
        return nodeClone;
      },
      resolve(node) {
        return node;
      }
    }
  });
  var _default = ScalarTag;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/Tag.cjs
var require_Tag = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ScalarTag = _interopRequireDefault(require_ScalarTag());
  var Tag = (0, _stampit.default)(_ScalarTag.default, {
    props: {
      tag: ""
    }
  });
  var _default = Tag;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/failsafe/GenericMapping.cjs
var require_GenericMapping = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var _YamlTag = require_YamlTag();
  var GenericMapping = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:map"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      test(node) {
        return node.tag.kind === _YamlTag.YamlNodeKind.Mapping;
      },
      resolve(node) {
        return node;
      }
    }
  });
  var _default = GenericMapping;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/failsafe/GenericSequence.cjs
var require_GenericSequence = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var _YamlTag = require_YamlTag();
  var GenericSequence = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:seq"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      test(node) {
        return node.tag.kind === _YamlTag.YamlNodeKind.Sequence;
      },
      resolve(node) {
        return node;
      }
    }
  });
  var _default = GenericSequence;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/failsafe/GenericString.cjs
var require_GenericString = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var GenericString = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:str"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      resolve(node) {
        return node;
      }
    }
  });
  var _default = GenericString;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/failsafe/index.cjs
var require_failsafe2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _YamlTagError = _interopRequireDefault(require_YamlTagError());
  var _YamlTag = require_YamlTag();
  var _GenericMapping = _interopRequireDefault(require_GenericMapping());
  var _GenericSequence = _interopRequireDefault(require_GenericSequence());
  var _GenericString = _interopRequireDefault(require_GenericString());
  var _ScalarTag = _interopRequireDefault(require_ScalarTag());
  var FailsafeSchema = (0, _stampit.default)({
    props: {
      tags: [],
      tagDirectives: []
    },
    init() {
      this.tags = [];
      this.tagDirectives = [];
      this.registerTag((0, _GenericMapping.default)());
      this.registerTag((0, _GenericSequence.default)());
      this.registerTag((0, _GenericString.default)());
    },
    methods: {
      toSpecificTagName(node) {
        let specificTagName = node.tag.explicitName;
        if (node.tag.explicitName === "!") {
          if (node.tag.kind === _YamlTag.YamlNodeKind.Scalar) {
            specificTagName = _GenericString.default.uri;
          } else if (node.tag.kind === _YamlTag.YamlNodeKind.Sequence) {
            specificTagName = _GenericSequence.default.uri;
          } else if (node.tag.kind === _YamlTag.YamlNodeKind.Mapping) {
            specificTagName = _GenericMapping.default.uri;
          }
        } else if (node.tag.explicitName.startsWith("!<")) {
          specificTagName = node.tag.explicitName.replace(/^!</, "").replace(/>$/, "");
        } else if (node.tag.explicitName.startsWith("!!")) {
          specificTagName = `tag:yaml.org,2002:${node.tag.explicitName.replace(/^!!/, "")}`;
        }
        return specificTagName;
      },
      registerTagDirective(tagDirective) {
        this.tagDirectives.push({
          handle: tagDirective.parameters.handle,
          prefix: tagDirective.parameters.prefix
        });
      },
      registerTag(tag, beginning = false) {
        if (beginning) {
          this.tags.unshift(tag);
        } else {
          this.tags.push(tag);
        }
        return this;
      },
      overrideTag(tag) {
        this.tags = this.tags.filter((itag) => itag.tag === tag.tag);
        this.tags.push(tag);
        return this;
      },
      resolve(node) {
        const specificTagName = this.toSpecificTagName(node);
        if (specificTagName === "?") {
          return node;
        }
        let canonicalNode = node;
        if (node.tag.kind === _YamlTag.YamlNodeKind.Scalar) {
          canonicalNode = (0, _ScalarTag.default)().canonicalFormat(node);
        }
        const tag = this.tags.find((itag) => (itag == null ? undefined : itag.tag) === specificTagName);
        if (typeof tag === "undefined") {
          throw new _YamlTagError.default(`Tag "${specificTagName}" was not recognized.`, {
            specificTagName,
            explicitTagName: node.tag.explicitName,
            tagKind: node.tag.kind,
            tagPosition: (0, _ramda.clone)(node.tag.position)
          });
        }
        if (!tag.test(canonicalNode)) {
          throw new _YamlTagError.default(`Node couldn't be resolved against the tag "${specificTagName}"`, {
            specificTagName,
            explicitTagName: node.tag.explicitName,
            tagKind: node.tag.kind,
            tagPosition: (0, _ramda.clone)(node.tag.position),
            nodeCanonicalContent: canonicalNode.content
          });
        }
        return tag.resolve(canonicalNode);
      }
    }
  });
  var _default = FailsafeSchema;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/json/Boolean.cjs
var require_Boolean = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var Boolean2 = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:bool"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      test(node) {
        return /^(true|false)$/.test(node.content);
      },
      resolve(node) {
        const content = node.content === "true";
        const nodeClone = node.clone();
        nodeClone.content = content;
        return nodeClone;
      }
    }
  });
  var _default = Boolean2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/json/FloatingPoint.cjs
var require_FloatingPoint = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var FloatingPoint = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:float"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      test(node) {
        return /^-?(0|[1-9][0-9]*)(\.[0-9]*)?([eE][-+]?[0-9]+)?$/.test(node.content);
      },
      resolve(node) {
        const content = parseFloat(node.content);
        const nodeClone = node.clone();
        nodeClone.content = content;
        return nodeClone;
      }
    }
  });
  var _default = FloatingPoint;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/json/Integer.cjs
var require_Integer = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var Integer = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:int"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      test(node) {
        return /^-?(0|[1-9][0-9]*)$/.test(node.content);
      },
      resolve(node) {
        const content = parseInt(node.content, 10);
        const nodeClone = node.clone();
        nodeClone.content = content;
        return nodeClone;
      }
    }
  });
  var _default = Integer;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/json/Null.cjs
var require_Null = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Tag = _interopRequireDefault(require_Tag());
  var Null = (0, _stampit.default)(_Tag.default, {
    statics: {
      uri: "tag:yaml.org,2002:null"
    },
    init(args, {
      stamp
    }) {
      this.tag = stamp.uri;
    },
    methods: {
      test(node) {
        return /^null$/.test(node.content);
      },
      resolve(node) {
        const nodeClone = node.clone();
        nodeClone.content = null;
        return nodeClone;
      }
    }
  });
  var _default = Null;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/yaml/schemas/json/index.cjs
var require_json2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _index = _interopRequireDefault(require_failsafe2());
  var _Boolean = _interopRequireDefault(require_Boolean());
  var _FloatingPoint = _interopRequireDefault(require_FloatingPoint());
  var _Integer = _interopRequireDefault(require_Integer());
  var _Null = _interopRequireDefault(require_Null());
  var _YamlTag = require_YamlTag();
  var _GenericSequence = _interopRequireDefault(require_GenericSequence());
  var _GenericMapping = _interopRequireDefault(require_GenericMapping());
  var JsonSchema = (0, _stampit.default)(_index.default, {
    init() {
      this.registerTag((0, _Boolean.default)(), true);
      this.registerTag((0, _FloatingPoint.default)(), true);
      this.registerTag((0, _Integer.default)(), true);
      this.registerTag((0, _Null.default)(), true);
    },
    methods: {
      toSpecificTagName(node) {
        let specificTagName = _index.default.compose.methods.toSpecificTagName.call(this, node);
        if (specificTagName === "?") {
          if (node.tag.vkind === _YamlTag.YamlNodeKind.Sequence) {
            specificTagName = _GenericSequence.default.uri;
          } else if (node.tag.kind === _YamlTag.YamlNodeKind.Mapping) {
            specificTagName = _GenericMapping.default.uri;
          } else if (node.tag.kind === _YamlTag.YamlNodeKind.Scalar) {
            const foundTag = this.tags.find((tag) => tag.test(node));
            specificTagName = (foundTag == null ? undefined : foundTag.tag) || "?";
          }
        }
        return specificTagName;
      }
    }
  });
  var _default = JsonSchema;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/Literal.cjs
var require_Literal = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var Literal = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "literal"
    },
    props: {
      value: null
    },
    init({
      value = null
    } = {}) {
      this.value = value;
    }
  });
  var _default = Literal;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/Position.cjs
var require_Position = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.Point = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var Point = (0, _stampit.default)({
    statics: {
      type: "point"
    },
    props: {
      type: "point",
      row: null,
      column: null,
      char: null
    },
    init({
      row = null,
      column = null,
      char = null
    } = {}) {
      this.row = row;
      this.column = column;
      this.char = char;
    }
  });
  exports.Point = Point;
  var Position = (0, _stampit.default)({
    statics: {
      type: "position"
    },
    props: {
      type: "position",
      start: null,
      end: null
    },
    init({
      start = null,
      end = null
    } = {}) {
      this.start = start;
      this.end = end;
    }
  });
  var _default = Position;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/Error.cjs
var require_Error = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Node = _interopRequireDefault(require_Node2());
  var Error2 = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "error"
    },
    props: {
      value: null,
      isUnexpected: false
    },
    init({
      value = null,
      isUnexpected = false
    } = {}) {
      this.value = value;
      this.isUnexpected = isUnexpected;
    }
  });
  var _default = Error2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/ParseResult.cjs
var require_ParseResult2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Node = _interopRequireDefault(require_Node2());
  var ParseResult = (0, _stampit.default)(_Node.default, {
    statics: {
      type: "parseResult"
    },
    methods: {
      get rootNode() {
        return (0, _ramda.head)(this.children);
      }
    }
  });
  var _default = ParseResult;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ast/cjs/traversal/visitor.cjs
var require_visitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.visit = exports.mergeAll = exports.isNode = exports.getVisitFn = exports.getNodeType = exports.BREAK = undefined;
  var _apidomError = require_cjs2();
  var getVisitFn = (visitor2, type, isLeaving) => {
    const typeVisitor = visitor2[type];
    if (typeVisitor != null) {
      if (!isLeaving && typeof typeVisitor === "function") {
        return typeVisitor;
      }
      const typeSpecificVisitor = isLeaving ? typeVisitor.leave : typeVisitor.enter;
      if (typeof typeSpecificVisitor === "function") {
        return typeSpecificVisitor;
      }
    } else {
      const specificVisitor = isLeaving ? visitor2.leave : visitor2.enter;
      if (specificVisitor != null) {
        if (typeof specificVisitor === "function") {
          return specificVisitor;
        }
        const specificTypeVisitor = specificVisitor[type];
        if (typeof specificTypeVisitor === "function") {
          return specificTypeVisitor;
        }
      }
    }
    return null;
  };
  exports.getVisitFn = getVisitFn;
  var BREAK = {};
  exports.BREAK = BREAK;
  var getNodeType = (node) => node == null ? undefined : node.type;
  exports.getNodeType = getNodeType;
  var isNode = (node) => typeof getNodeType(node) === "string";
  exports.isNode = isNode;
  var mergeAll = (visitors, {
    visitFnGetter = getVisitFn,
    nodeTypeGetter = getNodeType
  } = {}) => {
    const skipping = new Array(visitors.length);
    return {
      enter(node, ...rest) {
        for (let i = 0;i < visitors.length; i += 1) {
          if (skipping[i] == null) {
            const fn = visitFnGetter(visitors[i], nodeTypeGetter(node), false);
            if (typeof fn === "function") {
              const result = fn.call(visitors[i], node, ...rest);
              if (result === false) {
                skipping[i] = node;
              } else if (result === BREAK) {
                skipping[i] = BREAK;
              } else if (result !== undefined) {
                return result;
              }
            }
          }
        }
        return;
      },
      leave(node, ...rest) {
        for (let i = 0;i < visitors.length; i += 1) {
          if (skipping[i] == null) {
            const fn = visitFnGetter(visitors[i], nodeTypeGetter(node), true);
            if (typeof fn === "function") {
              const result = fn.call(visitors[i], node, ...rest);
              if (result === BREAK) {
                skipping[i] = BREAK;
              } else if (result !== undefined && result !== false) {
                return result;
              }
            }
          } else if (skipping[i] === node) {
            skipping[i] = null;
          }
        }
        return;
      }
    };
  };
  exports.mergeAll = mergeAll;
  var visit = (root, visitor2, {
    keyMap = null,
    state = {},
    breakSymbol = BREAK,
    deleteNodeSymbol = null,
    skipVisitingNodeSymbol = false,
    visitFnGetter = getVisitFn,
    nodeTypeGetter = getNodeType,
    nodePredicate = isNode,
    detectCycles = true
  } = {}) => {
    const visitorKeys = keyMap || {};
    let stack;
    let inArray = Array.isArray(root);
    let keys = [root];
    let index = -1;
    let parent;
    let edits = [];
    const path = [];
    const ancestors = [];
    let newRoot = root;
    do {
      index += 1;
      const isLeaving = index === keys.length;
      let key;
      let node;
      const isEdited = isLeaving && edits.length !== 0;
      if (isLeaving) {
        key = ancestors.length === 0 ? undefined : path.pop();
        node = parent;
        parent = ancestors.pop();
        if (isEdited) {
          if (inArray) {
            node = node.slice();
          } else {
            node = Object.create(Object.getPrototypeOf(node), Object.getOwnPropertyDescriptors(node));
          }
          let editOffset = 0;
          for (let ii = 0;ii < edits.length; ii += 1) {
            let editKey = edits[ii][0];
            const editValue = edits[ii][1];
            if (inArray) {
              editKey -= editOffset;
            }
            if (inArray && editValue === deleteNodeSymbol) {
              node.splice(editKey, 1);
              editOffset += 1;
            } else {
              node[editKey] = editValue;
            }
          }
        }
        index = stack.index;
        keys = stack.keys;
        edits = stack.edits;
        inArray = stack.inArray;
        stack = stack.prev;
      } else {
        key = parent ? inArray ? index : keys[index] : undefined;
        node = parent ? parent[key] : newRoot;
        if (node === deleteNodeSymbol || node === undefined) {
          continue;
        }
        if (parent) {
          path.push(key);
        }
      }
      if (ancestors.includes(node)) {
        continue;
      }
      let result;
      if (!Array.isArray(node)) {
        if (!nodePredicate(node)) {
          throw new _apidomError.ApiDOMError(`Invalid AST Node:  ${JSON.stringify(node)}`);
        }
        if (detectCycles && ancestors.includes(node)) {
          path.pop();
          continue;
        }
        const visitFn = visitFnGetter(visitor2, nodeTypeGetter(node), isLeaving);
        if (visitFn) {
          for (const [stateKey, stateValue] of Object.entries(state)) {
            visitor2[stateKey] = stateValue;
          }
          result = visitFn.call(visitor2, node, key, parent, path, ancestors);
          if (result === breakSymbol) {
            break;
          }
          if (result === skipVisitingNodeSymbol) {
            if (!isLeaving) {
              path.pop();
              continue;
            }
          } else if (result !== undefined) {
            edits.push([key, result]);
            if (!isLeaving) {
              if (nodePredicate(result)) {
                node = result;
              } else {
                path.pop();
                continue;
              }
            }
          }
        }
      }
      if (result === undefined && isEdited) {
        edits.push([key, node]);
      }
      if (!isLeaving) {
        stack = {
          inArray,
          index,
          keys,
          edits,
          prev: stack
        };
        inArray = Array.isArray(node);
        keys = inArray ? node : visitorKeys[nodeTypeGetter(node)] || [];
        index = -1;
        edits = [];
        if (parent) {
          ancestors.push(parent);
        }
        parent = node;
      }
    } while (stack !== undefined);
    if (edits.length !== 0) {
      [, newRoot] = edits[edits.length - 1];
    }
    return newRoot;
  };
  exports.visit = visit;
  visit[Symbol.for("nodejs.util.promisify.custom")] = async (root, visitor2, {
    keyMap = null,
    state = {},
    breakSymbol = BREAK,
    deleteNodeSymbol = null,
    skipVisitingNodeSymbol = false,
    visitFnGetter = getVisitFn,
    nodeTypeGetter = getNodeType,
    nodePredicate = isNode,
    detectCycles = true
  } = {}) => {
    const visitorKeys = keyMap || {};
    let stack;
    let inArray = Array.isArray(root);
    let keys = [root];
    let index = -1;
    let parent;
    let edits = [];
    const path = [];
    const ancestors = [];
    let newRoot = root;
    do {
      index += 1;
      const isLeaving = index === keys.length;
      let key;
      let node;
      const isEdited = isLeaving && edits.length !== 0;
      if (isLeaving) {
        key = ancestors.length === 0 ? undefined : path.pop();
        node = parent;
        parent = ancestors.pop();
        if (isEdited) {
          if (inArray) {
            node = node.slice();
          } else {
            node = Object.create(Object.getPrototypeOf(node), Object.getOwnPropertyDescriptors(node));
          }
          let editOffset = 0;
          for (let ii = 0;ii < edits.length; ii += 1) {
            let editKey = edits[ii][0];
            const editValue = edits[ii][1];
            if (inArray) {
              editKey -= editOffset;
            }
            if (inArray && editValue === deleteNodeSymbol) {
              node.splice(editKey, 1);
              editOffset += 1;
            } else {
              node[editKey] = editValue;
            }
          }
        }
        index = stack.index;
        keys = stack.keys;
        edits = stack.edits;
        inArray = stack.inArray;
        stack = stack.prev;
      } else {
        key = parent ? inArray ? index : keys[index] : undefined;
        node = parent ? parent[key] : newRoot;
        if (node === deleteNodeSymbol || node === undefined) {
          continue;
        }
        if (parent) {
          path.push(key);
        }
      }
      let result;
      if (!Array.isArray(node)) {
        if (!nodePredicate(node)) {
          throw new _apidomError.ApiDOMError(`Invalid AST Node:  ${JSON.stringify(node)}`);
        }
        if (detectCycles && ancestors.includes(node)) {
          path.pop();
          continue;
        }
        const visitFn = visitFnGetter(visitor2, nodeTypeGetter(node), isLeaving);
        if (visitFn) {
          for (const [stateKey, stateValue] of Object.entries(state)) {
            visitor2[stateKey] = stateValue;
          }
          result = await visitFn.call(visitor2, node, key, parent, path, ancestors);
          if (result === breakSymbol) {
            break;
          }
          if (result === skipVisitingNodeSymbol) {
            if (!isLeaving) {
              path.pop();
              continue;
            }
          } else if (result !== undefined) {
            edits.push([key, result]);
            if (!isLeaving) {
              if (nodePredicate(result)) {
                node = result;
              } else {
                path.pop();
                continue;
              }
            }
          }
        }
      }
      if (result === undefined && isEdited) {
        edits.push([key, node]);
      }
      if (!isLeaving) {
        stack = {
          inArray,
          index,
          keys,
          edits,
          prev: stack
        };
        inArray = Array.isArray(node);
        keys = inArray ? node : visitorKeys[nodeTypeGetter(node)] || [];
        index = -1;
        edits = [];
        if (parent) {
          ancestors.push(parent);
        }
        parent = node;
      }
    } while (stack !== undefined);
    if (edits.length !== 0) {
      [, newRoot] = edits[edits.length - 1];
    }
    return newRoot;
  };
});

// node_modules/@swagger-api/apidom-ast/cjs/index.cjs
var require_cjs3 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.visit = exports.mergeAllVisitors = exports.isYamlTag = exports.isYamlStream = exports.isYamlSequence = exports.isYamlScalar = exports.isYamlMapping = exports.isYamlKeyValuePair = exports.isYamlDocument = exports.isYamlDirective = exports.isYamlAlias = exports.isPosition = exports.isPoint = exports.isParseResult = exports.isNode = exports.isLiteral = exports.isJsonTrue = exports.isJsonStringContent = exports.isJsonString = exports.isJsonProperty = exports.isJsonObject = exports.isJsonNumber = exports.isJsonNull = exports.isJsonKey = exports.isJsonFalse = exports.isJsonEscapeSequence = exports.isJsonDocument = exports.isJsonArray = exports.getVisitFn = exports.getNodeType = exports.YamlTagError = exports.YamlTag = exports.YamlStyleGroup = exports.YamlStyle = exports.YamlStream = exports.YamlSequence = exports.YamlSchemaError = exports.YamlScalar = exports.YamlNodeKind = exports.YamlNode = exports.YamlMapping = exports.YamlKeyValuePair = exports.YamlJsonSchema = exports.YamlFailsafeSchema = exports.YamlDocument = exports.YamlDirective = exports.YamlComment = exports.YamlCollection = exports.YamlAnchor = exports.YamlAlias = exports.Position = exports.Point = exports.ParseResult = exports.Literal = exports.JsonValue = exports.JsonTrue = exports.JsonStringContent = exports.JsonString = exports.JsonProperty = exports.JsonObject = exports.JsonNumber = exports.JsonNull = exports.JsonNode = exports.JsonKey = exports.JsonFalse = exports.JsonEscapeSequence = exports.JsonDocument = exports.JsonArray = exports.Error = exports.BREAK = undefined;
  var _JsonNode = _interopRequireDefault(require_JsonNode());
  exports.JsonNode = _JsonNode.default;
  var _JsonDocument = _interopRequireDefault(require_JsonDocument());
  exports.JsonDocument = _JsonDocument.default;
  var _JsonObject = _interopRequireDefault(require_JsonObject());
  exports.JsonObject = _JsonObject.default;
  var _JsonProperty = _interopRequireDefault(require_JsonProperty());
  exports.JsonProperty = _JsonProperty.default;
  var _JsonArray = _interopRequireDefault(require_JsonArray());
  exports.JsonArray = _JsonArray.default;
  var _JsonValue = _interopRequireDefault(require_JsonValue());
  exports.JsonValue = _JsonValue.default;
  var _JsonKey = _interopRequireDefault(require_JsonKey());
  exports.JsonKey = _JsonKey.default;
  var _JsonString = _interopRequireDefault(require_JsonString());
  exports.JsonString = _JsonString.default;
  var _JsonStringContent = _interopRequireDefault(require_JsonStringContent());
  exports.JsonStringContent = _JsonStringContent.default;
  var _JsonEscapeSequence = _interopRequireDefault(require_JsonEscapeSequence());
  exports.JsonEscapeSequence = _JsonEscapeSequence.default;
  var _JsonNumber = _interopRequireDefault(require_JsonNumber());
  exports.JsonNumber = _JsonNumber.default;
  var _JsonTrue = _interopRequireDefault(require_JsonTrue());
  exports.JsonTrue = _JsonTrue.default;
  var _JsonFalse = _interopRequireDefault(require_JsonFalse());
  exports.JsonFalse = _JsonFalse.default;
  var _JsonNull = _interopRequireDefault(require_JsonNull());
  exports.JsonNull = _JsonNull.default;
  var _predicates = require_predicates2();
  exports.isJsonDocument = _predicates.isDocument;
  exports.isJsonFalse = _predicates.isFalse;
  exports.isJsonProperty = _predicates.isProperty;
  exports.isJsonStringContent = _predicates.isStringContent;
  exports.isJsonEscapeSequence = _predicates.isEscapeSequence;
  exports.isJsonArray = _predicates.isArray;
  exports.isJsonKey = _predicates.isKey;
  exports.isJsonNull = _predicates.isNull;
  exports.isJsonNumber = _predicates.isNumber;
  exports.isJsonObject = _predicates.isObject;
  exports.isJsonString = _predicates.isString;
  exports.isJsonTrue = _predicates.isTrue;
  var _YamlAlias = _interopRequireDefault(require_YamlAlias());
  exports.YamlAlias = _YamlAlias.default;
  var _YamlCollection = _interopRequireDefault(require_YamlCollection());
  exports.YamlCollection = _YamlCollection.default;
  var _YamlComment = _interopRequireDefault(require_YamlComment());
  exports.YamlComment = _YamlComment.default;
  var _YamlDirective = _interopRequireDefault(require_YamlDirective());
  exports.YamlDirective = _YamlDirective.default;
  var _YamlDocument = _interopRequireDefault(require_YamlDocument());
  exports.YamlDocument = _YamlDocument.default;
  var _YamlKeyValuePair = _interopRequireDefault(require_YamlKeyValuePair());
  exports.YamlKeyValuePair = _YamlKeyValuePair.default;
  var _YamlMapping = _interopRequireDefault(require_YamlMapping());
  exports.YamlMapping = _YamlMapping.default;
  var _YamlNode = _interopRequireDefault(require_YamlNode());
  exports.YamlNode = _YamlNode.default;
  var _YamlScalar = _interopRequireDefault(require_YamlScalar());
  exports.YamlScalar = _YamlScalar.default;
  var _YamlSequence = _interopRequireDefault(require_YamlSequence());
  exports.YamlSequence = _YamlSequence.default;
  var _YamlStream = _interopRequireDefault(require_YamlStream());
  exports.YamlStream = _YamlStream.default;
  var _YamlTag = _interopRequireWildcard(require_YamlTag());
  exports.YamlTag = _YamlTag.default;
  exports.YamlNodeKind = _YamlTag.YamlNodeKind;
  var _YamlAnchor = _interopRequireDefault(require_YamlAnchor());
  exports.YamlAnchor = _YamlAnchor.default;
  var _YamlStyle = require_YamlStyle();
  exports.YamlStyle = _YamlStyle.YamlStyle;
  exports.YamlStyleGroup = _YamlStyle.YamlStyleGroup;
  var _index = _interopRequireDefault(require_failsafe2());
  exports.YamlFailsafeSchema = _index.default;
  var _index2 = _interopRequireDefault(require_json2());
  exports.YamlJsonSchema = _index2.default;
  var _predicates2 = require_predicates3();
  exports.isYamlAlias = _predicates2.isAlias;
  exports.isYamlKeyValuePair = _predicates2.isKeyValuePair;
  exports.isYamlDirective = _predicates2.isDirective;
  exports.isYamlDocument = _predicates2.isDocument;
  exports.isYamlMapping = _predicates2.isMapping;
  exports.isYamlScalar = _predicates2.isScalar;
  exports.isYamlSequence = _predicates2.isSequence;
  exports.isYamlStream = _predicates2.isStream;
  exports.isYamlTag = _predicates2.isTag;
  var _YamlSchemaError = _interopRequireDefault(require_YamlSchemaError());
  exports.YamlSchemaError = _YamlSchemaError.default;
  var _YamlTagError = _interopRequireDefault(require_YamlTagError());
  exports.YamlTagError = _YamlTagError.default;
  var _Literal = _interopRequireDefault(require_Literal());
  exports.Literal = _Literal.default;
  var _Position = _interopRequireWildcard(require_Position());
  exports.Point = _Position.Point;
  exports.Position = _Position.default;
  var _Error = _interopRequireDefault(require_Error());
  exports.Error = _Error.default;
  var _ParseResult = _interopRequireDefault(require_ParseResult2());
  exports.ParseResult = _ParseResult.default;
  var _predicates3 = require_predicates();
  exports.isParseResult = _predicates3.isParseResult;
  exports.isLiteral = _predicates3.isLiteral;
  exports.isPoint = _predicates3.isPoint;
  exports.isPosition = _predicates3.isPosition;
  var _visitor = require_visitor();
  exports.getVisitFn = _visitor.getVisitFn;
  exports.BREAK = _visitor.BREAK;
  exports.mergeAllVisitors = _visitor.mergeAll;
  exports.visit = _visitor.visit;
  exports.getNodeType = _visitor.getNodeType;
  exports.isNode = _visitor.isNode;
});

// node_modules/@swagger-api/apidom-core/cjs/predicates/helpers.cjs
var require_helpers2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isElementType = exports.default = undefined;
  var hasMethod = (name, obj) => typeof (obj == null ? undefined : obj[name]) === "function";
  var hasBasicElementProps = (element) => element != null && Object.prototype.hasOwnProperty.call(element, "_storedElement") && Object.prototype.hasOwnProperty.call(element, "_content");
  var primitiveEq = (val, obj) => (obj == null || obj.primitive == null ? undefined : obj.primitive()) === val;
  var hasClass = (cls, obj) => {
    var _obj$classes;
    return (obj == null || (_obj$classes = obj.classes) == null || _obj$classes.includes == null ? undefined : _obj$classes.includes(cls)) || false;
  };
  var isElementType = (name, element) => (element == null ? undefined : element.element) === name;
  exports.isElementType = isElementType;
  var createPredicate = (predicateCreator) => {
    return predicateCreator({
      hasMethod,
      hasBasicElementProps,
      primitiveEq,
      isElementType,
      hasClass
    });
  };
  var _default = createPredicate;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/predicates/index.cjs
var require_predicates4 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.isStringElement = exports.isSourceMapElement = exports.isRefElement = exports.isPrimitiveElement = exports.isParseResultElement = exports.isObjectElement = exports.isNumberElement = exports.isNullElement = exports.isMemberElement = exports.isLinkElement = exports.isElement = exports.isCommentElement = exports.isBooleanElement = exports.isArrayElement = exports.isAnnotationElement = exports.includesSymbols = exports.includesClasses = exports.hasElementSourceMap = undefined;
  var _minim = require_minim();
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _Annotation = _interopRequireDefault(require_Annotation());
  var _Comment = _interopRequireDefault(require_Comment());
  var _ParseResult = _interopRequireDefault(require_ParseResult());
  var _SourceMap = _interopRequireDefault(require_SourceMap());
  var _helpers = _interopRequireWildcard(require_helpers2());
  var isElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.Element || hasBasicElementProps(element) && primitiveEq(undefined, element);
  });
  exports.isElement = isElement;
  var isStringElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.StringElement || hasBasicElementProps(element) && primitiveEq("string", element);
  });
  exports.isStringElement = isStringElement;
  var isNumberElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.NumberElement || hasBasicElementProps(element) && primitiveEq("number", element);
  });
  exports.isNumberElement = isNumberElement;
  var isNullElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.NullElement || hasBasicElementProps(element) && primitiveEq("null", element);
  });
  exports.isNullElement = isNullElement;
  var isBooleanElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.BooleanElement || hasBasicElementProps(element) && primitiveEq("boolean", element);
  });
  exports.isBooleanElement = isBooleanElement;
  var isObjectElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq,
    hasMethod
  }) => {
    return (element) => element instanceof _minim.ObjectElement || hasBasicElementProps(element) && primitiveEq("object", element) && hasMethod("keys", element) && hasMethod("values", element) && hasMethod("items", element);
  });
  exports.isObjectElement = isObjectElement;
  var isArrayElement = (0, _helpers.default)(({
    hasBasicElementProps,
    primitiveEq,
    hasMethod
  }) => {
    return (element) => element instanceof _minim.ArrayElement && !(element instanceof _minim.ObjectElement) || hasBasicElementProps(element) && primitiveEq("array", element) && hasMethod("push", element) && hasMethod("unshift", element) && hasMethod("map", element) && hasMethod("reduce", element);
  });
  exports.isArrayElement = isArrayElement;
  var isMemberElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.MemberElement || hasBasicElementProps(element) && isElementType("member", element) && primitiveEq(undefined, element);
  });
  exports.isMemberElement = isMemberElement;
  var isLinkElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.LinkElement || hasBasicElementProps(element) && isElementType("link", element) && primitiveEq(undefined, element);
  });
  exports.isLinkElement = isLinkElement;
  var isRefElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _minim.RefElement || hasBasicElementProps(element) && isElementType("ref", element) && primitiveEq(undefined, element);
  });
  exports.isRefElement = isRefElement;
  var isAnnotationElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Annotation.default || hasBasicElementProps(element) && isElementType("annotation", element) && primitiveEq("array", element);
  });
  exports.isAnnotationElement = isAnnotationElement;
  var isCommentElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Comment.default || hasBasicElementProps(element) && isElementType("comment", element) && primitiveEq("string", element);
  });
  exports.isCommentElement = isCommentElement;
  var isParseResultElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _ParseResult.default || hasBasicElementProps(element) && isElementType("parseResult", element) && primitiveEq("array", element);
  });
  exports.isParseResultElement = isParseResultElement;
  var isSourceMapElement = (0, _helpers.default)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _SourceMap.default || hasBasicElementProps(element) && isElementType("sourceMap", element) && primitiveEq("array", element);
  });
  exports.isSourceMapElement = isSourceMapElement;
  var isPrimitiveElement = (element) => {
    return (0, _helpers.isElementType)("object", element) || (0, _helpers.isElementType)("array", element) || (0, _helpers.isElementType)("boolean", element) || (0, _helpers.isElementType)("number", element) || (0, _helpers.isElementType)("string", element) || (0, _helpers.isElementType)("null", element) || (0, _helpers.isElementType)("member", element);
  };
  exports.isPrimitiveElement = isPrimitiveElement;
  var hasElementSourceMap = (element) => {
    var _element$meta;
    return isSourceMapElement(element == null || (_element$meta = element.meta) == null || _element$meta.get == null ? undefined : _element$meta.get("sourceMap"));
  };
  exports.hasElementSourceMap = hasElementSourceMap;
  var includesSymbols = (symbols, element) => {
    if (symbols.length === 0) {
      return true;
    }
    const elementSymbols = element.attributes.get("symbols");
    if (!isArrayElement(elementSymbols)) {
      return false;
    }
    return (0, _ramda.all)((0, _ramdaAdjunct.included)(elementSymbols.toValue()), symbols);
  };
  exports.includesSymbols = includesSymbols;
  var includesClasses = (classes, element) => {
    if (classes.length === 0) {
      return true;
    }
    return (0, _ramda.all)((0, _ramdaAdjunct.included)(element.classes.toValue()), classes);
  };
  exports.includesClasses = includesClasses;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/visitor.cjs
var require_visitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.visit = exports.keyMapDefault = exports.isNode = exports.getNodeType = exports.PredicateVisitor = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomAst = require_cjs3();
  exports.BREAK = _apidomAst.BREAK;
  exports.mergeAllVisitors = _apidomAst.mergeAllVisitors;
  var _index = require_predicates4();
  var getNodeType = (element) => {
    return (0, _index.isObjectElement)(element) ? "ObjectElement" : (0, _index.isArrayElement)(element) ? "ArrayElement" : (0, _index.isMemberElement)(element) ? "MemberElement" : (0, _index.isStringElement)(element) ? "StringElement" : (0, _index.isBooleanElement)(element) ? "BooleanElement" : (0, _index.isNumberElement)(element) ? "NumberElement" : (0, _index.isNullElement)(element) ? "NullElement" : (0, _index.isLinkElement)(element) ? "LinkElement" : (0, _index.isRefElement)(element) ? "RefElement" : undefined;
  };
  exports.getNodeType = getNodeType;
  var isNode = (0, _ramda.pipe)(getNodeType, _ramdaAdjunct.isString);
  exports.isNode = isNode;
  var keyMapDefault = {
    ObjectElement: ["content"],
    ArrayElement: ["content"],
    MemberElement: ["key", "value"],
    StringElement: [],
    BooleanElement: [],
    NumberElement: [],
    NullElement: [],
    RefElement: [],
    LinkElement: [],
    Annotation: [],
    Comment: [],
    ParseResultElement: ["content"],
    SourceMap: ["content"]
  };
  exports.keyMapDefault = keyMapDefault;
  var PredicateVisitor = (0, _stampit.default)({
    props: {
      result: [],
      predicate: _ramda.F,
      returnOnTrue: undefined,
      returnOnFalse: undefined
    },
    init({
      predicate = this.predicate,
      returnOnTrue = this.returnOnTrue,
      returnOnFalse = this.returnOnFalse
    } = {}) {
      this.result = [];
      this.predicate = predicate;
      this.returnOnTrue = returnOnTrue;
      this.returnOnFalse = returnOnFalse;
    },
    methods: {
      enter(element) {
        if (this.predicate(element)) {
          this.result.push(element);
          return this.returnOnTrue;
        }
        return this.returnOnFalse;
      }
    }
  });
  exports.PredicateVisitor = PredicateVisitor;
  var visit = (root, visitor2, {
    keyMap = keyMapDefault,
    ...rest
  } = {}) => {
    return (0, _apidomAst.visit)(root, visitor2, {
      keyMap,
      nodeTypeGetter: getNodeType,
      nodePredicate: isNode,
      ...rest
    });
  };
  exports.visit = visit;
  visit[Symbol.for("nodejs.util.promisify.custom")] = async (root, visitor2, {
    keyMap = keyMapDefault,
    ...rest
  } = {}) => {
    return _apidomAst.visit[Symbol.for("nodejs.util.promisify.custom")](root, visitor2, {
      keyMap,
      nodeTypeGetter: getNodeType,
      nodePredicate: isNode,
      ...rest
    });
  };
});

// node_modules/@swagger-api/apidom-core/cjs/serializers/value/visitor.cjs
var require_visitor3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.visit = undefined;
  var _ramda = require_src2();
  var _visitor = require_visitor2();
  var nodeTypeGetter = (node) => {
    if (typeof (node == null ? undefined : node.type) === "string") {
      return node.type;
    }
    return (0, _visitor.getNodeType)(node);
  };
  var keyMapDefault = {
    EphemeralObject: ["content"],
    EphemeralArray: ["content"],
    ..._visitor.keyMapDefault
  };
  var visit = (root, visitor2, {
    keyMap = keyMapDefault,
    ...rest
  } = {}) => {
    return (0, _visitor.visit)(root, visitor2, {
      keyMap,
      nodeTypeGetter,
      nodePredicate: _ramda.T,
      detectCycles: false,
      deleteNodeSymbol: Symbol.for("delete-node"),
      skipVisitingNodeSymbol: Symbol.for("skip-visiting-node"),
      ...rest
    });
  };
  exports.visit = visit;
  visit[Symbol.for("nodejs.util.promisify.custom")] = async (root, {
    keyMap = keyMapDefault,
    ...rest
  } = {}) => {
    return _visitor.visit[Symbol.for("nodejs.util.promisify.custom")](root, visitor, {
      keyMap,
      nodeTypeGetter,
      nodePredicate: _ramda.T,
      detectCycles: false,
      deleteNodeSymbol: Symbol.for("delete-node"),
      skipVisitingNodeSymbol: Symbol.for("skip-visiting-node"),
      ...rest
    });
  };
});

// node_modules/@swagger-api/apidom-core/cjs/serializers/value/ast/ephemeral-array.cjs
var require_ephemeral_array = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;

  class EphemeralArray {
    type = "EphemeralArray";
    content = [];
    reference = undefined;
    constructor(content) {
      this.content = content;
      this.reference = [];
    }
    toReference() {
      return this.reference;
    }
    toArray() {
      this.reference.push(...this.content);
      return this.reference;
    }
  }
  var _default = EphemeralArray;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/serializers/value/ast/ephemeral-object.cjs
var require_ephemeral_object = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;

  class EphemeralObject {
    type = "EphemeralObject";
    content = [];
    reference = undefined;
    constructor(content) {
      this.content = content;
      this.reference = {};
    }
    toReference() {
      return this.reference;
    }
    toObject() {
      return Object.assign(this.reference, Object.fromEntries(this.content));
    }
  }
  var _default = EphemeralObject;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/serializers/value/index.cjs
var require_value = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _visitor = require_visitor3();
  var _ephemeralArray = _interopRequireDefault(require_ephemeral_array());
  var _ephemeralObject = _interopRequireDefault(require_ephemeral_object());
  var Visitor = _stampit.default.init(function _Visitor() {
    const references = new WeakMap;
    this.BooleanElement = function _BooleanElement(element) {
      return element.toValue();
    };
    this.NumberElement = function _NumberElement(element) {
      return element.toValue();
    };
    this.StringElement = function _StringElement(element) {
      return element.toValue();
    };
    this.NullElement = function _NullElement() {
      return null;
    };
    this.ObjectElement = {
      enter(element) {
        if (references.has(element)) {
          return references.get(element).toReference();
        }
        const ephemeral = new _ephemeralObject.default(element.content);
        references.set(element, ephemeral);
        return ephemeral;
      }
    };
    this.EphemeralObject = {
      leave(ephemeral) {
        return ephemeral.toObject();
      }
    };
    this.MemberElement = {
      enter(element) {
        return [element.key, element.value];
      }
    };
    this.ArrayElement = {
      enter(element) {
        if (references.has(element)) {
          return references.get(element).toReference();
        }
        const ephemeral = new _ephemeralArray.default(element.content);
        references.set(element, ephemeral);
        return ephemeral;
      }
    };
    this.EphemeralArray = {
      leave(ephemeral) {
        return ephemeral.toArray();
      }
    };
  });
  var serializer = (element) => {
    return (0, _visitor.visit)(element, Visitor());
  };
  var _default = serializer;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/serializers/json.cjs
var require_json3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _index = _interopRequireDefault(require_value());
  var serializer = (element, replacer, space) => JSON.stringify((0, _index.default)(element), replacer, space);
  var _default = serializer;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/serializers/yaml-1-2.cjs
var require_yaml_1_2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _visitor = require_visitor2();
  var _index = _interopRequireDefault(require_value());
  var YamlVisitor = (0, _stampit.default)({
    props: {
      result: "",
      indent: 0,
      indentChar: "  "
    },
    init({
      directive = false,
      indent = 0
    } = {}) {
      this.result = directive ? "%YAML 1.2\n---\n" : "";
      this.indent = indent;
    },
    methods: {
      NumberElement(element) {
        this.result += (0, _index.default)(element);
      },
      BooleanElement(element) {
        const value = (0, _index.default)(element);
        this.result += value ? "true" : "false";
      },
      StringElement(element) {
        this.result += JSON.stringify((0, _index.default)(element));
      },
      NullElement() {
        this.result += "null";
      },
      ArrayElement(element) {
        if (element.length === 0) {
          this.result += "[]";
          return false;
        }
        element.forEach((item) => {
          const visitor2 = YamlVisitor({
            indent: this.indent + 1
          });
          const indent = this.indentChar.repeat(this.indent);
          (0, _visitor.visit)(item, visitor2);
          const {
            result
          } = visitor2;
          this.result += result.startsWith("\n") ? `\n${indent}-${result}` : `\n${indent}- ${result}`;
        });
        return false;
      },
      ObjectElement(element) {
        if (element.length === 0) {
          this.result += "{}";
          return false;
        }
        element.forEach((value, key) => {
          const keyVisitor = YamlVisitor({
            indent: this.indent + 1
          });
          const valueVisitor = YamlVisitor({
            indent: this.indent + 1
          });
          const indent = this.indentChar.repeat(this.indent);
          (0, _visitor.visit)(key, keyVisitor);
          (0, _visitor.visit)(value, valueVisitor);
          const {
            result: keyResult
          } = keyVisitor;
          const {
            result: valueResult
          } = valueVisitor;
          this.result += valueResult.startsWith("\n") ? `\n${indent}${keyResult}:${valueResult}` : `\n${indent}${keyResult}: ${valueResult}`;
        });
        return false;
      }
    }
  });
  var serializer = (element, {
    directive = false
  } = {}) => {
    const visitor2 = YamlVisitor({
      directive
    });
    (0, _visitor.visit)(element, visitor2);
    return visitor2.result;
  };
  var _default = serializer;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/refractor/toolbox.cjs
var require_toolbox = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var basePredicates = _interopRequireWildcard(require_predicates4());
  var _namespace = _interopRequireDefault(require_namespace());
  var createToolbox = () => {
    const predicates = {
      ...basePredicates
    };
    return {
      predicates,
      namespace: _namespace.default
    };
  };
  var _default = createToolbox;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/refractor/plugins/utils/index.cjs
var require_utils5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.dispatchPlugins = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _toolbox = _interopRequireDefault(require_toolbox());
  var _visitor = require_visitor2();
  var dispatchPlugins = (element, plugins, options = {}) => {
    if (plugins.length === 0)
      return element;
    const toolboxCreator = (0, _ramda.propOr)(_toolbox.default, "toolboxCreator", options);
    const visitorOptions = (0, _ramda.propOr)({}, "visitorOptions", options);
    const nodeTypeGetter = (0, _ramda.propOr)(_visitor.getNodeType, "nodeTypeGetter", visitorOptions);
    const toolbox = toolboxCreator();
    const pluginsSpecs = plugins.map((plugin) => plugin(toolbox));
    const pluginsVisitor = (0, _visitor.mergeAllVisitors)(pluginsSpecs.map((0, _ramda.propOr)({}, "visitor")), {
      nodeTypeGetter
    });
    pluginsSpecs.forEach((0, _ramdaAdjunct.invokeArgs)(["pre"], []));
    const newElement = (0, _visitor.visit)(element, pluginsVisitor, visitorOptions);
    pluginsSpecs.forEach((0, _ramdaAdjunct.invokeArgs)(["post"], []));
    return newElement;
  };
  exports.dispatchPlugins = dispatchPlugins;
});

// node_modules/short-unique-id/dist/short-unique-id.js
var require_short_unique_id = __commonJS((exports, module) => {
  var ShortUniqueId = (() => {
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => (key in obj) ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps(__defProp2({}, "__esModule", { value: true }), mod);
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    var src_exports = {};
    __export2(src_exports, {
      DEFAULT_OPTIONS: () => DEFAULT_OPTIONS,
      DEFAULT_UUID_LENGTH: () => DEFAULT_UUID_LENGTH,
      default: () => ShortUniqueId2
    });
    var version = "5.0.2";
    var DEFAULT_UUID_LENGTH = 6;
    var DEFAULT_OPTIONS = {
      dictionary: "alphanum",
      shuffle: true,
      debug: false,
      length: DEFAULT_UUID_LENGTH,
      counter: 0
    };
    var _ShortUniqueId = class _ShortUniqueId2 {
      constructor(argOptions = {}) {
        __publicField(this, "counter");
        __publicField(this, "debug");
        __publicField(this, "dict");
        __publicField(this, "version");
        __publicField(this, "dictIndex", 0);
        __publicField(this, "dictRange", []);
        __publicField(this, "lowerBound", 0);
        __publicField(this, "upperBound", 0);
        __publicField(this, "dictLength", 0);
        __publicField(this, "uuidLength");
        __publicField(this, "_digit_first_ascii", 48);
        __publicField(this, "_digit_last_ascii", 58);
        __publicField(this, "_alpha_lower_first_ascii", 97);
        __publicField(this, "_alpha_lower_last_ascii", 123);
        __publicField(this, "_hex_last_ascii", 103);
        __publicField(this, "_alpha_upper_first_ascii", 65);
        __publicField(this, "_alpha_upper_last_ascii", 91);
        __publicField(this, "_number_dict_ranges", {
          digits: [this._digit_first_ascii, this._digit_last_ascii]
        });
        __publicField(this, "_alpha_dict_ranges", {
          lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],
          upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
        });
        __publicField(this, "_alpha_lower_dict_ranges", {
          lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii]
        });
        __publicField(this, "_alpha_upper_dict_ranges", {
          upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
        });
        __publicField(this, "_alphanum_dict_ranges", {
          digits: [this._digit_first_ascii, this._digit_last_ascii],
          lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],
          upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
        });
        __publicField(this, "_alphanum_lower_dict_ranges", {
          digits: [this._digit_first_ascii, this._digit_last_ascii],
          lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii]
        });
        __publicField(this, "_alphanum_upper_dict_ranges", {
          digits: [this._digit_first_ascii, this._digit_last_ascii],
          upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii]
        });
        __publicField(this, "_hex_dict_ranges", {
          decDigits: [this._digit_first_ascii, this._digit_last_ascii],
          alphaDigits: [this._alpha_lower_first_ascii, this._hex_last_ascii]
        });
        __publicField(this, "_dict_ranges", {
          _number_dict_ranges: this._number_dict_ranges,
          _alpha_dict_ranges: this._alpha_dict_ranges,
          _alpha_lower_dict_ranges: this._alpha_lower_dict_ranges,
          _alpha_upper_dict_ranges: this._alpha_upper_dict_ranges,
          _alphanum_dict_ranges: this._alphanum_dict_ranges,
          _alphanum_lower_dict_ranges: this._alphanum_lower_dict_ranges,
          _alphanum_upper_dict_ranges: this._alphanum_upper_dict_ranges,
          _hex_dict_ranges: this._hex_dict_ranges
        });
        __publicField(this, "log", (...args) => {
          const finalArgs = [...args];
          finalArgs[0] = `[short-unique-id] ${args[0]}`;
          if (this.debug === true) {
            if (typeof console !== "undefined" && console !== null) {
              return console.log(...finalArgs);
            }
          }
        });
        __publicField(this, "setDictionary", (dictionary2, shuffle2) => {
          let finalDict;
          if (dictionary2 && Array.isArray(dictionary2) && dictionary2.length > 1) {
            finalDict = dictionary2;
          } else {
            finalDict = [];
            let i;
            this.dictIndex = i = 0;
            const rangesName = `_${dictionary2}_dict_ranges`;
            const ranges = this._dict_ranges[rangesName];
            Object.keys(ranges).forEach((rangeType) => {
              const rangeTypeKey = rangeType;
              this.dictRange = ranges[rangeTypeKey];
              this.lowerBound = this.dictRange[0];
              this.upperBound = this.dictRange[1];
              for (this.dictIndex = i = this.lowerBound;this.lowerBound <= this.upperBound ? i < this.upperBound : i > this.upperBound; this.dictIndex = this.lowerBound <= this.upperBound ? i += 1 : i -= 1) {
                finalDict.push(String.fromCharCode(this.dictIndex));
              }
            });
          }
          if (shuffle2) {
            const PROBABILITY = 0.5;
            finalDict = finalDict.sort(() => Math.random() - PROBABILITY);
          }
          this.dict = finalDict;
          this.dictLength = this.dict.length;
          this.setCounter(0);
        });
        __publicField(this, "seq", () => {
          return this.sequentialUUID();
        });
        __publicField(this, "sequentialUUID", () => {
          let counterDiv;
          let counterRem;
          let id = "";
          counterDiv = this.counter;
          do {
            counterRem = counterDiv % this.dictLength;
            counterDiv = Math.trunc(counterDiv / this.dictLength);
            id += this.dict[counterRem];
          } while (counterDiv !== 0);
          this.counter += 1;
          return id;
        });
        __publicField(this, "rnd", (uuidLength = this.uuidLength || DEFAULT_UUID_LENGTH) => {
          return this.randomUUID(uuidLength);
        });
        __publicField(this, "randomUUID", (uuidLength = this.uuidLength || DEFAULT_UUID_LENGTH) => {
          let id;
          let randomPartIdx;
          let j;
          if (uuidLength === null || typeof uuidLength === "undefined" || uuidLength < 1) {
            throw new Error("Invalid UUID Length Provided");
          }
          const isPositive = uuidLength >= 0;
          id = "";
          for (j = 0;j < uuidLength; j += 1) {
            randomPartIdx = parseInt((Math.random() * this.dictLength).toFixed(0), 10) % this.dictLength;
            id += this.dict[randomPartIdx];
          }
          return id;
        });
        __publicField(this, "fmt", (format, date) => {
          return this.formattedUUID(format, date);
        });
        __publicField(this, "formattedUUID", (format, date) => {
          const fnMap = {
            $r: this.randomUUID,
            $s: this.sequentialUUID,
            $t: this.stamp
          };
          const result = format.replace(/\$[rs]\d{0,}|\$t0|\$t[1-9]\d{1,}/g, (m) => {
            const fn = m.slice(0, 2);
            const len = parseInt(m.slice(2), 10);
            if (fn === "$s") {
              return fnMap[fn]().padStart(len, "0");
            }
            if (fn === "$t" && date) {
              return fnMap[fn](len, date);
            }
            return fnMap[fn](len);
          });
          return result;
        });
        __publicField(this, "availableUUIDs", (uuidLength = this.uuidLength) => {
          return parseFloat(Math.pow([...new Set(this.dict)].length, uuidLength).toFixed(0));
        });
        __publicField(this, "approxMaxBeforeCollision", (rounds = this.availableUUIDs(this.uuidLength)) => {
          return parseFloat(Math.sqrt(Math.PI / 2 * rounds).toFixed(20));
        });
        __publicField(this, "collisionProbability", (rounds = this.availableUUIDs(this.uuidLength), uuidLength = this.uuidLength) => {
          return parseFloat((this.approxMaxBeforeCollision(rounds) / this.availableUUIDs(uuidLength)).toFixed(20));
        });
        __publicField(this, "uniqueness", (rounds = this.availableUUIDs(this.uuidLength)) => {
          const score = parseFloat((1 - this.approxMaxBeforeCollision(rounds) / rounds).toFixed(20));
          return score > 1 ? 1 : score < 0 ? 0 : score;
        });
        __publicField(this, "getVersion", () => {
          return this.version;
        });
        __publicField(this, "stamp", (finalLength, date) => {
          const hexStamp = Math.floor(+(date || new Date) / 1000).toString(16);
          if (typeof finalLength === "number" && finalLength === 0) {
            return hexStamp;
          }
          if (typeof finalLength !== "number" || finalLength < 10) {
            throw new Error([
              "Param finalLength must be a number greater than or equal to 10,",
              "or 0 if you want the raw hexadecimal timestamp"
            ].join("\n"));
          }
          const idLength = finalLength - 9;
          const rndIdx = Math.round(Math.random() * (idLength > 15 ? 15 : idLength));
          const id = this.randomUUID(idLength);
          return `${id.substring(0, rndIdx)}${hexStamp}${id.substring(rndIdx)}${rndIdx.toString(16)}`;
        });
        __publicField(this, "parseStamp", (suid, format) => {
          if (format && !/t0|t[1-9]\d{1,}/.test(format)) {
            throw new Error("Cannot extract date from a formated UUID with no timestamp in the format");
          }
          const stamp = format ? format.replace(/\$[rs]\d{0,}|\$t0|\$t[1-9]\d{1,}/g, (m) => {
            const fnMap = {
              $r: (len2) => [...Array(len2)].map(() => "r").join(""),
              $s: (len2) => [...Array(len2)].map(() => "s").join(""),
              $t: (len2) => [...Array(len2)].map(() => "t").join("")
            };
            const fn = m.slice(0, 2);
            const len = parseInt(m.slice(2), 10);
            return fnMap[fn](len);
          }).replace(/^(.*?)(t{8,})(.*)$/g, (_m, p1, p2) => {
            return suid.substring(p1.length, p1.length + p2.length);
          }) : suid;
          if (stamp.length === 8) {
            return new Date(parseInt(stamp, 16) * 1000);
          }
          if (stamp.length < 10) {
            throw new Error("Stamp length invalid");
          }
          const rndIdx = parseInt(stamp.substring(stamp.length - 1), 16);
          return new Date(parseInt(stamp.substring(rndIdx, rndIdx + 8), 16) * 1000);
        });
        __publicField(this, "setCounter", (counter2) => {
          this.counter = counter2;
        });
        const options = __spreadValues(__spreadValues({}, DEFAULT_OPTIONS), argOptions);
        this.counter = 0;
        this.debug = false;
        this.dict = [];
        this.version = version;
        const {
          dictionary,
          shuffle,
          length,
          counter
        } = options;
        this.uuidLength = length;
        this.setDictionary(dictionary, shuffle);
        this.setCounter(counter);
        this.debug = options.debug;
        this.log(this.dict);
        this.log(`Generator instantiated with Dictionary Size ${this.dictLength} and counter set to ${this.counter}`);
        this.log = this.log.bind(this);
        this.setDictionary = this.setDictionary.bind(this);
        this.setCounter = this.setCounter.bind(this);
        this.seq = this.seq.bind(this);
        this.sequentialUUID = this.sequentialUUID.bind(this);
        this.rnd = this.rnd.bind(this);
        this.randomUUID = this.randomUUID.bind(this);
        this.fmt = this.fmt.bind(this);
        this.formattedUUID = this.formattedUUID.bind(this);
        this.availableUUIDs = this.availableUUIDs.bind(this);
        this.approxMaxBeforeCollision = this.approxMaxBeforeCollision.bind(this);
        this.collisionProbability = this.collisionProbability.bind(this);
        this.uniqueness = this.uniqueness.bind(this);
        this.getVersion = this.getVersion.bind(this);
        this.stamp = this.stamp.bind(this);
        this.parseStamp = this.parseStamp.bind(this);
        return this;
      }
    };
    __publicField(_ShortUniqueId, "default", _ShortUniqueId);
    var ShortUniqueId2 = _ShortUniqueId;
    return __toCommonJS2(src_exports);
  })();
  typeof module != "undefined" && (module.exports = ShortUniqueId.default), typeof window != "undefined" && (ShortUniqueId = ShortUniqueId.default);
});

// node_modules/@swagger-api/apidom-core/cjs/refractor/plugins/element-identity.cjs
var require_element_identity = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _shortUniqueId = _interopRequireDefault(require_short_unique_id());
  var _minim = require_minim();
  var plugin = ({
    length = 6
  } = {}) => () => {
    let uuid;
    return {
      pre() {
        uuid = new _shortUniqueId.default({
          length
        });
      },
      visitor: {
        enter(element) {
          element.id = new _minim.StringElement(uuid.randomUUID());
        }
      },
      post() {
        uuid = null;
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/refractor/plugins/semantic-element-identity.cjs
var require_semantic_element_identity = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _shortUniqueId = _interopRequireDefault(require_short_unique_id());
  var _minim = require_minim();
  var plugin = ({
    length = 6
  } = {}) => ({
    predicates
  }) => {
    let uuid;
    return {
      pre() {
        uuid = new _shortUniqueId.default({
          length
        });
      },
      visitor: {
        enter(element) {
          if (!predicates.isPrimitiveElement(element)) {
            element.id = new _minim.StringElement(uuid.randomUUID());
          }
        }
      },
      post() {
        uuid = null;
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/media-types.cjs
var require_media_types = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class MediaTypes extends Array {
    unknownMediaType = "application/octet-stream";
    filterByFormat() {
      throw new _apidomError.NotImplementedError('"filterByFormat" method is not implemented.');
    }
    findBy() {
      throw new _apidomError.NotImplementedError('"findBy" method is not implemented.');
    }
    latest() {
      throw new _apidomError.NotImplementedError('"latest" method is not implemented.');
    }
  }
  var _default = MediaTypes;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/refractor/index.cjs
var require_refractor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.createRefractor = undefined;
  var _index = require_utils5();
  var _visitor = require_visitor2();
  var _toolbox = _interopRequireDefault(require_toolbox());
  var refract = (value, {
    Type,
    plugins = []
  }) => {
    const element = new Type(value);
    return (0, _index.dispatchPlugins)(element, plugins, {
      toolboxCreator: _toolbox.default,
      visitorOptions: {
        nodeTypeGetter: _visitor.getNodeType
      }
    });
  };
  var createRefractor = (Type) => (value, options = {}) => refract(value, {
    ...options,
    Type
  });
  exports.createRefractor = createRefractor;
  var _default = refract;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/refractor/registration.cjs
var require_registration = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  var _minim = require_minim();
  exports.ObjectElement = _minim.ObjectElement;
  exports.ArrayElement = _minim.ArrayElement;
  exports.StringElement = _minim.StringElement;
  exports.BooleanElement = _minim.BooleanElement;
  exports.NullElement = _minim.NullElement;
  exports.NumberElement = _minim.NumberElement;
  exports.LinkElement = _minim.LinkElement;
  exports.RefElement = _minim.RefElement;
  var _Annotation = _interopRequireDefault(require_Annotation());
  exports.AnnotationElement = _Annotation.default;
  var _Comment = _interopRequireDefault(require_Comment());
  exports.CommentElement = _Comment.default;
  var _ParseResult = _interopRequireDefault(require_ParseResult());
  exports.ParseResultElement = _ParseResult.default;
  var _SourceMap = _interopRequireDefault(require_SourceMap());
  exports.SourceMapElement = _SourceMap.default;
  var _index = require_refractor();
  _minim.ObjectElement.refract = (0, _index.createRefractor)(_minim.ObjectElement);
  _minim.ArrayElement.refract = (0, _index.createRefractor)(_minim.ArrayElement);
  _minim.StringElement.refract = (0, _index.createRefractor)(_minim.StringElement);
  _minim.BooleanElement.refract = (0, _index.createRefractor)(_minim.BooleanElement);
  _minim.NullElement.refract = (0, _index.createRefractor)(_minim.NullElement);
  _minim.NumberElement.refract = (0, _index.createRefractor)(_minim.NumberElement);
  _minim.LinkElement.refract = (0, _index.createRefractor)(_minim.LinkElement);
  _minim.RefElement.refract = (0, _index.createRefractor)(_minim.RefElement);
  _Annotation.default.refract = (0, _index.createRefractor)(_Annotation.default);
  _Comment.default.refract = (0, _index.createRefractor)(_Comment.default);
  _ParseResult.default.refract = (0, _index.createRefractor)(_ParseResult.default);
  _SourceMap.default.refract = (0, _index.createRefractor)(_SourceMap.default);
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/filter.cjs
var require_filter2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _minim = require_minim();
  var _visitor = require_visitor2();
  var filter = (predicate, element) => {
    const visitor2 = (0, _visitor.PredicateVisitor)({
      predicate
    });
    (0, _visitor.visit)(element, visitor2);
    return new _minim.ArraySlice(visitor2.result);
  };
  var _default = filter;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/find.cjs
var require_find2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _visitor = require_visitor2();
  var find = (predicate, element) => {
    const visitor2 = (0, _visitor.PredicateVisitor)({
      predicate,
      returnOnTrue: _visitor.BREAK
    });
    (0, _visitor.visit)(element, visitor2);
    return (0, _ramda.pathOr)(undefined, [0], visitor2.result);
  };
  var _default = find;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/findAtOffset.cjs
var require_findAtOffset = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _index = require_predicates4();
  var _visitor = require_visitor2();
  var Visitor = (0, _stampit.default)({
    props: {
      result: [],
      offset: 0,
      includeRightBound: false
    },
    init({
      offset = this.offset,
      includeRightBound = this.includeRightBound
    }) {
      this.result = [];
      this.offset = offset;
      this.includeRightBound = includeRightBound;
    },
    methods: {
      enter(element) {
        if (!(0, _index.hasElementSourceMap)(element)) {
          return;
        }
        const sourceMapElement = element.getMetaProperty("sourceMap");
        const charStart = sourceMapElement.positionStart.get(2).toValue();
        const charEnd = sourceMapElement.positionEnd.get(2).toValue();
        const isWithinOffsetRange = this.offset >= charStart && (this.offset < charEnd || this.includeRightBound && this.offset <= charEnd);
        if (isWithinOffsetRange) {
          this.result.push(element);
          return;
        }
        return false;
      }
    }
  });
  var findAtOffset = (options, element) => {
    let offset;
    let includeRightBound;
    if ((0, _ramdaAdjunct.isNumber)(options)) {
      offset = options;
      includeRightBound = false;
    } else {
      offset = (0, _ramda.pathOr)(0, ["offset"], options);
      includeRightBound = (0, _ramda.pathOr)(false, ["includeRightBound"], options);
    }
    const visitor2 = Visitor({
      offset,
      includeRightBound
    });
    (0, _visitor.visit)(element, visitor2);
    return (0, _ramda.last)(visitor2.result);
  };
  var _default = findAtOffset;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/reject.cjs
var require_reject2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _filter = _interopRequireDefault(require_filter2());
  var reject = (predicate, element) => {
    return (0, _filter.default)((0, _ramda.complement)(predicate), element);
  };
  var _default = reject;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/some.cjs
var require_some = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramdaAdjunct = require_lib6();
  var _find = _interopRequireDefault(require_find2());
  var some = (predicate, element) => {
    return (0, _ramdaAdjunct.isNotUndefined)((0, _find.default)(predicate, element));
  };
  var _default = some;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/traverse.cjs
var require_traverse2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.CallbackVisitor = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _visitor = require_visitor2();
  var _index = require_predicates4();
  var CallbackVisitor = (0, _stampit.default)(_visitor.PredicateVisitor, {
    props: {
      callback: _ramdaAdjunct.noop
    },
    init({
      callback = this.callback
    } = {}) {
      this.callback = callback;
    },
    methods: {
      enter(element) {
        if (this.predicate(element)) {
          this.callback(element);
          return this.returnOnTrue;
        }
        return this.returnOnFalse;
      }
    }
  });
  exports.CallbackVisitor = CallbackVisitor;
  var traverse = (options, element) => {
    let callback;
    let predicate;
    if ((0, _ramdaAdjunct.isFunction)(options)) {
      callback = options;
      predicate = _index.isElement;
    } else {
      callback = (0, _ramda.pathOr)(_ramdaAdjunct.noop, ["callback"], options);
      predicate = (0, _ramda.pathOr)(_index.isElement, ["predicate"], options);
    }
    const visitor2 = CallbackVisitor({
      callback,
      predicate
    });
    (0, _visitor.visit)(element, visitor2);
  };
  var _default = traverse;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/parents.cjs
var require_parents = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _visitor = require_visitor2();
  var Visitor = (0, _stampit.default)({
    props: {
      parent: null,
      parentEdges: null
    },
    init() {
      this.parentEdges = new WeakMap;
    },
    methods: {
      ObjectElement(objectElement) {
        this.parentEdges.set(objectElement, this.parent);
        this.parent = objectElement;
      },
      ArrayElement(arrayElement) {
        this.parentEdges.set(arrayElement, this.parent);
        this.parent = arrayElement;
      },
      MemberElement(memberElement) {
        this.parentEdges.set(memberElement, this.parent);
        this.parent = memberElement;
      },
      enter(element) {
        this.parentEdges.set(element, this.parent);
      }
    }
  });
  var parents = (element) => {
    const visitor2 = Visitor();
    (0, _visitor.visit)(element, visitor2);
    return visitor2.parentEdges;
  };
  var _default = parents;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/traversal/index.cjs
var require_traversal = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.traverse = exports.some = exports.reject = exports.parents = exports.findAtOffset = exports.find = exports.filter = undefined;
  var _filter = _interopRequireDefault(require_filter2());
  exports.filter = _filter.default;
  var _find = _interopRequireDefault(require_find2());
  exports.find = _find.default;
  var _findAtOffset = _interopRequireDefault(require_findAtOffset());
  exports.findAtOffset = _findAtOffset.default;
  var _reject = _interopRequireDefault(require_reject2());
  exports.reject = _reject.default;
  var _some = _interopRequireDefault(require_some());
  exports.some = _some.default;
  var _traverse = _interopRequireDefault(require_traverse2());
  exports.traverse = _traverse.default;
  var _parents = _interopRequireDefault(require_parents());
  exports.parents = _parents.default;
});

// node_modules/@swagger-api/apidom-core/cjs/transcluder/Transcluder.cjs
var require_Transcluder = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramdaAdjunct = require_lib6();
  var _index = require_predicates4();
  var computeEdges = (element, edges = new WeakMap) => {
    if ((0, _index.isMemberElement)(element)) {
      edges.set(element.key, element);
      computeEdges(element.key, edges);
      edges.set(element.value, element);
      computeEdges(element.value, edges);
    } else {
      element.children.forEach((childElement) => {
        edges.set(childElement, element);
        computeEdges(childElement, edges);
      });
    }
    return edges;
  };
  var transcludeChildOfMemberElement = (search, replace, edges) => {
    const memberElement = edges.get(search);
    if (!(0, _index.isMemberElement)(memberElement)) {
      return;
    }
    if (memberElement.key === search) {
      memberElement.key = replace;
      edges.delete(search);
      edges.set(replace, memberElement);
    }
    if (memberElement.value === search) {
      memberElement.value = replace;
      edges.delete(search);
      edges.set(replace, memberElement);
    }
  };
  var transcludeChildOfObjectElement = (search, replace, edges) => {
    const objectElement = edges.get(search);
    if (!(0, _index.isObjectElement)(objectElement)) {
      return;
    }
    objectElement.content = objectElement.map((value, key, member) => {
      if (member === search) {
        edges.delete(search);
        edges.set(replace, objectElement);
        return replace;
      }
      return member;
    });
  };
  var transcludeChildOfArrayElement = (search, replace, edges) => {
    const arrayElement = edges.get(search);
    if (!(0, _index.isArrayElement)(arrayElement)) {
      return;
    }
    arrayElement.content = arrayElement.map((element) => {
      if (element === search) {
        edges.delete(search);
        edges.set(replace, arrayElement);
        return replace;
      }
      return element;
    });
  };
  var Transcluder = _stampit.default.init(function TranscluderConstructor({
    element
  }) {
    let edges;
    this.transclude = function transclude(search, replace) {
      var _edges;
      if (search === element)
        return replace;
      if (search === replace)
        return element;
      edges = (_edges = edges) != null ? _edges : computeEdges(element);
      const parent = edges.get(search);
      if ((0, _ramdaAdjunct.isUndefined)(parent)) {
        return;
      }
      if ((0, _index.isObjectElement)(parent)) {
        transcludeChildOfObjectElement(search, replace, edges);
      } else if ((0, _index.isArrayElement)(parent)) {
        transcludeChildOfArrayElement(search, replace, edges);
      } else if ((0, _index.isMemberElement)(parent)) {
        transcludeChildOfMemberElement(search, replace, edges);
      }
      return element;
    };
  });
  var _default = Transcluder;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/transcluder/index.cjs
var require_transcluder = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.transclude = exports.default = undefined;
  var _Transcluder = _interopRequireDefault(require_Transcluder());
  var transclude = (search, replace, element) => {
    const transcluder = (0, _Transcluder.default)({
      element
    });
    return transcluder.transclude(search, replace);
  };
  exports.transclude = transclude;
  var _default = _Transcluder.default;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/util.cjs
var require_util11 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.dereference = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var dereference = (object, root) => {
    const rootObject = (0, _ramda.defaultTo)(object, root);
    return (0, _ramda.mapObjIndexed)((val) => {
      if ((0, _ramdaAdjunct.isPlainObject)(val) && (0, _ramda.has)("$ref", val) && (0, _ramda.propSatisfies)(_ramdaAdjunct.isString, "$ref", val)) {
        const $ref = (0, _ramda.path)(["$ref"], val);
        const pointer = (0, _ramdaAdjunct.trimCharsStart)("#/", $ref);
        return (0, _ramda.path)(pointer.split("/"), rootObject);
      }
      if ((0, _ramdaAdjunct.isPlainObject)(val)) {
        return dereference(val, rootObject);
      }
      return val;
    }, object);
  };
  exports.dereference = dereference;
});

// node_modules/@swagger-api/apidom-core/cjs/sexprs.cjs
var require_sexprs = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _visitor = require_visitor2();
  var SymbolicExpressionsVisitor = (0, _stampit.default)({
    props: {
      nestingLevel: 0,
      result: ""
    },
    methods: {
      enter(element) {
        const {
          element: elementName
        } = element;
        const capitalizedElementName = elementName.charAt(0).toUpperCase() + elementName.slice(1);
        const indent = "  ".repeat(this.nestingLevel);
        this.result += this.nestingLevel > 0 ? "\n" : "";
        this.result += `${indent}(${capitalizedElementName}Element`;
        this.nestingLevel += 1;
      },
      leave() {
        this.nestingLevel -= 1;
        this.result += ")";
      }
    }
  });
  var sexprs = (element) => {
    const visitor2 = SymbolicExpressionsVisitor();
    (0, _visitor.visit)(element, visitor2);
    return visitor2.result;
  };
  var _default = sexprs;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-core/cjs/deepmerge.cjs
var require_deepmerge = __commonJS((exports) => {
  var deepmerge = function(targetElement, sourceElement, options) {
    var _mergedOptions$isMerg, _mergedOptions$arrayE, _mergedOptions$object;
    const defaultOptions = {
      clone: true,
      isMergeableElement: (element) => (0, _index.isObjectElement)(element) || (0, _index.isArrayElement)(element),
      arrayElementMerge: mergeArrayElement,
      objectElementMerge: mergeObjectElement,
      customMerge: undefined
    };
    const mergedOptions = {
      ...defaultOptions,
      ...options
    };
    mergedOptions.isMergeableElement = (_mergedOptions$isMerg = mergedOptions.isMergeableElement) != null ? _mergedOptions$isMerg : defaultOptions.isMergeableElement;
    mergedOptions.arrayElementMerge = (_mergedOptions$arrayE = mergedOptions.arrayElementMerge) != null ? _mergedOptions$arrayE : defaultOptions.arrayElementMerge;
    mergedOptions.objectElementMerge = (_mergedOptions$object = mergedOptions.objectElementMerge) != null ? _mergedOptions$object : defaultOptions.objectElementMerge;
    const sourceIsArrayElement = (0, _index.isArrayElement)(sourceElement);
    const targetIsArrayElement = (0, _index.isArrayElement)(targetElement);
    const sourceAndTargetTypesMatch = sourceIsArrayElement === targetIsArrayElement;
    if (!sourceAndTargetTypesMatch) {
      return cloneUnlessOtherwiseSpecified(sourceElement, mergedOptions);
    }
    if (sourceIsArrayElement && typeof mergedOptions.arrayElementMerge === "function") {
      return mergedOptions.arrayElementMerge(targetElement, sourceElement, mergedOptions);
    }
    return mergedOptions.objectElementMerge(targetElement, sourceElement, mergedOptions);
  };
  exports.__esModule = true;
  exports.default = deepmerge;
  var _minim = require_minim();
  var _index = require_predicates4();
  var emptyElement = (element) => {
    const meta = element.meta.clone();
    const attributes = element.attributes.clone();
    return new element.constructor(undefined, meta, attributes);
  };
  var cloneMemberElement = (memberElement) => new _minim.MemberElement(memberElement.key, memberElement.value, memberElement.meta.clone(), memberElement.attributes.clone());
  var cloneUnlessOtherwiseSpecified = (element, options) => options.clone && options.isMergeableElement(element) ? deepmerge(emptyElement(element), element, options) : element;
  var getMergeFunction = (keyElement, options) => {
    if (typeof options.customMerge !== "function") {
      return deepmerge;
    }
    const customMerge = options.customMerge(keyElement, options);
    return typeof customMerge === "function" ? customMerge : deepmerge;
  };
  var mergeArrayElement = (targetElement, sourceElement, options) => targetElement.concat(sourceElement)["fantasy-land/map"]((item) => cloneUnlessOtherwiseSpecified(item, options));
  var mergeObjectElement = (targetElement, sourceElement, options) => {
    const destination = (0, _index.isObjectElement)(targetElement) ? emptyElement(targetElement) : emptyElement(sourceElement);
    if ((0, _index.isObjectElement)(targetElement)) {
      targetElement.forEach((value, key, member) => {
        const clonedMember = cloneMemberElement(member);
        clonedMember.value = cloneUnlessOtherwiseSpecified(value, options);
        destination.content.push(clonedMember);
      });
    }
    sourceElement.forEach((value, key, member) => {
      const keyValue = key.toValue();
      let clonedMember;
      if ((0, _index.isObjectElement)(targetElement) && targetElement.hasKey(keyValue) && options.isMergeableElement(value)) {
        const targetValue = targetElement.get(keyValue);
        clonedMember = cloneMemberElement(member);
        clonedMember.value = getMergeFunction(key, options)(targetValue, value);
      } else {
        clonedMember = cloneMemberElement(member);
        clonedMember.value = cloneUnlessOtherwiseSpecified(value, options);
      }
      destination.remove(keyValue);
      destination.content.push(clonedMember);
    });
    return destination;
  };
  deepmerge.all = (list, options) => {
    if (!Array.isArray(list)) {
      throw new TypeError("First argument should be an array.");
    }
    if (list.length === 0) {
      return new _minim.ObjectElement;
    }
    return list.reduce((target, source) => {
      return deepmerge(target, source, options);
    }, emptyElement(list[0]));
  };
});

// node_modules/@swagger-api/apidom-core/cjs/index.cjs
var require_cjs4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.visit = exports.traverse = exports.transclude = exports.toYAML = exports.toValue = exports.toString = exports.toJSON = exports.some = exports.sexprs = exports.reject = exports.refractorPluginSemanticElementIdentity = exports.refractorPluginElementIdentity = exports.refract = exports.parents = exports.namespace = exports.mergeAllVisitors = exports.keyMap = exports.isStringElement = exports.isSourceMapElement = exports.isRefElement = exports.isPrimitiveElement = exports.isParseResultElement = exports.isObjectElement = exports.isNumberElement = exports.isNullElement = exports.isMemberElement = exports.isLinkElement = exports.isElement = exports.isBooleanElement = exports.isArrayElement = exports.isAnnotationElement = exports.includesSymbols = exports.includesClasses = exports.hasElementSourceMap = exports.getNodeType = exports.from = exports.findAtOffset = exports.find = exports.filter = exports.dispatchRefractorPlugins = exports.dereference = exports.dehydrate = exports.deepmerge = exports.createPredicate = exports.createNamespace = exports.Transcluder = exports.StringElement = exports.SourceMapElement = exports.RefElement = exports.ParseResultElement = exports.ObjectSlice = exports.ObjectElement = exports.NumberElement = exports.NullElement = exports.Namespace = exports.MemberElement = exports.MediaTypes = exports.LinkElement = exports.KeyValuePair = exports.Element = exports.CommentElement = exports.BooleanElement = exports.BREAK = exports.ArraySlice = exports.ArrayElement = exports.AnnotationElement = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _namespace = _interopRequireWildcard(require_namespace());
  exports.namespace = _namespace.default;
  exports.Namespace = _namespace.Namespace;
  exports.createNamespace = _namespace.createNamespace;
  var _index = _interopRequireDefault(require_value());
  var _json = _interopRequireDefault(require_json3());
  var _yaml = _interopRequireDefault(require_yaml_1_2());
  var _index2 = require_utils5();
  exports.dispatchRefractorPlugins = _index2.dispatchPlugins;
  var _elementIdentity = _interopRequireDefault(require_element_identity());
  exports.refractorPluginElementIdentity = _elementIdentity.default;
  var _semanticElementIdentity = _interopRequireDefault(require_semantic_element_identity());
  exports.refractorPluginSemanticElementIdentity = _semanticElementIdentity.default;
  var _mediaTypes = _interopRequireDefault(require_media_types());
  exports.MediaTypes = _mediaTypes.default;
  var _minim = require_minim();
  exports.Element = _minim.Element;
  exports.MemberElement = _minim.MemberElement;
  exports.KeyValuePair = _minim.KeyValuePair;
  exports.ObjectSlice = _minim.ObjectSlice;
  exports.ArraySlice = _minim.ArraySlice;
  exports.refract = _minim.refract;
  var _registration = require_registration();
  exports.ObjectElement = _registration.ObjectElement;
  exports.ArrayElement = _registration.ArrayElement;
  exports.BooleanElement = _registration.BooleanElement;
  exports.NullElement = _registration.NullElement;
  exports.NumberElement = _registration.NumberElement;
  exports.StringElement = _registration.StringElement;
  exports.LinkElement = _registration.LinkElement;
  exports.RefElement = _registration.RefElement;
  exports.AnnotationElement = _registration.AnnotationElement;
  exports.CommentElement = _registration.CommentElement;
  exports.ParseResultElement = _registration.ParseResultElement;
  exports.SourceMapElement = _registration.SourceMapElement;
  var _index3 = require_predicates4();
  exports.isElement = _index3.isElement;
  exports.isStringElement = _index3.isStringElement;
  exports.isNumberElement = _index3.isNumberElement;
  exports.isNullElement = _index3.isNullElement;
  exports.isBooleanElement = _index3.isBooleanElement;
  exports.isArrayElement = _index3.isArrayElement;
  exports.isObjectElement = _index3.isObjectElement;
  exports.isMemberElement = _index3.isMemberElement;
  exports.isLinkElement = _index3.isLinkElement;
  exports.isRefElement = _index3.isRefElement;
  exports.isAnnotationElement = _index3.isAnnotationElement;
  exports.isParseResultElement = _index3.isParseResultElement;
  exports.isSourceMapElement = _index3.isSourceMapElement;
  exports.isPrimitiveElement = _index3.isPrimitiveElement;
  exports.hasElementSourceMap = _index3.hasElementSourceMap;
  exports.includesSymbols = _index3.includesSymbols;
  exports.includesClasses = _index3.includesClasses;
  var _helpers = _interopRequireDefault(require_helpers2());
  exports.createPredicate = _helpers.default;
  var _index4 = require_traversal();
  exports.filter = _index4.filter;
  exports.reject = _index4.reject;
  exports.find = _index4.find;
  exports.findAtOffset = _index4.findAtOffset;
  exports.some = _index4.some;
  exports.traverse = _index4.traverse;
  exports.parents = _index4.parents;
  var _visitor = require_visitor2();
  exports.visit = _visitor.visit;
  exports.BREAK = _visitor.BREAK;
  exports.mergeAllVisitors = _visitor.mergeAllVisitors;
  exports.getNodeType = _visitor.getNodeType;
  exports.keyMap = _visitor.keyMapDefault;
  var _index5 = _interopRequireWildcard(require_transcluder());
  exports.transclude = _index5.transclude;
  exports.Transcluder = _index5.default;
  var _util = require_util11();
  exports.dereference = _util.dereference;
  var _sexprs = _interopRequireDefault(require_sexprs());
  exports.sexprs = _sexprs.default;
  var _deepmerge = _interopRequireDefault(require_deepmerge());
  exports.deepmerge = _deepmerge.default;
  var from = (data, namespace = _namespace.default) => {
    if ((0, _ramdaAdjunct.isString)(data)) {
      try {
        return namespace.fromRefract(JSON.parse(data));
      } catch {
      }
    }
    if ((0, _ramdaAdjunct.isPlainObject)(data) && (0, _ramda.has)("element", data)) {
      return namespace.fromRefract(data);
    }
    return namespace.toElement(data);
  };
  exports.from = from;
  var toValue = _index.default;
  exports.toValue = toValue;
  var toJSON = _json.default;
  exports.toJSON = toJSON;
  var toYAML = _yaml.default;
  exports.toYAML = toYAML;
  var dehydrate = (element, namespace = _namespace.default) => {
    return namespace.toRefract(element);
  };
  exports.dehydrate = dehydrate;
  var toString = (element, namespace = _namespace.default) => {
    const refractStructure = dehydrate(element, namespace);
    return JSON.stringify(refractStructure);
  };
  exports.toString = toString;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/index.cjs
var require_resolve = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.resolveApiDOM = exports.default = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _util = require_util9();
  var _index = _interopRequireDefault(require_parse3());
  var plugins = _interopRequireWildcard(require_plugins());
  var _File = _interopRequireDefault(require_File());
  var _index2 = require_errors3();
  var url = _interopRequireWildcard(require_url());
  var resolveApiDOM = async (element, options) => {
    let parseResult = element;
    if (!(0, _apidomCore.isParseResultElement)(element)) {
      const elementClone = new element.constructor(element.content, element.meta.clone(), element.attributes);
      elementClone.classes.push("result");
      parseResult = new _apidomCore.ParseResultElement([elementClone]);
    }
    const sanitizedURI = url.sanitize(url.stripHash(options.resolve.baseURI));
    const file = (0, _File.default)({
      uri: sanitizedURI,
      parseResult,
      mediaType: options.parse.mediaType
    });
    const resolveStrategies = await plugins.filter("canResolve", file, options.resolve.strategies);
    if ((0, _ramda.isEmpty)(resolveStrategies)) {
      throw new _index2.UnmatchedResolveStrategyError(file.uri);
    }
    try {
      const {
        result
      } = await plugins.run("resolve", [file, options], resolveStrategies);
      return result;
    } catch (error) {
      throw new _index2.ResolverError(`Error while resolving file "${file.uri}"`, {
        cause: error
      });
    }
  };
  exports.resolveApiDOM = resolveApiDOM;
  var resolve = async (uri, options) => {
    const parseResult = await (0, _index.default)(uri, options);
    const mergedOptions = (0, _util.merge)(options, {
      resolve: {
        baseURI: uri
      }
    });
    return resolveApiDOM(parseResult, mergedOptions);
  };
  var _default = resolve;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/index.cjs
var require_dereference = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.dereferenceApiDOM = exports.default = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _File = _interopRequireDefault(require_File());
  var plugins = _interopRequireWildcard(require_plugins());
  var _index = require_errors3();
  var _DereferenceError = _interopRequireDefault(require_DereferenceError());
  var _index2 = _interopRequireDefault(require_parse3());
  var _util = require_util9();
  var url = _interopRequireWildcard(require_url());
  var dereferenceApiDOM = async (element, options) => {
    let parseResult = element;
    let surrogateWrapping = false;
    if (!(0, _apidomCore.isParseResultElement)(element)) {
      const elementClone = new element.constructor(element.content, element.meta.clone(), element.attributes);
      elementClone.classes.push("result");
      parseResult = new _apidomCore.ParseResultElement([elementClone]);
      surrogateWrapping = true;
    }
    const file = (0, _File.default)({
      uri: options.resolve.baseURI,
      parseResult,
      mediaType: options.parse.mediaType
    });
    const dereferenceStrategies = await plugins.filter("canDereference", file, options.dereference.strategies);
    if ((0, _ramda.isEmpty)(dereferenceStrategies)) {
      throw new _index.UnmatchedDereferenceStrategyError(file.uri);
    }
    try {
      const {
        result
      } = await plugins.run("dereference", [file, options], dereferenceStrategies);
      return surrogateWrapping ? result.get(0) : result;
    } catch (error) {
      throw new _DereferenceError.default(`Error while dereferencing file "${file.uri}"`, {
        cause: error
      });
    }
  };
  exports.dereferenceApiDOM = dereferenceApiDOM;
  var dereference = async (uri, options) => {
    const {
      refSet
    } = options.dereference;
    const sanitizedURI = url.sanitize(uri);
    let parseResult;
    if (refSet !== null && refSet.has(sanitizedURI)) {
      ({
        value: parseResult
      } = refSet.find((0, _ramda.propEq)(sanitizedURI, "uri")));
    } else {
      parseResult = await (0, _index2.default)(uri, options);
    }
    const mergedOptions = (0, _util.merge)(options, {
      resolve: {
        baseURI: sanitizedURI
      }
    });
    return dereferenceApiDOM(parseResult, mergedOptions);
  };
  var _default = dereference;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/parse/parsers/Parser.cjs
var require_Parser = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _index = require_errors3();
  var Parser = (0, _stampit.default)({
    props: {
      name: "",
      allowEmpty: true,
      sourceMap: false,
      fileExtensions: [],
      mediaTypes: []
    },
    init({
      allowEmpty = this.allowEmpty,
      sourceMap = this.sourceMap,
      fileExtensions = this.fileExtensions,
      mediaTypes = this.mediaTypes
    } = {}) {
      this.allowEmpty = allowEmpty;
      this.sourceMap = sourceMap;
      this.fileExtensions = fileExtensions;
      this.mediaTypes = mediaTypes;
    },
    methods: {
      async canParse() {
        throw new _index.NotImplementedError;
      },
      async parse() {
        throw new _index.NotImplementedError;
      }
    }
  });
  var _default = Parser;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/resolvers/Resolver.cjs
var require_Resolver = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _index = require_errors3();
  var Resolver = (0, _stampit.default)({
    props: {
      name: null
    },
    methods: {
      canRead() {
        return false;
      },
      async read() {
        throw new _index.NotImplementedError;
      }
    }
  });
  var _default = Resolver;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/resolvers/HttpResolver.cjs
var require_HttpResolver = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _Resolver = _interopRequireDefault(require_Resolver());
  var url = _interopRequireWildcard(require_url());
  var _NotImplementedError = _interopRequireDefault(require_NotImplementedError2());
  var HttpResolver = (0, _stampit.default)(_Resolver.default, {
    props: {
      timeout: 5000,
      redirects: 5,
      withCredentials: false
    },
    init({
      timeout = this.timeout,
      redirects = this.redirects,
      withCredentials = this.withCredentials
    } = {}) {
      this.timeout = timeout;
      this.redirects = redirects;
      this.withCredentials = withCredentials;
    },
    methods: {
      canRead(file) {
        return url.isHttpUrl(file.uri);
      },
      async read() {
        throw new _NotImplementedError.default;
      },
      getHttpClient() {
        throw new _NotImplementedError.default;
      }
    }
  });
  var _default = HttpResolver;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/strategies/ResolveStrategy.cjs
var require_ResolveStrategy = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _index = require_errors3();
  var ResolveStrategy = (0, _stampit.default)({
    props: {
      name: null
    },
    methods: {
      canResolve() {
        return false;
      },
      async resolve() {
        throw new _index.NotImplementedError;
      }
    }
  });
  var _default = ResolveStrategy;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/DereferenceStrategy.cjs
var require_DereferenceStrategy = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _index = require_errors3();
  var DereferenceStrategy = (0, _stampit.default)({
    props: {
      name: null
    },
    methods: {
      canDereference() {
        return false;
      },
      async dereference() {
        throw new _index.NotImplementedError;
      }
    }
  });
  var _default = DereferenceStrategy;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/Reference.cjs
var require_Reference = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var Reference = (0, _stampit.default)({
    props: {
      uri: "",
      value: null,
      depth: 0,
      refSet: null,
      errors: []
    },
    init({
      depth = this.depth,
      refSet = this.refSet,
      uri = this.uri,
      value = this.value
    } = {}) {
      this.uri = uri;
      this.value = value;
      this.depth = depth;
      this.refSet = refSet;
      this.errors = [];
    }
  });
  var _default = Reference;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/ReferenceSet.cjs
var require_ReferenceSet = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var ReferenceSet = (0, _stampit.default)({
    props: {
      rootRef: null,
      refs: [],
      circular: false
    },
    init({
      refs = []
    } = {}) {
      this.refs = [];
      refs.forEach((ref) => this.add(ref));
    },
    methods: {
      get size() {
        return this.refs.length;
      },
      add(reference) {
        if (!this.has(reference)) {
          this.refs.push(reference);
          this.rootRef = this.rootRef === null ? reference : this.rootRef;
          reference.refSet = this;
        }
        return this;
      },
      merge(anotherRefSet) {
        for (const reference of anotherRefSet.values()) {
          this.add(reference);
        }
        return this;
      },
      has(thing) {
        const uri = (0, _ramdaAdjunct.isString)(thing) ? thing : thing.uri;
        return (0, _ramdaAdjunct.isNotUndefined)(this.find((0, _ramda.propEq)(uri, "uri")));
      },
      find(callback) {
        return this.refs.find(callback);
      },
      *values() {
        yield* this.refs;
      },
      clean() {
        this.refs.forEach((ref) => {
          ref.refSet = null;
        });
        this.refs = [];
      }
    }
  });
  var _default = ReferenceSet;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/index.cjs
var require_cjs5 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.url = exports.resolveApiDOM = exports.resolve = exports.readFile = exports.parse = exports.options = exports.mergeOptions = exports.dereferenceApiDOM = exports.dereference = exports.UnmatchedResolverError = exports.UnmatchedResolveStrategyError = exports.UnmatchedDereferenceStrategyError = exports.ResolverError = exports.Resolver = exports.ResolveStrategy = exports.ReferenceSet = exports.Reference = exports.PluginError = exports.ParserError = exports.Parser = exports.NotImplementedError = exports.MaximumResolverDepthError = exports.MaximumDereferenceDepthError = exports.InvalidSelectorError = exports.HttpResolver = exports.DereferenceStrategy = exports.DereferenceError = undefined;
  var _File = _interopRequireDefault(require_File());
  exports.File = _File.default;
  var url = _interopRequireWildcard(require_url());
  exports.url = url;
  var _index = _interopRequireDefault(require_options2());
  exports.options = _index.default;
  var _util = require_util9();
  exports.mergeOptions = _util.merge;
  var _index2 = _interopRequireDefault(require_parse3());
  var _index3 = _interopRequireWildcard(require_resolve());
  var _util2 = require_util10();
  var _index4 = _interopRequireWildcard(require_dereference());
  var _Parser = _interopRequireDefault(require_Parser());
  exports.Parser = _Parser.default;
  var _Resolver = _interopRequireDefault(require_Resolver());
  exports.Resolver = _Resolver.default;
  var _HttpResolver = _interopRequireDefault(require_HttpResolver());
  exports.HttpResolver = _HttpResolver.default;
  var _ResolveStrategy = _interopRequireDefault(require_ResolveStrategy());
  exports.ResolveStrategy = _ResolveStrategy.default;
  var _DereferenceStrategy = _interopRequireDefault(require_DereferenceStrategy());
  exports.DereferenceStrategy = _DereferenceStrategy.default;
  var _Reference = _interopRequireDefault(require_Reference());
  exports.Reference = _Reference.default;
  var _ReferenceSet = _interopRequireDefault(require_ReferenceSet());
  exports.ReferenceSet = _ReferenceSet.default;
  var _index5 = require_errors3();
  exports.DereferenceError = _index5.DereferenceError;
  exports.InvalidSelectorError = _index5.InvalidSelectorError;
  exports.MaximumDereferenceDepthError = _index5.MaximumDereferenceDepthError;
  exports.MaximumResolverDepthError = _index5.MaximumResolverDepthError;
  exports.NotImplementedError = _index5.NotImplementedError;
  exports.ParserError = _index5.ParserError;
  exports.PluginError = _index5.PluginError;
  exports.ResolverError = _index5.ResolverError;
  exports.UnmatchedDereferenceStrategyError = _index5.UnmatchedDereferenceStrategyError;
  exports.UnmatchedResolveStrategyError = _index5.UnmatchedResolveStrategyError;
  exports.UnmatchedResolverError = _index5.UnmatchedResolverError;
  var readFile = async (uri, options = {}) => {
    const mergedOptions = (0, _util.merge)(_index.default, options);
    const file = (0, _File.default)({
      uri: url.sanitize(uri)
    });
    return (0, _util2.readFile)(file, mergedOptions);
  };
  exports.readFile = readFile;
  var parse = async (uri, options = {}) => {
    const mergedOptions = (0, _util.merge)(_index.default, options);
    return (0, _index2.default)(uri, mergedOptions);
  };
  exports.parse = parse;
  var resolve = async (uri, options = {}) => {
    const mergedOptions = (0, _util.merge)(_index.default, options);
    return (0, _index3.default)(uri, mergedOptions);
  };
  exports.resolve = resolve;
  var resolveApiDOM = async (element, options = {}) => {
    const mergedOptions = (0, _util.merge)(_index.default, options);
    return (0, _index3.resolveApiDOM)(element, mergedOptions);
  };
  exports.resolveApiDOM = resolveApiDOM;
  var dereference = async (uri, options = {}) => {
    const mergedOptions = (0, _util.merge)(_index.default, options);
    return (0, _index4.default)(uri, mergedOptions);
  };
  exports.dereference = dereference;
  var dereferenceApiDOM = async (element, options = {}) => {
    const mergedOptions = (0, _util.merge)(_index.default, options);
    return (0, _index4.dereferenceApiDOM)(element, mergedOptions);
  };
  exports.dereferenceApiDOM = dereferenceApiDOM;
});

// node_modules/@swagger-api/apidom-reference/cjs/configuration/empty.cjs
var require_empty2 = __commonJS((exports) => {
  exports.__esModule = true;
  var _index = require_cjs5();
  Object.keys(_index).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if ((key in exports) && exports[key] === _index[key])
      return;
    exports[key] = _index[key];
  });
});

// node_modules/swagger-client/lib/specmap/lib/create-error.js
var require_create_error = __commonJS((exports) => {
  var createErrorType = function(name, init) {
    function E() {
      if (!Error.captureStackTrace) {
        this.stack = new Error().stack;
      } else {
        Error.captureStackTrace(this, this.constructor);
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      [this.message] = args;
      if (init) {
        init.apply(this, args);
      }
    }
    E.prototype = new Error;
    E.prototype.name = name;
    E.prototype.constructor = E;
    return E;
  };
  exports.__esModule = true;
  exports.default = createErrorType;
});

// node_modules/traverse/index.js
var require_traverse3 = __commonJS((exports, module) => {
  var toS = function(obj) {
    return Object.prototype.toString.call(obj);
  };
  var isDate = function(obj) {
    return toS(obj) === "[object Date]";
  };
  var isRegExp = function(obj) {
    return toS(obj) === "[object RegExp]";
  };
  var isError = function(obj) {
    return toS(obj) === "[object Error]";
  };
  var isBoolean = function(obj) {
    return toS(obj) === "[object Boolean]";
  };
  var isNumber = function(obj) {
    return toS(obj) === "[object Number]";
  };
  var isString = function(obj) {
    return toS(obj) === "[object String]";
  };
  var forEach = function(xs, fn) {
    if (xs.forEach) {
      return xs.forEach(fn);
    }
    for (var i = 0;i < xs.length; i++) {
      fn(xs[i], i, xs);
    }
    return;
  };
  var copy = function(src) {
    if (typeof src === "object" && src !== null) {
      var dst;
      if (isArray(src)) {
        dst = [];
      } else if (isDate(src)) {
        dst = new Date(src.getTime ? src.getTime() : src);
      } else if (isRegExp(src)) {
        dst = new RegExp(src);
      } else if (isError(src)) {
        dst = { message: src.message };
      } else if (isBoolean(src) || isNumber(src) || isString(src)) {
        dst = Object(src);
      } else if (Object.create && Object.getPrototypeOf) {
        dst = Object.create(Object.getPrototypeOf(src));
      } else if (src.constructor === Object) {
        dst = {};
      } else {
        var proto = src.constructor && src.constructor.prototype || src.__proto__ || {};
        var T = function T() {
        };
        T.prototype = proto;
        dst = new T;
      }
      forEach(objectKeys(src), function(key) {
        dst[key] = src[key];
      });
      return dst;
    }
    return src;
  };
  var walk = function(root, cb, immutable) {
    var path = [];
    var parents = [];
    var alive = true;
    return function walker(node_) {
      var node = immutable ? copy(node_) : node_;
      var modifiers = {};
      var keepGoing = true;
      var state = {
        node,
        node_,
        path: [].concat(path),
        parent: parents[parents.length - 1],
        parents,
        key: path[path.length - 1],
        isRoot: path.length === 0,
        level: path.length,
        circular: null,
        update: function(x, stopHere) {
          if (!state.isRoot) {
            state.parent.node[state.key] = x;
          }
          state.node = x;
          if (stopHere) {
            keepGoing = false;
          }
        },
        delete: function(stopHere) {
          delete state.parent.node[state.key];
          if (stopHere) {
            keepGoing = false;
          }
        },
        remove: function(stopHere) {
          if (isArray(state.parent.node)) {
            state.parent.node.splice(state.key, 1);
          } else {
            delete state.parent.node[state.key];
          }
          if (stopHere) {
            keepGoing = false;
          }
        },
        keys: null,
        before: function(f) {
          modifiers.before = f;
        },
        after: function(f) {
          modifiers.after = f;
        },
        pre: function(f) {
          modifiers.pre = f;
        },
        post: function(f) {
          modifiers.post = f;
        },
        stop: function() {
          alive = false;
        },
        block: function() {
          keepGoing = false;
        }
      };
      if (!alive) {
        return state;
      }
      function updateState() {
        if (typeof state.node === "object" && state.node !== null) {
          if (!state.keys || state.node_ !== state.node) {
            state.keys = objectKeys(state.node);
          }
          state.isLeaf = state.keys.length === 0;
          for (var i = 0;i < parents.length; i++) {
            if (parents[i].node_ === node_) {
              state.circular = parents[i];
              break;
            }
          }
        } else {
          state.isLeaf = true;
          state.keys = null;
        }
        state.notLeaf = !state.isLeaf;
        state.notRoot = !state.isRoot;
      }
      updateState();
      var ret = cb.call(state, state.node);
      if (ret !== undefined && state.update) {
        state.update(ret);
      }
      if (modifiers.before) {
        modifiers.before.call(state, state.node);
      }
      if (!keepGoing) {
        return state;
      }
      if (typeof state.node === "object" && state.node !== null && !state.circular) {
        parents.push(state);
        updateState();
        forEach(state.keys, function(key, i) {
          path.push(key);
          if (modifiers.pre) {
            modifiers.pre.call(state, state.node[key], key);
          }
          var child = walker(state.node[key]);
          if (immutable && hasOwnProperty.call(state.node, key)) {
            state.node[key] = child.node;
          }
          child.isLast = i === state.keys.length - 1;
          child.isFirst = i === 0;
          if (modifiers.post) {
            modifiers.post.call(state, child);
          }
          path.pop();
        });
        parents.pop();
      }
      if (modifiers.after) {
        modifiers.after.call(state, state.node);
      }
      return state;
    }(root).node;
  };
  var Traverse = function(obj) {
    this.value = obj;
  };
  var traverse = function(obj) {
    return new Traverse(obj);
  };
  var isArray = Array.isArray || function isArray(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
  };
  var objectKeys = Object.keys || function keys(obj) {
    var res = [];
    for (var key in obj) {
      res.push(key);
    }
    return res;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty || function(obj, key) {
    return key in obj;
  };
  Traverse.prototype.get = function(ps) {
    var node = this.value;
    for (var i = 0;i < ps.length; i++) {
      var key = ps[i];
      if (!node || !hasOwnProperty.call(node, key)) {
        return;
      }
      node = node[key];
    }
    return node;
  };
  Traverse.prototype.has = function(ps) {
    var node = this.value;
    for (var i = 0;i < ps.length; i++) {
      var key = ps[i];
      if (!node || !hasOwnProperty.call(node, key)) {
        return false;
      }
      node = node[key];
    }
    return true;
  };
  Traverse.prototype.set = function(ps, value) {
    var node = this.value;
    for (var i = 0;i < ps.length - 1; i++) {
      var key = ps[i];
      if (!hasOwnProperty.call(node, key)) {
        node[key] = {};
      }
      node = node[key];
    }
    node[ps[i]] = value;
    return value;
  };
  Traverse.prototype.map = function(cb) {
    return walk(this.value, cb, true);
  };
  Traverse.prototype.forEach = function(cb) {
    this.value = walk(this.value, cb, false);
    return this.value;
  };
  Traverse.prototype.reduce = function(cb, init) {
    var skip = arguments.length === 1;
    var acc = skip ? this.value : init;
    this.forEach(function(x) {
      if (!this.isRoot || !skip) {
        acc = cb.call(this, acc, x);
      }
    });
    return acc;
  };
  Traverse.prototype.paths = function() {
    var acc = [];
    this.forEach(function() {
      acc.push(this.path);
    });
    return acc;
  };
  Traverse.prototype.nodes = function() {
    var acc = [];
    this.forEach(function() {
      acc.push(this.node);
    });
    return acc;
  };
  Traverse.prototype.clone = function() {
    var parents = [];
    var nodes = [];
    return function clone(src) {
      for (var i = 0;i < parents.length; i++) {
        if (parents[i] === src) {
          return nodes[i];
        }
      }
      if (typeof src === "object" && src !== null) {
        var dst = copy(src);
        parents.push(src);
        nodes.push(dst);
        forEach(objectKeys(src), function(key) {
          dst[key] = clone(src[key]);
        });
        parents.pop();
        nodes.pop();
        return dst;
      }
      return src;
    }(this.value);
  };
  forEach(objectKeys(Traverse.prototype), function(key) {
    traverse[key] = function(obj) {
      var args = [].slice.call(arguments, 1);
      var t = new Traverse(obj);
      return t[key].apply(t, args);
    };
  });
  module.exports = traverse;
});

// node_modules/swagger-client/lib/specmap/helpers.js
var require_helpers3 = __commonJS((exports) => {
  var isFreelyNamed = function(parentPath) {
    const parentKey = parentPath[parentPath.length - 1];
    const grandparentKey = parentPath[parentPath.length - 2];
    const parentStr = parentPath.join("/");
    return freelyNamedKeyParents.indexOf(parentKey) > -1 && nonFreelyNamedKeyGrandparents.indexOf(grandparentKey) === -1 || freelyNamedPaths.indexOf(parentStr) > -1 || freelyNamedAncestors.some((el) => parentStr.indexOf(el) > -1);
  };
  var generateAbsoluteRefPatches = function(obj, basePath, _temp) {
    let {
      specmap,
      getBaseUrlForNodePath = (path) => specmap.getContext([...basePath, ...path]).baseDoc,
      targetKeys = ["$ref", "$$ref"]
    } = _temp === undefined ? {} : _temp;
    const patches = [];
    (0, _traverse.default)(obj).forEach(function callback() {
      if (targetKeys.includes(this.key) && typeof this.node === "string") {
        const nodePath = this.path;
        const fullPath = basePath.concat(this.path);
        const absolutifiedRefValue = absolutifyPointer(this.node, getBaseUrlForNodePath(nodePath));
        patches.push(specmap.replace(fullPath, absolutifiedRefValue));
      }
    });
    return patches;
  };
  var absolutifyPointer = function(pointer, baseUrl) {
    const [urlPart, fragmentPart] = pointer.split("#");
    const newRefUrlPart = _empty.url.resolve(baseUrl || "", urlPart || "");
    return fragmentPart ? `${newRefUrlPart}#${fragmentPart}` : newRefUrlPart;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.absolutifyPointer = absolutifyPointer;
  exports.generateAbsoluteRefPatches = generateAbsoluteRefPatches;
  exports.isFreelyNamed = isFreelyNamed;
  var _traverse = _interopRequireDefault(require_traverse3());
  var _empty = require_empty2();
  var freelyNamedKeyParents = ["properties"];
  var nonFreelyNamedKeyGrandparents = ["properties"];
  var freelyNamedPaths = [
    "definitions",
    "parameters",
    "responses",
    "securityDefinitions",
    "components/schemas",
    "components/responses",
    "components/parameters",
    "components/securitySchemes"
  ];
  var freelyNamedAncestors = ["schema/example", "items/example"];
});

// node_modules/swagger-client/lib/specmap/lib/refs.js
var require_refs = __commonJS((exports) => {
  var absoluteify = function(path, basePath) {
    if (!ABSOLUTE_URL_REGEXP.test(path)) {
      if (!basePath) {
        throw new JSONRefError(`Tried to resolve a relative URL, without having a basePath. path: '${path}' basePath: '${basePath}'`);
      }
      return _empty.url.resolve(basePath, path);
    }
    return path;
  };
  var wrapError = function(e, extra) {
    let message;
    if (e && e.response && e.response.body) {
      message = `${e.response.body.code} ${e.response.body.message}`;
    } else {
      message = e.message;
    }
    return new JSONRefError(`Could not resolve reference: ${message}`, extra, e);
  };
  var split = function(ref) {
    return (ref + "").split("#");
  };
  var extractFromDoc = function(docPath, pointer) {
    const doc = docCache[docPath];
    if (doc && !_index.default.isPromise(doc)) {
      try {
        const v = extract(pointer, doc);
        return Object.assign(Promise.resolve(v), {
          __value: v
        });
      } catch (e) {
        return Promise.reject(e);
      }
    }
    return getDoc(docPath).then((_doc) => extract(pointer, _doc));
  };
  var clearCache = function(item) {
    if (typeof item !== "undefined") {
      delete docCache[item];
    } else {
      Object.keys(docCache).forEach((key) => {
        delete docCache[key];
      });
    }
  };
  var getDoc = function(docPath) {
    const val = docCache[docPath];
    if (val) {
      return _index.default.isPromise(val) ? val : Promise.resolve(val);
    }
    docCache[docPath] = mod.fetchJSON(docPath).then((doc) => {
      docCache[docPath] = doc;
      return doc;
    });
    return docCache[docPath];
  };
  var fetchJSON = function(docPath) {
    return fetch(docPath, {
      headers: {
        Accept: _constants.ACCEPT_HEADER_VALUE_FOR_DOCUMENTS
      },
      loadSpec: true
    }).then((res) => res.text()).then((text) => _jsYaml.default.load(text));
  };
  var extract = function(pointer, obj) {
    const tokens = jsonPointerToArray(pointer);
    if (tokens.length < 1) {
      return obj;
    }
    const val = _index.default.getIn(obj, tokens);
    if (typeof val === "undefined") {
      throw new JSONRefError(`Could not resolve pointer: ${pointer} does not exist in document`, {
        pointer
      });
    }
    return val;
  };
  var jsonPointerToArray = function(pointer) {
    if (typeof pointer !== "string") {
      throw new TypeError(`Expected a string, got a ${typeof pointer}`);
    }
    if (pointer[0] === "/") {
      pointer = pointer.substr(1);
    }
    if (pointer === "") {
      return [];
    }
    return pointer.split("/").map(unescapeJsonPointerToken);
  };
  var unescapeJsonPointerToken = function(token) {
    if (typeof token !== "string") {
      return token;
    }
    const params = new URLSearchParams(`=${token.replace(/~1/g, "/").replace(/~0/g, "~")}`);
    return params.get("");
  };
  var escapeJsonPointerToken = function(token) {
    const params = new URLSearchParams([["", token.replace(/~/g, "~0").replace(/\//g, "~1")]]);
    return params.toString().slice(1);
  };
  var arrayToJsonPointer = function(arr) {
    if (arr.length === 0) {
      return "";
    }
    return `/${arr.map(escapeJsonPointerToken).join("/")}`;
  };
  var pointerIsAParent = function(pointer, parentPointer) {
    if (pointerBoundaryChar(parentPointer)) {
      return true;
    }
    const nextChar = pointer.charAt(parentPointer.length);
    const lastParentChar = parentPointer.slice(-1);
    return pointer.indexOf(parentPointer) === 0 && (!nextChar || nextChar === "/" || nextChar === "#") && lastParentChar !== "#";
  };
  var pointerAlreadyInPath = function(pointer, basePath, parent, specmap) {
    let refs = specmapRefs.get(specmap);
    if (!refs) {
      refs = {};
      specmapRefs.set(specmap, refs);
    }
    const parentPointer = arrayToJsonPointer(parent);
    const fullyQualifiedPointer = `${basePath || "<specmap-base>"}#${pointer}`;
    const safeParentPointer = parentPointer.replace(/allOf\/\d+\/?/g, "");
    const rootDoc = specmap.contextTree.get([]).baseDoc;
    if (basePath === rootDoc && pointerIsAParent(safeParentPointer, pointer)) {
      return true;
    }
    let currPath = "";
    const hasIndirectCycle = parent.some((token) => {
      currPath = `${currPath}/${escapeJsonPointerToken(token)}`;
      return refs[currPath] && refs[currPath].some((ref) => pointerIsAParent(ref, fullyQualifiedPointer) || pointerIsAParent(fullyQualifiedPointer, ref));
    });
    if (hasIndirectCycle) {
      return true;
    }
    refs[safeParentPointer] = (refs[safeParentPointer] || []).concat(fullyQualifiedPointer);
    return;
  };
  var patchValueAlreadyInPath = function(root, patch) {
    const ancestors = [root];
    patch.path.reduce((parent, p) => {
      ancestors.push(parent[p]);
      return parent[p];
    }, root);
    return pointToAncestor(patch.value);
    function pointToAncestor(obj) {
      return _index.default.isObject(obj) && (ancestors.indexOf(obj) >= 0 || Object.keys(obj).some((k) => pointToAncestor(obj[k])));
    }
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _jsYaml = _interopRequireDefault(require_js_yaml());
  var _empty = require_empty2();
  require_fetch_polyfill_node();
  var _index = _interopRequireDefault(require_lib5());
  var _createError = _interopRequireDefault(require_create_error());
  var _helpers = require_helpers3();
  var _constants = require_constants5();
  var ABSOLUTE_URL_REGEXP = /^([a-z]+:\/\/|\/\/)/i;
  var JSONRefError = (0, _createError.default)("JSONRefError", function cb(message, extra, oriError) {
    this.originalError = oriError;
    Object.assign(this, extra || {});
  });
  var docCache = {};
  var specmapRefs = new WeakMap;
  var skipResolutionTestFns = [
    (path) => path[0] === "paths" && path[3] === "responses" && path[5] === "examples",
    (path) => path[0] === "paths" && path[3] === "responses" && path[5] === "content" && path[7] === "example",
    (path) => path[0] === "paths" && path[3] === "responses" && path[5] === "content" && path[7] === "examples" && path[9] === "value",
    (path) => path[0] === "paths" && path[3] === "requestBody" && path[4] === "content" && path[6] === "example",
    (path) => path[0] === "paths" && path[3] === "requestBody" && path[4] === "content" && path[6] === "examples" && path[8] === "value",
    (path) => path[0] === "paths" && path[2] === "parameters" && path[4] === "example",
    (path) => path[0] === "paths" && path[3] === "parameters" && path[5] === "example",
    (path) => path[0] === "paths" && path[2] === "parameters" && path[4] === "examples" && path[6] === "value",
    (path) => path[0] === "paths" && path[3] === "parameters" && path[5] === "examples" && path[7] === "value",
    (path) => path[0] === "paths" && path[2] === "parameters" && path[4] === "content" && path[6] === "example",
    (path) => path[0] === "paths" && path[2] === "parameters" && path[4] === "content" && path[6] === "examples" && path[8] === "value",
    (path) => path[0] === "paths" && path[3] === "parameters" && path[4] === "content" && path[7] === "example",
    (path) => path[0] === "paths" && path[3] === "parameters" && path[5] === "content" && path[7] === "examples" && path[9] === "value"
  ];
  var shouldSkipResolution = (path) => skipResolutionTestFns.some((fn) => fn(path));
  var plugin = {
    key: "$ref",
    plugin: (ref, key, fullPath, specmap) => {
      const specmapInstance = specmap.getInstance();
      const parent = fullPath.slice(0, -1);
      if ((0, _helpers.isFreelyNamed)(parent) || shouldSkipResolution(parent)) {
        return;
      }
      const {
        baseDoc
      } = specmap.getContext(fullPath);
      if (typeof ref !== "string") {
        return new JSONRefError("$ref: must be a string (JSON-Ref)", {
          $ref: ref,
          baseDoc,
          fullPath
        });
      }
      const splitString = split(ref);
      const refPath = splitString[0];
      const pointer = splitString[1] || "";
      let basePath;
      try {
        basePath = baseDoc || refPath ? absoluteify(refPath, baseDoc) : null;
      } catch (e) {
        return wrapError(e, {
          pointer,
          $ref: ref,
          basePath,
          fullPath
        });
      }
      let promOrVal;
      let tokens;
      if (pointerAlreadyInPath(pointer, basePath, parent, specmap)) {
        if (!specmapInstance.useCircularStructures) {
          const absolutifiedRef2 = (0, _helpers.absolutifyPointer)(ref, basePath);
          if (ref === absolutifiedRef2) {
            return null;
          }
          return _index.default.replace(fullPath, absolutifiedRef2);
        }
      }
      if (basePath == null) {
        tokens = jsonPointerToArray(pointer);
        promOrVal = specmap.get(tokens);
        if (typeof promOrVal === "undefined") {
          promOrVal = new JSONRefError(`Could not resolve reference: ${ref}`, {
            pointer,
            $ref: ref,
            baseDoc,
            fullPath
          });
        }
      } else {
        promOrVal = extractFromDoc(basePath, pointer);
        if (promOrVal.__value != null) {
          promOrVal = promOrVal.__value;
        } else {
          promOrVal = promOrVal.catch((e) => {
            throw wrapError(e, {
              pointer,
              $ref: ref,
              baseDoc,
              fullPath
            });
          });
        }
      }
      if (promOrVal instanceof Error) {
        return [_index.default.remove(fullPath), promOrVal];
      }
      const absolutifiedRef = (0, _helpers.absolutifyPointer)(ref, basePath);
      const patch = _index.default.replace(parent, promOrVal, {
        $$ref: absolutifiedRef
      });
      if (basePath && basePath !== baseDoc) {
        return [patch, _index.default.context(parent, {
          baseDoc: basePath
        })];
      }
      try {
        if (!patchValueAlreadyInPath(specmap.state, patch) || specmapInstance.useCircularStructures) {
          return patch;
        }
      } catch (e) {
        return null;
      }
      return;
    }
  };
  var mod = Object.assign(plugin, {
    docCache,
    absoluteify,
    clearCache,
    JSONRefError,
    wrapError,
    getDoc,
    split,
    extractFromDoc,
    fetchJSON,
    extract,
    jsonPointerToArray,
    unescapeJsonPointerToken
  });
  var _default = mod;
  exports.default = _default;
  var pointerBoundaryChar = (c) => !c || c === "/" || c === "#";
});

// node_modules/swagger-client/lib/specmap/lib/all-of.js
var require_all_of = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _helpers = require_helpers3();
  var _default = {
    key: "allOf",
    plugin: (val, key, fullPath, specmap, patch) => {
      if (patch.meta && patch.meta.$$ref) {
        return;
      }
      const parent = fullPath.slice(0, -1);
      if ((0, _helpers.isFreelyNamed)(parent)) {
        return;
      }
      if (!Array.isArray(val)) {
        const err = new TypeError("allOf must be an array");
        err.fullPath = fullPath;
        return err;
      }
      let alreadyAddError = false;
      let originalDefinitionObj = patch.value;
      parent.forEach((part) => {
        if (!originalDefinitionObj)
          return;
        originalDefinitionObj = originalDefinitionObj[part];
      });
      originalDefinitionObj = {
        ...originalDefinitionObj
      };
      if (Object.keys(originalDefinitionObj).length === 0) {
        return;
      }
      delete originalDefinitionObj.allOf;
      const patches = [];
      patches.push(specmap.replace(parent, {}));
      val.forEach((toMerge, i) => {
        if (!specmap.isObject(toMerge)) {
          if (alreadyAddError) {
            return null;
          }
          alreadyAddError = true;
          const err = new TypeError("Elements in allOf must be objects");
          err.fullPath = fullPath;
          return patches.push(err);
        }
        patches.push(specmap.mergeDeep(parent, toMerge));
        const collapsedFullPath = fullPath.slice(0, -1);
        const absoluteRefPatches = (0, _helpers.generateAbsoluteRefPatches)(toMerge, collapsedFullPath, {
          getBaseUrlForNodePath: (nodePath) => specmap.getContext([...fullPath, i, ...nodePath]).baseDoc,
          specmap
        });
        patches.push(...absoluteRefPatches);
        return;
      });
      if (originalDefinitionObj.example) {
        patches.push(specmap.remove([].concat(parent, "example")));
      }
      patches.push(specmap.mergeDeep(parent, originalDefinitionObj));
      if (!originalDefinitionObj.$$ref) {
        patches.push(specmap.remove([].concat(parent, "$$ref")));
      }
      return patches;
    }
  };
  exports.default = _default;
});

// node_modules/swagger-client/lib/specmap/lib/parameters.js
var require_parameters = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _index = _interopRequireDefault(require_lib5());
  var _default = {
    key: "parameters",
    plugin: (parameters, key, fullPath, specmap) => {
      if (Array.isArray(parameters) && parameters.length) {
        const val = Object.assign([], parameters);
        const opPath = fullPath.slice(0, -1);
        const op = {
          ..._index.default.getIn(specmap.spec, opPath)
        };
        for (let i = 0;i < parameters.length; i += 1) {
          const param = parameters[i];
          try {
            val[i].default = specmap.parameterMacro(op, param);
          } catch (e) {
            const err = new Error(e);
            err.fullPath = fullPath;
            return err;
          }
        }
        return _index.default.replace(fullPath, val);
      }
      return _index.default.replace(fullPath, parameters);
    }
  };
  exports.default = _default;
});

// node_modules/swagger-client/lib/specmap/lib/properties.js
var require_properties = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _index = _interopRequireDefault(require_lib5());
  var _default = {
    key: "properties",
    plugin: (properties, key, fullPath, specmap) => {
      const val = {
        ...properties
      };
      for (const k in properties) {
        try {
          val[k].default = specmap.modelPropertyMacro(val[k]);
        } catch (e) {
          const err = new Error(e);
          err.fullPath = fullPath;
          return err;
        }
      }
      const patch = _index.default.replace(fullPath, val);
      return patch;
    }
  };
  exports.default = _default;
});

// node_modules/swagger-client/lib/specmap/lib/context-tree.js
var require_context_tree = __commonJS((exports) => {
  var createNode = function(value, parent) {
    return updateNode({
      children: {}
    }, value, parent);
  };
  var updateNode = function(node, value, parent) {
    node.value = value || {};
    node.protoValue = parent ? {
      ...parent.protoValue,
      ...node.value
    } : node.value;
    Object.keys(node.children).forEach((prop) => {
      const child = node.children[prop];
      node.children[prop] = updateNode(child, child.value, node);
    });
    return node;
  };
  exports.__esModule = true;
  exports.default = undefined;

  class ContextTree {
    constructor(value) {
      this.root = createNode(value || {});
    }
    set(path, value) {
      const parent = this.getParent(path, true);
      if (!parent) {
        updateNode(this.root, value, null);
        return;
      }
      const key = path[path.length - 1];
      const {
        children
      } = parent;
      if (children[key]) {
        updateNode(children[key], value, parent);
        return;
      }
      children[key] = createNode(value, parent);
    }
    get(path) {
      path = path || [];
      if (path.length < 1) {
        return this.root.value;
      }
      let branch = this.root;
      let child;
      let token;
      for (let i = 0;i < path.length; i += 1) {
        token = path[i];
        child = branch.children;
        if (!child[token]) {
          break;
        }
        branch = child[token];
      }
      return branch && branch.protoValue;
    }
    getParent(path, ensureExists) {
      if (!path || path.length < 1) {
        return null;
      }
      if (path.length < 2) {
        return this.root;
      }
      return path.slice(0, -1).reduce((branch, token) => {
        if (!branch) {
          return branch;
        }
        const {
          children
        } = branch;
        if (!children[token] && ensureExists) {
          children[token] = createNode(null, branch);
        }
        return children[token];
      }, this.root);
    }
  }
  exports.default = ContextTree;
});

// node_modules/swagger-client/lib/specmap/index.js
var require_specmap = __commonJS((exports) => {
  var mapSpec = function(opts) {
    return new SpecMap(opts).dispatch();
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.SpecMap = undefined;
  exports.default = mapSpec;
  exports.plugins = undefined;
  var _index = _interopRequireDefault(require_lib5());
  var _refs = _interopRequireDefault(require_refs());
  var _allOf = _interopRequireDefault(require_all_of());
  var _parameters = _interopRequireDefault(require_parameters());
  var _properties = _interopRequireDefault(require_properties());
  var _contextTree = _interopRequireDefault(require_context_tree());
  var HARD_LIMIT = 100;
  var noop = () => {
  };

  class SpecMap {
    static getPluginName(plugin) {
      return plugin.pluginName;
    }
    static getPatchesOfType(patches, fn) {
      return patches.filter(fn);
    }
    constructor(opts) {
      Object.assign(this, {
        spec: "",
        debugLevel: "info",
        plugins: [],
        pluginHistory: {},
        errors: [],
        mutations: [],
        promisedPatches: [],
        state: {},
        patches: [],
        context: {},
        contextTree: new _contextTree.default,
        showDebug: false,
        allPatches: [],
        pluginProp: "specMap",
        libMethods: Object.assign(Object.create(this), _index.default, {
          getInstance: () => this
        }),
        allowMetaPatches: false
      }, opts);
      this.get = this._get.bind(this);
      this.getContext = this._getContext.bind(this);
      this.hasRun = this._hasRun.bind(this);
      this.wrappedPlugins = this.plugins.map(this.wrapPlugin.bind(this)).filter(_index.default.isFunction);
      this.patches.push(_index.default.add([], this.spec));
      this.patches.push(_index.default.context([], this.context));
      this.updatePatches(this.patches);
    }
    debug(level) {
      if (this.debugLevel === level) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        console.log(...args);
      }
    }
    verbose(header) {
      if (this.debugLevel === "verbose") {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        console.log(`[${header}]   `, ...args);
      }
    }
    wrapPlugin(plugin, name) {
      const {
        pathDiscriminator
      } = this;
      let ctx = null;
      let fn;
      if (plugin[this.pluginProp]) {
        ctx = plugin;
        fn = plugin[this.pluginProp];
      } else if (_index.default.isFunction(plugin)) {
        fn = plugin;
      } else if (_index.default.isObject(plugin)) {
        fn = createKeyBasedPlugin(plugin);
      }
      return Object.assign(fn.bind(ctx), {
        pluginName: plugin.name || name,
        isGenerator: _index.default.isGenerator(fn)
      });
      function createKeyBasedPlugin(pluginObj) {
        const isSubPath = (path, tested) => {
          if (!Array.isArray(path)) {
            return true;
          }
          return path.every((val, i) => val === tested[i]);
        };
        return function* generator(patches, specmap) {
          const refCache = {};
          for (const patch of patches.filter(_index.default.isAdditiveMutation)) {
            yield* traverse(patch.value, patch.path, patch);
          }
          function* traverse(obj, path, patch) {
            if (!_index.default.isObject(obj)) {
              if (pluginObj.key === path[path.length - 1]) {
                yield pluginObj.plugin(obj, pluginObj.key, path, specmap);
              }
            } else {
              const parentIndex = path.length - 1;
              const parent = path[parentIndex];
              const indexOfFirstProperties = path.indexOf("properties");
              const isRootProperties = parent === "properties" && parentIndex === indexOfFirstProperties;
              const traversed = specmap.allowMetaPatches && refCache[obj.$$ref];
              for (const key of Object.keys(obj)) {
                const val = obj[key];
                const updatedPath = path.concat(key);
                const isObj = _index.default.isObject(val);
                const objRef = obj.$$ref;
                if (!traversed) {
                  if (isObj) {
                    if (specmap.allowMetaPatches && objRef) {
                      refCache[objRef] = true;
                    }
                    yield* traverse(val, updatedPath, patch);
                  }
                }
                if (!isRootProperties && key === pluginObj.key) {
                  const isWithinPathDiscriminator = isSubPath(pathDiscriminator, path);
                  if (!pathDiscriminator || isWithinPathDiscriminator) {
                    yield pluginObj.plugin(val, key, updatedPath, specmap, patch);
                  }
                }
              }
            }
          }
        };
      }
    }
    nextPlugin() {
      return this.wrappedPlugins.find((plugin) => {
        const mutations = this.getMutationsForPlugin(plugin);
        return mutations.length > 0;
      });
    }
    nextPromisedPatch() {
      if (this.promisedPatches.length > 0) {
        return Promise.race(this.promisedPatches.map((patch) => patch.value));
      }
      return;
    }
    getPluginHistory(plugin) {
      const name = this.constructor.getPluginName(plugin);
      return this.pluginHistory[name] || [];
    }
    getPluginRunCount(plugin) {
      return this.getPluginHistory(plugin).length;
    }
    getPluginHistoryTip(plugin) {
      const history = this.getPluginHistory(plugin);
      const val = history && history[history.length - 1];
      return val || {};
    }
    getPluginMutationIndex(plugin) {
      const mi = this.getPluginHistoryTip(plugin).mutationIndex;
      return typeof mi !== "number" ? -1 : mi;
    }
    updatePluginHistory(plugin, val) {
      const name = this.constructor.getPluginName(plugin);
      this.pluginHistory[name] = this.pluginHistory[name] || [];
      this.pluginHistory[name].push(val);
    }
    updatePatches(patches) {
      _index.default.normalizeArray(patches).forEach((patch) => {
        if (patch instanceof Error) {
          this.errors.push(patch);
          return;
        }
        try {
          if (!_index.default.isObject(patch)) {
            this.debug("updatePatches", "Got a non-object patch", patch);
            return;
          }
          if (this.showDebug) {
            this.allPatches.push(patch);
          }
          if (_index.default.isPromise(patch.value)) {
            this.promisedPatches.push(patch);
            this.promisedPatchThen(patch);
            return;
          }
          if (_index.default.isContextPatch(patch)) {
            this.setContext(patch.path, patch.value);
            return;
          }
          if (_index.default.isMutation(patch)) {
            this.updateMutations(patch);
          }
        } catch (e) {
          console.error(e);
          this.errors.push(e);
        }
      });
    }
    updateMutations(patch) {
      if (typeof patch.value === "object" && !Array.isArray(patch.value) && this.allowMetaPatches) {
        patch.value = {
          ...patch.value
        };
      }
      const result = _index.default.applyPatch(this.state, patch, {
        allowMetaPatches: this.allowMetaPatches
      });
      if (result) {
        this.mutations.push(patch);
        this.state = result;
      }
    }
    removePromisedPatch(patch) {
      const index = this.promisedPatches.indexOf(patch);
      if (index < 0) {
        this.debug("Tried to remove a promisedPatch that isn't there!");
        return;
      }
      this.promisedPatches.splice(index, 1);
    }
    promisedPatchThen(patch) {
      patch.value = patch.value.then((val) => {
        const promisedPatch = {
          ...patch,
          value: val
        };
        this.removePromisedPatch(patch);
        this.updatePatches(promisedPatch);
      }).catch((e) => {
        this.removePromisedPatch(patch);
        this.updatePatches(e);
      });
      return patch.value;
    }
    getMutations(from, to) {
      from = from || 0;
      if (typeof to !== "number") {
        to = this.mutations.length;
      }
      return this.mutations.slice(from, to);
    }
    getCurrentMutations() {
      return this.getMutationsForPlugin(this.getCurrentPlugin());
    }
    getMutationsForPlugin(plugin) {
      const tip = this.getPluginMutationIndex(plugin);
      return this.getMutations(tip + 1);
    }
    getCurrentPlugin() {
      return this.currentPlugin;
    }
    getLib() {
      return this.libMethods;
    }
    _get(path) {
      return _index.default.getIn(this.state, path);
    }
    _getContext(path) {
      return this.contextTree.get(path);
    }
    setContext(path, value) {
      return this.contextTree.set(path, value);
    }
    _hasRun(count) {
      const times = this.getPluginRunCount(this.getCurrentPlugin());
      return times > (count || 0);
    }
    dispatch() {
      const that = this;
      const plugin = this.nextPlugin();
      if (!plugin) {
        const nextPromise = this.nextPromisedPatch();
        if (nextPromise) {
          return nextPromise.then(() => this.dispatch()).catch(() => this.dispatch());
        }
        const result = {
          spec: this.state,
          errors: this.errors
        };
        if (this.showDebug) {
          result.patches = this.allPatches;
        }
        return Promise.resolve(result);
      }
      that.pluginCount = that.pluginCount || {};
      that.pluginCount[plugin] = (that.pluginCount[plugin] || 0) + 1;
      if (that.pluginCount[plugin] > HARD_LIMIT) {
        return Promise.resolve({
          spec: that.state,
          errors: that.errors.concat(new Error(`We've reached a hard limit of ${HARD_LIMIT} plugin runs`))
        });
      }
      if (plugin !== this.currentPlugin && this.promisedPatches.length) {
        const promises = this.promisedPatches.map((p) => p.value);
        return Promise.all(promises.map((promise) => promise.then(noop, noop))).then(() => this.dispatch());
      }
      return executePlugin();
      function executePlugin() {
        that.currentPlugin = plugin;
        const mutations = that.getCurrentMutations();
        const lastMutationIndex = that.mutations.length - 1;
        try {
          if (plugin.isGenerator) {
            for (const yieldedPatches of plugin(mutations, that.getLib())) {
              updatePatches(yieldedPatches);
            }
          } else {
            const newPatches = plugin(mutations, that.getLib());
            updatePatches(newPatches);
          }
        } catch (e) {
          console.error(e);
          updatePatches([Object.assign(Object.create(e), {
            plugin
          })]);
        } finally {
          that.updatePluginHistory(plugin, {
            mutationIndex: lastMutationIndex
          });
        }
        return that.dispatch();
      }
      function updatePatches(patches) {
        if (patches) {
          patches = _index.default.fullyNormalizeArray(patches);
          that.updatePatches(patches, plugin);
        }
      }
    }
  }
  exports.SpecMap = SpecMap;
  var plugins = {
    refs: _refs.default,
    allOf: _allOf.default,
    parameters: _parameters.default,
    properties: _properties.default
  };
  exports.plugins = plugins;
});

// node_modules/swagger-client/lib/helpers/replace-special-chars-with-underscore.js
var require_replace_special_chars_with_underscore = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var replaceSpecialCharsWithUnderscore = (operationId) => operationId.replace(/\W/gi, "_");
  var _default = replaceSpecialCharsWithUnderscore;
  exports.default = _default;
});

// node_modules/swagger-client/lib/helpers/id-from-path-method/index.js
var require_id_from_path_method = __commonJS((exports) => {
  var idFromPathMethod = function(pathName, method, _temp) {
    let {
      v2OperationIdCompatibilityMode
    } = _temp === undefined ? {} : _temp;
    if (v2OperationIdCompatibilityMode) {
      let res = `${method.toLowerCase()}_${pathName}`.replace(/[\s!@#$%^&*()_+=[{\]};:<>|./?,\\'""-]/g, "_");
      res = res || `${pathName.substring(1)}_${method}`;
      return res.replace(/((_){2,})/g, "_").replace(/^(_)*/g, "").replace(/([_])*$/g, "");
    }
    return `${method.toLowerCase()}${(0, _replaceSpecialCharsWithUnderscore.default)(pathName)}`;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = idFromPathMethod;
  var _replaceSpecialCharsWithUnderscore = _interopRequireDefault(require_replace_special_chars_with_underscore());
});

// node_modules/swagger-client/lib/helpers/op-id.js
var require_op_id = __commonJS((exports) => {
  var opId = function(operation, pathName, method, _temp) {
    if (method === undefined) {
      method = "";
    }
    let {
      v2OperationIdCompatibilityMode
    } = _temp === undefined ? {} : _temp;
    if (!operation || typeof operation !== "object") {
      return null;
    }
    const idWithoutWhitespace = (operation.operationId || "").replace(/\s/g, "");
    if (idWithoutWhitespace.length) {
      return (0, _replaceSpecialCharsWithUnderscore.default)(operation.operationId);
    }
    return (0, _index.default)(pathName, method, {
      v2OperationIdCompatibilityMode
    });
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = opId;
  var _index = _interopRequireDefault(require_id_from_path_method());
  var _replaceSpecialCharsWithUnderscore = _interopRequireDefault(require_replace_special_chars_with_underscore());
});

// node_modules/swagger-client/lib/resolver/strategies/generic/normalize.js
var require_normalize = __commonJS((exports) => {
  var normalize = function(parsedSpec) {
    const {
      spec
    } = parsedSpec;
    const {
      paths
    } = spec;
    const map = {};
    if (!paths || spec.$$normalized) {
      return parsedSpec;
    }
    for (const pathName in paths) {
      const path = paths[pathName];
      if (path == null || !["object", "function"].includes(typeof path)) {
        continue;
      }
      const pathParameters = path.parameters;
      for (const method in path) {
        const operation = path[method];
        if (operation == null || !["object", "function"].includes(typeof operation)) {
          continue;
        }
        const oid = (0, _opId.default)(operation, pathName, method);
        if (oid) {
          if (map[oid]) {
            map[oid].push(operation);
          } else {
            map[oid] = [operation];
          }
          const opList = map[oid];
          if (opList.length > 1) {
            opList.forEach((o, i) => {
              o.__originalOperationId = o.__originalOperationId || o.operationId;
              o.operationId = `${oid}${i + 1}`;
            });
          } else if (typeof operation.operationId !== "undefined") {
            const obj = opList[0];
            obj.__originalOperationId = obj.__originalOperationId || operation.operationId;
            obj.operationId = oid;
          }
        }
        if (method !== "parameters") {
          const inheritsList = [];
          const toBeInherit = {};
          for (const key in spec) {
            if (key === "produces" || key === "consumes" || key === "security") {
              toBeInherit[key] = spec[key];
              inheritsList.push(toBeInherit);
            }
          }
          if (pathParameters) {
            toBeInherit.parameters = pathParameters;
            inheritsList.push(toBeInherit);
          }
          if (inheritsList.length) {
            for (const inherits of inheritsList) {
              for (const inheritName in inherits) {
                if (!operation[inheritName]) {
                  operation[inheritName] = inherits[inheritName];
                } else if (inheritName === "parameters") {
                  for (const param of inherits[inheritName]) {
                    const exists = operation[inheritName].some((opParam) => opParam.name && opParam.name === param.name || opParam.$ref && opParam.$ref === param.$ref || opParam.$$ref && opParam.$$ref === param.$$ref || opParam === param);
                    if (!exists) {
                      operation[inheritName].push(param);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    spec.$$normalized = true;
    return parsedSpec;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = normalize;
  var _opId = _interopRequireDefault(require_op_id());
});

// node_modules/swagger-client/lib/resolver/strategies/generic/resolve.js
var require_resolve2 = __commonJS((exports) => {
  async function resolveGenericStrategy(options) {
    const {
      spec,
      mode,
      allowMetaPatches = true,
      pathDiscriminator,
      modelPropertyMacro,
      parameterMacro,
      requestInterceptor,
      responseInterceptor,
      skipNormalization,
      useCircularStructures
    } = options;
    const retrievalURI = optionsUtil.retrievalURI(options);
    const httpClient = optionsUtil.httpClient(options);
    return doResolve(spec);
    function doResolve(_spec) {
      if (retrievalURI) {
        _index.plugins.refs.docCache[retrievalURI] = _spec;
      }
      _index.plugins.refs.fetchJSON = (0, _index2.makeFetchJSON)(httpClient, {
        requestInterceptor,
        responseInterceptor
      });
      const plugs = [_index.plugins.refs];
      if (typeof parameterMacro === "function") {
        plugs.push(_index.plugins.parameters);
      }
      if (typeof modelPropertyMacro === "function") {
        plugs.push(_index.plugins.properties);
      }
      if (mode !== "strict") {
        plugs.push(_index.plugins.allOf);
      }
      return (0, _index.default)({
        spec: _spec,
        context: {
          baseDoc: retrievalURI
        },
        plugins: plugs,
        allowMetaPatches,
        pathDiscriminator,
        parameterMacro,
        modelPropertyMacro,
        useCircularStructures
      }).then(skipNormalization ? async (a) => a : _normalize.default);
    }
  }
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = resolveGenericStrategy;
  var _index = _interopRequireWildcard(require_specmap());
  var _normalize = _interopRequireDefault(require_normalize());
  var _index2 = require_utils4();
  var optionsUtil = _interopRequireWildcard(require_options());
});

// node_modules/swagger-client/lib/resolver/strategies/generic/index.js
var require_generic = __commonJS((exports) => {
  var clearCache = function() {
    _index.plugins.refs.clearCache();
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.clearCache = clearCache;
  exports.default = undefined;
  var _resolve = _interopRequireDefault(require_resolve2());
  var _normalize = _interopRequireDefault(require_normalize());
  var _index = require_specmap();
  var genericStrategy = {
    name: "generic",
    match() {
      return true;
    },
    normalize(_ref) {
      let {
        spec
      } = _ref;
      const {
        spec: normalized
      } = (0, _normalize.default)({
        spec
      });
      return normalized;
    },
    async resolve(options) {
      return (0, _resolve.default)(options);
    }
  };
  var _default = genericStrategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-2/resolve.js
var require_resolve3 = __commonJS((exports) => {
  async function resolveOpenAPI2Strategy(options) {
    return (0, _resolve.default)(options);
  }
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = resolveOpenAPI2Strategy;
  var _resolve = _interopRequireDefault(require_resolve2());
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-2/normalize.js
var require_normalize2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _normalize = _interopRequireDefault(require_normalize());
  exports.default = _normalize.default;
});

// node_modules/swagger-client/lib/helpers/openapi-predicates.js
var require_openapi_predicates = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isSwagger2 = exports.isOpenAPI31 = exports.isOpenAPI30 = exports.isOpenAPI3 = exports.isOpenAPI2 = undefined;
  var isOpenAPI2 = (spec) => {
    try {
      const {
        swagger
      } = spec;
      return swagger === "2.0";
    } catch {
      return false;
    }
  };
  exports.isSwagger2 = exports.isOpenAPI2 = isOpenAPI2;
  var isOpenAPI30 = (spec) => {
    try {
      const {
        openapi
      } = spec;
      return typeof openapi === "string" && /^3\.0\.([0123])(?:-rc[012])?$/.test(openapi);
    } catch {
      return false;
    }
  };
  exports.isOpenAPI30 = isOpenAPI30;
  var isOpenAPI31 = (spec) => {
    try {
      const {
        openapi
      } = spec;
      return typeof openapi === "string" && /^3\.1\.(?:[1-9]\d*|0)$/.test(openapi);
    } catch {
      return false;
    }
  };
  exports.isOpenAPI31 = isOpenAPI31;
  var isOpenAPI3 = (spec) => isOpenAPI30(spec) || isOpenAPI31(spec);
  exports.isOpenAPI3 = isOpenAPI3;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-2/index.js
var require_openapi_2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.clearCache = undefined;
  var _resolve = _interopRequireDefault(require_resolve3());
  var _normalize = _interopRequireDefault(require_normalize2());
  var _openapiPredicates = require_openapi_predicates();
  var _index = require_generic();
  exports.clearCache = _index.clearCache;
  var openApi2Strategy = {
    name: "openapi-2",
    match(_ref) {
      let {
        spec
      } = _ref;
      return (0, _openapiPredicates.isOpenAPI2)(spec);
    },
    normalize(_ref2) {
      let {
        spec
      } = _ref2;
      const {
        spec: normalized
      } = (0, _normalize.default)({
        spec
      });
      return normalized;
    },
    async resolve(options) {
      return (0, _resolve.default)(options);
    }
  };
  var _default = openApi2Strategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-3-0/resolve.js
var require_resolve4 = __commonJS((exports) => {
  async function resolveOpenAPI30Strategy(options) {
    return (0, _resolve.default)(options);
  }
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = resolveOpenAPI30Strategy;
  var _resolve = _interopRequireDefault(require_resolve2());
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-3-0/normalize.js
var require_normalize3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _normalize = _interopRequireDefault(require_normalize());
  exports.default = _normalize.default;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-3-0/index.js
var require_openapi_3_0 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.clearCache = undefined;
  var _resolve = _interopRequireDefault(require_resolve4());
  var _normalize = _interopRequireDefault(require_normalize3());
  var _openapiPredicates = require_openapi_predicates();
  var _index = require_generic();
  exports.clearCache = _index.clearCache;
  var openApi30Strategy = {
    name: "openapi-3-0",
    match(_ref) {
      let {
        spec
      } = _ref;
      return (0, _openapiPredicates.isOpenAPI30)(spec);
    },
    normalize(_ref2) {
      let {
        spec
      } = _ref2;
      const {
        spec: normalized
      } = (0, _normalize.default)({
        spec
      });
      return normalized;
    },
    async resolve(options) {
      return (0, _resolve.default)(options);
    }
  };
  var _default = openApi30Strategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/index.js
var require_resolver = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.makeResolve = exports.default = undefined;
  var _index = require_utils4();
  var optionsUtil = _interopRequireWildcard(require_options());
  var _index2 = _interopRequireDefault(require_generic());
  var _index3 = _interopRequireDefault(require_openapi_2());
  var _index4 = _interopRequireDefault(require_openapi_3_0());
  var resolve = async (options) => {
    const {
      spec,
      requestInterceptor,
      responseInterceptor
    } = options;
    const retrievalURI = optionsUtil.retrievalURI(options);
    const httpClient = optionsUtil.httpClient(options);
    const retrievedSpec = spec || await (0, _index.makeFetchJSON)(httpClient, {
      requestInterceptor,
      responseInterceptor
    })(retrievalURI);
    const strategyOptions = {
      ...options,
      spec: retrievedSpec
    };
    const strategy = options.strategies.find((strg) => strg.match(strategyOptions));
    return strategy.resolve(strategyOptions);
  };
  var makeResolve = (defaultOptions) => async (options) => {
    const mergedOptions = {
      ...defaultOptions,
      ...options
    };
    return resolve(mergedOptions);
  };
  exports.makeResolve = makeResolve;
  var _default = makeResolve({
    strategies: [_index4.default, _index3.default, _index2.default]
  });
  exports.default = _default;
});

// node_modules/swagger-client/lib/subtree-resolver/index.js
var require_subtree_resolver = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.makeResolveSubtree = exports.default = undefined;
  var _index = _interopRequireDefault(require_resolver());
  var _index2 = _interopRequireDefault(require_generic());
  var _index3 = _interopRequireDefault(require_openapi_2());
  var _index4 = _interopRequireDefault(require_openapi_3_0());
  var resolveSubtree = async function(obj, path, options) {
    if (options === undefined) {
      options = {};
    }
    const {
      returnEntireTree,
      baseDoc,
      requestInterceptor,
      responseInterceptor,
      parameterMacro,
      modelPropertyMacro,
      useCircularStructures,
      strategies
    } = options;
    const resolveOptions = {
      spec: obj,
      pathDiscriminator: path,
      baseDoc,
      requestInterceptor,
      responseInterceptor,
      parameterMacro,
      modelPropertyMacro,
      useCircularStructures,
      strategies
    };
    const strategy = strategies.find((strg) => strg.match(resolveOptions));
    const normalized = strategy.normalize(resolveOptions);
    const result = await (0, _index.default)({
      ...resolveOptions,
      spec: normalized,
      allowMetaPatches: true,
      skipNormalization: true
    });
    if (!returnEntireTree && Array.isArray(path) && path.length) {
      result.spec = path.reduce((acc, pathSegment) => acc == null ? undefined : acc[pathSegment], result.spec) || null;
    }
    return result;
  };
  var makeResolveSubtree = (defaultOptions) => async function(obj, path, options) {
    if (options === undefined) {
      options = {};
    }
    const mergedOptions = {
      ...defaultOptions,
      ...options
    };
    return resolveSubtree(obj, path, mergedOptions);
  };
  exports.makeResolveSubtree = makeResolveSubtree;
  var _default = makeResolveSubtree({
    strategies: [_index4.default, _index3.default, _index2.default]
  });
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/errors/JsonPointerError.cjs
var require_JsonPointerError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class JsonPointerError extends _apidomError.ApiDOMStructuredError {
  }
  var _default = JsonPointerError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/errors/InvalidJsonPointerError.cjs
var require_InvalidJsonPointerError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _JsonPointerError = _interopRequireDefault(require_JsonPointerError());

  class InvalidJsonPointerError extends _JsonPointerError.default {
    constructor(message, structuredOptions) {
      super(message, structuredOptions);
      if (typeof structuredOptions !== "undefined") {
        this.pointer = structuredOptions.pointer;
      }
    }
  }
  var _default = InvalidJsonPointerError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/errors/CompilationJsonPointerError.cjs
var require_CompilationJsonPointerError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _JsonPointerError = _interopRequireDefault(require_JsonPointerError());

  class CompilationJsonPointerError extends _JsonPointerError.default {
    constructor(message, structuredOptions) {
      super(message, structuredOptions);
      if (typeof structuredOptions !== "undefined") {
        this.tokens = [...structuredOptions.tokens];
      }
    }
  }
  var _default = CompilationJsonPointerError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/errors/EvaluationJsonPointerError.cjs
var require_EvaluationJsonPointerError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _JsonPointerError = _interopRequireDefault(require_JsonPointerError());

  class EvaluationJsonPointerError extends _JsonPointerError.default {
    constructor(message, structuredOptions) {
      super(message, structuredOptions);
      if (typeof structuredOptions !== "undefined") {
        this.pointer = structuredOptions.pointer;
        if (Array.isArray(structuredOptions.tokens)) {
          this.tokens = [...structuredOptions.tokens];
        }
        this.failedToken = structuredOptions.failedToken;
        this.failedTokenPosition = structuredOptions.failedTokenPosition;
        this.element = structuredOptions.element.element;
        if ((0, _apidomCore.hasElementSourceMap)(structuredOptions.element)) {
          this.elementSourceMap = (0, _apidomCore.toValue)(structuredOptions.element.getMetaProperty("sourceMap"));
        }
      }
    }
  }
  var _default = EvaluationJsonPointerError;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/escape.cjs
var require_escape = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var escape2 = (0, _ramda.pipe)((0, _ramda.replace)(/~/g, "~0"), (0, _ramda.replace)(/\//g, "~1"), encodeURIComponent);
  var _default = escape2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/unescape.cjs
var require_unescape = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var safeDecodeURIComponent = (encodedURIComponent) => {
    try {
      return decodeURIComponent(encodedURIComponent);
    } catch {
      return encodedURIComponent;
    }
  };
  var unescape2 = (0, _ramda.pipe)((0, _ramda.replace)(/~1/g, "/"), (0, _ramda.replace)(/~0/g, "~"), safeDecodeURIComponent);
  var _default = unescape2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/parse.cjs
var require_parse4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.uriToPointer = exports.default = undefined;
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _unescape = _interopRequireDefault(require_unescape());
  var _InvalidJsonPointerError = _interopRequireDefault(require_InvalidJsonPointerError());
  var parse = (pointer) => {
    if ((0, _ramdaAdjunct.isEmptyString)(pointer)) {
      return [];
    }
    if (!(0, _ramda.startsWith)("/", pointer)) {
      throw new _InvalidJsonPointerError.default(`Invalid JSON Pointer "${pointer}". JSON Pointers must begin with "/"`, {
        pointer
      });
    }
    try {
      const tokens = (0, _ramda.pipe)((0, _ramda.split)("/"), (0, _ramda.map)(_unescape.default))(pointer);
      return (0, _ramda.tail)(tokens);
    } catch (error) {
      throw new _InvalidJsonPointerError.default(`JSON Pointer parsing of "${pointer}" encountered an error.`, {
        pointer,
        cause: error
      });
    }
  };
  var getHash = (uri) => {
    const hashIndex = uri.indexOf("#");
    if (hashIndex !== -1) {
      return uri.substring(hashIndex);
    }
    return "#";
  };
  var uriToPointer = (uri) => {
    const hash = getHash(uri);
    return (0, _ramdaAdjunct.trimCharsStart)("#", hash);
  };
  exports.uriToPointer = uriToPointer;
  var _default = parse;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/compile.cjs
var require_compile = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _escape = _interopRequireDefault(require_escape());
  var _CompilationJsonPointerError = _interopRequireDefault(require_CompilationJsonPointerError());
  var compile = (tokens) => {
    try {
      if (tokens.length === 0) {
        return "";
      }
      return `/${tokens.map(_escape.default).join("/")}`;
    } catch (error) {
      throw new _CompilationJsonPointerError.default("JSON Pointer compilation of tokens encountered an error.", {
        tokens,
        cause: error
      });
    }
  };
  var _default = compile;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/evaluate.cjs
var require_evaluate = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _parse = _interopRequireDefault(require_parse4());
  var _EvaluationJsonPointerError = _interopRequireDefault(require_EvaluationJsonPointerError());
  var evaluate = (pointer, element) => {
    let tokens;
    try {
      tokens = (0, _parse.default)(pointer);
    } catch (error) {
      throw new _EvaluationJsonPointerError.default(`JSON Pointer evaluation failed while parsing the pointer "${pointer}".`, {
        pointer,
        element,
        cause: error
      });
    }
    return tokens.reduce((acc, token, tokenPosition) => {
      if ((0, _apidomCore.isObjectElement)(acc)) {
        if (!acc.hasKey(token)) {
          throw new _EvaluationJsonPointerError.default(`JSON Pointer evaluation failed while evaluating token "${token}" against an ObjectElement`, {
            pointer,
            tokens,
            failedToken: token,
            failedTokenPosition: tokenPosition,
            element: acc
          });
        }
        return acc.get(token);
      }
      if ((0, _apidomCore.isArrayElement)(acc)) {
        if (!(token in acc.content) || !(0, _ramdaAdjunct.isInteger)(Number(token))) {
          throw new _EvaluationJsonPointerError.default(`JSON Pointer evaluation failed while evaluating token "${token}" against an ArrayElement`, {
            pointer,
            tokens,
            failedToken: token,
            failedTokenPosition: tokenPosition,
            element: acc
          });
        }
        return acc.get(Number(token));
      }
      throw new _EvaluationJsonPointerError.default(`JSON Pointer evaluation failed while evaluating token "${token}" against an unexpected Element`, {
        pointer,
        tokens,
        failedToken: token,
        failedTokenPosition: tokenPosition,
        element: acc
      });
    }, element);
  };
  var _default = evaluate;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-json-pointer/cjs/index.cjs
var require_cjs6 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.uriToPointer = exports.unescape = exports.parse = exports.evaluate = exports.escape = exports.compile = exports.JsonPointerError = exports.InvalidJsonPointerError = exports.EvaluationJsonPointerError = exports.CompilationJsonPointerError = undefined;
  var _JsonPointerError = _interopRequireDefault(require_JsonPointerError());
  exports.JsonPointerError = _JsonPointerError.default;
  var _InvalidJsonPointerError = _interopRequireDefault(require_InvalidJsonPointerError());
  exports.InvalidJsonPointerError = _InvalidJsonPointerError.default;
  var _CompilationJsonPointerError = _interopRequireDefault(require_CompilationJsonPointerError());
  exports.CompilationJsonPointerError = _CompilationJsonPointerError.default;
  var _EvaluationJsonPointerError = _interopRequireDefault(require_EvaluationJsonPointerError());
  exports.EvaluationJsonPointerError = _EvaluationJsonPointerError.default;
  var _escape = _interopRequireDefault(require_escape());
  exports.escape = _escape.default;
  var _unescape = _interopRequireDefault(require_unescape());
  exports.unescape = _unescape.default;
  var _parse = _interopRequireWildcard(require_parse4());
  exports.parse = _parse.default;
  exports.uriToPointer = _parse.uriToPointer;
  var _compile = _interopRequireDefault(require_compile());
  exports.compile = _compile.default;
  var _evaluate = _interopRequireDefault(require_evaluate());
  exports.evaluate = _evaluate.default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/media-types.cjs
var require_media_types2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = exports.OpenAPIMediaTypes = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();

  class OpenAPIMediaTypes extends _apidomCore.MediaTypes {
    filterByFormat(format = "generic") {
      const effectiveFormat = format === "generic" ? "openapi;version" : format;
      return this.filter((mediaType) => mediaType.includes(effectiveFormat));
    }
    findBy(version = "3.1.0", format = "generic") {
      const search = format === "generic" ? `vnd.oai.openapi;version=${version}` : `vnd.oai.openapi+${format};version=${version}`;
      const found = this.find((mediaType) => mediaType.includes(search));
      return found || this.unknownMediaType;
    }
    latest(format = "generic") {
      return (0, _ramda.last)(this.filterByFormat(format));
    }
  }
  exports.OpenAPIMediaTypes = OpenAPIMediaTypes;
  var mediaTypes = new OpenAPIMediaTypes("application/vnd.oai.openapi;version=3.1.0", "application/vnd.oai.openapi+json;version=3.1.0", "application/vnd.oai.openapi+yaml;version=3.1.0");
  var _default = mediaTypes;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/media-types.cjs
var require_media_types3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = exports.OpenAPIMediaTypes = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();

  class OpenAPIMediaTypes extends _apidomCore.MediaTypes {
    filterByFormat(format = "generic") {
      const effectiveFormat = format === "generic" ? "openapi;version" : format;
      return this.filter((mediaType) => mediaType.includes(effectiveFormat));
    }
    findBy(version = "3.0.3", format = "generic") {
      const search = format === "generic" ? `vnd.oai.openapi;version=${version}` : `vnd.oai.openapi+${format};version=${version}`;
      const found = this.find((mediaType) => mediaType.includes(search));
      return found || this.unknownMediaType;
    }
    latest(format = "generic") {
      return (0, _ramda.last)(this.filterByFormat(format));
    }
  }
  exports.OpenAPIMediaTypes = OpenAPIMediaTypes;
  var mediaTypes = new OpenAPIMediaTypes("application/vnd.oai.openapi;version=3.0.0", "application/vnd.oai.openapi+json;version=3.0.0", "application/vnd.oai.openapi+yaml;version=3.0.0", "application/vnd.oai.openapi;version=3.0.1", "application/vnd.oai.openapi+json;version=3.0.1", "application/vnd.oai.openapi+yaml;version=3.0.1", "application/vnd.oai.openapi;version=3.0.2", "application/vnd.oai.openapi+json;version=3.0.2", "application/vnd.oai.openapi+yaml;version=3.0.2", "application/vnd.oai.openapi;version=3.0.3", "application/vnd.oai.openapi+json;version=3.0.3", "application/vnd.oai.openapi+yaml;version=3.0.3");
  var _default = mediaTypes;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Callback.cjs
var require_Callback = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Callback extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "callback";
    }
  }
  var _default = Callback;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Components.cjs
var require_Components = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Components extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "components";
    }
    get schemas() {
      return this.get("schemas");
    }
    set schemas(schemas) {
      this.set("schemas", schemas);
    }
    get responses() {
      return this.get("responses");
    }
    set responses(responses) {
      this.set("responses", responses);
    }
    get parameters() {
      return this.get("parameters");
    }
    set parameters(parameters) {
      this.set("parameters", parameters);
    }
    get examples() {
      return this.get("examples");
    }
    set examples(examples) {
      this.set("examples", examples);
    }
    get requestBodies() {
      return this.get("requestBodies");
    }
    set requestBodies(requestBodies) {
      this.set("requestBodies", requestBodies);
    }
    get headers() {
      return this.get("headers");
    }
    set headers(headers) {
      this.set("headers", headers);
    }
    get securitySchemes() {
      return this.get("securitySchemes");
    }
    set securitySchemes(securitySchemes) {
      this.set("securitySchemes", securitySchemes);
    }
    get links() {
      return this.get("links");
    }
    set links(links) {
      this.set("links", links);
    }
    get callbacks() {
      return this.get("callbacks");
    }
    set callbacks(callbacks) {
      this.set("callbacks", callbacks);
    }
  }
  var _default = Components;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Contact.cjs
var require_Contact = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Contact extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "contact";
    }
    get name() {
      return this.get("name");
    }
    set name(name) {
      this.set("name", name);
    }
    get url() {
      return this.get("url");
    }
    set url(url) {
      this.set("url", url);
    }
    get email() {
      return this.get("email");
    }
    set email(email) {
      this.set("email", email);
    }
  }
  var _default = Contact;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Discriminator.cjs
var require_Discriminator = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Discriminator extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "discriminator";
    }
    get propertyName() {
      return this.get("propertyName");
    }
    set propertyName(propertyName) {
      this.set("propertyName", propertyName);
    }
    get mapping() {
      return this.get("mapping");
    }
    set mapping(mapping) {
      this.set("mapping", mapping);
    }
  }
  var _default = Discriminator;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Encoding.cjs
var require_Encoding = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Encoding extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "encoding";
    }
    get contentType() {
      return this.get("contentType");
    }
    set contentType(contentType) {
      this.set("contentType", contentType);
    }
    get headers() {
      return this.get("headers");
    }
    set headers(headers) {
      this.set("headers", headers);
    }
    get style() {
      return this.get("style");
    }
    set style(style) {
      this.set("style", style);
    }
    get explode() {
      return this.get("explode");
    }
    set explode(explode) {
      this.set("explode", explode);
    }
    get allowedReserved() {
      return this.get("allowedReserved");
    }
    set allowedReserved(allowedReserved) {
      this.set("allowedReserved", allowedReserved);
    }
  }
  var _default = Encoding;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Example.cjs
var require_Example = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Example extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "example";
    }
    get summary() {
      return this.get("summary");
    }
    set summary(summary) {
      this.set("summary", summary);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get value() {
      return this.get("value");
    }
    set value(value) {
      this.set("value", value);
    }
    get externalValue() {
      return this.get("externalValue");
    }
    set externalValue(externalValue) {
      this.set("externalValue", externalValue);
    }
  }
  var _default = Example;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/ExternalDocumentation.cjs
var require_ExternalDocumentation = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ExternalDocumentation extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "externalDocumentation";
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get url() {
      return this.get("url");
    }
    set url(url) {
      this.set("url", url);
    }
  }
  var _default = ExternalDocumentation;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Header.cjs
var require_Header = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Header extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "header";
    }
    get required() {
      if (this.hasKey("required")) {
        return this.get("required");
      }
      return new _apidomCore.BooleanElement(false);
    }
    set required(required) {
      this.set("required", required);
    }
    get deprecated() {
      if (this.hasKey("deprecated")) {
        return this.get("deprecated");
      }
      return new _apidomCore.BooleanElement(false);
    }
    set deprecated(deprecated) {
      this.set("deprecated", deprecated);
    }
    get allowEmptyValue() {
      return this.get("allowEmptyValue");
    }
    set allowEmptyValue(allowEmptyValue) {
      this.set("allowEmptyValue", allowEmptyValue);
    }
    get style() {
      return this.get("style");
    }
    set style(style) {
      this.set("style", style);
    }
    get explode() {
      return this.get("explode");
    }
    set explode(explode) {
      this.set("explode", explode);
    }
    get allowReserved() {
      return this.get("allowReserved");
    }
    set allowReserved(allowReserved) {
      this.set("allowReserved", allowReserved);
    }
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
    get example() {
      return this.get("example");
    }
    set example(example) {
      this.set("example", example);
    }
    get examples() {
      return this.get("examples");
    }
    set examples(examples) {
      this.set("examples", examples);
    }
    get contentProp() {
      return this.get("content");
    }
    set contentProp(content) {
      this.set("content", content);
    }
  }
  Object.defineProperty(Header.prototype, "description", {
    get() {
      return this.get("description");
    },
    set(description) {
      this.set("description", description);
    },
    enumerable: true
  });
  var _default = Header;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Info.cjs
var require_Info = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Info extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "info";
      this.classes.push("info");
    }
    get title() {
      return this.get("title");
    }
    set title(title) {
      this.set("title", title);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get termsOfService() {
      return this.get("termsOfService");
    }
    set termsOfService(tos) {
      this.set("termsOfService", tos);
    }
    get contact() {
      return this.get("contact");
    }
    set contact(contactElement) {
      this.set("contact", contactElement);
    }
    get license() {
      return this.get("license");
    }
    set license(licenseElement) {
      this.set("license", licenseElement);
    }
    get version() {
      return this.get("version");
    }
    set version(version) {
      this.set("version", version);
    }
  }
  var _default = Info;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/License.cjs
var require_License = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class License extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "license";
    }
    get name() {
      return this.get("name");
    }
    set name(name) {
      this.set("name", name);
    }
    get url() {
      return this.get("url");
    }
    set url(url) {
      this.set("url", url);
    }
  }
  var _default = License;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Link.cjs
var require_Link = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Link extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "link";
    }
    get operationRef() {
      return this.get("operationRef");
    }
    set operationRef(operationRef) {
      this.set("operationRef", operationRef);
    }
    get operationId() {
      return this.get("operationId");
    }
    set operationId(operationId) {
      this.set("operationId", operationId);
    }
    get operation() {
      if ((0, _apidomCore.isStringElement)(this.operationRef)) {
        var _this$operationRef;
        return (_this$operationRef = this.operationRef) == null ? undefined : _this$operationRef.meta.get("operation");
      }
      if ((0, _apidomCore.isStringElement)(this.operationId)) {
        var _this$operationId;
        return (_this$operationId = this.operationId) == null ? undefined : _this$operationId.meta.get("operation");
      }
      return;
    }
    set operation(operation) {
      this.set("operation", operation);
    }
    get parameters() {
      return this.get("parameters");
    }
    set parameters(parameters) {
      this.set("parameters", parameters);
    }
    get requestBody() {
      return this.get("requestBody");
    }
    set requestBody(requestBody) {
      this.set("requestBody", requestBody);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get server() {
      return this.get("server");
    }
    set server(server) {
      this.set("server", server);
    }
  }
  var _default = Link;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/MediaType.cjs
var require_MediaType = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class MediaType extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "mediaType";
    }
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
    get example() {
      return this.get("example");
    }
    set example(example) {
      this.set("example", example);
    }
    get examples() {
      return this.get("examples");
    }
    set examples(examples) {
      this.set("examples", examples);
    }
    get encoding() {
      return this.get("encoding");
    }
    set encoding(encoding) {
      this.set("encoding", encoding);
    }
  }
  var _default = MediaType;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/OAuthFlow.cjs
var require_OAuthFlow = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OAuthFlow extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "oAuthFlow";
    }
    get authorizationUrl() {
      return this.get("authorizationUrl");
    }
    set authorizationUrl(authorizationUrl) {
      this.set("authorizationUrl", authorizationUrl);
    }
    get tokenUrl() {
      return this.get("tokenUrl");
    }
    set tokenUrl(tokenUrl) {
      this.set("tokenUrl", tokenUrl);
    }
    get refreshUrl() {
      return this.get("refreshUrl");
    }
    set refreshUrl(refreshUrl) {
      this.set("refreshUrl", refreshUrl);
    }
    get scopes() {
      return this.get("scopes");
    }
    set scopes(scopes) {
      this.set("scopes", scopes);
    }
  }
  var _default = OAuthFlow;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/OAuthFlows.cjs
var require_OAuthFlows = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OAuthFlows extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "oAuthFlows";
    }
    get implicit() {
      return this.get("implicit");
    }
    set implicit(implicit) {
      this.set("implicit", implicit);
    }
    get password() {
      return this.get("password");
    }
    set password(password) {
      this.set("password", password);
    }
    get clientCredentials() {
      return this.get("clientCredentials");
    }
    set clientCredentials(clientCredentials) {
      this.set("clientCredentials", clientCredentials);
    }
    get authorizationCode() {
      return this.get("authorizationCode");
    }
    set authorizationCode(authorizationCode) {
      this.set("authorizationCode", authorizationCode);
    }
  }
  var _default = OAuthFlows;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Openapi.cjs
var require_Openapi = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Openapi extends _apidomCore.StringElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "openapi";
      this.classes.push("spec-version");
      this.classes.push("version");
    }
  }
  var _default = Openapi;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/OpenApi3-0.cjs
var require_OpenApi3_0 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OpenApi3_0 extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "openApi3_0";
      this.classes.push("api");
    }
    get openapi() {
      return this.get("openapi");
    }
    set openapi(openapi) {
      this.set("openapi", openapi);
    }
    get info() {
      return this.get("info");
    }
    set info(info) {
      this.set("info", info);
    }
    get servers() {
      return this.get("servers");
    }
    set servers(servers) {
      this.set("servers", servers);
    }
    get paths() {
      return this.get("paths");
    }
    set paths(paths) {
      this.set("paths", paths);
    }
    get components() {
      return this.get("components");
    }
    set components(components) {
      this.set("components", components);
    }
    get security() {
      return this.get("security");
    }
    set security(security) {
      this.set("security", security);
    }
    get tags() {
      return this.get("tags");
    }
    set tags(tags) {
      this.set("tags", tags);
    }
    get externalDocs() {
      return this.get("externalDocs");
    }
    set externalDocs(externalDocs) {
      this.set("externalDocs", externalDocs);
    }
  }
  var _default = OpenApi3_0;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Operation.cjs
var require_Operation = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Operation extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "operation";
    }
    get tags() {
      return this.get("tags");
    }
    set tags(tags) {
      this.set("tags", tags);
    }
    get summary() {
      return this.get("summary");
    }
    set summary(description) {
      this.set("summary", description);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    set externalDocs(externalDocs) {
      this.set("externalDocs", externalDocs);
    }
    get externalDocs() {
      return this.get("externalDocs");
    }
    get operationId() {
      return this.get("operationId");
    }
    set operationId(operationId) {
      this.set("operationId", operationId);
    }
    get parameters() {
      return this.get("parameters");
    }
    set parameters(parameters) {
      this.set("parameters", parameters);
    }
    get requestBody() {
      return this.get("requestBody");
    }
    set requestBody(requestBody) {
      this.set("requestBody", requestBody);
    }
    get responses() {
      return this.get("responses");
    }
    set responses(responses) {
      this.set("responses", responses);
    }
    get callbacks() {
      return this.get("callbacks");
    }
    set callbacks(callbacks) {
      this.set("callbacks", callbacks);
    }
    get deprecated() {
      if (this.hasKey("deprecated")) {
        return this.get("deprecated");
      }
      return new _apidomCore.BooleanElement(false);
    }
    set deprecated(deprecated) {
      this.set("deprecated", deprecated);
    }
    get security() {
      return this.get("security");
    }
    set security(security) {
      this.set("security", security);
    }
    get servers() {
      return this.get("severs");
    }
    set servers(servers) {
      this.set("servers", servers);
    }
  }
  var _default = Operation;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Parameter.cjs
var require_Parameter = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Parameter extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "parameter";
    }
    get name() {
      return this.get("name");
    }
    set name(name) {
      this.set("name", name);
    }
    get in() {
      return this.get("in");
    }
    set in(val) {
      this.set("in", val);
    }
    get required() {
      if (this.hasKey("required")) {
        return this.get("required");
      }
      return new _apidomCore.BooleanElement(false);
    }
    set required(required) {
      this.set("required", required);
    }
    get deprecated() {
      if (this.hasKey("deprecated")) {
        return this.get("deprecated");
      }
      return new _apidomCore.BooleanElement(false);
    }
    set deprecated(deprecated) {
      this.set("deprecated", deprecated);
    }
    get allowEmptyValue() {
      return this.get("allowEmptyValue");
    }
    set allowEmptyValue(allowEmptyValue) {
      this.set("allowEmptyValue", allowEmptyValue);
    }
    get style() {
      return this.get("style");
    }
    set style(style) {
      this.set("style", style);
    }
    get explode() {
      return this.get("explode");
    }
    set explode(explode) {
      this.set("explode", explode);
    }
    get allowReserved() {
      return this.get("allowReserved");
    }
    set allowReserved(allowReserved) {
      this.set("allowReserved", allowReserved);
    }
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
    get example() {
      return this.get("example");
    }
    set example(example) {
      this.set("example", example);
    }
    get examples() {
      return this.get("examples");
    }
    set examples(examples) {
      this.set("examples", examples);
    }
    get contentProp() {
      return this.get("content");
    }
    set contentProp(content) {
      this.set("content", content);
    }
  }
  Object.defineProperty(Parameter.prototype, "description", {
    get() {
      return this.get("description");
    },
    set(description) {
      this.set("description", description);
    },
    enumerable: true
  });
  var _default = Parameter;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/PathItem.cjs
var require_PathItem = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class PathItem extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "pathItem";
    }
    get $ref() {
      return this.get("$ref");
    }
    set $ref($ref) {
      this.set("$ref", $ref);
    }
    get summary() {
      return this.get("summary");
    }
    set summary(summary) {
      this.set("summary", summary);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get GET() {
      return this.get("get");
    }
    set GET(operation) {
      this.set("GET", operation);
    }
    get PUT() {
      return this.get("put");
    }
    set PUT(operation) {
      this.set("PUT", operation);
    }
    get POST() {
      return this.get("post");
    }
    set POST(operation) {
      this.set("POST", operation);
    }
    get DELETE() {
      return this.get("delete");
    }
    set DELETE(operation) {
      this.set("DELETE", operation);
    }
    get OPTIONS() {
      return this.get("options");
    }
    set OPTIONS(operation) {
      this.set("OPTIONS", operation);
    }
    get HEAD() {
      return this.get("head");
    }
    set HEAD(operation) {
      this.set("HEAD", operation);
    }
    get PATCH() {
      return this.get("patch");
    }
    set PATCH(operation) {
      this.set("PATCH", operation);
    }
    get TRACE() {
      return this.get("trace");
    }
    set TRACE(operation) {
      this.set("TRACE", operation);
    }
    get servers() {
      return this.get("servers");
    }
    set servers(servers) {
      this.set("servers", servers);
    }
    get parameters() {
      return this.get("parameters");
    }
    set parameters(parameters) {
      this.set("parameters", parameters);
    }
  }
  var _default = PathItem;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Paths.cjs
var require_Paths = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Paths extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "paths";
    }
  }
  var _default = Paths;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Reference.cjs
var require_Reference2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Reference extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "reference";
      this.classes.push("openapi-reference");
    }
    get $ref() {
      return this.get("$ref");
    }
    set $ref($ref) {
      this.set("$ref", $ref);
    }
  }
  var _default = Reference;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/RequestBody.cjs
var require_RequestBody = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class RequestBody extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "requestBody";
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get contentProp() {
      return this.get("content");
    }
    set contentProp(content) {
      this.set("content", content);
    }
    get required() {
      if (this.hasKey("required")) {
        return this.get("required");
      }
      return new _apidomCore.BooleanElement(false);
    }
    set required(required) {
      this.set("required", required);
    }
  }
  var _default = RequestBody;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Response.cjs
var require_Response = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Response2 extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "response";
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get headers() {
      return this.get("headers");
    }
    set headers(headers) {
      this.set("headers", headers);
    }
    get contentProp() {
      return this.get("content");
    }
    set contentProp(contentProp) {
      this.set("content", contentProp);
    }
    get links() {
      return this.get("links");
    }
    set links(links) {
      this.set("links", links);
    }
  }
  var _default = Response2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Responses.cjs
var require_Responses = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Responses extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "responses";
    }
    get default() {
      return this.get("default");
    }
    set default(defaultValue) {
      this.set("default", defaultValue);
    }
  }
  var _default = Responses;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/media-types.cjs
var require_media_types4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = exports.JSONSchemaDraft4MediaTypes = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();

  class JSONSchemaDraft4MediaTypes extends _apidomCore.MediaTypes {
    filterByFormat(format = "generic") {
      const effectiveFormat = format === "generic" ? "schema;version" : format;
      return this.filter((mediaType) => mediaType.includes(effectiveFormat));
    }
    findBy(version = "draft-04", format = "generic") {
      const search = format === "generic" ? `schema;version=${version}` : `schema+${format};version=${version}`;
      const found = this.find((mediaType) => mediaType.includes(search));
      return found || this.unknownMediaType;
    }
    latest(format = "generic") {
      return (0, _ramda.last)(this.filterByFormat(format));
    }
  }
  exports.JSONSchemaDraft4MediaTypes = JSONSchemaDraft4MediaTypes;
  var mediaTypes = new JSONSchemaDraft4MediaTypes("application/schema;version=draft-04", "application/schema+json;version=draft-04", "application/schema+yaml;version=draft-04");
  var _default = mediaTypes;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/elements/JSONSchema.cjs
var require_JSONSchema = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class JSONSchema extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "JSONSchemaDraft4";
    }
    get idProp() {
      return this.get("id");
    }
    set idProp(idProp) {
      this.set("id", idProp);
    }
    get $schema() {
      return this.get("$schema");
    }
    set $schema($schema) {
      this.set("idProp", $schema);
    }
    get multipleOf() {
      return this.get("multipleOf");
    }
    set multipleOf(multipleOf) {
      this.set("multipleOf", multipleOf);
    }
    get maximum() {
      return this.get("maximum");
    }
    set maximum(maximum) {
      this.set("maximum", maximum);
    }
    get exclusiveMaximum() {
      return this.get("exclusiveMaximum");
    }
    set exclusiveMaximum(exclusiveMaximum) {
      this.set("exclusiveMaximum", exclusiveMaximum);
    }
    get minimum() {
      return this.get("minimum");
    }
    set minimum(minimum) {
      this.set("minimum", minimum);
    }
    get exclusiveMinimum() {
      return this.get("exclusiveMinimum");
    }
    set exclusiveMinimum(exclusiveMinimum) {
      this.set("exclusiveMinimum", exclusiveMinimum);
    }
    get maxLength() {
      return this.get("maxLength");
    }
    set maxLength(maxLength) {
      this.set("maxLength", maxLength);
    }
    get minLength() {
      return this.get("minLength");
    }
    set minLength(minLength) {
      this.set("minLength", minLength);
    }
    get pattern() {
      return this.get("pattern");
    }
    set pattern(pattern) {
      this.set("pattern", pattern);
    }
    get additionalItems() {
      return this.get("additionalItems");
    }
    set additionalItems(additionalItems) {
      this.set("additionalItems", additionalItems);
    }
    get items() {
      return this.get("items");
    }
    set items(items) {
      this.set("items", items);
    }
    get maxItems() {
      return this.get("maxItems");
    }
    set maxItems(maxItems) {
      this.set("maxItems", maxItems);
    }
    get minItems() {
      return this.get("minItems");
    }
    set minItems(minItems) {
      this.set("minItems", minItems);
    }
    get uniqueItems() {
      return this.get("uniqueItems");
    }
    set uniqueItems(uniqueItems) {
      this.set("uniqueItems", uniqueItems);
    }
    get maxProperties() {
      return this.get("maxProperties");
    }
    set maxProperties(maxProperties) {
      this.set("maxProperties", maxProperties);
    }
    get minProperties() {
      return this.get("minProperties");
    }
    set minProperties(minProperties) {
      this.set("minProperties", minProperties);
    }
    get required() {
      return this.get("required");
    }
    set required(required) {
      this.set("required", required);
    }
    get properties() {
      return this.get("properties");
    }
    set properties(properties) {
      this.set("properties", properties);
    }
    get additionalProperties() {
      return this.get("additionalProperties");
    }
    set additionalProperties(additionalProperties) {
      this.set("additionalProperties", additionalProperties);
    }
    get patternProperties() {
      return this.get("patternProperties");
    }
    set patternProperties(patternProperties) {
      this.set("patternProperties", patternProperties);
    }
    get dependencies() {
      return this.get("dependencies");
    }
    set dependencies(dependencies) {
      this.set("dependencies", dependencies);
    }
    get enum() {
      return this.get("enum");
    }
    set enum(enumValue) {
      this.set("enum", enumValue);
    }
    get type() {
      return this.get("type");
    }
    set type(type) {
      this.set("type", type);
    }
    get allOf() {
      return this.get("allOf");
    }
    set allOf(allOf) {
      this.set("allOf", allOf);
    }
    get anyOf() {
      return this.get("anyOf");
    }
    set anyOf(anyOf) {
      this.set("anyOf", anyOf);
    }
    get oneOf() {
      return this.get("oneOf");
    }
    set oneOf(oneOf) {
      this.set("oneOf", oneOf);
    }
    get not() {
      return this.get("not");
    }
    set not(not) {
      this.set("not", not);
    }
    get definitions() {
      return this.get("definitions");
    }
    set definitions(definitions) {
      this.set("definitions", definitions);
    }
    get title() {
      return this.get("title");
    }
    set title(title) {
      this.set("title", title);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get default() {
      return this.get("default");
    }
    set default(defaultValue) {
      this.set("default", defaultValue);
    }
    get format() {
      return this.get("format");
    }
    set format(format) {
      this.set("format", format);
    }
    get base() {
      return this.get("base");
    }
    set base(base) {
      this.set("base", base);
    }
    get links() {
      return this.get("links");
    }
    set links(links) {
      this.set("links", links);
    }
    get media() {
      return this.get("media");
    }
    set media(media) {
      this.set("media", media);
    }
    get readOnly() {
      return this.get("readOnly");
    }
    set readOnly(readOnly) {
      this.set("readOnly", readOnly);
    }
  }
  var _default = JSONSchema;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/elements/JSONReference.cjs
var require_JSONReference = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class JSONReference extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "JSONReference";
      this.classes.push("json-reference");
    }
    get $ref() {
      return this.get("$ref");
    }
    set $ref($ref) {
      this.set("$ref", $ref);
    }
  }
  var _default = JSONReference;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/elements/Media.cjs
var require_Media = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Media extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "media";
    }
    get binaryEncoding() {
      return this.get("binaryEncoding");
    }
    set binaryEncoding(binaryEncoding) {
      this.set("binaryEncoding", binaryEncoding);
    }
    get type() {
      return this.get("type");
    }
    set type(type) {
      this.set("type", type);
    }
  }
  var _default = Media;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/elements/LinkDescription.cjs
var require_LinkDescription = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class LinkDescription extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "linkDescription";
    }
    get href() {
      return this.get("href");
    }
    set href(href) {
      this.set("href", href);
    }
    get rel() {
      return this.get("rel");
    }
    set rel(rel) {
      this.set("rel", rel);
    }
    get title() {
      return this.get("title");
    }
    set title(title) {
      this.set("title", title);
    }
    get targetSchema() {
      return this.get("targetSchema");
    }
    set targetSchema(targetSchema) {
      this.set("targetSchema", targetSchema);
    }
    get mediaType() {
      return this.get("mediaType");
    }
    set mediaType(mediaType) {
      this.set("mediaType", mediaType);
    }
    get method() {
      return this.get("method");
    }
    set method(method) {
      this.set("method", method);
    }
    get encType() {
      return this.get("encType");
    }
    set encType(encType) {
      this.set("encType", encType);
    }
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
  }
  var _default = LinkDescription;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/namespace.cjs
var require_namespace2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _JSONSchema = _interopRequireDefault(require_JSONSchema());
  var _JSONReference = _interopRequireDefault(require_JSONReference());
  var _Media = _interopRequireDefault(require_Media());
  var _LinkDescription = _interopRequireDefault(require_LinkDescription());
  var jsonSchemaDraft4 = {
    namespace: (options) => {
      const {
        base
      } = options;
      base.register("jSONSchemaDraft4", _JSONSchema.default);
      base.register("jSONReference", _JSONReference.default);
      base.register("media", _Media.default);
      base.register("linkDescription", _LinkDescription.default);
      return base;
    }
  };
  var _default = jsonSchemaDraft4;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/traversal/visitor.cjs
var require_visitor4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.keyMap = exports.getNodeType = undefined;
  var _apidomCore = require_cjs4();
  var getNodeType = (element) => {
    if (!(0, _apidomCore.isElement)(element)) {
      return;
    }
    return `${element.element.charAt(0).toUpperCase() + element.element.slice(1)}Element`;
  };
  exports.getNodeType = getNodeType;
  var keyMap = {
    JSONSchemaDraft4Element: ["content"],
    JSONReferenceElement: ["content"],
    MediaElement: ["content"],
    LinkDescriptionElement: ["content"],
    ..._apidomCore.keyMap
  };
  exports.keyMap = keyMap;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/plugins/replace-empty-element.cjs
var require_replace_empty_element = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _JSONSchema = _interopRequireDefault(require_JSONSchema());
  var _LinkDescription = _interopRequireDefault(require_LinkDescription());
  var _Media = _interopRequireDefault(require_Media());
  var _visitor = require_visitor4();
  var isEmptyElement = (element) => (0, _apidomCore.isStringElement)(element) && (0, _apidomCore.includesClasses)(["yaml-e-node", "yaml-e-scalar"], element);
  var schema = {
    JSONSchemaDraft4Element: {
      additionalItems(...args) {
        return new _JSONSchema.default(...args);
      },
      items(...args) {
        return new _JSONSchema.default(...args);
      },
      required(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-required");
        return element;
      },
      properties(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-properties");
        return element;
      },
      additionalProperties(...args) {
        return new _JSONSchema.default(...args);
      },
      patternProperties(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-patternProperties");
        return element;
      },
      dependencies(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-dependencies");
        return element;
      },
      enum(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-enum");
        return element;
      },
      allOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-allOf");
        return element;
      },
      anyOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-anyOf");
        return element;
      },
      oneOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-oneOf");
        return element;
      },
      not(...args) {
        return new _JSONSchema.default(...args);
      },
      definitions(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-definitions");
        return element;
      },
      links(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-links");
        return element;
      },
      media(...args) {
        return new _Media.default(...args);
      }
    },
    LinkDescriptionElement: {
      targetSchema(...args) {
        return new _JSONSchema.default(...args);
      },
      schema(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-properties": {
      "[key: *]": function key(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-patternProperties": {
      "[key: *]": function key(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-dependencies": {
      "[key: *]": function key(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-allOf": {
      "<*>": function asterisk(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-anyOf": {
      "<*>": function asterisk(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-oneOf": {
      "<*>": function asterisk(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-definitions": {
      "[key: *]": function key(...args) {
        return new _JSONSchema.default(...args);
      }
    },
    "json-schema-links": {
      "<*>": function asterisk(...args) {
        return new _LinkDescription.default(...args);
      }
    }
  };
  var findElementFactory = (ancestor, keyName) => {
    var _ancestor$classes$fir;
    const elementType = (0, _visitor.getNodeType)(ancestor);
    const keyMapping = schema[elementType] || schema[(_ancestor$classes$fir = ancestor.classes.first) == null || _ancestor$classes$fir.toValue == null ? undefined : _ancestor$classes$fir.toValue()];
    return typeof keyMapping === "undefined" ? undefined : Object.prototype.hasOwnProperty.call(keyMapping, "[key: *]") ? keyMapping["[key: *]"] : keyMapping[keyName];
  };
  var plugin = () => () => {
    return {
      visitor: {
        MemberElement(element, ...rest) {
          if (!isEmptyElement(element.value))
            return;
          const [, , , ancestors] = rest;
          const ancestor = ancestors[ancestors.length - 1];
          const elementFactory = findElementFactory(ancestor, element.key.toValue());
          if (typeof elementFactory === "undefined")
            return;
          const originalValue = element.value;
          return new _apidomCore.MemberElement(element.key, elementFactory.call({
            context: ancestor
          }, undefined, originalValue.meta.clone(), originalValue.attributes.clone()), element.meta.clone(), element.attributes.clone());
        },
        StringElement(element, ...rest) {
          if (!isEmptyElement(element))
            return;
          const [, , , ancestors] = rest;
          const ancestor = ancestors[ancestors.length - 1];
          if (!(0, _apidomCore.isArrayElement)(ancestor))
            return;
          const elementFactory = findElementFactory(ancestor, "<*>");
          if (typeof elementFactory === "undefined")
            return;
          return elementFactory.call({
            context: element
          }, undefined, element.meta.clone(), element.attributes.clone());
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/Visitor.cjs
var require_Visitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var Visitor = (0, _stampit.default)({
    props: {
      element: null
    },
    methods: {
      copyMetaAndAttributes(from, to) {
        if ((0, _apidomCore.hasElementSourceMap)(from)) {
          to.meta.set("sourceMap", from.meta.get("sourceMap"));
        }
      }
    }
  });
  var _default = Visitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/FallbackVisitor.cjs
var require_FallbackVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _Visitor = _interopRequireDefault(require_Visitor());
  var FallbackVisitor = (0, _stampit.default)(_Visitor.default, {
    methods: {
      enter(element) {
        this.element = element.clone();
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = FallbackVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/SpecificationVisitor.cjs
var require_SpecificationVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _Visitor = _interopRequireDefault(require_Visitor());
  var _visitor = require_visitor4();
  var SpecificationVisitor = (0, _stampit.default)(_Visitor.default, {
    props: {
      specObj: null,
      passingOptionsNames: ["specObj"]
    },
    init({
      specObj = this.specObj
    }) {
      this.specObj = specObj;
    },
    methods: {
      retrievePassingOptions() {
        return (0, _ramda.pick)(this.passingOptionsNames, this);
      },
      retrieveFixedFields(specPath) {
        return (0, _ramda.pipe)((0, _ramda.path)(["visitors", ...specPath, "fixedFields"]), _ramda.keys)(this.specObj);
      },
      retrieveVisitor(specPath) {
        if ((0, _ramda.pathSatisfies)(_ramdaAdjunct.isFunction, ["visitors", ...specPath], this.specObj)) {
          return (0, _ramda.path)(["visitors", ...specPath], this.specObj);
        }
        return (0, _ramda.path)(["visitors", ...specPath, "$visitor"], this.specObj);
      },
      retrieveVisitorInstance(specPath, options = {}) {
        const passingOpts = this.retrievePassingOptions();
        return this.retrieveVisitor(specPath)({
          ...passingOpts,
          ...options
        });
      },
      toRefractedElement(specPath, element, options = {}) {
        const visitor2 = this.retrieveVisitorInstance(specPath, options);
        const visitorPrototype = Object.getPrototypeOf(visitor2);
        if ((0, _ramdaAdjunct.isUndefined)(this.fallbackVisitorPrototype)) {
          this.fallbackVisitorPrototype = Object.getPrototypeOf(this.retrieveVisitorInstance(["value"]));
        }
        if (this.fallbackVisitorPrototype === visitorPrototype) {
          return element.clone();
        }
        (0, _apidomCore.visit)(element, visitor2, {
          keyMap: _visitor.keyMap,
          nodeTypeGetter: _visitor.getNodeType,
          ...options
        });
        return visitor2.element;
      }
    }
  });
  var _default = SpecificationVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/generics/FixedFieldsVisitor.cjs
var require_FixedFieldsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var FixedFieldsVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    props: {
      specPath: _ramdaAdjunct.noop,
      ignoredFields: []
    },
    init({
      specPath = this.specPath,
      ignoredFields = this.ignoredFields
    } = {}) {
      this.specPath = specPath;
      this.ignoredFields = ignoredFields;
    },
    methods: {
      ObjectElement(objectElement) {
        const specPath = this.specPath(objectElement);
        const fields = this.retrieveFixedFields(specPath);
        objectElement.forEach((value, key, memberElement) => {
          if ((0, _apidomCore.isStringElement)(key) && fields.includes(key.toValue()) && !this.ignoredFields.includes(key.toValue())) {
            const fixedFieldElement = this.toRefractedElement([...specPath, "fixedFields", key.toValue()], value);
            const newMemberElement = new _apidomCore.MemberElement(key.clone(), fixedFieldElement);
            this.copyMetaAndAttributes(memberElement, newMemberElement);
            newMemberElement.classes.push("fixed-field");
            this.element.content.push(newMemberElement);
          } else if (!this.ignoredFields.includes(key.toValue())) {
            this.element.content.push(memberElement.clone());
          }
        });
        this.copyMetaAndAttributes(objectElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = FixedFieldsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/index.cjs
var require_json_schema = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _JSONSchema = _interopRequireDefault(require_JSONSchema());
  var JSONSchemaVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "JSONSchema"])
    },
    init() {
      this.element = new _JSONSchema.default;
    }
  });
  var _default = JSONSchemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/IdVisitor.cjs
var require_IdVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var IdVisitor = _FallbackVisitor.default;
  var _default = IdVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/$schemaVisitor.cjs
var require_$schemaVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var $schemaVisitor = _FallbackVisitor.default;
  var _default = $schemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MultipleOfVisitor.cjs
var require_MultipleOfVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MultipleOfVisitor = _FallbackVisitor.default;
  var _default = MultipleOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MaximumVisitor.cjs
var require_MaximumVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MaximumVisitor = _FallbackVisitor.default;
  var _default = MaximumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/ExclusiveMaximumVisitor.cjs
var require_ExclusiveMaximumVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var ExclusiveMaximumVisitor = _FallbackVisitor.default;
  var _default = ExclusiveMaximumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MinimumVisitor.cjs
var require_MinimumVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MinimumVisitor = _FallbackVisitor.default;
  var _default = MinimumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/ExclusiveMinimumVisitor.cjs
var require_ExclusiveMinimumVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var ExclusiveMinimumVisitor = _FallbackVisitor.default;
  var _default = ExclusiveMinimumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MaxLengthVisitor.cjs
var require_MaxLengthVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MaxLengthVisitor = _FallbackVisitor.default;
  var _default = MaxLengthVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MinLengthVisitor.cjs
var require_MinLengthVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MinLengthVisitor = _FallbackVisitor.default;
  var _default = MinLengthVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/PatternVisitor.cjs
var require_PatternVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var PatternVisitor = _FallbackVisitor.default;
  var _default = PatternVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/ParentSchemaAwareVisitor.cjs
var require_ParentSchemaAwareVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var ParentSchemaAwareVisitor = (0, _stampit.default)({
    props: {
      parent: null
    },
    init({
      parent = this.parent
    }) {
      this.parent = parent;
      this.passingOptionsNames = [...this.passingOptionsNames, "parent"];
    }
  });
  var _default = ParentSchemaAwareVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/predicates.cjs
var require_predicates5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isJSONReferenceLikeElement = undefined;
  var _apidomCore = require_cjs4();
  var isJSONReferenceLikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("$ref");
  };
  exports.isJSONReferenceLikeElement = isJSONReferenceLikeElement;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/ItemsVisitor.cjs
var require_ItemsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var ItemsVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    methods: {
      ObjectElement(objectElement) {
        const specPath = (0, _predicates.isJSONReferenceLikeElement)(objectElement) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"];
        this.element = this.toRefractedElement(specPath, objectElement);
        return _apidomCore.BREAK;
      },
      ArrayElement(arrayElement) {
        this.element = new _apidomCore.ArrayElement;
        this.element.classes.push("json-schema-items");
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isJSONReferenceLikeElement)(item) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MaxItemsVisitor.cjs
var require_MaxItemsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MaxItemsVisitor = _FallbackVisitor.default;
  var _default = MaxItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MinItemsVisitor.cjs
var require_MinItemsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MinItemsVisitor = _FallbackVisitor.default;
  var _default = MinItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/UniqueItemsVisitor.cjs
var require_UniqueItemsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var UniqueItemsVisitor = _FallbackVisitor.default;
  var _default = UniqueItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MaxPropertiesVisitor.cjs
var require_MaxPropertiesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MaxPropertiesVisitor = _FallbackVisitor.default;
  var _default = MaxPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/MinPropertiesVisitor.cjs
var require_MinPropertiesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MinPropertiesVisitor = _FallbackVisitor.default;
  var _default = MinPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/RequiredVisitor.cjs
var require_RequiredVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var RequiredVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-required");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = RequiredVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/generics/PatternedFieldsVisitor.cjs
var require_PatternedFieldsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var PatternedFieldsJsonObjectVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    props: {
      fieldPatternPredicate: _ramda.F,
      specPath: _ramdaAdjunct.noop,
      ignoredFields: []
    },
    init({
      specPath = this.specPath,
      ignoredFields = this.ignoredFields
    } = {}) {
      this.specPath = specPath;
      this.ignoredFields = ignoredFields;
    },
    methods: {
      ObjectElement(objectElement) {
        objectElement.forEach((value, key, memberElement) => {
          if (!this.ignoredFields.includes(key.toValue()) && this.fieldPatternPredicate(key.toValue())) {
            const specPath = this.specPath(value);
            const patternedFieldElement = this.toRefractedElement(specPath, value);
            const newMemberElement = new _apidomCore.MemberElement(key.clone(), patternedFieldElement);
            this.copyMetaAndAttributes(memberElement, newMemberElement);
            newMemberElement.classes.push("patterned-field");
            this.element.content.push(newMemberElement);
          } else if (!this.ignoredFields.includes(key.toValue())) {
            this.element.content.push(memberElement.clone());
          }
        });
        this.copyMetaAndAttributes(objectElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = PatternedFieldsJsonObjectVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/generics/MapVisitor.cjs
var require_MapVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramdaAdjunct = require_lib6();
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor());
  var MapVisitor = (0, _stampit.default)(_PatternedFieldsVisitor.default, {
    props: {
      fieldPatternPredicate: _ramdaAdjunct.isNonEmptyString
    }
  });
  var _default = MapVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/PropertiesVisitor.cjs
var require_PropertiesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var PropertiesVisitor = (0, _stampit.default)(_MapVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isJSONReferenceLikeElement)(element) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"]
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-properties");
    }
  });
  var _default = PropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/PatternPropertiesVisitor.cjs
var require_PatternPropertiesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var PatternPropertiesVisitor = (0, _stampit.default)(_MapVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isJSONReferenceLikeElement)(element) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"]
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-patternProperties");
    }
  });
  var _default = PatternPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/DependenciesVisitor.cjs
var require_DependenciesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var DependenciesVisitor = (0, _stampit.default)(_MapVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isJSONReferenceLikeElement)(element) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"]
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-dependencies");
    }
  });
  var _default = DependenciesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/EnumVisitor.cjs
var require_EnumVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomAst = require_cjs3();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var EnumVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-enum");
        return _apidomAst.BREAK;
      }
    }
  });
  var _default = EnumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/TypeVisitor.cjs
var require_TypeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var TypeVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("json-schema-type");
        return _apidomCore.BREAK;
      },
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-type");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = TypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/AllOfVisitor.cjs
var require_AllOfVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var AllOfVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-allOf");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isJSONReferenceLikeElement)(item) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = AllOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/AnyOfVisitor.cjs
var require_AnyOfVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var AnyOfVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-anyOf");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isJSONReferenceLikeElement)(item) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = AnyOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/OneOfVisitor.cjs
var require_OneOfVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var OneOfVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-oneOf");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isJSONReferenceLikeElement)(item) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = OneOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/DefinitionsVisitor.cjs
var require_DefinitionsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var _predicates = require_predicates5();
  var DefinitionsVisitor = (0, _stampit.default)(_MapVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isJSONReferenceLikeElement)(element) ? ["document", "objects", "JSONReference"] : ["document", "objects", "JSONSchema"]
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-definitions");
    }
  });
  var _default = DefinitionsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/TitleVisitor.cjs
var require_TitleVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var TitleVisitor = _FallbackVisitor.default;
  var _default = TitleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/DescriptionVisitor.cjs
var require_DescriptionVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/DefaultVisitor.cjs
var require_DefaultVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var DefaultVisitor = _FallbackVisitor.default;
  var _default = DefaultVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/FormatVisitor.cjs
var require_FormatVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var FormatVisitor = _FallbackVisitor.default;
  var _default = FormatVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/BaseVisitor.cjs
var require_BaseVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var BaseVisitor = _FallbackVisitor.default;
  var _default = BaseVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/LinksVisitor.cjs
var require_LinksVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  var LinksVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _ParentSchemaAwareVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-links");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const linkDescriptionElement = this.toRefractedElement(["document", "objects", "LinkDescription"], item);
          this.element.push(linkDescriptionElement);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = LinksVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/ReadOnlyVisitor.cjs
var require_ReadOnlyVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var ReadOnlyVisitor = _FallbackVisitor.default;
  var _default = ReadOnlyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/json-reference/index.cjs
var require_json_reference = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _JSONReference = _interopRequireDefault(require_JSONReference());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var JSONReferenceVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "JSONReference"])
    },
    init() {
      this.element = new _JSONReference.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isStringElement)(this.element.$ref)) {
          this.element.classes.push("reference-element");
        }
        return result;
      }
    }
  });
  var _default = JSONReferenceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/json-reference/$RefVisitor.cjs
var require_$RefVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var $RefVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = $RefVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/generics/AlternatingVisitor.cjs
var require_AlternatingVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  var AlternatingVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    props: {
      alternator: []
    },
    methods: {
      enter(element) {
        const functions = this.alternator.map(({
          predicate,
          specPath: specPath2
        }) => (0, _ramda.ifElse)(predicate, (0, _ramda.always)(specPath2), _ramdaAdjunct.stubUndefined));
        const specPath = (0, _ramdaAdjunct.dispatch)(functions)(element);
        this.element = this.toRefractedElement(specPath, element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = AlternatingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/JSONSchemaOrJSONReferenceVisitor.cjs
var require_JSONSchemaOrJSONReferenceVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _predicates = require_predicates5();
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor());
  var SchemaOrReferenceVisitor = (0, _stampit.default)(_AlternatingVisitor.default, {
    props: {
      alternator: [{
        predicate: _predicates.isJSONReferenceLikeElement,
        specPath: ["document", "objects", "JSONReference"]
      }, {
        predicate: _ramda.T,
        specPath: ["document", "objects", "JSONSchema"]
      }]
    }
  });
  var _default = SchemaOrReferenceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/media/index.cjs
var require_media = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Media = _interopRequireDefault(require_Media());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MediaVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Media"])
    },
    init() {
      this.element = new _Media.default;
    }
  });
  var _default = MediaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/media/BinaryEncodingVisitor.cjs
var require_BinaryEncodingVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var BinaryEncodingVisitor = _FallbackVisitor.default;
  var _default = BinaryEncodingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/media/TypeVisitor.cjs
var require_TypeVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var TypeVisitor = _FallbackVisitor.default;
  var _default = TypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/index.cjs
var require_link_description = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _LinkDescription = _interopRequireDefault(require_LinkDescription());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var LinkDescriptionVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "LinkDescription"])
    },
    init() {
      this.element = new _LinkDescription.default;
    }
  });
  var _default = LinkDescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/HrefVisitor.cjs
var require_HrefVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var HrefVisitor = _FallbackVisitor.default;
  var _default = HrefVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/RelVisitor.cjs
var require_RelVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var RelVisitor = _FallbackVisitor.default;
  var _default = RelVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/TitleVisitor.cjs
var require_TitleVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var TitleVisitor = _FallbackVisitor.default;
  var _default = TitleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/MediaTypeVisitor.cjs
var require_MediaTypeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MediaTypeVisitor = _FallbackVisitor.default;
  var _default = MediaTypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/MethodVisitor.cjs
var require_MethodVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var MethodVisitor = _FallbackVisitor.default;
  var _default = MethodVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/visitors/json-schema/link-description/EncTypeVisitor.cjs
var require_EncTypeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var EncTypeVisitor = _FallbackVisitor.default;
  var _default = EncTypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/specification.cjs
var require_specification = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  var _index = _interopRequireDefault(require_json_schema());
  var _IdVisitor = _interopRequireDefault(require_IdVisitor());
  var _$schemaVisitor = _interopRequireDefault(require_$schemaVisitor());
  var _MultipleOfVisitor = _interopRequireDefault(require_MultipleOfVisitor());
  var _MaximumVisitor = _interopRequireDefault(require_MaximumVisitor());
  var _ExclusiveMaximumVisitor = _interopRequireDefault(require_ExclusiveMaximumVisitor());
  var _MinimumVisitor = _interopRequireDefault(require_MinimumVisitor());
  var _ExclusiveMinimumVisitor = _interopRequireDefault(require_ExclusiveMinimumVisitor());
  var _MaxLengthVisitor = _interopRequireDefault(require_MaxLengthVisitor());
  var _MinLengthVisitor = _interopRequireDefault(require_MinLengthVisitor());
  var _PatternVisitor = _interopRequireDefault(require_PatternVisitor());
  var _ItemsVisitor = _interopRequireDefault(require_ItemsVisitor());
  var _MaxItemsVisitor = _interopRequireDefault(require_MaxItemsVisitor());
  var _MinItemsVisitor = _interopRequireDefault(require_MinItemsVisitor());
  var _UniqueItemsVisitor = _interopRequireDefault(require_UniqueItemsVisitor());
  var _MaxPropertiesVisitor = _interopRequireDefault(require_MaxPropertiesVisitor());
  var _MinPropertiesVisitor = _interopRequireDefault(require_MinPropertiesVisitor());
  var _RequiredVisitor = _interopRequireDefault(require_RequiredVisitor());
  var _PropertiesVisitor = _interopRequireDefault(require_PropertiesVisitor());
  var _PatternPropertiesVisitor = _interopRequireDefault(require_PatternPropertiesVisitor());
  var _DependenciesVisitor = _interopRequireDefault(require_DependenciesVisitor());
  var _EnumVisitor = _interopRequireDefault(require_EnumVisitor());
  var _TypeVisitor = _interopRequireDefault(require_TypeVisitor());
  var _AllOfVisitor = _interopRequireDefault(require_AllOfVisitor());
  var _AnyOfVisitor = _interopRequireDefault(require_AnyOfVisitor());
  var _OneOfVisitor = _interopRequireDefault(require_OneOfVisitor());
  var _DefinitionsVisitor = _interopRequireDefault(require_DefinitionsVisitor());
  var _TitleVisitor = _interopRequireDefault(require_TitleVisitor());
  var _DescriptionVisitor = _interopRequireDefault(require_DescriptionVisitor());
  var _DefaultVisitor = _interopRequireDefault(require_DefaultVisitor());
  var _FormatVisitor = _interopRequireDefault(require_FormatVisitor());
  var _BaseVisitor = _interopRequireDefault(require_BaseVisitor());
  var _LinksVisitor = _interopRequireDefault(require_LinksVisitor());
  var _ReadOnlyVisitor = _interopRequireDefault(require_ReadOnlyVisitor());
  var _index2 = _interopRequireDefault(require_json_reference());
  var _$RefVisitor = _interopRequireDefault(require_$RefVisitor());
  var _JSONSchemaOrJSONReferenceVisitor = _interopRequireDefault(require_JSONSchemaOrJSONReferenceVisitor());
  var _index3 = _interopRequireDefault(require_media());
  var _BinaryEncodingVisitor = _interopRequireDefault(require_BinaryEncodingVisitor());
  var _TypeVisitor2 = _interopRequireDefault(require_TypeVisitor2());
  var _index4 = _interopRequireDefault(require_link_description());
  var _HrefVisitor = _interopRequireDefault(require_HrefVisitor());
  var _RelVisitor = _interopRequireDefault(require_RelVisitor());
  var _TitleVisitor2 = _interopRequireDefault(require_TitleVisitor2());
  var _MediaTypeVisitor = _interopRequireDefault(require_MediaTypeVisitor());
  var _MethodVisitor = _interopRequireDefault(require_MethodVisitor());
  var _EncTypeVisitor = _interopRequireDefault(require_EncTypeVisitor());
  var specification = {
    visitors: {
      value: _FallbackVisitor.default,
      JSONSchemaOrJSONReferenceVisitor: _JSONSchemaOrJSONReferenceVisitor.default,
      document: {
        objects: {
          JSONSchema: {
            $visitor: _index.default,
            fixedFields: {
              id: _IdVisitor.default,
              $schema: _$schemaVisitor.default,
              multipleOf: _MultipleOfVisitor.default,
              maximum: _MaximumVisitor.default,
              exclusiveMaximum: _ExclusiveMaximumVisitor.default,
              minimum: _MinimumVisitor.default,
              exclusiveMinimum: _ExclusiveMinimumVisitor.default,
              maxLength: _MaxLengthVisitor.default,
              minLength: _MinLengthVisitor.default,
              pattern: _PatternVisitor.default,
              additionalItems: _JSONSchemaOrJSONReferenceVisitor.default,
              items: _ItemsVisitor.default,
              maxItems: _MaxItemsVisitor.default,
              minItems: _MinItemsVisitor.default,
              uniqueItems: _UniqueItemsVisitor.default,
              maxProperties: _MaxPropertiesVisitor.default,
              minProperties: _MinPropertiesVisitor.default,
              required: _RequiredVisitor.default,
              properties: _PropertiesVisitor.default,
              additionalProperties: _JSONSchemaOrJSONReferenceVisitor.default,
              patternProperties: _PatternPropertiesVisitor.default,
              dependencies: _DependenciesVisitor.default,
              enum: _EnumVisitor.default,
              type: _TypeVisitor.default,
              allOf: _AllOfVisitor.default,
              anyOf: _AnyOfVisitor.default,
              oneOf: _OneOfVisitor.default,
              not: _JSONSchemaOrJSONReferenceVisitor.default,
              definitions: _DefinitionsVisitor.default,
              title: _TitleVisitor.default,
              description: _DescriptionVisitor.default,
              default: _DefaultVisitor.default,
              format: _FormatVisitor.default,
              base: _BaseVisitor.default,
              links: _LinksVisitor.default,
              media: {
                $ref: "#/visitors/document/objects/Media"
              },
              readOnly: _ReadOnlyVisitor.default
            }
          },
          JSONReference: {
            $visitor: _index2.default,
            fixedFields: {
              $ref: _$RefVisitor.default
            }
          },
          Media: {
            $visitor: _index3.default,
            fixedFields: {
              binaryEncoding: _BinaryEncodingVisitor.default,
              type: _TypeVisitor2.default
            }
          },
          LinkDescription: {
            $visitor: _index4.default,
            fixedFields: {
              href: _HrefVisitor.default,
              rel: _RelVisitor.default,
              title: _TitleVisitor2.default,
              targetSchema: _JSONSchemaOrJSONReferenceVisitor.default,
              mediaType: _MediaTypeVisitor.default,
              method: _MethodVisitor.default,
              encType: _EncTypeVisitor.default,
              schema: _JSONSchemaOrJSONReferenceVisitor.default
            }
          }
        }
      }
    }
  };
  var _default = specification;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/predicates.cjs
var require_predicates6 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.isMediaElement = exports.isLinkDescriptionElement = exports.isJSONSchemaElement = exports.isJSONReferenceElement = undefined;
  var _apidomCore = require_cjs4();
  var _JSONSchema = _interopRequireDefault(require_JSONSchema());
  var _JSONReference = _interopRequireDefault(require_JSONReference());
  var _Media = _interopRequireDefault(require_Media());
  var _LinkDescription = _interopRequireDefault(require_LinkDescription());
  var isJSONSchemaElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _JSONSchema.default || hasBasicElementProps(element) && isElementType("JSONSchemaDraft4", element) && primitiveEq("object", element);
  });
  exports.isJSONSchemaElement = isJSONSchemaElement;
  var isJSONReferenceElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _JSONReference.default || hasBasicElementProps(element) && isElementType("JSONReference", element) && primitiveEq("object", element);
  });
  exports.isJSONReferenceElement = isJSONReferenceElement;
  var isMediaElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Media.default || hasBasicElementProps(element) && isElementType("media", element) && primitiveEq("object", element);
  });
  exports.isMediaElement = isMediaElement;
  var isLinkDescriptionElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _LinkDescription.default || hasBasicElementProps(element) && isElementType("linkDescription", element) && primitiveEq("object", element);
  });
  exports.isLinkDescriptionElement = isLinkDescriptionElement;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/toolbox.cjs
var require_toolbox2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var jsonSchemaDraft4Predicates = _interopRequireWildcard(require_predicates6());
  var _namespace = _interopRequireDefault(require_namespace2());
  var createToolbox = () => {
    const namespace = (0, _apidomCore.createNamespace)(_namespace.default);
    const predicates = {
      ...jsonSchemaDraft4Predicates,
      isStringElement: _apidomCore.isStringElement
    };
    return {
      predicates,
      namespace
    };
  };
  var _default = createToolbox;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/index.cjs
var require_refractor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.createRefractor = undefined;
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _specification = _interopRequireDefault(require_specification());
  var _visitor = require_visitor4();
  var _toolbox = _interopRequireDefault(require_toolbox2());
  var refract = (value, {
    specPath = ["visitors", "document", "objects", "JSONSchema", "$visitor"],
    plugins = [],
    specificationObj = _specification.default
  } = {}) => {
    const element = (0, _apidomCore.refract)(value);
    const resolvedSpec = (0, _apidomCore.dereference)(specificationObj);
    const rootVisitor = (0, _ramdaAdjunct.invokeArgs)(specPath, [], resolvedSpec);
    (0, _apidomCore.visit)(element, rootVisitor, {
      state: {
        specObj: resolvedSpec
      }
    });
    return (0, _apidomCore.dispatchRefractorPlugins)(rootVisitor.element, plugins, {
      toolboxCreator: _toolbox.default,
      visitorOptions: {
        keyMap: _visitor.keyMap,
        nodeTypeGetter: _visitor.getNodeType
      }
    });
  };
  var createRefractor = (specPath) => (value, options = {}) => refract(value, {
    specPath,
    ...options
  });
  exports.createRefractor = createRefractor;
  var _default = refract;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/refractor/registration.cjs
var require_registration2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  var _JSONSchema = _interopRequireDefault(require_JSONSchema());
  exports.JSONSchemaElement = _JSONSchema.default;
  var _JSONReference = _interopRequireDefault(require_JSONReference());
  exports.JSONReferenceElement = _JSONReference.default;
  var _Media = _interopRequireDefault(require_Media());
  exports.MediaElement = _Media.default;
  var _LinkDescription = _interopRequireDefault(require_LinkDescription());
  exports.LinkDescriptionElement = _LinkDescription.default;
  var _index = require_refractor2();
  _JSONSchema.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "JSONSchema", "$visitor"]);
  _JSONReference.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "JSONReference", "$visitor"]);
  _Media.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Media", "$visitor"]);
  _LinkDescription.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "LinkDescription", "$visitor"]);
});

// node_modules/@swagger-api/apidom-ns-json-schema-draft-4/cjs/index.cjs
var require_cjs7 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.specificationObj = exports.refractorPluginReplaceEmptyElement = exports.refract = exports.mediaTypes = exports.keyMap = exports.isStringElement = exports.isRefElement = exports.isObjectElement = exports.isNumberElement = exports.isNullElement = exports.isMemberElement = exports.isMediaElement = exports.isLinkElement = exports.isLinkDescriptionElement = exports.isJSONSchemaElement = exports.isJSONReferenceLikeElement = exports.isJSONReferenceElement = exports.isElement = exports.isBooleanElement = exports.isArrayElement = exports.getNodeType = exports.default = exports.createRefractor = exports.SpecificationVisitor = exports.PatternedFieldsVisitor = exports.ParentSchemaAwareVisitor = exports.MediaElement = exports.MapVisitor = exports.LinkDescriptionElement = exports.JSONSchemaElement = exports.JSONSchemaDraft4MediaTypes = exports.JSONReferenceElement = exports.FixedFieldsVisitor = exports.FallbackVisitor = exports.AlternatingVisitor = undefined;
  var _apidomCore = require_cjs4();
  exports.isRefElement = _apidomCore.isRefElement;
  exports.isLinkElement = _apidomCore.isLinkElement;
  exports.isMemberElement = _apidomCore.isMemberElement;
  exports.isObjectElement = _apidomCore.isObjectElement;
  exports.isArrayElement = _apidomCore.isArrayElement;
  exports.isBooleanElement = _apidomCore.isBooleanElement;
  exports.isNullElement = _apidomCore.isNullElement;
  exports.isElement = _apidomCore.isElement;
  exports.isNumberElement = _apidomCore.isNumberElement;
  exports.isStringElement = _apidomCore.isStringElement;
  var _mediaTypes = _interopRequireWildcard(require_media_types4());
  exports.mediaTypes = _mediaTypes.default;
  exports.JSONSchemaDraft4MediaTypes = _mediaTypes.JSONSchemaDraft4MediaTypes;
  var _namespace = _interopRequireDefault(require_namespace2());
  exports.default = _namespace.default;
  var _replaceEmptyElement = _interopRequireDefault(require_replace_empty_element());
  exports.refractorPluginReplaceEmptyElement = _replaceEmptyElement.default;
  var _index = _interopRequireWildcard(require_refractor2());
  exports.refract = _index.default;
  exports.createRefractor = _index.createRefractor;
  var _specification = _interopRequireDefault(require_specification());
  exports.specificationObj = _specification.default;
  var _predicates = require_predicates6();
  exports.isJSONReferenceElement = _predicates.isJSONReferenceElement;
  exports.isJSONSchemaElement = _predicates.isJSONSchemaElement;
  exports.isLinkDescriptionElement = _predicates.isLinkDescriptionElement;
  exports.isMediaElement = _predicates.isMediaElement;
  var _predicates2 = require_predicates5();
  exports.isJSONReferenceLikeElement = _predicates2.isJSONReferenceLikeElement;
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor());
  exports.SpecificationVisitor = _SpecificationVisitor.default;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor());
  exports.FallbackVisitor = _FallbackVisitor.default;
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor());
  exports.FixedFieldsVisitor = _FixedFieldsVisitor.default;
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor());
  exports.PatternedFieldsVisitor = _PatternedFieldsVisitor.default;
  var _MapVisitor = _interopRequireDefault(require_MapVisitor());
  exports.MapVisitor = _MapVisitor.default;
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor());
  exports.AlternatingVisitor = _AlternatingVisitor.default;
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor());
  exports.ParentSchemaAwareVisitor = _ParentSchemaAwareVisitor.default;
  var _visitor = require_visitor4();
  exports.keyMap = _visitor.keyMap;
  exports.getNodeType = _visitor.getNodeType;
  var _registration = require_registration2();
  exports.JSONSchemaElement = _registration.JSONSchemaElement;
  exports.JSONReferenceElement = _registration.JSONReferenceElement;
  exports.MediaElement = _registration.MediaElement;
  exports.LinkDescriptionElement = _registration.LinkDescriptionElement;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Schema.cjs
var require_Schema2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsJsonSchemaDraft = require_cjs7();

  class Schema extends _apidomNsJsonSchemaDraft.JSONSchemaElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "schema";
      this.classes.push("json-schema-draft-4");
    }
    get additionalItems() {
      return this.get("additionalItems");
    }
    set additionalItems(additionalItems) {
      this.set("additionalItems", additionalItems);
    }
    get items() {
      return this.get("items");
    }
    set items(items) {
      this.set("items", items);
    }
    get additionalProperties() {
      return this.get("additionalProperties");
    }
    set additionalProperties(additionalProperties) {
      this.set("additionalProperties", additionalProperties);
    }
    get type() {
      return this.get("type");
    }
    set type(type) {
      this.set("type", type);
    }
    get not() {
      return this.get("not");
    }
    set not(not) {
      this.set("not", not);
    }
    get nullable() {
      return this.get("nullable");
    }
    set nullable(nullable) {
      this.set("nullable", nullable);
    }
    get discriminator() {
      return this.get("discriminator");
    }
    set discriminator(discriminator) {
      this.set("discriminator", discriminator);
    }
    get writeOnly() {
      return this.get("writeOnly");
    }
    set writeOnly(writeOnly) {
      this.set("writeOnly", writeOnly);
    }
    get xml() {
      return this.get("xml");
    }
    set xml(xml) {
      this.set("xml", xml);
    }
    get externalDocs() {
      return this.get("externalDocs");
    }
    set externalDocs(externalDocs) {
      this.set("externalDocs", externalDocs);
    }
    get example() {
      return this.get("example");
    }
    set example(example) {
      this.set("example", example);
    }
    get deprecated() {
      return this.get("deprecated");
    }
    set deprecated(deprecated) {
      this.set("deprecated", deprecated);
    }
  }
  var _default = Schema;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/SecurityRequirement.cjs
var require_SecurityRequirement = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class SecurityRequirement extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "securityRequirement";
    }
  }
  var _default = SecurityRequirement;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/SecurityScheme.cjs
var require_SecurityScheme = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class SecurityScheme extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "securityScheme";
    }
    get type() {
      return this.get("type");
    }
    set type(type) {
      this.set("type", type);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get name() {
      return this.get("name");
    }
    set name(name) {
      this.set("name", name);
    }
    get in() {
      return this.get("in");
    }
    set in(inVal) {
      this.set("in", inVal);
    }
    get scheme() {
      return this.get("scheme");
    }
    set scheme(scheme) {
      this.set("scheme", scheme);
    }
    get bearerFormat() {
      return this.get("bearerFormat");
    }
    set bearerFormat(bearerFormat) {
      this.set("bearerFormat", bearerFormat);
    }
    get flows() {
      return this.get("flows");
    }
    set flows(flows) {
      this.set("flows", flows);
    }
    get openIdConnectUrl() {
      return this.get("openIdConnectUrl");
    }
    set openIdConnectUrl(openIdConnectUrl) {
      this.set("openIdConnectUrl", openIdConnectUrl);
    }
  }
  var _default = SecurityScheme;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Server.cjs
var require_Server = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Server extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "server";
    }
    get url() {
      return this.get("url");
    }
    set url(url) {
      this.set("url", url);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get variables() {
      return this.get("variables");
    }
    set variables(variables) {
      this.set("variables", variables);
    }
  }
  var _default = Server;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/ServerVariable.cjs
var require_ServerVariable = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ServerVariable extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "serverVariable";
    }
    get enum() {
      return this.get("enum");
    }
    set enum(value) {
      this.set("enum", value);
    }
    get default() {
      return this.get("default");
    }
    set default(value) {
      this.set("default", value);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
  }
  var _default = ServerVariable;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Tag.cjs
var require_Tag2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Tag extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "tag";
    }
    get name() {
      return this.get("name");
    }
    set name(name) {
      this.set("name", name);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get externalDocs() {
      return this.get("externalDocs");
    }
    set externalDocs(externalDocs) {
      this.set("externalDocs", externalDocs);
    }
  }
  var _default = Tag;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/Xml.cjs
var require_Xml = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Xml extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "xml";
    }
    get name() {
      return this.get("name");
    }
    set name(name) {
      this.set("name", name);
    }
    get namespace() {
      return this.get("namespace");
    }
    set namespace(namespace) {
      this.set("namespace", namespace);
    }
    get prefix() {
      return this.get("prefix");
    }
    set prefix(prefix) {
      this.set("prefix", prefix);
    }
    get attribute() {
      return this.get("attribute");
    }
    set attribute(attribute) {
      this.set("attribute", attribute);
    }
    get wrapped() {
      return this.get("wrapped");
    }
    set wrapped(wrapped) {
      this.set("wrapped", wrapped);
    }
  }
  var _default = Xml;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/namespace.cjs
var require_namespace3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _Callback = _interopRequireDefault(require_Callback());
  var _Components = _interopRequireDefault(require_Components());
  var _Contact = _interopRequireDefault(require_Contact());
  var _Discriminator = _interopRequireDefault(require_Discriminator());
  var _Encoding = _interopRequireDefault(require_Encoding());
  var _Example = _interopRequireDefault(require_Example());
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation());
  var _Header = _interopRequireDefault(require_Header());
  var _Info = _interopRequireDefault(require_Info());
  var _License = _interopRequireDefault(require_License());
  var _Link = _interopRequireDefault(require_Link());
  var _MediaType = _interopRequireDefault(require_MediaType());
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow());
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows());
  var _Openapi = _interopRequireDefault(require_Openapi());
  var _OpenApi = _interopRequireDefault(require_OpenApi3_0());
  var _Operation = _interopRequireDefault(require_Operation());
  var _Parameter = _interopRequireDefault(require_Parameter());
  var _PathItem = _interopRequireDefault(require_PathItem());
  var _Paths = _interopRequireDefault(require_Paths());
  var _Reference = _interopRequireDefault(require_Reference2());
  var _RequestBody = _interopRequireDefault(require_RequestBody());
  var _Response = _interopRequireDefault(require_Response());
  var _Responses = _interopRequireDefault(require_Responses());
  var _Schema = _interopRequireDefault(require_Schema2());
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement());
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme());
  var _Server = _interopRequireDefault(require_Server());
  var _ServerVariable = _interopRequireDefault(require_ServerVariable());
  var _Tag = _interopRequireDefault(require_Tag2());
  var _Xml = _interopRequireDefault(require_Xml());
  var openApi3_0 = {
    namespace: (options) => {
      const {
        base
      } = options;
      base.register("callback", _Callback.default);
      base.register("components", _Components.default);
      base.register("contact", _Contact.default);
      base.register("discriminator", _Discriminator.default);
      base.register("encoding", _Encoding.default);
      base.register("example", _Example.default);
      base.register("externalDocumentation", _ExternalDocumentation.default);
      base.register("header", _Header.default);
      base.register("info", _Info.default);
      base.register("license", _License.default);
      base.register("link", _Link.default);
      base.register("mediaType", _MediaType.default);
      base.register("oAuthFlow", _OAuthFlow.default);
      base.register("oAuthFlows", _OAuthFlows.default);
      base.register("openapi", _Openapi.default);
      base.register("openApi3_0", _OpenApi.default);
      base.register("operation", _Operation.default);
      base.register("parameter", _Parameter.default);
      base.register("pathItem", _PathItem.default);
      base.register("paths", _Paths.default);
      base.register("reference", _Reference.default);
      base.register("requestBody", _RequestBody.default);
      base.register("response", _Response.default);
      base.register("responses", _Responses.default);
      base.register("schema", _Schema.default);
      base.register("securityRequirement", _SecurityRequirement.default);
      base.register("securityScheme", _SecurityScheme.default);
      base.register("server", _Server.default);
      base.register("serverVariable", _ServerVariable.default);
      base.register("tag", _Tag.default);
      base.register("xml", _Xml.default);
      return base;
    }
  };
  var _default = openApi3_0;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/Servers.cjs
var require_Servers = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Servers extends _apidomCore.ArrayElement {
    static primaryClass = "servers";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(Servers.primaryClass);
    }
  }
  var _default = Servers;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/Security.cjs
var require_Security = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Security extends _apidomCore.ArrayElement {
    static primaryClass = "security";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(Security.primaryClass);
    }
  }
  var _default = Security;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/Tags.cjs
var require_Tags = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Tags extends _apidomCore.ArrayElement {
    static primaryClass = "tags";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(Tags.primaryClass);
    }
  }
  var _default = Tags;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ServerVariables.cjs
var require_ServerVariables = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ServerVariables extends _apidomCore.ObjectElement {
    static primaryClass = "server-variables";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ServerVariables.primaryClass);
    }
  }
  var _default = ServerVariables;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsSchemas.cjs
var require_ComponentsSchemas = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsSchemas extends _apidomCore.ObjectElement {
    static primaryClass = "components-schemas";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsSchemas.primaryClass);
    }
  }
  var _default = ComponentsSchemas;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsResponses.cjs
var require_ComponentsResponses = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsResponses extends _apidomCore.ObjectElement {
    static primaryClass = "components-responses";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsResponses.primaryClass);
    }
  }
  var _default = ComponentsResponses;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsParameters.cjs
var require_ComponentsParameters = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsParameters extends _apidomCore.ObjectElement {
    static primaryClass = "components-parameters";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsParameters.primaryClass);
      this.classes.push("parameters");
    }
  }
  var _default = ComponentsParameters;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsExamples.cjs
var require_ComponentsExamples = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsExamples extends _apidomCore.ObjectElement {
    static primaryClass = "components-examples";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsExamples.primaryClass);
      this.classes.push("examples");
    }
  }
  var _default = ComponentsExamples;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsRequestBodies.cjs
var require_ComponentsRequestBodies = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsRequestBodies extends _apidomCore.ObjectElement {
    static primaryClass = "components-request-bodies";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsRequestBodies.primaryClass);
    }
  }
  var _default = ComponentsRequestBodies;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsHeaders.cjs
var require_ComponentsHeaders = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsHeaders extends _apidomCore.ObjectElement {
    static primaryClass = "components-headers";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsHeaders.primaryClass);
    }
  }
  var _default = ComponentsHeaders;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsSecuritySchemes.cjs
var require_ComponentsSecuritySchemes = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsSecuritySchemes extends _apidomCore.ObjectElement {
    static primaryClass = "components-security-schemes";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsSecuritySchemes.primaryClass);
    }
  }
  var _default = ComponentsSecuritySchemes;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsLinks.cjs
var require_ComponentsLinks = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsLinks extends _apidomCore.ObjectElement {
    static primaryClass = "components-links";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsLinks.primaryClass);
    }
  }
  var _default = ComponentsLinks;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ComponentsCallbacks.cjs
var require_ComponentsCallbacks = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsCallbacks extends _apidomCore.ObjectElement {
    static primaryClass = "components-callbacks";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsCallbacks.primaryClass);
    }
  }
  var _default = ComponentsCallbacks;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/PathItemServers.cjs
var require_PathItemServers = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class PathItemServers extends _apidomCore.ArrayElement {
    static primaryClass = "path-item-servers";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(PathItemServers.primaryClass);
      this.classes.push("servers");
    }
  }
  var _default = PathItemServers;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/PathItemParameters.cjs
var require_PathItemParameters = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class PathItemParameters extends _apidomCore.ArrayElement {
    static primaryClass = "path-item-parameters";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(PathItemParameters.primaryClass);
      this.classes.push("parameters");
    }
  }
  var _default = PathItemParameters;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/OperationParameters.cjs
var require_OperationParameters = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OperationParameters extends _apidomCore.ArrayElement {
    static primaryClass = "operation-parameters";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(OperationParameters.primaryClass);
      this.classes.push("parameters");
    }
  }
  var _default = OperationParameters;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ParameterExamples.cjs
var require_ParameterExamples = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ParameterExamples extends _apidomCore.ObjectElement {
    static primaryClass = "parameter-examples";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ParameterExamples.primaryClass);
      this.classes.push("examples");
    }
  }
  var _default = ParameterExamples;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ParameterContent.cjs
var require_ParameterContent = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ParameterContent extends _apidomCore.ObjectElement {
    static primaryClass = "parameter-content";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ParameterContent.primaryClass);
      this.classes.push("content");
    }
  }
  var _default = ParameterContent;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/OperationTags.cjs
var require_OperationTags = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OperationTags extends _apidomCore.ArrayElement {
    static primaryClass = "operation-tags";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(OperationTags.primaryClass);
    }
  }
  var _default = OperationTags;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/OperationCallbacks.cjs
var require_OperationCallbacks = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OperationCallbacks extends _apidomCore.ObjectElement {
    static primaryClass = "operation-callbacks";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(OperationCallbacks.primaryClass);
    }
  }
  var _default = OperationCallbacks;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/OperationSecurity.cjs
var require_OperationSecurity = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OperationSecurity extends _apidomCore.ArrayElement {
    static primaryClass = "operation-security";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(OperationSecurity.primaryClass);
      this.classes.push("security");
    }
  }
  var _default = OperationSecurity;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/OperationServers.cjs
var require_OperationServers = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OperationServers extends _apidomCore.ArrayElement {
    static primaryClass = "operation-servers";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(OperationServers.primaryClass);
      this.classes.push("servers");
    }
  }
  var _default = OperationServers;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/RequestBodyContent.cjs
var require_RequestBodyContent = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class RequestBodyContent extends _apidomCore.ObjectElement {
    static primaryClass = "request-body-content";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(RequestBodyContent.primaryClass);
      this.classes.push("content");
    }
  }
  var _default = RequestBodyContent;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/MediaTypeExamples.cjs
var require_MediaTypeExamples = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class MediaTypeExamples extends _apidomCore.ObjectElement {
    static primaryClass = "media-type-examples";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(MediaTypeExamples.primaryClass);
      this.classes.push("examples");
    }
  }
  var _default = MediaTypeExamples;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/MediaTypeEncoding.cjs
var require_MediaTypeEncoding = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class MediaTypeEncoding extends _apidomCore.ObjectElement {
    static primaryClass = "media-type-encoding";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(MediaTypeEncoding.primaryClass);
    }
  }
  var _default = MediaTypeEncoding;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/EncodingHeaders.cjs
var require_EncodingHeaders = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class EncodingHeaders extends _apidomCore.ObjectElement {
    static primaryClass = "encoding-headers";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(EncodingHeaders.primaryClass);
    }
  }
  var _default = EncodingHeaders;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ResponseHeaders.cjs
var require_ResponseHeaders = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ResponseHeaders extends _apidomCore.ObjectElement {
    static primaryClass = "response-headers";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ResponseHeaders.primaryClass);
    }
  }
  var _default = ResponseHeaders;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ResponseContent.cjs
var require_ResponseContent = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ResponseContent extends _apidomCore.ObjectElement {
    static primaryClass = "response-content";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ResponseContent.primaryClass);
      this.classes.push("content");
    }
  }
  var _default = ResponseContent;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/ResponseLinks.cjs
var require_ResponseLinks = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ResponseLinks extends _apidomCore.ObjectElement {
    static primaryClass = "response-links";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ResponseLinks.primaryClass);
    }
  }
  var _default = ResponseLinks;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/DiscriminatorMapping.cjs
var require_DiscriminatorMapping = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class DiscriminatorMapping extends _apidomCore.ObjectElement {
    static primaryClass = "discriminator-mapping";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(DiscriminatorMapping.primaryClass);
    }
  }
  var _default = DiscriminatorMapping;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/OAuthFlowScopes.cjs
var require_OAuthFlowScopes = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OAuthFlowScopes extends _apidomCore.ObjectElement {
    static primaryClass = "oauth-flow-scopes";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(OAuthFlowScopes.primaryClass);
    }
  }
  var _default = OAuthFlowScopes;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/LinkParameters.cjs
var require_LinkParameters = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class LinkParameters extends _apidomCore.ObjectElement {
    static primaryClass = "link-parameters";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(LinkParameters.primaryClass);
    }
  }
  var _default = LinkParameters;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/HeaderExamples.cjs
var require_HeaderExamples = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class HeaderExamples extends _apidomCore.ObjectElement {
    static primaryClass = "header-examples";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(HeaderExamples.primaryClass);
      this.classes.push("examples");
    }
  }
  var _default = HeaderExamples;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/elements/nces/HeaderContent.cjs
var require_HeaderContent = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class HeaderContent extends _apidomCore.ObjectElement {
    static primaryClass = "header-content";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(HeaderContent.primaryClass);
      this.classes.push("content");
    }
  }
  var _default = HeaderContent;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/traversal/visitor.cjs
var require_visitor5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.keyMap = exports.getNodeType = undefined;
  var _apidomCore = require_cjs4();
  var getNodeType = (element) => {
    if (!(0, _apidomCore.isElement)(element)) {
      return;
    }
    return `${element.element.charAt(0).toUpperCase() + element.element.slice(1)}Element`;
  };
  exports.getNodeType = getNodeType;
  var keyMap = {
    CallbackElement: ["content"],
    ComponentsElement: ["content"],
    ContactElement: ["content"],
    DiscriminatorElement: ["content"],
    Encoding: ["content"],
    Example: ["content"],
    ExternalDocumentationElement: ["content"],
    HeaderElement: ["content"],
    InfoElement: ["content"],
    LicenseElement: ["content"],
    MediaTypeElement: ["content"],
    OAuthFlowElement: ["content"],
    OAuthFlowsElement: ["content"],
    OpenApi3_0Element: ["content"],
    OperationElement: ["content"],
    ParameterElement: ["content"],
    PathItemElement: ["content"],
    PathsElement: ["content"],
    ReferenceElement: ["content"],
    RequestBodyElement: ["content"],
    ResponseElement: ["content"],
    ResponsesElement: ["content"],
    SchemaElement: ["content"],
    SecurityRequirementElement: ["content"],
    SecuritySchemeElement: ["content"],
    ServerElement: ["content"],
    ServerVariableElement: ["content"],
    TagElement: ["content"],
    ..._apidomCore.keyMap
  };
  exports.keyMap = keyMap;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/plugins/replace-empty-element.cjs
var require_replace_empty_element2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _Info = _interopRequireDefault(require_Info());
  var _Contact = _interopRequireDefault(require_Contact());
  var _License = _interopRequireDefault(require_License());
  var _Paths = _interopRequireDefault(require_Paths());
  var _PathItem = _interopRequireDefault(require_PathItem());
  var _Components = _interopRequireDefault(require_Components());
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation());
  var _Operation = _interopRequireDefault(require_Operation());
  var _Schema = _interopRequireDefault(require_Schema2());
  var _RequestBody = _interopRequireDefault(require_RequestBody());
  var _Responses = _interopRequireDefault(require_Responses());
  var _Response = _interopRequireDefault(require_Response());
  var _Server = _interopRequireDefault(require_Server());
  var _Discriminator = _interopRequireDefault(require_Discriminator());
  var _Xml = _interopRequireDefault(require_Xml());
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows());
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow());
  var _ServerVariable = _interopRequireDefault(require_ServerVariable());
  var _Parameter = _interopRequireDefault(require_Parameter());
  var _Example = _interopRequireDefault(require_Example());
  var _Header = _interopRequireDefault(require_Header());
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme());
  var _Link = _interopRequireDefault(require_Link());
  var _Callback = _interopRequireDefault(require_Callback());
  var _MediaType = _interopRequireDefault(require_MediaType());
  var _Encoding = _interopRequireDefault(require_Encoding());
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement());
  var _Tag = _interopRequireDefault(require_Tag2());
  var _Servers = _interopRequireDefault(require_Servers());
  var _Security = _interopRequireDefault(require_Security());
  var _Tags = _interopRequireDefault(require_Tags());
  var _ServerVariables = _interopRequireDefault(require_ServerVariables());
  var _ComponentsSchemas = _interopRequireDefault(require_ComponentsSchemas());
  var _ComponentsResponses = _interopRequireDefault(require_ComponentsResponses());
  var _ComponentsParameters = _interopRequireDefault(require_ComponentsParameters());
  var _ComponentsExamples = _interopRequireDefault(require_ComponentsExamples());
  var _ComponentsRequestBodies = _interopRequireDefault(require_ComponentsRequestBodies());
  var _ComponentsHeaders = _interopRequireDefault(require_ComponentsHeaders());
  var _ComponentsSecuritySchemes = _interopRequireDefault(require_ComponentsSecuritySchemes());
  var _ComponentsLinks = _interopRequireDefault(require_ComponentsLinks());
  var _ComponentsCallbacks = _interopRequireDefault(require_ComponentsCallbacks());
  var _PathItemServers = _interopRequireDefault(require_PathItemServers());
  var _PathItemParameters = _interopRequireDefault(require_PathItemParameters());
  var _OperationParameters = _interopRequireDefault(require_OperationParameters());
  var _ParameterExamples = _interopRequireDefault(require_ParameterExamples());
  var _ParameterContent = _interopRequireDefault(require_ParameterContent());
  var _OperationTags = _interopRequireDefault(require_OperationTags());
  var _OperationCallbacks = _interopRequireDefault(require_OperationCallbacks());
  var _OperationSecurity = _interopRequireDefault(require_OperationSecurity());
  var _OperationServers = _interopRequireDefault(require_OperationServers());
  var _RequestBodyContent = _interopRequireDefault(require_RequestBodyContent());
  var _MediaTypeExamples = _interopRequireDefault(require_MediaTypeExamples());
  var _MediaTypeEncoding = _interopRequireDefault(require_MediaTypeEncoding());
  var _EncodingHeaders = _interopRequireDefault(require_EncodingHeaders());
  var _ResponseHeaders = _interopRequireDefault(require_ResponseHeaders());
  var _ResponseContent = _interopRequireDefault(require_ResponseContent());
  var _ResponseLinks = _interopRequireDefault(require_ResponseLinks());
  var _DiscriminatorMapping = _interopRequireDefault(require_DiscriminatorMapping());
  var _OAuthFlowScopes = _interopRequireDefault(require_OAuthFlowScopes());
  var _LinkParameters = _interopRequireDefault(require_LinkParameters());
  var _HeaderExamples = _interopRequireDefault(require_HeaderExamples());
  var _HeaderContent = _interopRequireDefault(require_HeaderContent());
  var _visitor = require_visitor5();
  var isEmptyElement = (element) => (0, _apidomCore.isStringElement)(element) && (0, _apidomCore.includesClasses)(["yaml-e-node", "yaml-e-scalar"], element);
  var schema = {
    OpenApi3_0Element: {
      info(...args) {
        return new _Info.default(...args);
      },
      servers(...args) {
        return new _Servers.default(...args);
      },
      paths(...args) {
        return new _Paths.default(...args);
      },
      components(...args) {
        return new _Components.default(...args);
      },
      security(...args) {
        return new _Security.default(...args);
      },
      tags(...args) {
        return new _Tags.default(...args);
      },
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      }
    },
    InfoElement: {
      contact(...args) {
        return new _Contact.default(...args);
      },
      license(...args) {
        return new _License.default(...args);
      }
    },
    ServerElement: {
      variables(...args) {
        return new _ServerVariables.default(...args);
      }
    },
    ServerVariableElement: {
      enum(...args) {
        return new _apidomCore.ArrayElement(...args);
      }
    },
    PathsElement: {
      "[key: *]": function key(...args) {
        return new _PathItem.default(...args);
      }
    },
    PathItemElement: {
      get(...args) {
        return new _Operation.default(...args);
      },
      put(...args) {
        return new _Operation.default(...args);
      },
      post(...args) {
        return new _Operation.default(...args);
      },
      delete(...args) {
        return new _Operation.default(...args);
      },
      options(...args) {
        return new _Operation.default(...args);
      },
      head(...args) {
        return new _Operation.default(...args);
      },
      patch(...args) {
        return new _Operation.default(...args);
      },
      trace(...args) {
        return new _Operation.default(...args);
      },
      servers(...args) {
        return new _PathItemServers.default(...args);
      },
      parameters(...args) {
        return new _PathItemParameters.default(...args);
      }
    },
    OperationElement: {
      tags(...args) {
        return new _OperationTags.default(...args);
      },
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      },
      parameters(...args) {
        return new _OperationParameters.default(...args);
      },
      requestBody(...args) {
        return new _RequestBody.default(...args);
      },
      responses(...args) {
        return new _Responses.default(...args);
      },
      callbacks(...args) {
        return new _OperationCallbacks.default(...args);
      },
      security(...args) {
        return new _OperationSecurity.default(...args);
      },
      servers(...args) {
        return new _OperationServers.default(...args);
      }
    },
    ParameterElement: {
      schema(...args) {
        return new _Schema.default(...args);
      },
      examples(...args) {
        return new _ParameterExamples.default(...args);
      },
      content(...args) {
        return new _ParameterContent.default(...args);
      }
    },
    RequestBodyElement: {
      content(...args) {
        return new _RequestBodyContent.default(...args);
      }
    },
    MediaTypeElement: {
      schema(...args) {
        return new _Schema.default(...args);
      },
      examples(...args) {
        return new _MediaTypeExamples.default(...args);
      },
      encoding(...args) {
        return new _MediaTypeEncoding.default(...args);
      }
    },
    EncodingElement: {
      headers(...args) {
        return new _EncodingHeaders.default(...args);
      }
    },
    ResponsesElement: {
      "[key: *]": function key(...args) {
        return new _Response.default(...args);
      }
    },
    ResponseElement: {
      headers(...args) {
        return new _ResponseHeaders.default(...args);
      },
      content(...args) {
        return new _ResponseContent.default(...args);
      },
      links(...args) {
        return new _ResponseLinks.default(...args);
      }
    },
    CallbackElement: {
      "[key: *]": function key(...args) {
        return new _PathItem.default(...args);
      }
    },
    LinkElement: {
      parameters(...args) {
        return new _LinkParameters.default(...args);
      },
      server(...args) {
        return new _Server.default(...args);
      }
    },
    HeaderElement: {
      schema(...args) {
        return new _Schema.default(...args);
      },
      examples(...args) {
        return new _HeaderExamples.default(...args);
      },
      content(...args) {
        return new _HeaderContent.default(...args);
      }
    },
    ComponentsElement: {
      schemas(...args) {
        return new _ComponentsSchemas.default(...args);
      },
      responses(...args) {
        return new _ComponentsResponses.default(...args);
      },
      parameters(...args) {
        return new _ComponentsParameters.default(...args);
      },
      examples(...args) {
        return new _ComponentsExamples.default(...args);
      },
      requestBodies(...args) {
        return new _ComponentsRequestBodies.default(...args);
      },
      headers(...args) {
        return new _ComponentsHeaders.default(...args);
      },
      securitySchemes(...args) {
        return new _ComponentsSecuritySchemes.default(...args);
      },
      links(...args) {
        return new _ComponentsLinks.default(...args);
      },
      callbacks(...args) {
        return new _ComponentsCallbacks.default(...args);
      }
    },
    SecurityRequirementElement: {
      "[key: *]": function key(...args) {
        return new _apidomCore.ArrayElement(...args);
      }
    },
    TagElement: {
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      }
    },
    SchemaElement: {
      definitions(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-definitions");
        return element;
      },
      allOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-allOf");
        return element;
      },
      anyOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-anyOf");
        return element;
      },
      oneOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-oneOf");
        return element;
      },
      not(...args) {
        return new _Schema.default(...args);
      },
      items(...args) {
        return new _Schema.default(...args);
      },
      properties(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-properties");
        return element;
      },
      patternProperties(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-patternProperties");
        return element;
      },
      additionalProperties(...args) {
        return new _Schema.default(...args);
      },
      enum(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-enum");
        return element;
      },
      required(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-required");
        return element;
      },
      discriminator(...args) {
        return new _Discriminator.default(...args);
      },
      xml(...args) {
        return new _Xml.default(...args);
      },
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      }
    },
    DiscriminatorElement: {
      mapping(...args) {
        return new _DiscriminatorMapping.default(...args);
      }
    },
    SecuritySchemeElement: {
      flows(...args) {
        return new _OAuthFlows.default(...args);
      }
    },
    OAuthFlowsElement: {
      implicit(...args) {
        return new _OAuthFlow.default(...args);
      },
      password(...args) {
        return new _OAuthFlow.default(...args);
      },
      clientCredentials(...args) {
        return new _OAuthFlow.default(...args);
      },
      authorizationCode(...args) {
        return new _OAuthFlow.default(...args);
      }
    },
    OAuthFlowElement: {
      scopes(...args) {
        return new _OAuthFlowScopes.default(...args);
      }
    },
    [_ServerVariables.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _ServerVariable.default(...args);
      }
    },
    [_ComponentsSchemas.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    [_ComponentsResponses.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Response.default(...args);
      }
    },
    [_ComponentsParameters.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Parameter.default(...args);
      }
    },
    [_ComponentsExamples.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Example.default(...args);
      }
    },
    [_ComponentsRequestBodies.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _RequestBody.default(...args);
      }
    },
    [_ComponentsHeaders.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Header.default(...args);
      }
    },
    [_ComponentsSecuritySchemes.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _SecurityScheme.default(...args);
      }
    },
    [_ComponentsLinks.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Link.default(...args);
      }
    },
    [_ComponentsCallbacks.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Callback.default(...args);
      }
    },
    [_OperationCallbacks.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Callback.default(...args);
      }
    },
    [_ParameterExamples.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Example.default(...args);
      }
    },
    [_ParameterContent.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _MediaType.default(...args);
      }
    },
    [_RequestBodyContent.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _MediaType.default(...args);
      }
    },
    [_MediaTypeExamples.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Example.default(...args);
      }
    },
    [_MediaTypeEncoding.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Encoding.default(...args);
      }
    },
    [_EncodingHeaders.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Header.default(...args);
      }
    },
    [_ResponseHeaders.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Header.default(...args);
      }
    },
    [_ResponseContent.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _MediaType.default(...args);
      }
    },
    [_ResponseLinks.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Link.default(...args);
      }
    },
    "json-schema-$defs": {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-dependentSchemas": {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-properties": {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    [_Servers.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Server.default(...args);
      }
    },
    [_Security.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _SecurityRequirement.default(...args);
      }
    },
    [_Tags.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Tag.default(...args);
      }
    },
    [_PathItemServers.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Server.default(...args);
      }
    },
    [_PathItemParameters.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Parameter.default(...args);
      }
    },
    [_OperationParameters.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Parameter.default(...args);
      }
    },
    [_OperationSecurity.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _SecurityRequirement.default(...args);
      }
    },
    [_OperationServers.default.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Server.default(...args);
      }
    },
    "json-schema-allOf": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-anyOf": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-oneOf": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-prefixItems": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    }
  };
  var findElementFactory = (ancestor, keyName) => {
    var _ancestor$classes$fir;
    const elementType = (0, _visitor.getNodeType)(ancestor);
    const keyMapping = schema[elementType] || schema[(_ancestor$classes$fir = ancestor.classes.first) == null || _ancestor$classes$fir.toValue == null ? undefined : _ancestor$classes$fir.toValue()];
    return typeof keyMapping === "undefined" ? undefined : Object.prototype.hasOwnProperty.call(keyMapping, "[key: *]") ? keyMapping["[key: *]"] : keyMapping[keyName];
  };
  var plugin = () => () => {
    return {
      visitor: {
        MemberElement(element, ...rest) {
          if (!isEmptyElement(element.value))
            return;
          const [, , , ancestors] = rest;
          const ancestor = ancestors[ancestors.length - 1];
          const elementFactory = findElementFactory(ancestor, element.key.toValue());
          if (typeof elementFactory === "undefined")
            return;
          const originalValue = element.value;
          return new _apidomCore.MemberElement(element.key, elementFactory.call({
            context: ancestor
          }, undefined, originalValue.meta.clone(), originalValue.attributes.clone()), element.meta.clone(), element.attributes.clone());
        },
        StringElement(element, ...rest) {
          if (!isEmptyElement(element))
            return;
          const [, , , ancestors] = rest;
          const ancestor = ancestors[ancestors.length - 1];
          if (!(0, _apidomCore.isArrayElement)(ancestor))
            return;
          const elementFactory = findElementFactory(ancestor, "<*>");
          if (typeof elementFactory === "undefined")
            return;
          return elementFactory.call({
            context: element
          }, undefined, element.meta.clone(), element.attributes.clone());
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/Visitor.cjs
var require_Visitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var Visitor = (0, _stampit.default)({
    props: {
      element: null
    },
    methods: {
      copyMetaAndAttributes(from, to) {
        if ((0, _apidomCore.hasElementSourceMap)(from)) {
          to.meta.set("sourceMap", from.meta.get("sourceMap"));
        }
      }
    }
  });
  var _default = Visitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/SpecificationVisitor.cjs
var require_SpecificationVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _Visitor = _interopRequireDefault(require_Visitor2());
  var _visitor = require_visitor5();
  var SpecificationVisitor = (0, _stampit.default)(_Visitor.default, {
    props: {
      passingOptionsNames: ["specObj", "openApiGenericElement", "openApiSemanticElement"],
      specObj: null,
      openApiGenericElement: null,
      openApiSemanticElement: null
    },
    init({
      specObj = this.specObj,
      openApiGenericElement = this.openApiGenericElement,
      openApiSemanticElement = this.openApiSemanticElement
    }) {
      this.specObj = specObj;
      this.openApiGenericElement = openApiGenericElement;
      this.openApiSemanticElement = openApiSemanticElement;
    },
    methods: {
      retrievePassingOptions() {
        return (0, _ramda.pick)(this.passingOptionsNames, this);
      },
      retrieveFixedFields(specPath) {
        return (0, _ramda.pipe)((0, _ramda.path)(["visitors", ...specPath, "fixedFields"]), _ramda.keys)(this.specObj);
      },
      retrieveVisitor(specPath) {
        if ((0, _ramda.pathSatisfies)(_ramdaAdjunct.isFunction, ["visitors", ...specPath], this.specObj)) {
          return (0, _ramda.path)(["visitors", ...specPath], this.specObj);
        }
        return (0, _ramda.path)(["visitors", ...specPath, "$visitor"], this.specObj);
      },
      retrieveVisitorInstance(specPath, options = {}) {
        const passingOpts = this.retrievePassingOptions();
        return this.retrieveVisitor(specPath)({
          ...passingOpts,
          ...options
        });
      },
      toRefractedElement(specPath, element, options = {}) {
        const visitor2 = this.retrieveVisitorInstance(specPath, options);
        const visitorPrototype = Object.getPrototypeOf(visitor2);
        if ((0, _ramdaAdjunct.isUndefined)(this.fallbackVisitorPrototype)) {
          this.fallbackVisitorPrototype = Object.getPrototypeOf(this.retrieveVisitorInstance(["value"]));
        }
        if (this.fallbackVisitorPrototype === visitorPrototype) {
          return element.clone();
        }
        (0, _apidomCore.visit)(element, visitor2, {
          keyMap: _visitor.keyMap,
          nodeTypeGetter: _visitor.getNodeType,
          ...options
        });
        return visitor2.element;
      }
    }
  });
  var _default = SpecificationVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/predicates.cjs
var require_predicates7 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isTagLikeElement = exports.isServerLikeElement = exports.isResponseLikeElement = exports.isRequestBodyLikeElement = exports.isReferenceLikeElement = exports.isParameterLikeElement = exports.isOpenApiExtension = exports.isOpenApi3_0LikeElement = undefined;
  var _apidomCore = require_cjs4();
  var _ramda = require_src2();
  var isOpenApi3_0LikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("openapi") && element.hasKey("info");
  };
  exports.isOpenApi3_0LikeElement = isOpenApi3_0LikeElement;
  var isParameterLikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("name") && element.hasKey("in");
  };
  exports.isParameterLikeElement = isParameterLikeElement;
  var isReferenceLikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("$ref");
  };
  exports.isReferenceLikeElement = isReferenceLikeElement;
  var isRequestBodyLikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("content");
  };
  exports.isRequestBodyLikeElement = isRequestBodyLikeElement;
  var isResponseLikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("description");
  };
  exports.isResponseLikeElement = isResponseLikeElement;
  var isServerLikeElement = _apidomCore.isObjectElement;
  exports.isServerLikeElement = isServerLikeElement;
  var isTagLikeElement = _apidomCore.isObjectElement;
  exports.isTagLikeElement = isTagLikeElement;
  var isOpenApiExtension = (element) => {
    return (0, _apidomCore.isStringElement)(element.key) && (0, _ramda.startsWith)("x-", element.key.toValue());
  };
  exports.isOpenApiExtension = isOpenApiExtension;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/generics/FixedFieldsVisitor.cjs
var require_FixedFieldsVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _predicates = require_predicates7();
  var FixedFieldsVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    props: {
      specPath: _ramdaAdjunct.noop,
      ignoredFields: [],
      canSupportSpecificationExtensions: true,
      specificationExtensionPredicate: _predicates.isOpenApiExtension
    },
    init({
      specPath = this.specPath,
      ignoredFields = this.ignoredFields,
      canSupportSpecificationExtensions = this.canSupportSpecificationExtensions,
      specificationExtensionPredicate = this.specificationExtensionPredicate
    } = {}) {
      this.specPath = specPath;
      this.ignoredFields = ignoredFields;
      this.canSupportSpecificationExtensions = canSupportSpecificationExtensions;
      this.specificationExtensionPredicate = specificationExtensionPredicate;
    },
    methods: {
      ObjectElement(objectElement) {
        const specPath = this.specPath(objectElement);
        const fields = this.retrieveFixedFields(specPath);
        objectElement.forEach((value, key, memberElement) => {
          if ((0, _apidomCore.isStringElement)(key) && fields.includes(key.toValue()) && !this.ignoredFields.includes(key.toValue())) {
            const fixedFieldElement = this.toRefractedElement([...specPath, "fixedFields", key.toValue()], value);
            const newMemberElement = new _apidomCore.MemberElement(key.clone(), fixedFieldElement);
            this.copyMetaAndAttributes(memberElement, newMemberElement);
            newMemberElement.classes.push("fixed-field");
            this.element.content.push(newMemberElement);
          } else if (this.canSupportSpecificationExtensions && this.specificationExtensionPredicate(memberElement)) {
            const extensionElement = this.toRefractedElement(["document", "extension"], memberElement);
            this.element.content.push(extensionElement);
          } else if (!this.ignoredFields.includes(key.toValue())) {
            this.element.content.push(memberElement.clone());
          }
        });
        this.copyMetaAndAttributes(objectElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = FixedFieldsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/FallbackVisitor.cjs
var require_FallbackVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _Visitor = _interopRequireDefault(require_Visitor2());
  var FallbackVisitor = (0, _stampit.default)(_Visitor.default, {
    methods: {
      enter(element) {
        this.element = element.clone();
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = FallbackVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/index.cjs
var require_open_api_3_0 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _OpenApi = _interopRequireDefault(require_OpenApi3_0());
  var OpenApi3_0Visitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "OpenApi"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _OpenApi.default;
    },
    methods: {
      ObjectElement(objectElement) {
        this.unrefractedElement = objectElement;
        return _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
      }
    }
  });
  var _default = OpenApi3_0Visitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/OpenapiVisitor.cjs
var require_OpenapiVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _Openapi = _interopRequireDefault(require_Openapi());
  var OpenapiVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        const openapiElement = new _Openapi.default(stringElement.toValue());
        this.copyMetaAndAttributes(stringElement, openapiElement);
        this.element = openapiElement;
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = OpenapiVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/SpecificationExtensionVisitor.cjs
var require_SpecificationExtensionVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var SpecificationExtensionVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    methods: {
      MemberElement(memberElement) {
        this.element = memberElement.clone();
        this.element.classes.push("specification-extension");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = SpecificationExtensionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/info/index.cjs
var require_info = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Info = _interopRequireDefault(require_Info());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var InfoVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Info"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Info.default;
    }
  });
  var _default = InfoVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/info/TitleVisitor.cjs
var require_TitleVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var TitleVisitor = _FallbackVisitor.default;
  var _default = TitleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/info/DescriptionVisitor.cjs
var require_DescriptionVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/info/TermsOfServiceVisitor.cjs
var require_TermsOfServiceVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var TermsOfServiceVisitor = _FallbackVisitor.default;
  var _default = TermsOfServiceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/info/VersionVisitor.cjs
var require_VersionVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var VersionVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("api-version");
        this.element.classes.push("version");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = VersionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/contact/index.cjs
var require_contact = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Contact = _interopRequireDefault(require_Contact());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var ContactVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Contact"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Contact.default;
    }
  });
  var _default = ContactVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/contact/NameVisitor.cjs
var require_NameVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NameVisitor = _FallbackVisitor.default;
  var _default = NameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/contact/UrlVisitor.cjs
var require_UrlVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var UrlVisitor = _FallbackVisitor.default;
  var _default = UrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/contact/EmailVisitor.cjs
var require_EmailVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var EmailVisitor = _FallbackVisitor.default;
  var _default = EmailVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/license/index.cjs
var require_license = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _License = _interopRequireDefault(require_License());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var LicenseVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "License"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _License.default;
    }
  });
  var _default = LicenseVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/license/NameVisitor.cjs
var require_NameVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NameVisitor = _FallbackVisitor.default;
  var _default = NameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/license/UrlVisitor.cjs
var require_UrlVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var UrlVisitor = _FallbackVisitor.default;
  var _default = UrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/link/index.cjs
var require_link = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _Link = _interopRequireDefault(require_Link());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var LinkVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Link"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Link.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isStringElement)(this.element.operationId) || (0, _apidomCore.isStringElement)(this.element.operationRef)) {
          this.element.classes.push("reference-element");
        }
        return result;
      }
    }
  });
  var _default = LinkVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/link/OperationRefVisitor.cjs
var require_OperationRefVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var OperationRefVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = OperationRefVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/link/OperationIdVisitor.cjs
var require_OperationIdVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var OperationIdVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = OperationIdVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/generics/PatternedFieldsVisitor.cjs
var require_PatternedFieldsVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _predicates = require_predicates7();
  var PatternedFieldsJsonObjectVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    props: {
      fieldPatternPredicate: _ramda.F,
      specPath: _ramdaAdjunct.noop,
      ignoredFields: [],
      canSupportSpecificationExtensions: false,
      specificationExtensionPredicate: _predicates.isOpenApiExtension
    },
    init({
      specPath = this.specPath,
      ignoredFields = this.ignoredFields,
      canSupportSpecificationExtensions = this.canSupportSpecificationExtensions,
      specificationExtensionPredicate = this.specificationExtensionPredicate
    } = {}) {
      this.specPath = specPath;
      this.ignoredFields = ignoredFields;
      this.canSupportSpecificationExtensions = canSupportSpecificationExtensions;
      this.specificationExtensionPredicate = specificationExtensionPredicate;
    },
    methods: {
      ObjectElement(objectElement) {
        objectElement.forEach((value, key, memberElement) => {
          if (this.canSupportSpecificationExtensions && this.specificationExtensionPredicate(memberElement)) {
            const extensionElement = this.toRefractedElement(["document", "extension"], memberElement);
            this.element.content.push(extensionElement);
          } else if (!this.ignoredFields.includes(key.toValue()) && this.fieldPatternPredicate(key.toValue())) {
            const specPath = this.specPath(value);
            const patternedFieldElement = this.toRefractedElement(specPath, value);
            const newMemberElement = new _apidomCore.MemberElement(key.clone(), patternedFieldElement);
            this.copyMetaAndAttributes(memberElement, newMemberElement);
            newMemberElement.classes.push("patterned-field");
            this.element.content.push(newMemberElement);
          } else if (!this.ignoredFields.includes(key.toValue())) {
            this.element.content.push(memberElement.clone());
          }
        });
        this.copyMetaAndAttributes(objectElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = PatternedFieldsJsonObjectVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/generics/MapVisitor.cjs
var require_MapVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramdaAdjunct = require_lib6();
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor2());
  var MapVisitor = (0, _stampit.default)(_PatternedFieldsVisitor.default, {
    props: {
      fieldPatternPredicate: _ramdaAdjunct.isNonEmptyString
    }
  });
  var _default = MapVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/link/ParametersVisitor.cjs
var require_ParametersVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _LinkParameters = _interopRequireDefault(require_LinkParameters());
  var ParametersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["value"])
    },
    init() {
      this.element = new _LinkParameters.default;
    }
  });
  var _default = ParametersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/link/RequestBodyVisitor.cjs
var require_RequestBodyVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var RequestBodyVisitor = _FallbackVisitor.default;
  var _default = RequestBodyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/link/DescriptionVisitor.cjs
var require_DescriptionVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server/index.cjs
var require_server = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Server = _interopRequireDefault(require_Server());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var ServerVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Server"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Server.default;
    }
  });
  var _default = ServerVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server/UrlVisitor.cjs
var require_UrlVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var UrlVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("server-url");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = UrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server/DescriptionVisitor.cjs
var require_DescriptionVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/ServersVisitor.cjs
var require_ServersVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _Servers = _interopRequireDefault(require_Servers());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var ServersVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _Servers.default;
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isServerLikeElement)(item) ? ["document", "objects", "Server"] : ["value"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ServersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server-variable/index.cjs
var require_server_variable = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ServerVariable = _interopRequireDefault(require_ServerVariable());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var ServerVariableVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "ServerVariable"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _ServerVariable.default;
    }
  });
  var _default = ServerVariableVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server-variable/EnumVisitor.cjs
var require_EnumVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var EnumVisitor = _FallbackVisitor.default;
  var _default = EnumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server-variable/DefaultVisitor.cjs
var require_DefaultVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DefaultVisitor = _FallbackVisitor.default;
  var _default = DefaultVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server-variable/DescriptionVisitor.cjs
var require_DescriptionVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/server/VariablesVisitor.cjs
var require_VariablesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _ServerVariables = _interopRequireDefault(require_ServerVariables());
  var VariablesVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "ServerVariable"])
    },
    init() {
      this.element = new _ServerVariables.default;
    }
  });
  var _default = VariablesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/media-type/index.cjs
var require_media_type = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _MediaType = _interopRequireDefault(require_MediaType());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var MediaTypeVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "MediaType"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _MediaType.default;
    }
  });
  var _default = MediaTypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/generics/AlternatingVisitor.cjs
var require_AlternatingVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var AlternatingVisitor = (0, _stampit.default)(_SpecificationVisitor.default, {
    props: {
      alternator: []
    },
    methods: {
      enter(element) {
        const functions = this.alternator.map(({
          predicate,
          specPath: specPath2
        }) => (0, _ramda.ifElse)(predicate, (0, _ramda.always)(specPath2), _ramdaAdjunct.stubUndefined));
        const specPath = (0, _ramdaAdjunct.dispatch)(functions)(element);
        this.element = this.toRefractedElement(specPath, element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = AlternatingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/predicates.cjs
var require_predicates8 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.isServerVariableElement = exports.isServerElement = exports.isSecurityRequirementElement = exports.isSchemaElement = exports.isResponsesElement = exports.isResponseElement = exports.isRequestBodyElement = exports.isReferenceElementExternal = exports.isReferenceElement = exports.isPathsElement = exports.isPathItemElementExternal = exports.isPathItemElement = exports.isParameterElement = exports.isOperationElement = exports.isOpenapiElement = exports.isOpenApi3_0Element = exports.isMediaTypeElement = exports.isLinkElementExternal = exports.isLinkElement = exports.isLicenseElement = exports.isInfoElement = exports.isHeaderElement = exports.isExternalDocumentationElement = exports.isExampleElement = exports.isContactElement = exports.isComponentsElement = exports.isCallbackElement = exports.isBooleanJsonSchemaElement = undefined;
  var _apidomCore = require_cjs4();
  var _Callback = _interopRequireDefault(require_Callback());
  var _Components = _interopRequireDefault(require_Components());
  var _Contact = _interopRequireDefault(require_Contact());
  var _Example = _interopRequireDefault(require_Example());
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation());
  var _Header = _interopRequireDefault(require_Header());
  var _Info = _interopRequireDefault(require_Info());
  var _License = _interopRequireDefault(require_License());
  var _Link = _interopRequireDefault(require_Link());
  var _Openapi = _interopRequireDefault(require_Openapi());
  var _OpenApi = _interopRequireDefault(require_OpenApi3_0());
  var _Operation = _interopRequireDefault(require_Operation());
  var _Parameter = _interopRequireDefault(require_Parameter());
  var _PathItem = _interopRequireDefault(require_PathItem());
  var _Paths = _interopRequireDefault(require_Paths());
  var _Reference = _interopRequireDefault(require_Reference2());
  var _RequestBody = _interopRequireDefault(require_RequestBody());
  var _Response = _interopRequireDefault(require_Response());
  var _Responses = _interopRequireDefault(require_Responses());
  var _Schema = _interopRequireDefault(require_Schema2());
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement());
  var _Server = _interopRequireDefault(require_Server());
  var _ServerVariable = _interopRequireDefault(require_ServerVariable());
  var _MediaType = _interopRequireDefault(require_MediaType());
  var isCallbackElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Callback.default || hasBasicElementProps(element) && isElementType("callback", element) && primitiveEq("object", element);
  });
  exports.isCallbackElement = isCallbackElement;
  var isComponentsElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Components.default || hasBasicElementProps(element) && isElementType("components", element) && primitiveEq("object", element);
  });
  exports.isComponentsElement = isComponentsElement;
  var isContactElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Contact.default || hasBasicElementProps(element) && isElementType("contact", element) && primitiveEq("object", element);
  });
  exports.isContactElement = isContactElement;
  var isExampleElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Example.default || hasBasicElementProps(element) && isElementType("example", element) && primitiveEq("object", element);
  });
  exports.isExampleElement = isExampleElement;
  var isExternalDocumentationElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _ExternalDocumentation.default || hasBasicElementProps(element) && isElementType("externalDocumentation", element) && primitiveEq("object", element);
  });
  exports.isExternalDocumentationElement = isExternalDocumentationElement;
  var isHeaderElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Header.default || hasBasicElementProps(element) && isElementType("header", element) && primitiveEq("object", element);
  });
  exports.isHeaderElement = isHeaderElement;
  var isInfoElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Info.default || hasBasicElementProps(element) && isElementType("info", element) && primitiveEq("object", element);
  });
  exports.isInfoElement = isInfoElement;
  var isLicenseElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _License.default || hasBasicElementProps(element) && isElementType("license", element) && primitiveEq("object", element);
  });
  exports.isLicenseElement = isLicenseElement;
  var isLinkElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Link.default || hasBasicElementProps(element) && isElementType("link", element) && primitiveEq("object", element);
  });
  exports.isLinkElement = isLinkElement;
  var isLinkElementExternal = (element) => {
    if (!isLinkElement(element)) {
      return false;
    }
    if (!(0, _apidomCore.isStringElement)(element.operationRef)) {
      return false;
    }
    const value = element.operationRef.toValue();
    return typeof value === "string" && value.length > 0 && !value.startsWith("#");
  };
  exports.isLinkElementExternal = isLinkElementExternal;
  var isOpenapiElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Openapi.default || hasBasicElementProps(element) && isElementType("openapi", element) && primitiveEq("string", element);
  });
  exports.isOpenapiElement = isOpenapiElement;
  var isOpenApi3_0Element = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq,
    hasClass
  }) => {
    return (element) => element instanceof _OpenApi.default || hasBasicElementProps(element) && isElementType("openApi3_0", element) && primitiveEq("object", element) && hasClass("api", element);
  });
  exports.isOpenApi3_0Element = isOpenApi3_0Element;
  var isOperationElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Operation.default || hasBasicElementProps(element) && isElementType("operation", element) && primitiveEq("object", element);
  });
  exports.isOperationElement = isOperationElement;
  var isParameterElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Parameter.default || hasBasicElementProps(element) && isElementType("parameter", element) && primitiveEq("object", element);
  });
  exports.isParameterElement = isParameterElement;
  var isPathItemElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _PathItem.default || hasBasicElementProps(element) && isElementType("pathItem", element) && primitiveEq("object", element);
  });
  exports.isPathItemElement = isPathItemElement;
  var isPathItemElementExternal = (element) => {
    if (!isPathItemElement(element)) {
      return false;
    }
    if (!(0, _apidomCore.isStringElement)(element.$ref)) {
      return false;
    }
    const value = element.$ref.toValue();
    return typeof value === "string" && value.length > 0 && !value.startsWith("#");
  };
  exports.isPathItemElementExternal = isPathItemElementExternal;
  var isPathsElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Paths.default || hasBasicElementProps(element) && isElementType("paths", element) && primitiveEq("object", element);
  });
  exports.isPathsElement = isPathsElement;
  var isReferenceElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Reference.default || hasBasicElementProps(element) && isElementType("reference", element) && primitiveEq("object", element);
  });
  exports.isReferenceElement = isReferenceElement;
  var isReferenceElementExternal = (element) => {
    if (!isReferenceElement(element)) {
      return false;
    }
    if (!(0, _apidomCore.isStringElement)(element.$ref)) {
      return false;
    }
    const value = element.$ref.toValue();
    return typeof value === "string" && value.length > 0 && !value.startsWith("#");
  };
  exports.isReferenceElementExternal = isReferenceElementExternal;
  var isRequestBodyElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _RequestBody.default || hasBasicElementProps(element) && isElementType("requestBody", element) && primitiveEq("object", element);
  });
  exports.isRequestBodyElement = isRequestBodyElement;
  var isResponseElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Response.default || hasBasicElementProps(element) && isElementType("response", element) && primitiveEq("object", element);
  });
  exports.isResponseElement = isResponseElement;
  var isResponsesElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Responses.default || hasBasicElementProps(element) && isElementType("responses", element) && primitiveEq("object", element);
  });
  exports.isResponsesElement = isResponsesElement;
  var isSchemaElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Schema.default || hasBasicElementProps(element) && isElementType("schema", element) && primitiveEq("object", element);
  });
  exports.isSchemaElement = isSchemaElement;
  var isBooleanJsonSchemaElement = (element) => {
    return (0, _apidomCore.isBooleanElement)(element) && element.classes.includes("boolean-json-schema");
  };
  exports.isBooleanJsonSchemaElement = isBooleanJsonSchemaElement;
  var isSecurityRequirementElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _SecurityRequirement.default || hasBasicElementProps(element) && isElementType("securityRequirement", element) && primitiveEq("object", element);
  });
  exports.isSecurityRequirementElement = isSecurityRequirementElement;
  var isServerElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Server.default || hasBasicElementProps(element) && isElementType("server", element) && primitiveEq("object", element);
  });
  exports.isServerElement = isServerElement;
  var isServerVariableElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _ServerVariable.default || hasBasicElementProps(element) && isElementType("serverVariable", element) && primitiveEq("object", element);
  });
  exports.isServerVariableElement = isServerVariableElement;
  var isMediaTypeElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _MediaType.default || hasBasicElementProps(element) && isElementType("mediaType", element) && primitiveEq("object", element);
  });
  exports.isMediaTypeElement = isMediaTypeElement;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/media-type/SchemaVisitor.cjs
var require_SchemaVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var SchemaVisitor = (0, _stampit.default)(_AlternatingVisitor.default, _FallbackVisitor.default, {
    props: {
      alternator: [{
        predicate: _predicates.isReferenceLikeElement,
        specPath: ["document", "objects", "Reference"]
      }, {
        predicate: _ramda.T,
        specPath: ["document", "objects", "Schema"]
      }]
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _AlternatingVisitor.default.compose.methods.enter.call(this, objectElement);
        if ((0, _predicates2.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "schema");
        }
        return result;
      }
    }
  });
  var _default = SchemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/media-type/ExampleVisitor.cjs
var require_ExampleVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExampleVisitor = _FallbackVisitor.default;
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/ExamplesVisitor.cjs
var require_ExamplesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ExamplesVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Example"],
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("examples");
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "example");
        });
        return result;
      }
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/media-type/ExamplesVisitor.cjs
var require_ExamplesVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ExamplesVisitor = _interopRequireDefault(require_ExamplesVisitor());
  var _MediaTypeExamples = _interopRequireDefault(require_MediaTypeExamples());
  var ExamplesVisitor = (0, _stampit.default)(_ExamplesVisitor.default, {
    init() {
      this.element = new _MediaTypeExamples.default;
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/media-type/EncodingVisitor.cjs
var require_EncodingVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _MediaTypeEncoding = _interopRequireDefault(require_MediaTypeEncoding());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var EncodingVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Encoding"])
    },
    init() {
      this.element = new _MediaTypeEncoding.default;
    }
  });
  var _default = EncodingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-requirement/index.cjs
var require_security_requirement = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SecurityRequirementVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["value"])
    },
    init() {
      this.element = new _SecurityRequirement.default;
    }
  });
  var _default = SecurityRequirementVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/SecurityVisitor.cjs
var require_SecurityVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _Security = _interopRequireDefault(require_Security());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SecurityVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _Security.default;
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          if ((0, _apidomCore.isObjectElement)(item)) {
            const element = this.toRefractedElement(["document", "objects", "SecurityRequirement"], item);
            this.element.push(element);
          } else {
            this.element.push(item.clone());
          }
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = SecurityVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/index.cjs
var require_components = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Components = _interopRequireDefault(require_Components());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ComponentsVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Components"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Components.default;
    }
  });
  var _default = ComponentsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/tag/index.cjs
var require_tag = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Tag = _interopRequireDefault(require_Tag2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var TagVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Tag"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Tag.default;
    }
  });
  var _default = TagVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/tag/NameVisitor.cjs
var require_NameVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NameVisitor = _FallbackVisitor.default;
  var _default = NameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/tag/DescriptionVisitor.cjs
var require_DescriptionVisitor6 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/reference/index.cjs
var require_reference = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _Reference = _interopRequireDefault(require_Reference2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ReferenceVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Reference"]),
      canSupportSpecificationExtensions: false
    },
    init() {
      this.element = new _Reference.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isStringElement)(this.element.$ref)) {
          this.element.classes.push("reference-element");
        }
        return result;
      }
    }
  });
  var _default = ReferenceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/reference/$RefVisitor.cjs
var require_$RefVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var $RefVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = $RefVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/index.cjs
var require_parameter = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _Parameter = _interopRequireDefault(require_Parameter());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates8();
  var ParameterVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Parameter"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Parameter.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isObjectElement)(this.element.contentProp)) {
          this.element.contentProp.filter(_predicates.isMediaTypeElement).forEach((mediaTypeElement, key) => {
            mediaTypeElement.setMetaProperty("media-type", key.toValue());
          });
        }
        return result;
      }
    }
  });
  var _default = ParameterVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/NameVisitor.cjs
var require_NameVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NameVisitor = _FallbackVisitor.default;
  var _default = NameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/InVisitor.cjs
var require_InVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var InVisitor = _FallbackVisitor.default;
  var _default = InVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/DescriptionVisitor.cjs
var require_DescriptionVisitor7 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/RequiredVisitor.cjs
var require_RequiredVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var RequiredVisitor = _FallbackVisitor.default;
  var _default = RequiredVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/DeprecatedVisitor.cjs
var require_DeprecatedVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DeprecatedVisitor = _FallbackVisitor.default;
  var _default = DeprecatedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/AllowEmptyValueVisitor.cjs
var require_AllowEmptyValueVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AllowEmptyValueVisitor = _FallbackVisitor.default;
  var _default = AllowEmptyValueVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/StyleVisitor.cjs
var require_StyleVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var StyleVisitor = _FallbackVisitor.default;
  var _default = StyleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/ExplodeVisitor.cjs
var require_ExplodeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExplodeVisitor = _FallbackVisitor.default;
  var _default = ExplodeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/AllowReservedVisitor.cjs
var require_AllowReservedVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AllowReservedVisitor = _FallbackVisitor.default;
  var _default = AllowReservedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/SchemaVisitor.cjs
var require_SchemaVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var SchemaVisitor = (0, _stampit.default)(_AlternatingVisitor.default, _FallbackVisitor.default, {
    props: {
      alternator: [{
        predicate: _predicates.isReferenceLikeElement,
        specPath: ["document", "objects", "Reference"]
      }, {
        predicate: _ramda.T,
        specPath: ["document", "objects", "Schema"]
      }]
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _AlternatingVisitor.default.compose.methods.enter.call(this, objectElement);
        if ((0, _predicates2.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "schema");
        }
        return result;
      }
    }
  });
  var _default = SchemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/index.cjs
var require_header = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Header = _interopRequireDefault(require_Header());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var HeaderVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Header"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Header.default;
    }
  });
  var _default = HeaderVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/DescriptionVisitor.cjs
var require_DescriptionVisitor8 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/RequiredVisitor.cjs
var require_RequiredVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var RequiredVisitor = _FallbackVisitor.default;
  var _default = RequiredVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/DeprecatedVisitor.cjs
var require_DeprecatedVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DeprecatedVisitor = _FallbackVisitor.default;
  var _default = DeprecatedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/AllowEmptyValueVisitor.cjs
var require_AllowEmptyValueVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AllowEmptyValueVisitor = _FallbackVisitor.default;
  var _default = AllowEmptyValueVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/StyleVisitor.cjs
var require_StyleVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var StyleVisitor = _FallbackVisitor.default;
  var _default = StyleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/ExplodeVisitor.cjs
var require_ExplodeVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExplodeVisitor = _FallbackVisitor.default;
  var _default = ExplodeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/AllowReservedVisitor.cjs
var require_AllowReservedVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AllowReservedVisitor = _FallbackVisitor.default;
  var _default = AllowReservedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/SchemaVisitor.cjs
var require_SchemaVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var SchemaVisitor = (0, _stampit.default)(_AlternatingVisitor.default, _FallbackVisitor.default, {
    props: {
      alternator: [{
        predicate: _predicates.isReferenceLikeElement,
        specPath: ["document", "objects", "Reference"]
      }, {
        predicate: _ramda.T,
        specPath: ["document", "objects", "Schema"]
      }]
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _AlternatingVisitor.default.compose.methods.enter.call(this, objectElement);
        if ((0, _predicates2.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "schema");
        }
        return result;
      }
    }
  });
  var _default = SchemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/ExampleVisitor.cjs
var require_ExampleVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExampleVisitor = _FallbackVisitor.default;
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/ExamplesVisitor.cjs
var require_ExamplesVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ExamplesVisitor = _interopRequireDefault(require_ExamplesVisitor());
  var _HeaderExamples = _interopRequireDefault(require_HeaderExamples());
  var ExamplesVisitor = (0, _stampit.default)(_ExamplesVisitor.default, {
    init() {
      this.element = new _HeaderExamples.default;
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/ContentVisitor.cjs
var require_ContentVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ContentVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "MediaType"])
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("content");
    }
  });
  var _default = ContentVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/header/ContentVisitor.cjs
var require_ContentVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ContentVisitor = _interopRequireDefault(require_ContentVisitor());
  var _HeaderContent = _interopRequireDefault(require_HeaderContent());
  var ContentVisitor = (0, _stampit.default)(_ContentVisitor.default, {
    init() {
      this.element = new _HeaderContent.default;
    }
  });
  var _default = ContentVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/index.cjs
var require_schema5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Schema = _interopRequireDefault(require_Schema2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var SchemaVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Schema.default;
    }
  });
  var _default = SchemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/AllOfVisitor.cjs
var require_AllOfVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    allOf: JSONSchemaAllOfVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var AllOfVisitor = (0, _stampit.default)(JSONSchemaAllOfVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        const result = JSONSchemaAllOfVisitor.compose.methods.ArrayElement.call(this, arrayElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = AllOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/AnyOfVisitor.cjs
var require_AnyOfVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    anyOf: JSONSchemaAnyOfVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var AnyOfVisitor = (0, _stampit.default)(JSONSchemaAnyOfVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        const result = JSONSchemaAnyOfVisitor.compose.methods.ArrayElement.call(this, arrayElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = AnyOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/OneOfVisitor.cjs
var require_OneOfVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    oneOf: JSONSchemaOneOfVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var OneOfVisitor = (0, _stampit.default)(JSONSchemaOneOfVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        const result = JSONSchemaOneOfVisitor.compose.methods.ArrayElement.call(this, arrayElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = OneOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/DefinitionsVisitor.cjs
var require_DefinitionsVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    definitions: JSONSchemaDefinitionsVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var DefinitionsVisitor = (0, _stampit.default)(JSONSchemaDefinitionsVisitor, {
    methods: {
      ObjectElement(objectElement) {
        const result = JSONSchemaDefinitionsVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = DefinitionsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/DependenciesVisitor.cjs
var require_DependenciesVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    dependencies: JSONSchemaDependenciesVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var DependenciesVisitor = (0, _stampit.default)(JSONSchemaDependenciesVisitor, {
    methods: {
      ObjectElement(objectElement) {
        const result = JSONSchemaDependenciesVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = DependenciesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/ItemsVisitor.cjs
var require_ItemsVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    items: JSONSchemaItemsVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var ItemsVisitor = (0, _stampit.default)(JSONSchemaItemsVisitor, {
    methods: {
      ObjectElement(objectElement) {
        const result = JSONSchemaItemsVisitor.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _predicates.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "schema");
        }
        return result;
      },
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/PropertiesVisitor.cjs
var require_PropertiesVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    properties: JSONSchemaPropertiesVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var PropertiesVisitor = (0, _stampit.default)(JSONSchemaPropertiesVisitor, {
    methods: {
      ObjectElement(objectElement) {
        const result = JSONSchemaPropertiesVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = PropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/PatternPropertiesVisitor.cjs
var require_PatternPropertiesVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    patternProperties: JSONSchemaPatternPropertiesVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var PatternPropertiesVisitor = (0, _stampit.default)(JSONSchemaPatternPropertiesVisitor, {
    methods: {
      ObjectElement(objectElement) {
        const result = JSONSchemaPatternPropertiesVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = PatternPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/TypeVisitor.cjs
var require_TypeVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var {
    type: JSONSchemaTypeVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields;
  var ItemsVisitor = (0, _stampit.default)(JSONSchemaTypeVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/NullableVisitor.cjs
var require_NullableVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NullableVisitor = _FallbackVisitor.default;
  var _default = NullableVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/WriteOnlyVisitor.cjs
var require_WriteOnlyVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var WriteOnlyVisitor = _FallbackVisitor.default;
  var _default = WriteOnlyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/ExampleVisitor.cjs
var require_ExampleVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExampleVisitor = _FallbackVisitor.default;
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/DeprecatedVisitor.cjs
var require_DeprecatedVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DeprecatedVisitor = _FallbackVisitor.default;
  var _default = DeprecatedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/SchemaOrReferenceVisitor.cjs
var require_SchemaOrReferenceVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _predicates = require_predicates8();
  var {
    JSONSchemaOrJSONReferenceVisitor
  } = _apidomNsJsonSchemaDraft.specificationObj.visitors;
  var SchemaOrReferenceVisitor = (0, _stampit.default)(JSONSchemaOrJSONReferenceVisitor, {
    methods: {
      ObjectElement(objectElement) {
        const result = JSONSchemaOrJSONReferenceVisitor.compose.methods.enter.call(this, objectElement);
        if ((0, _predicates.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "schema");
        }
        return result;
      }
    }
  });
  var _default = SchemaOrReferenceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/schema/inherited-fixed-fields.cjs
var require_inherited_fixed_fields = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _SchemaOrReferenceVisitor = _interopRequireDefault(require_SchemaOrReferenceVisitor());
  var inheritedFixedFields = Object.fromEntries(Object.entries(_apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.JSONSchema.fixedFields).map(([fieldName, visitor2]) => {
    if (visitor2 === _apidomNsJsonSchemaDraft.specificationObj.visitors.JSONSchemaOrJSONReferenceVisitor) {
      return [fieldName, _SchemaOrReferenceVisitor.default];
    }
    return [fieldName, visitor2];
  }));
  var _default = inheritedFixedFields;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/distriminator/index.cjs
var require_distriminator = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Discriminator = _interopRequireDefault(require_Discriminator());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var DiscriminatorVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Discriminator"]),
      canSupportSpecificationExtensions: false
    },
    init() {
      this.element = new _Discriminator.default;
    }
  });
  var _default = DiscriminatorVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/distriminator/PropertyNameVisitor.cjs
var require_PropertyNameVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var PropertyNameVisitor = _FallbackVisitor.default;
  var _default = PropertyNameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/distriminator/MappingVisitor.cjs
var require_MappingVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _DiscriminatorMapping = _interopRequireDefault(require_DiscriminatorMapping());
  var MappingVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["value"])
    },
    init() {
      this.element = new _DiscriminatorMapping.default;
    }
  });
  var _default = MappingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/xml/index.cjs
var require_xml = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Xml = _interopRequireDefault(require_Xml());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var XmlVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "XML"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Xml.default;
    }
  });
  var _default = XmlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/xml/NameVisitor.cjs
var require_NameVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NameVisitor = _FallbackVisitor.default;
  var _default = NameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/xml/NamespaceVisitor.cjs
var require_NamespaceVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NamespaceVisitor = _FallbackVisitor.default;
  var _default = NamespaceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/xml/PrefixVisitor.cjs
var require_PrefixVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var PrefixVisitor = _FallbackVisitor.default;
  var _default = PrefixVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/xml/AttributeVisitor.cjs
var require_AttributeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AttributeVisitor = _FallbackVisitor.default;
  var _default = AttributeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/xml/WrappedVisitor.cjs
var require_WrappedVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var WrappedVisitor = _FallbackVisitor.default;
  var _default = WrappedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/ExampleVisitor.cjs
var require_ExampleVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExampleVisitor = _FallbackVisitor.default;
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/ExamplesVisitor.cjs
var require_ExamplesVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ExamplesVisitor = _interopRequireDefault(require_ExamplesVisitor());
  var _ParameterExamples = _interopRequireDefault(require_ParameterExamples());
  var ExamplesVisitor = (0, _stampit.default)(_ExamplesVisitor.default, {
    init() {
      this.element = new _ParameterExamples.default;
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/parameter/ContentVisitor.cjs
var require_ContentVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ContentVisitor = _interopRequireDefault(require_ContentVisitor());
  var _ParameterContent = _interopRequireDefault(require_ParameterContent());
  var ExamplesVisitor = (0, _stampit.default)(_ContentVisitor.default, {
    init() {
      this.element = new _ParameterContent.default;
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/SchemasVisitor.cjs
var require_SchemasVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsSchemas = _interopRequireDefault(require_ComponentsSchemas());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var SchemasVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Schema"];
      }
    },
    init() {
      this.element = new _ComponentsSchemas.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "schema");
        });
        return result;
      }
    }
  });
  var _default = SchemasVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/ResponsesVisitor.cjs
var require_ResponsesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsResponses = _interopRequireDefault(require_ComponentsResponses());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ResponsesVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Response"];
      }
    },
    init() {
      this.element = new _ComponentsResponses.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "response");
        });
        this.element.filter(_predicates2.isResponseElement).forEach((value, key) => {
          value.setMetaProperty("http-status-code", key.toValue());
        });
        return result;
      }
    }
  });
  var _default = ResponsesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/ParametersVisitor.cjs
var require_ParametersVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsParameters = _interopRequireDefault(require_ComponentsParameters());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ParametersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Parameter"];
      }
    },
    init() {
      this.element = new _ComponentsParameters.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "parameter");
        });
        return result;
      }
    }
  });
  var _default = ParametersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/ExamplesVisitor.cjs
var require_ExamplesVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsExamples = _interopRequireDefault(require_ComponentsExamples());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ExamplesVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Example"];
      }
    },
    init() {
      this.element = new _ComponentsExamples.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "example");
        });
        return result;
      }
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/RequestBodiesVisitor.cjs
var require_RequestBodiesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsRequestBodies = _interopRequireDefault(require_ComponentsRequestBodies());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var RequestBodiesVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "RequestBody"];
      }
    },
    init() {
      this.element = new _ComponentsRequestBodies.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "requestBody");
        });
        return result;
      }
    }
  });
  var _default = RequestBodiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/HeadersVisitor.cjs
var require_HeadersVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsHeaders = _interopRequireDefault(require_ComponentsHeaders());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var HeadersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Header"];
      }
    },
    init() {
      this.element = new _ComponentsHeaders.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "header");
        });
        this.element.filter(_predicates2.isHeaderElement).forEach((value, key) => {
          value.setMetaProperty("header-name", key.toValue());
        });
        return result;
      }
    }
  });
  var _default = HeadersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/SecuritySchemesVisitor.cjs
var require_SecuritySchemesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsSecuritySchemes = _interopRequireDefault(require_ComponentsSecuritySchemes());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ParametersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "SecurityScheme"];
      }
    },
    init() {
      this.element = new _ComponentsSecuritySchemes.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "securityScheme");
        });
        return result;
      }
    }
  });
  var _default = ParametersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/LinksVisitor.cjs
var require_LinksVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsLinks = _interopRequireDefault(require_ComponentsLinks());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var LinksVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Link"];
      }
    },
    init() {
      this.element = new _ComponentsLinks.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "link");
        });
        return result;
      }
    }
  });
  var _default = LinksVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/components/CallbacksVisitor.cjs
var require_CallbacksVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ComponentsCallbacks = _interopRequireDefault(require_ComponentsCallbacks());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var CallbacksElement = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Callback"];
      }
    },
    init() {
      this.element = new _ComponentsCallbacks.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "callback");
        });
        return result;
      }
    }
  });
  var _default = CallbacksElement;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/example/index.cjs
var require_example = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _Example = _interopRequireDefault(require_Example());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var ExampleVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Example"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Example.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isStringElement)(this.element.externalValue)) {
          this.element.classes.push("reference-element");
        }
        return result;
      }
    }
  });
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/example/SummaryVisitor.cjs
var require_SummaryVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SummaryVisitor = _FallbackVisitor.default;
  var _default = SummaryVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/example/DescriptionVisitor.cjs
var require_DescriptionVisitor9 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/example/ValueVisitor.cjs
var require_ValueVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ValueVisitor = _FallbackVisitor.default;
  var _default = ValueVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/example/ExternalValueVisitor.cjs
var require_ExternalValueVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExternalValueVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ExternalValueVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/external-documentation/index.cjs
var require_external_documentation = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExternalDocumentationVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "ExternalDocumentation"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _ExternalDocumentation.default;
    }
  });
  var _default = ExternalDocumentationVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/external-documentation/DescriptionVisitor.cjs
var require_DescriptionVisitor10 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/external-documentation/UrlVisitor.cjs
var require_UrlVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var UrlVisitor = _FallbackVisitor.default;
  var _default = UrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/encoding/index.cjs
var require_encoding2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _Encoding = _interopRequireDefault(require_Encoding());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _predicates = require_predicates8();
  var EncodingVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Encoding"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Encoding.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isObjectElement)(this.element.headers)) {
          this.element.headers.filter(_predicates.isHeaderElement).forEach((headerElement, key) => {
            headerElement.setMetaProperty("header-name", key.toValue());
          });
        }
        return result;
      }
    }
  });
  var _default = EncodingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/encoding/ContentTypeVisitor.cjs
var require_ContentTypeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ContentTypeVisitor = _FallbackVisitor.default;
  var _default = ContentTypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/encoding/HeadersVisitor.cjs
var require_HeadersVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var _EncodingHeaders = _interopRequireDefault(require_EncodingHeaders());
  var HeadersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Header"]
    },
    init() {
      this.element = new _EncodingHeaders.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "header");
        });
        this.element.forEach((value, key) => {
          if (!(0, _predicates2.isHeaderElement)(value))
            return;
          const headerName = key.toValue();
          value.setMetaProperty("headerName", headerName);
        });
        return result;
      }
    }
  });
  var _default = HeadersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/encoding/StyleVisitor.cjs
var require_StyleVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var StyleVisitor = _FallbackVisitor.default;
  var _default = StyleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/encoding/ExplodeVisitor.cjs
var require_ExplodeVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var ExplodeVisitor = _FallbackVisitor.default;
  var _default = ExplodeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/encoding/AllowReservedVisitor.cjs
var require_AllowReservedVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AllowReservedVisitor = _FallbackVisitor.default;
  var _default = AllowReservedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/paths/index.cjs
var require_paths3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Paths = _interopRequireDefault(require_Paths());
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates8();
  var PathsVisitor = (0, _stampit.default)(_PatternedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      fieldPatternPredicate: (0, _ramda.test)(/^\/(?<path>.*)$/),
      specPath: (0, _ramda.always)(["document", "objects", "PathItem"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Paths.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _PatternedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isPathItemElement).forEach((pathItemElement, key) => {
          pathItemElement.setMetaProperty("path", key.clone());
        });
        return result;
      }
    }
  });
  var _default = PathsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/request-body/index.cjs
var require_request_body = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _RequestBody = _interopRequireDefault(require_RequestBody());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates8();
  var RequestBodyVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "RequestBody"])
    },
    init() {
      this.element = new _RequestBody.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isObjectElement)(this.element.contentProp)) {
          this.element.contentProp.filter(_predicates.isMediaTypeElement).forEach((mediaTypeElement, key) => {
            mediaTypeElement.setMetaProperty("media-type", key.toValue());
          });
        }
        return result;
      }
    }
  });
  var _default = RequestBodyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/request-body/DescriptionVisitor.cjs
var require_DescriptionVisitor11 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/request-body/ContentVisitor.cjs
var require_ContentVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _RequestBodyContent = _interopRequireDefault(require_RequestBodyContent());
  var _ContentVisitor = _interopRequireDefault(require_ContentVisitor());
  var ContentVisitor = (0, _stampit.default)(_ContentVisitor.default, {
    init() {
      this.element = new _RequestBodyContent.default;
    }
  });
  var _default = ContentVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/request-body/RequiredVisitor.cjs
var require_RequiredVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var RequiredVisitor = _FallbackVisitor.default;
  var _default = RequiredVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/callback/index.cjs
var require_callback = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Callback = _interopRequireDefault(require_Callback());
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _predicates = require_predicates8();
  var CallbackVisitor = (0, _stampit.default)(_PatternedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      fieldPatternPredicate: (0, _ramda.test)(/{(?<expression>.*)}/),
      specPath: (0, _ramda.always)(["document", "objects", "PathItem"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Callback.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isPathItemElement).forEach((pathItemElement, key) => {
          pathItemElement.setMetaProperty("runtime-expression", key.toValue());
        });
        return result;
      }
    }
  });
  var _default = CallbackVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/response/index.cjs
var require_response2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _Response = _interopRequireDefault(require_Response());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates8();
  var ResponseVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Response"])
    },
    init() {
      this.element = new _Response.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isObjectElement)(this.element.contentProp)) {
          this.element.contentProp.filter(_predicates.isMediaTypeElement).forEach((mediaTypeElement, key) => {
            mediaTypeElement.setMetaProperty("media-type", key.toValue());
          });
        }
        if ((0, _apidomCore.isObjectElement)(this.element.headers)) {
          this.element.headers.filter(_predicates.isHeaderElement).forEach((headerElement, key) => {
            headerElement.setMetaProperty("header-name", key.toValue());
          });
        }
        return result;
      }
    }
  });
  var _default = ResponseVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/response/DescriptionVisitor.cjs
var require_DescriptionVisitor12 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/response/HeadersVisitor.cjs
var require_HeadersVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ResponseHeaders = _interopRequireDefault(require_ResponseHeaders());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var HeadersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Header"];
      }
    },
    init() {
      this.element = new _ResponseHeaders.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "header");
        });
        this.element.forEach((value, key) => {
          if (!(0, _predicates2.isHeaderElement)(value))
            return;
          const headerName = key.toValue();
          value.setMetaProperty("header-name", headerName);
        });
        return result;
      }
    }
  });
  var _default = HeadersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/response/ContentVisitor.cjs
var require_ContentVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ResponseContent = _interopRequireDefault(require_ResponseContent());
  var _ContentVisitor = _interopRequireDefault(require_ContentVisitor());
  var ContentVisitor = (0, _stampit.default)(_ContentVisitor.default, {
    init() {
      this.element = new _ResponseContent.default;
    }
  });
  var _default = ContentVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/response/LinksVisitor.cjs
var require_LinksVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ResponseLinks = _interopRequireDefault(require_ResponseLinks());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var HeadersVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Link"];
      }
    },
    init() {
      this.element = new _ResponseLinks.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "link");
        });
        return result;
      }
    }
  });
  var _default = HeadersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/generics/MixedFieldsVisitor.cjs
var require_MixedFieldsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor2());
  var MixedFieldsVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _PatternedFieldsVisitor.default, {
    props: {
      specPathFixedFields: _ramdaAdjunct.noop,
      specPathPatternedFields: _ramdaAdjunct.noop
    },
    methods: {
      ObjectElement(objectElement) {
        const {
          specPath,
          ignoredFields
        } = this;
        try {
          this.specPath = this.specPathFixedFields;
          const fixedFields = this.retrieveFixedFields(this.specPath(objectElement));
          this.ignoredFields = [...ignoredFields, ...(0, _ramda.difference)(objectElement.keys(), fixedFields)];
          _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
          this.specPath = this.specPathPatternedFields;
          this.ignoredFields = fixedFields;
          _PatternedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        } catch (e) {
          this.specPath = specPath;
          throw e;
        }
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = MixedFieldsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/responses/index.cjs
var require_responses = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Responses = _interopRequireDefault(require_Responses());
  var _MixedFieldsVisitor = _interopRequireDefault(require_MixedFieldsVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ResponsesVisitor = (0, _stampit.default)(_MixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPathFixedFields: (0, _ramda.always)(["document", "objects", "Responses"]),
      specPathPatternedFields: (element) => {
        return (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Response"];
      },
      fieldPatternPredicate: (0, _ramda.test)(new RegExp(`^(1XX|2XX|3XX|4XX|5XX|${(0, _ramda.range)(100, 600).join("|")})\$`)),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Responses.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "response");
        });
        this.element.filter(_predicates2.isResponseElement).forEach((value, key) => {
          const httpStatusCode = key.clone();
          if (!this.fieldPatternPredicate(httpStatusCode.toValue()))
            return;
          value.setMetaProperty("http-status-code", httpStatusCode);
        });
        return result;
      }
    }
  });
  var _default = ResponsesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/responses/DefaultVisitor.cjs
var require_DefaultVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DefaultVisitor = (0, _stampit.default)(_AlternatingVisitor.default, _FallbackVisitor.default, {
    props: {
      alternator: [{
        predicate: _predicates.isReferenceLikeElement,
        specPath: ["document", "objects", "Reference"]
      }, {
        predicate: _ramda.T,
        specPath: ["document", "objects", "Response"]
      }]
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _AlternatingVisitor.default.compose.methods.enter.call(this, objectElement);
        if ((0, _predicates2.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "response");
        } else if ((0, _predicates2.isResponseElement)(this.element)) {
          this.element.setMetaProperty("http-status-code", "default");
        }
        return result;
      }
    }
  });
  var _default = DefaultVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/index.cjs
var require_operation = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _Operation = _interopRequireDefault(require_Operation());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var OperationVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Operation"])
    },
    init() {
      this.element = new _Operation.default;
    }
  });
  var _default = OperationVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/TagsVisitor.cjs
var require_TagsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _OperationTags = _interopRequireDefault(require_OperationTags());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var TagsVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    init() {
      this.element = new _OperationTags.default;
    },
    methods: {
      ArrayElement(arrayElement) {
        this.element = this.element.concat(arrayElement.clone());
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = TagsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/SummaryVisitor.cjs
var require_SummaryVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SummaryVisitor = _FallbackVisitor.default;
  var _default = SummaryVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/DescriptionVisitor.cjs
var require_DescriptionVisitor13 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/OperationIdVisitor.cjs
var require_OperationIdVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var OperationIdVisitor = _FallbackVisitor.default;
  var _default = OperationIdVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/ParametersVisitor.cjs
var require_ParametersVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var ParametersVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("parameters");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isReferenceLikeElement)(item) ? ["document", "objects", "Reference"] : ["document", "objects", "Parameter"];
          const element = this.toRefractedElement(specPath, item);
          if ((0, _predicates2.isReferenceElement)(element)) {
            element.setMetaProperty("referenced-element", "parameter");
          }
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ParametersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/ParametersVisitor.cjs
var require_ParametersVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _OperationParameters = _interopRequireDefault(require_OperationParameters());
  var _ParametersVisitor = _interopRequireDefault(require_ParametersVisitor3());
  var ParametersVisitor = (0, _stampit.default)(_ParametersVisitor.default, {
    init() {
      this.element = new _OperationParameters.default;
    }
  });
  var _default = ParametersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/RequestBodyVisitor.cjs
var require_RequestBodyVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _predicates = require_predicates8();
  var _predicates2 = require_predicates7();
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor2());
  var RequestBodyVisitor = (0, _stampit.default)(_AlternatingVisitor.default, {
    props: {
      alternator: [{
        predicate: _predicates2.isReferenceLikeElement,
        specPath: ["document", "objects", "Reference"]
      }, {
        predicate: _ramda.T,
        specPath: ["document", "objects", "RequestBody"]
      }]
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _AlternatingVisitor.default.compose.methods.enter.call(this, objectElement);
        if ((0, _predicates.isReferenceElement)(this.element)) {
          this.element.setMetaProperty("referenced-element", "requestBody");
        }
        return result;
      }
    }
  });
  var _default = RequestBodyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/CallbacksVisitor.cjs
var require_CallbacksVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _predicates = require_predicates7();
  var _predicates2 = require_predicates8();
  var _OperationCallbacks = _interopRequireDefault(require_OperationCallbacks());
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var CallbacksVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (element) => (0, _predicates.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "Callback"]
    },
    init() {
      this.element = new _OperationCallbacks.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _MapVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates2.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "callback");
        });
        return result;
      }
    }
  });
  var _default = CallbacksVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/DeprecatedVisitor.cjs
var require_DeprecatedVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DeprecatedVisitor = _FallbackVisitor.default;
  var _default = DeprecatedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/SecurityVisitor.cjs
var require_SecurityVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _OperationSecurity = _interopRequireDefault(require_OperationSecurity());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SecurityVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _OperationSecurity.default;
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _apidomCore.isObjectElement)(item) ? ["document", "objects", "SecurityRequirement"] : ["value"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = SecurityVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/operation/ServersVisitor.cjs
var require_ServersVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _OperationServers = _interopRequireDefault(require_OperationServers());
  var _ServersVisitor = _interopRequireDefault(require_ServersVisitor());
  var ServersVisitor = (0, _stampit.default)(_ServersVisitor.default, {
    init() {
      this.element = new _OperationServers.default;
    }
  });
  var _default = ServersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/path-item/index.cjs
var require_path_item = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _PathItem = _interopRequireDefault(require_PathItem());
  var _predicates = require_predicates8();
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var PathItemVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "PathItem"])
    },
    init() {
      this.element = new _PathItem.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _FixedFieldsVisitor.default.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isOperationElement).forEach((operationElement, httpMethodElementCI) => {
          const httpMethodElementCS = httpMethodElementCI.clone();
          httpMethodElementCS.content = httpMethodElementCS.toValue().toUpperCase();
          operationElement.setMetaProperty("http-method", httpMethodElementCS);
        });
        if ((0, _apidomCore.isStringElement)(this.element.$ref)) {
          this.element.classes.push("reference-element");
        }
        return result;
      }
    }
  });
  var _default = PathItemVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/path-item/$RefVisitor.cjs
var require_$RefVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var $RefVisitor = (0, _stampit.default)(_FallbackVisitor.default, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = $RefVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/path-item/SummaryVisitor.cjs
var require_SummaryVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SummaryVisitor = _FallbackVisitor.default;
  var _default = SummaryVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/path-item/DescriptionVisitor.cjs
var require_DescriptionVisitor14 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/path-item/ServersVisitor.cjs
var require_ServersVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _PathItemServers = _interopRequireDefault(require_PathItemServers());
  var _ServersVisitor = _interopRequireDefault(require_ServersVisitor());
  var ServersVisitor = (0, _stampit.default)(_ServersVisitor.default, {
    init() {
      this.element = new _PathItemServers.default;
    }
  });
  var _default = ServersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/path-item/ParametersVisitor.cjs
var require_ParametersVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _PathItemParameters = _interopRequireDefault(require_PathItemParameters());
  var _ParametersVisitor = _interopRequireDefault(require_ParametersVisitor3());
  var ParametersVisitor = (0, _stampit.default)(_ParametersVisitor.default, {
    init() {
      this.element = new _PathItemParameters.default;
    }
  });
  var _default = ParametersVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/index.cjs
var require_security_scheme = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var SecuritySchemeVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "SecurityScheme"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _SecurityScheme.default;
    }
  });
  var _default = SecuritySchemeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/TypeVisitor.cjs
var require_TypeVisitor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var TypeVisitor = _FallbackVisitor.default;
  var _default = TypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/DescriptionVisitor.cjs
var require_DescriptionVisitor15 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var DescriptionVisitor = _FallbackVisitor.default;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/NameVisitor.cjs
var require_NameVisitor6 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var NameVisitor = _FallbackVisitor.default;
  var _default = NameVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/InVisitor.cjs
var require_InVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var InVisitor = _FallbackVisitor.default;
  var _default = InVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/SchemeVisitor.cjs
var require_SchemeVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var SchemeVisitor = _FallbackVisitor.default;
  var _default = SchemeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/BearerFormatVisitor.cjs
var require_BearerFormatVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var BearerFormatVisitor = _FallbackVisitor.default;
  var _default = BearerFormatVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/security-scheme/OpenIdConnectUrlVisitor.cjs
var require_OpenIdConnectUrlVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var OpenIdConnectUrlVisitor = _FallbackVisitor.default;
  var _default = OpenIdConnectUrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/oauth-flows/index.cjs
var require_oauth_flows = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var OAuthFlowsVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "OAuthFlows"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _OAuthFlows.default;
    }
  });
  var _default = OAuthFlowsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/oauth-flow/index.cjs
var require_oauth_flow = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  var OAuthFlowVisitor = (0, _stampit.default)(_FixedFieldsVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "OAuthFlow"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _OAuthFlow.default;
    }
  });
  var _default = OAuthFlowVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/oauth-flow/AuthorizationUrlVisitor.cjs
var require_AuthorizationUrlVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var AuthorizationUrlVisitor = _FallbackVisitor.default;
  var _default = AuthorizationUrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/oauth-flow/TokenUrlVisitor.cjs
var require_TokenUrlVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var TokenUrlVisitor = _FallbackVisitor.default;
  var _default = TokenUrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/oauth-flow/RefreshUrlVisitor.cjs
var require_RefreshUrlVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var RefreshUrlVisitor = _FallbackVisitor.default;
  var _default = RefreshUrlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/oauth-flow/ScopesVisitor.cjs
var require_ScopesVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _OAuthFlowScopes = _interopRequireDefault(require_OAuthFlowScopes());
  var ScopesVisitor = (0, _stampit.default)(_MapVisitor.default, _FallbackVisitor.default, {
    props: {
      specPath: (0, _ramda.always)(["value"])
    },
    init() {
      this.element = new _OAuthFlowScopes.default;
    }
  });
  var _default = ScopesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/visitors/open-api-3-0/TagsVisitor.cjs
var require_TagsVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _Tags = _interopRequireDefault(require_Tags());
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _predicates = require_predicates7();
  var TagsVisitor = (0, _stampit.default)(_SpecificationVisitor.default, _FallbackVisitor.default, {
    init() {
      this.element = new _Tags.default;
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          const specPath = (0, _predicates.isTagLikeElement)(item) ? ["document", "objects", "Tag"] : ["value"];
          const element = this.toRefractedElement(specPath, item);
          this.element.push(element);
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = TagsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/specification.cjs
var require_specification2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsJsonSchemaDraft = require_cjs7();
  var _index = _interopRequireDefault(require_open_api_3_0());
  var _OpenapiVisitor = _interopRequireDefault(require_OpenapiVisitor());
  var _SpecificationExtensionVisitor = _interopRequireDefault(require_SpecificationExtensionVisitor());
  var _index2 = _interopRequireDefault(require_info());
  var _TitleVisitor = _interopRequireDefault(require_TitleVisitor3());
  var _DescriptionVisitor = _interopRequireDefault(require_DescriptionVisitor2());
  var _TermsOfServiceVisitor = _interopRequireDefault(require_TermsOfServiceVisitor());
  var _VersionVisitor = _interopRequireDefault(require_VersionVisitor());
  var _index3 = _interopRequireDefault(require_contact());
  var _NameVisitor = _interopRequireDefault(require_NameVisitor());
  var _UrlVisitor = _interopRequireDefault(require_UrlVisitor());
  var _EmailVisitor = _interopRequireDefault(require_EmailVisitor());
  var _index4 = _interopRequireDefault(require_license());
  var _NameVisitor2 = _interopRequireDefault(require_NameVisitor2());
  var _UrlVisitor2 = _interopRequireDefault(require_UrlVisitor2());
  var _index5 = _interopRequireDefault(require_link());
  var _OperationRefVisitor = _interopRequireDefault(require_OperationRefVisitor());
  var _OperationIdVisitor = _interopRequireDefault(require_OperationIdVisitor());
  var _ParametersVisitor = _interopRequireDefault(require_ParametersVisitor());
  var _RequestBodyVisitor = _interopRequireDefault(require_RequestBodyVisitor());
  var _DescriptionVisitor2 = _interopRequireDefault(require_DescriptionVisitor3());
  var _index6 = _interopRequireDefault(require_server());
  var _UrlVisitor3 = _interopRequireDefault(require_UrlVisitor3());
  var _DescriptionVisitor3 = _interopRequireDefault(require_DescriptionVisitor4());
  var _ServersVisitor = _interopRequireDefault(require_ServersVisitor());
  var _index7 = _interopRequireDefault(require_server_variable());
  var _EnumVisitor = _interopRequireDefault(require_EnumVisitor2());
  var _DefaultVisitor = _interopRequireDefault(require_DefaultVisitor2());
  var _DescriptionVisitor4 = _interopRequireDefault(require_DescriptionVisitor5());
  var _VariablesVisitor = _interopRequireDefault(require_VariablesVisitor());
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  var _index8 = _interopRequireDefault(require_media_type());
  var _SchemaVisitor = _interopRequireDefault(require_SchemaVisitor());
  var _ExampleVisitor = _interopRequireDefault(require_ExampleVisitor());
  var _ExamplesVisitor = _interopRequireDefault(require_ExamplesVisitor2());
  var _EncodingVisitor = _interopRequireDefault(require_EncodingVisitor());
  var _index9 = _interopRequireDefault(require_security_requirement());
  var _SecurityVisitor = _interopRequireDefault(require_SecurityVisitor());
  var _index10 = _interopRequireDefault(require_components());
  var _index11 = _interopRequireDefault(require_tag());
  var _NameVisitor3 = _interopRequireDefault(require_NameVisitor3());
  var _DescriptionVisitor5 = _interopRequireDefault(require_DescriptionVisitor6());
  var _index12 = _interopRequireDefault(require_reference());
  var _$RefVisitor = _interopRequireDefault(require_$RefVisitor2());
  var _index13 = _interopRequireDefault(require_parameter());
  var _NameVisitor4 = _interopRequireDefault(require_NameVisitor4());
  var _InVisitor = _interopRequireDefault(require_InVisitor());
  var _DescriptionVisitor6 = _interopRequireDefault(require_DescriptionVisitor7());
  var _RequiredVisitor = _interopRequireDefault(require_RequiredVisitor2());
  var _DeprecatedVisitor = _interopRequireDefault(require_DeprecatedVisitor());
  var _AllowEmptyValueVisitor = _interopRequireDefault(require_AllowEmptyValueVisitor());
  var _StyleVisitor = _interopRequireDefault(require_StyleVisitor());
  var _ExplodeVisitor = _interopRequireDefault(require_ExplodeVisitor());
  var _AllowReservedVisitor = _interopRequireDefault(require_AllowReservedVisitor());
  var _SchemaVisitor2 = _interopRequireDefault(require_SchemaVisitor2());
  var _index14 = _interopRequireDefault(require_header());
  var _DescriptionVisitor7 = _interopRequireDefault(require_DescriptionVisitor8());
  var _RequiredVisitor2 = _interopRequireDefault(require_RequiredVisitor3());
  var _DeprecatedVisitor2 = _interopRequireDefault(require_DeprecatedVisitor2());
  var _AllowEmptyValueVisitor2 = _interopRequireDefault(require_AllowEmptyValueVisitor2());
  var _StyleVisitor2 = _interopRequireDefault(require_StyleVisitor2());
  var _ExplodeVisitor2 = _interopRequireDefault(require_ExplodeVisitor2());
  var _AllowReservedVisitor2 = _interopRequireDefault(require_AllowReservedVisitor2());
  var _SchemaVisitor3 = _interopRequireDefault(require_SchemaVisitor3());
  var _ExampleVisitor2 = _interopRequireDefault(require_ExampleVisitor2());
  var _ExamplesVisitor2 = _interopRequireDefault(require_ExamplesVisitor3());
  var _ContentVisitor = _interopRequireDefault(require_ContentVisitor2());
  var _index15 = _interopRequireDefault(require_schema5());
  var _AllOfVisitor = _interopRequireDefault(require_AllOfVisitor2());
  var _AnyOfVisitor = _interopRequireDefault(require_AnyOfVisitor2());
  var _OneOfVisitor = _interopRequireDefault(require_OneOfVisitor2());
  var _DefinitionsVisitor = _interopRequireDefault(require_DefinitionsVisitor2());
  var _DependenciesVisitor = _interopRequireDefault(require_DependenciesVisitor2());
  var _ItemsVisitor = _interopRequireDefault(require_ItemsVisitor2());
  var _PropertiesVisitor = _interopRequireDefault(require_PropertiesVisitor2());
  var _PatternPropertiesVisitor = _interopRequireDefault(require_PatternPropertiesVisitor2());
  var _TypeVisitor = _interopRequireDefault(require_TypeVisitor3());
  var _NullableVisitor = _interopRequireDefault(require_NullableVisitor());
  var _WriteOnlyVisitor = _interopRequireDefault(require_WriteOnlyVisitor());
  var _ExampleVisitor3 = _interopRequireDefault(require_ExampleVisitor3());
  var _DeprecatedVisitor3 = _interopRequireDefault(require_DeprecatedVisitor3());
  var _inheritedFixedFields = _interopRequireDefault(require_inherited_fixed_fields());
  var _index16 = _interopRequireDefault(require_distriminator());
  var _PropertyNameVisitor = _interopRequireDefault(require_PropertyNameVisitor());
  var _MappingVisitor = _interopRequireDefault(require_MappingVisitor());
  var _index17 = _interopRequireDefault(require_xml());
  var _NameVisitor5 = _interopRequireDefault(require_NameVisitor5());
  var _NamespaceVisitor = _interopRequireDefault(require_NamespaceVisitor());
  var _PrefixVisitor = _interopRequireDefault(require_PrefixVisitor());
  var _AttributeVisitor = _interopRequireDefault(require_AttributeVisitor());
  var _WrappedVisitor = _interopRequireDefault(require_WrappedVisitor());
  var _ExampleVisitor4 = _interopRequireDefault(require_ExampleVisitor4());
  var _ExamplesVisitor3 = _interopRequireDefault(require_ExamplesVisitor4());
  var _ContentVisitor2 = _interopRequireDefault(require_ContentVisitor3());
  var _SchemasVisitor = _interopRequireDefault(require_SchemasVisitor());
  var _ResponsesVisitor = _interopRequireDefault(require_ResponsesVisitor());
  var _ParametersVisitor2 = _interopRequireDefault(require_ParametersVisitor2());
  var _ExamplesVisitor4 = _interopRequireDefault(require_ExamplesVisitor5());
  var _RequestBodiesVisitor = _interopRequireDefault(require_RequestBodiesVisitor());
  var _HeadersVisitor = _interopRequireDefault(require_HeadersVisitor());
  var _SecuritySchemesVisitor = _interopRequireDefault(require_SecuritySchemesVisitor());
  var _LinksVisitor = _interopRequireDefault(require_LinksVisitor2());
  var _CallbacksVisitor = _interopRequireDefault(require_CallbacksVisitor());
  var _index18 = _interopRequireDefault(require_example());
  var _SummaryVisitor = _interopRequireDefault(require_SummaryVisitor());
  var _DescriptionVisitor8 = _interopRequireDefault(require_DescriptionVisitor9());
  var _ValueVisitor = _interopRequireDefault(require_ValueVisitor());
  var _ExternalValueVisitor = _interopRequireDefault(require_ExternalValueVisitor());
  var _index19 = _interopRequireDefault(require_external_documentation());
  var _DescriptionVisitor9 = _interopRequireDefault(require_DescriptionVisitor10());
  var _UrlVisitor4 = _interopRequireDefault(require_UrlVisitor4());
  var _index20 = _interopRequireDefault(require_encoding2());
  var _ContentTypeVisitor = _interopRequireDefault(require_ContentTypeVisitor());
  var _HeadersVisitor2 = _interopRequireDefault(require_HeadersVisitor2());
  var _StyleVisitor3 = _interopRequireDefault(require_StyleVisitor3());
  var _ExplodeVisitor3 = _interopRequireDefault(require_ExplodeVisitor3());
  var _AllowReservedVisitor3 = _interopRequireDefault(require_AllowReservedVisitor3());
  var _index21 = _interopRequireDefault(require_paths3());
  var _index22 = _interopRequireDefault(require_request_body());
  var _DescriptionVisitor10 = _interopRequireDefault(require_DescriptionVisitor11());
  var _ContentVisitor3 = _interopRequireDefault(require_ContentVisitor4());
  var _RequiredVisitor3 = _interopRequireDefault(require_RequiredVisitor4());
  var _index23 = _interopRequireDefault(require_callback());
  var _index24 = _interopRequireDefault(require_response2());
  var _DescriptionVisitor11 = _interopRequireDefault(require_DescriptionVisitor12());
  var _HeadersVisitor3 = _interopRequireDefault(require_HeadersVisitor3());
  var _ContentVisitor4 = _interopRequireDefault(require_ContentVisitor5());
  var _LinksVisitor2 = _interopRequireDefault(require_LinksVisitor3());
  var _index25 = _interopRequireDefault(require_responses());
  var _DefaultVisitor2 = _interopRequireDefault(require_DefaultVisitor3());
  var _index26 = _interopRequireDefault(require_operation());
  var _TagsVisitor = _interopRequireDefault(require_TagsVisitor());
  var _SummaryVisitor2 = _interopRequireDefault(require_SummaryVisitor2());
  var _DescriptionVisitor12 = _interopRequireDefault(require_DescriptionVisitor13());
  var _OperationIdVisitor2 = _interopRequireDefault(require_OperationIdVisitor2());
  var _ParametersVisitor3 = _interopRequireDefault(require_ParametersVisitor4());
  var _RequestBodyVisitor2 = _interopRequireDefault(require_RequestBodyVisitor2());
  var _CallbacksVisitor2 = _interopRequireDefault(require_CallbacksVisitor2());
  var _DeprecatedVisitor4 = _interopRequireDefault(require_DeprecatedVisitor4());
  var _SecurityVisitor2 = _interopRequireDefault(require_SecurityVisitor2());
  var _ServersVisitor2 = _interopRequireDefault(require_ServersVisitor2());
  var _index27 = _interopRequireDefault(require_path_item());
  var _$RefVisitor2 = _interopRequireDefault(require_$RefVisitor3());
  var _SummaryVisitor3 = _interopRequireDefault(require_SummaryVisitor3());
  var _DescriptionVisitor13 = _interopRequireDefault(require_DescriptionVisitor14());
  var _ServersVisitor3 = _interopRequireDefault(require_ServersVisitor3());
  var _ParametersVisitor4 = _interopRequireDefault(require_ParametersVisitor5());
  var _index28 = _interopRequireDefault(require_security_scheme());
  var _TypeVisitor2 = _interopRequireDefault(require_TypeVisitor4());
  var _DescriptionVisitor14 = _interopRequireDefault(require_DescriptionVisitor15());
  var _NameVisitor6 = _interopRequireDefault(require_NameVisitor6());
  var _InVisitor2 = _interopRequireDefault(require_InVisitor2());
  var _SchemeVisitor = _interopRequireDefault(require_SchemeVisitor());
  var _BearerFormatVisitor = _interopRequireDefault(require_BearerFormatVisitor());
  var _OpenIdConnectUrlVisitor = _interopRequireDefault(require_OpenIdConnectUrlVisitor());
  var _index29 = _interopRequireDefault(require_oauth_flows());
  var _index30 = _interopRequireDefault(require_oauth_flow());
  var _AuthorizationUrlVisitor = _interopRequireDefault(require_AuthorizationUrlVisitor());
  var _TokenUrlVisitor = _interopRequireDefault(require_TokenUrlVisitor());
  var _RefreshUrlVisitor = _interopRequireDefault(require_RefreshUrlVisitor());
  var _ScopesVisitor = _interopRequireDefault(require_ScopesVisitor());
  var _TagsVisitor2 = _interopRequireDefault(require_TagsVisitor2());
  var ReferenceSpecification = {
    $visitor: _index12.default,
    fixedFields: {
      $ref: _$RefVisitor.default
    }
  };
  var SchemaSpecification = {
    $visitor: _index15.default,
    fixedFields: {
      ..._inheritedFixedFields.default,
      allOf: _AllOfVisitor.default,
      anyOf: _AnyOfVisitor.default,
      oneOf: _OneOfVisitor.default,
      definitions: _DefinitionsVisitor.default,
      items: _ItemsVisitor.default,
      dependencies: _DependenciesVisitor.default,
      properties: _PropertiesVisitor.default,
      patternProperties: _PatternPropertiesVisitor.default,
      type: _TypeVisitor.default,
      nullable: _NullableVisitor.default,
      discriminator: {
        $ref: "#/visitors/document/objects/Discriminator"
      },
      writeOnly: _WriteOnlyVisitor.default,
      xml: {
        $ref: "#/visitors/document/objects/XML"
      },
      externalDocs: {
        $ref: "#/visitors/document/objects/ExternalDocumentation"
      },
      example: _ExampleVisitor3.default,
      deprecated: _DeprecatedVisitor3.default
    }
  };
  var specification = {
    visitors: {
      value: _FallbackVisitor.default,
      document: {
        objects: {
          OpenApi: {
            $visitor: _index.default,
            fixedFields: {
              openapi: _OpenapiVisitor.default,
              info: {
                $ref: "#/visitors/document/objects/Info"
              },
              servers: _ServersVisitor.default,
              paths: {
                $ref: "#/visitors/document/objects/Paths"
              },
              components: {
                $ref: "#/visitors/document/objects/Components"
              },
              security: _SecurityVisitor.default,
              tags: _TagsVisitor2.default,
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              }
            }
          },
          Info: {
            $visitor: _index2.default,
            fixedFields: {
              title: _TitleVisitor.default,
              description: _DescriptionVisitor.default,
              termsOfService: _TermsOfServiceVisitor.default,
              contact: {
                $ref: "#/visitors/document/objects/Contact"
              },
              license: {
                $ref: "#/visitors/document/objects/License"
              },
              version: _VersionVisitor.default
            }
          },
          Contact: {
            $visitor: _index3.default,
            fixedFields: {
              name: _NameVisitor.default,
              url: _UrlVisitor.default,
              email: _EmailVisitor.default
            }
          },
          License: {
            $visitor: _index4.default,
            fixedFields: {
              name: _NameVisitor2.default,
              url: _UrlVisitor2.default
            }
          },
          Server: {
            $visitor: _index6.default,
            fixedFields: {
              url: _UrlVisitor3.default,
              description: _DescriptionVisitor3.default,
              variables: _VariablesVisitor.default
            }
          },
          ServerVariable: {
            $visitor: _index7.default,
            fixedFields: {
              enum: _EnumVisitor.default,
              default: _DefaultVisitor.default,
              description: _DescriptionVisitor4.default
            }
          },
          Components: {
            $visitor: _index10.default,
            fixedFields: {
              schemas: _SchemasVisitor.default,
              responses: _ResponsesVisitor.default,
              parameters: _ParametersVisitor2.default,
              examples: _ExamplesVisitor4.default,
              requestBodies: _RequestBodiesVisitor.default,
              headers: _HeadersVisitor.default,
              securitySchemes: _SecuritySchemesVisitor.default,
              links: _LinksVisitor.default,
              callbacks: _CallbacksVisitor.default
            }
          },
          Paths: {
            $visitor: _index21.default
          },
          PathItem: {
            $visitor: _index27.default,
            fixedFields: {
              $ref: _$RefVisitor2.default,
              summary: _SummaryVisitor3.default,
              description: _DescriptionVisitor13.default,
              get: {
                $ref: "#/visitors/document/objects/Operation"
              },
              put: {
                $ref: "#/visitors/document/objects/Operation"
              },
              post: {
                $ref: "#/visitors/document/objects/Operation"
              },
              delete: {
                $ref: "#/visitors/document/objects/Operation"
              },
              options: {
                $ref: "#/visitors/document/objects/Operation"
              },
              head: {
                $ref: "#/visitors/document/objects/Operation"
              },
              patch: {
                $ref: "#/visitors/document/objects/Operation"
              },
              trace: {
                $ref: "#/visitors/document/objects/Operation"
              },
              servers: _ServersVisitor3.default,
              parameters: _ParametersVisitor4.default
            }
          },
          Operation: {
            $visitor: _index26.default,
            fixedFields: {
              tags: _TagsVisitor.default,
              summary: _SummaryVisitor2.default,
              description: _DescriptionVisitor12.default,
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              },
              operationId: _OperationIdVisitor2.default,
              parameters: _ParametersVisitor3.default,
              requestBody: _RequestBodyVisitor2.default,
              responses: {
                $ref: "#/visitors/document/objects/Responses"
              },
              callbacks: _CallbacksVisitor2.default,
              deprecated: _DeprecatedVisitor4.default,
              security: _SecurityVisitor2.default,
              servers: _ServersVisitor2.default
            }
          },
          ExternalDocumentation: {
            $visitor: _index19.default,
            fixedFields: {
              description: _DescriptionVisitor9.default,
              url: _UrlVisitor4.default
            }
          },
          Parameter: {
            $visitor: _index13.default,
            fixedFields: {
              name: _NameVisitor4.default,
              in: _InVisitor.default,
              description: _DescriptionVisitor6.default,
              required: _RequiredVisitor.default,
              deprecated: _DeprecatedVisitor.default,
              allowEmptyValue: _AllowEmptyValueVisitor.default,
              style: _StyleVisitor.default,
              explode: _ExplodeVisitor.default,
              allowReserved: _AllowReservedVisitor.default,
              schema: _SchemaVisitor2.default,
              example: _ExampleVisitor4.default,
              examples: _ExamplesVisitor3.default,
              content: _ContentVisitor2.default
            }
          },
          RequestBody: {
            $visitor: _index22.default,
            fixedFields: {
              description: _DescriptionVisitor10.default,
              content: _ContentVisitor3.default,
              required: _RequiredVisitor3.default
            }
          },
          MediaType: {
            $visitor: _index8.default,
            fixedFields: {
              schema: _SchemaVisitor.default,
              example: _ExampleVisitor.default,
              examples: _ExamplesVisitor.default,
              encoding: _EncodingVisitor.default
            }
          },
          Encoding: {
            $visitor: _index20.default,
            fixedFields: {
              contentType: _ContentTypeVisitor.default,
              headers: _HeadersVisitor2.default,
              style: _StyleVisitor3.default,
              explode: _ExplodeVisitor3.default,
              allowReserved: _AllowReservedVisitor3.default
            }
          },
          Responses: {
            $visitor: _index25.default,
            fixedFields: {
              default: _DefaultVisitor2.default
            }
          },
          Response: {
            $visitor: _index24.default,
            fixedFields: {
              description: _DescriptionVisitor11.default,
              headers: _HeadersVisitor3.default,
              content: _ContentVisitor4.default,
              links: _LinksVisitor2.default
            }
          },
          Callback: {
            $visitor: _index23.default
          },
          Example: {
            $visitor: _index18.default,
            fixedFields: {
              summary: _SummaryVisitor.default,
              description: _DescriptionVisitor8.default,
              value: _ValueVisitor.default,
              externalValue: _ExternalValueVisitor.default
            }
          },
          Link: {
            $visitor: _index5.default,
            fixedFields: {
              operationRef: _OperationRefVisitor.default,
              operationId: _OperationIdVisitor.default,
              parameters: _ParametersVisitor.default,
              requestBody: _RequestBodyVisitor.default,
              description: _DescriptionVisitor2.default,
              server: {
                $ref: "#/visitors/document/objects/Server"
              }
            }
          },
          Header: {
            $visitor: _index14.default,
            fixedFields: {
              description: _DescriptionVisitor7.default,
              required: _RequiredVisitor2.default,
              deprecated: _DeprecatedVisitor2.default,
              allowEmptyValue: _AllowEmptyValueVisitor2.default,
              style: _StyleVisitor2.default,
              explode: _ExplodeVisitor2.default,
              allowReserved: _AllowReservedVisitor2.default,
              schema: _SchemaVisitor3.default,
              example: _ExampleVisitor2.default,
              examples: _ExamplesVisitor2.default,
              content: _ContentVisitor.default
            }
          },
          Tag: {
            $visitor: _index11.default,
            fixedFields: {
              name: _NameVisitor3.default,
              description: _DescriptionVisitor5.default,
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              }
            }
          },
          JSONReference: ReferenceSpecification,
          Reference: ReferenceSpecification,
          JSONSchema: SchemaSpecification,
          Schema: SchemaSpecification,
          LinkDescription: _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.LinkDescription,
          Media: _apidomNsJsonSchemaDraft.specificationObj.visitors.document.objects.Media,
          Discriminator: {
            $visitor: _index16.default,
            fixedFields: {
              propertyName: _PropertyNameVisitor.default,
              mapping: _MappingVisitor.default
            }
          },
          XML: {
            $visitor: _index17.default,
            fixedFields: {
              name: _NameVisitor5.default,
              namespace: _NamespaceVisitor.default,
              prefix: _PrefixVisitor.default,
              attribute: _AttributeVisitor.default,
              wrapped: _WrappedVisitor.default
            }
          },
          SecurityScheme: {
            $visitor: _index28.default,
            fixedFields: {
              type: _TypeVisitor2.default,
              description: _DescriptionVisitor14.default,
              name: _NameVisitor6.default,
              in: _InVisitor2.default,
              scheme: _SchemeVisitor.default,
              bearerFormat: _BearerFormatVisitor.default,
              flows: {
                $ref: "#/visitors/document/objects/OAuthFlows"
              },
              openIdConnectUrl: _OpenIdConnectUrlVisitor.default
            }
          },
          OAuthFlows: {
            $visitor: _index29.default,
            fixedFields: {
              implicit: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              },
              password: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              },
              clientCredentials: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              },
              authorizationCode: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              }
            }
          },
          OAuthFlow: {
            $visitor: _index30.default,
            fixedFields: {
              authorizationUrl: _AuthorizationUrlVisitor.default,
              tokenUrl: _TokenUrlVisitor.default,
              refreshUrl: _RefreshUrlVisitor.default,
              scopes: _ScopesVisitor.default
            }
          },
          SecurityRequirement: {
            $visitor: _index9.default
          }
        },
        extension: {
          $visitor: _SpecificationExtensionVisitor.default
        }
      }
    }
  };
  var _default = specification;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/toolbox.cjs
var require_toolbox3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var openApi3_0Predicates = _interopRequireWildcard(require_predicates8());
  var refractorPredicates = _interopRequireWildcard(require_predicates7());
  var _namespace = _interopRequireDefault(require_namespace3());
  var createToolbox = () => {
    const namespace = (0, _apidomCore.createNamespace)(_namespace.default);
    const predicates = {
      ...refractorPredicates,
      ...openApi3_0Predicates,
      isStringElement: _apidomCore.isStringElement
    };
    return {
      predicates,
      namespace
    };
  };
  var _default = createToolbox;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/index.cjs
var require_refractor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.createRefractor = undefined;
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _specification = _interopRequireDefault(require_specification2());
  var _visitor = require_visitor5();
  var _toolbox = _interopRequireDefault(require_toolbox3());
  var refract = (value, {
    specPath = ["visitors", "document", "objects", "OpenApi", "$visitor"],
    plugins = []
  } = {}) => {
    const element = (0, _apidomCore.refract)(value);
    const resolvedSpec = (0, _apidomCore.dereference)(_specification.default);
    const rootVisitor = (0, _ramdaAdjunct.invokeArgs)(specPath, [], resolvedSpec);
    (0, _apidomCore.visit)(element, rootVisitor, {
      state: {
        specObj: resolvedSpec
      }
    });
    return (0, _apidomCore.dispatchRefractorPlugins)(rootVisitor.element, plugins, {
      toolboxCreator: _toolbox.default,
      visitorOptions: {
        keyMap: _visitor.keyMap,
        nodeTypeGetter: _visitor.getNodeType
      }
    });
  };
  var createRefractor = (specPath) => (value, options = {}) => refract(value, {
    specPath,
    ...options
  });
  exports.createRefractor = createRefractor;
  var _default = refract;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/refractor/registration.cjs
var require_registration3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  var _Callback = _interopRequireDefault(require_Callback());
  exports.CallbackElement = _Callback.default;
  var _Components = _interopRequireDefault(require_Components());
  exports.ComponentsElement = _Components.default;
  var _Contact = _interopRequireDefault(require_Contact());
  exports.ContactElement = _Contact.default;
  var _Discriminator = _interopRequireDefault(require_Discriminator());
  exports.DiscriminatorElement = _Discriminator.default;
  var _Encoding = _interopRequireDefault(require_Encoding());
  exports.EncodingElement = _Encoding.default;
  var _Example = _interopRequireDefault(require_Example());
  exports.ExampleElement = _Example.default;
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation());
  exports.ExternalDocumentationElement = _ExternalDocumentation.default;
  var _Header = _interopRequireDefault(require_Header());
  exports.HeaderElement = _Header.default;
  var _Info = _interopRequireDefault(require_Info());
  exports.InfoElement = _Info.default;
  var _License = _interopRequireDefault(require_License());
  exports.LicenseElement = _License.default;
  var _Link = _interopRequireDefault(require_Link());
  exports.LinkElement = _Link.default;
  var _MediaType = _interopRequireDefault(require_MediaType());
  exports.MediaTypeElement = _MediaType.default;
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow());
  exports.OAuthFlowElement = _OAuthFlow.default;
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows());
  exports.OAuthFlowsElement = _OAuthFlows.default;
  var _Openapi = _interopRequireDefault(require_Openapi());
  exports.OpenapiElement = _Openapi.default;
  var _OpenApi = _interopRequireDefault(require_OpenApi3_0());
  exports.OpenApi3_0Element = _OpenApi.default;
  var _Operation = _interopRequireDefault(require_Operation());
  exports.OperationElement = _Operation.default;
  var _Parameter = _interopRequireDefault(require_Parameter());
  exports.ParameterElement = _Parameter.default;
  var _PathItem = _interopRequireDefault(require_PathItem());
  exports.PathItemElement = _PathItem.default;
  var _Paths = _interopRequireDefault(require_Paths());
  exports.PathsElement = _Paths.default;
  var _Reference = _interopRequireDefault(require_Reference2());
  exports.ReferenceElement = _Reference.default;
  var _RequestBody = _interopRequireDefault(require_RequestBody());
  exports.RequestBodyElement = _RequestBody.default;
  var _Response = _interopRequireDefault(require_Response());
  exports.ResponseElement = _Response.default;
  var _Responses = _interopRequireDefault(require_Responses());
  exports.ResponsesElement = _Responses.default;
  var _Schema = _interopRequireDefault(require_Schema2());
  exports.SchemaElement = _Schema.default;
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement());
  exports.SecurityRequirementElement = _SecurityRequirement.default;
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme());
  exports.SecuritySchemeElement = _SecurityScheme.default;
  var _Server = _interopRequireDefault(require_Server());
  exports.ServerElement = _Server.default;
  var _ServerVariable = _interopRequireDefault(require_ServerVariable());
  exports.ServerVariableElement = _ServerVariable.default;
  var _Tag = _interopRequireDefault(require_Tag2());
  exports.TagElement = _Tag.default;
  var _Xml = _interopRequireDefault(require_Xml());
  exports.XmlElement = _Xml.default;
  var _index = require_refractor3();
  _Callback.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Callback", "$visitor"]);
  _Components.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Components", "$visitor"]);
  _Contact.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Contact", "$visitor"]);
  _Example.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Example", "$visitor"]);
  _Discriminator.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Discriminator", "$visitor"]);
  _Encoding.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Encoding", "$visitor"]);
  _ExternalDocumentation.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "ExternalDocumentation", "$visitor"]);
  _Header.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Header", "$visitor"]);
  _Info.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Info", "$visitor"]);
  _License.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "License", "$visitor"]);
  _Link.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Link", "$visitor"]);
  _MediaType.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "MediaType", "$visitor"]);
  _OAuthFlow.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OAuthFlow", "$visitor"]);
  _OAuthFlows.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OAuthFlows", "$visitor"]);
  _Openapi.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OpenApi", "fixedFields", "openapi"]);
  _OpenApi.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OpenApi", "$visitor"]);
  _Operation.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Operation", "$visitor"]);
  _Parameter.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Parameter", "$visitor"]);
  _PathItem.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "PathItem", "$visitor"]);
  _Paths.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Paths", "$visitor"]);
  _Reference.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Reference", "$visitor"]);
  _RequestBody.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "RequestBody", "$visitor"]);
  _Response.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Response", "$visitor"]);
  _Responses.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Responses", "$visitor"]);
  _Schema.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Schema", "$visitor"]);
  _SecurityRequirement.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "SecurityRequirement", "$visitor"]);
  _SecurityScheme.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "SecurityScheme", "$visitor"]);
  _Server.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Server", "$visitor"]);
  _ServerVariable.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "ServerVariable", "$visitor"]);
  _Tag.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Tag", "$visitor"]);
  _Xml.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "XML", "$visitor"]);
});

// node_modules/@swagger-api/apidom-ns-openapi-3-0/cjs/index.cjs
var require_cjs8 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.isOpenapiElement = exports.isOpenApiExtension = exports.isOpenApi3_0LikeElement = exports.isOpenApi3_0Element = exports.isObjectElement = exports.isNumberElement = exports.isNullElement = exports.isMemberElement = exports.isMediaTypeElement = exports.isLinkPrimitiveElement = exports.isLinkElementExternal = exports.isLinkElement = exports.isLicenseElement = exports.isInfoElement = exports.isExternalDocumentationElement = exports.isExampleElement = exports.isElement = exports.isContactElement = exports.isComponentsElement = exports.isCallbackElement = exports.isBooleanJsonSchemaElement = exports.isBooleanElement = exports.isArrayElement = exports.getNodeType = exports.default = exports.createRefractor = exports.XmlElement = exports.Visitor = exports.TagsElement = exports.TagElement = exports.SpecificationVisitor = exports.ServersElement = exports.ServerVariablesElement = exports.ServerVariableElement = exports.ServerElement = exports.SecuritySchemeElement = exports.SecurityRequirementElement = exports.SecurityElement = exports.SchemaElement = exports.ResponsesElement = exports.ResponseLinksElement = exports.ResponseHeadersElement = exports.ResponseElement = exports.ResponseContentElement = exports.RequestBodyElement = exports.RequestBodyContentElement = exports.ReferenceElement = exports.PatternedFieldsVisitor = exports.PathsElement = exports.PathItemServersElement = exports.PathItemParametersElement = exports.PathItemElement = exports.ParameterExamplesElement = exports.ParameterElement = exports.ParameterContentElement = exports.OperationTagsElement = exports.OperationServersElement = exports.OperationSecurityElement = exports.OperationParametersElement = exports.OperationElement = exports.OperationCallbacksElement = exports.OpenapiElement = exports.OpenApi3_0Element = exports.OpenAPIMediaTypes = exports.OAuthFlowsElement = exports.OAuthFlowScopesElement = exports.OAuthFlowElement = exports.MixedFieldsVisitor = exports.MediaTypeExamplesElement = exports.MediaTypeEncodingElement = exports.MediaTypeElement = exports.MapVisitor = exports.LinkParametersElement = exports.LinkElement = exports.LicenseElement = exports.InfoElement = exports.HeaderExamplesElement = exports.HeaderElement = exports.HeaderContentElement = exports.FixedFieldsVisitor = exports.FallbackVisitor = exports.ExternalDocumentationElement = exports.ExampleElement = exports.EncodingHeadersElement = exports.EncodingElement = exports.DiscriminatorMappingElement = exports.DiscriminatorElement = exports.ContactElement = exports.ComponentsSecuritySchemesElement = exports.ComponentsSchemasElement = exports.ComponentsResponsesElement = exports.ComponentsRequestBodiesElement = exports.ComponentsParametersElement = exports.ComponentsLinksElement = exports.ComponentsHeadersElement = exports.ComponentsExamplesElement = exports.ComponentsElement = exports.ComponentsCallbacksElement = exports.CallbackElement = exports.AlternatingVisitor = undefined;
  exports.specificationObj = exports.refractorPluginReplaceEmptyElement = exports.refract = exports.mediaTypes = exports.keyMap = exports.isTagLikeElement = exports.isStringElement = exports.isServerVariableElement = exports.isServerLikeElement = exports.isServerElement = exports.isSecurityRequirementElement = exports.isSchemaElement = exports.isResponsesElement = exports.isResponseLikeElement = exports.isResponseElement = exports.isRequestBodyLikeElement = exports.isRequestBodyElement = exports.isReferenceLikeElement = exports.isReferenceElementExternal = exports.isReferenceElement = exports.isRefElement = exports.isPathsElement = exports.isPathItemElementExternal = exports.isPathItemElement = exports.isParameterLikeElement = exports.isParameterElement = exports.isOperationElement = undefined;
  var _apidomCore = require_cjs4();
  exports.isRefElement = _apidomCore.isRefElement;
  exports.isLinkPrimitiveElement = _apidomCore.isLinkElement;
  exports.isMemberElement = _apidomCore.isMemberElement;
  exports.isObjectElement = _apidomCore.isObjectElement;
  exports.isArrayElement = _apidomCore.isArrayElement;
  exports.isBooleanElement = _apidomCore.isBooleanElement;
  exports.isNullElement = _apidomCore.isNullElement;
  exports.isElement = _apidomCore.isElement;
  exports.isNumberElement = _apidomCore.isNumberElement;
  exports.isStringElement = _apidomCore.isStringElement;
  var _mediaTypes = _interopRequireWildcard(require_media_types3());
  exports.mediaTypes = _mediaTypes.default;
  exports.OpenAPIMediaTypes = _mediaTypes.OpenAPIMediaTypes;
  var _namespace = _interopRequireDefault(require_namespace3());
  exports.default = _namespace.default;
  var _replaceEmptyElement = _interopRequireDefault(require_replace_empty_element2());
  exports.refractorPluginReplaceEmptyElement = _replaceEmptyElement.default;
  var _index = _interopRequireWildcard(require_refractor3());
  exports.refract = _index.default;
  exports.createRefractor = _index.createRefractor;
  var _specification = _interopRequireDefault(require_specification2());
  exports.specificationObj = _specification.default;
  var _predicates = require_predicates8();
  exports.isCallbackElement = _predicates.isCallbackElement;
  exports.isComponentsElement = _predicates.isComponentsElement;
  exports.isContactElement = _predicates.isContactElement;
  exports.isExampleElement = _predicates.isExampleElement;
  exports.isExternalDocumentationElement = _predicates.isExternalDocumentationElement;
  exports.isInfoElement = _predicates.isInfoElement;
  exports.isLicenseElement = _predicates.isLicenseElement;
  exports.isLinkElement = _predicates.isLinkElement;
  exports.isLinkElementExternal = _predicates.isLinkElementExternal;
  exports.isOpenapiElement = _predicates.isOpenapiElement;
  exports.isOpenApi3_0Element = _predicates.isOpenApi3_0Element;
  exports.isOperationElement = _predicates.isOperationElement;
  exports.isParameterElement = _predicates.isParameterElement;
  exports.isPathItemElement = _predicates.isPathItemElement;
  exports.isPathItemElementExternal = _predicates.isPathItemElementExternal;
  exports.isPathsElement = _predicates.isPathsElement;
  exports.isReferenceElement = _predicates.isReferenceElement;
  exports.isReferenceElementExternal = _predicates.isReferenceElementExternal;
  exports.isRequestBodyElement = _predicates.isRequestBodyElement;
  exports.isResponseElement = _predicates.isResponseElement;
  exports.isResponsesElement = _predicates.isResponsesElement;
  exports.isSchemaElement = _predicates.isSchemaElement;
  exports.isBooleanJsonSchemaElement = _predicates.isBooleanJsonSchemaElement;
  exports.isSecurityRequirementElement = _predicates.isSecurityRequirementElement;
  exports.isServerElement = _predicates.isServerElement;
  exports.isServerVariableElement = _predicates.isServerVariableElement;
  exports.isMediaTypeElement = _predicates.isMediaTypeElement;
  var _predicates2 = require_predicates7();
  exports.isOpenApi3_0LikeElement = _predicates2.isOpenApi3_0LikeElement;
  exports.isParameterLikeElement = _predicates2.isParameterLikeElement;
  exports.isReferenceLikeElement = _predicates2.isReferenceLikeElement;
  exports.isRequestBodyLikeElement = _predicates2.isRequestBodyLikeElement;
  exports.isResponseLikeElement = _predicates2.isResponseLikeElement;
  exports.isServerLikeElement = _predicates2.isServerLikeElement;
  exports.isTagLikeElement = _predicates2.isTagLikeElement;
  exports.isOpenApiExtension = _predicates2.isOpenApiExtension;
  var _AlternatingVisitor = _interopRequireDefault(require_AlternatingVisitor2());
  exports.AlternatingVisitor = _AlternatingVisitor.default;
  var _FixedFieldsVisitor = _interopRequireDefault(require_FixedFieldsVisitor2());
  exports.FixedFieldsVisitor = _FixedFieldsVisitor.default;
  var _MapVisitor = _interopRequireDefault(require_MapVisitor2());
  exports.MapVisitor = _MapVisitor.default;
  var _MixedFieldsVisitor = _interopRequireDefault(require_MixedFieldsVisitor());
  exports.MixedFieldsVisitor = _MixedFieldsVisitor.default;
  var _PatternedFieldsVisitor = _interopRequireDefault(require_PatternedFieldsVisitor2());
  exports.PatternedFieldsVisitor = _PatternedFieldsVisitor.default;
  var _FallbackVisitor = _interopRequireDefault(require_FallbackVisitor2());
  exports.FallbackVisitor = _FallbackVisitor.default;
  var _SpecificationVisitor = _interopRequireDefault(require_SpecificationVisitor2());
  exports.SpecificationVisitor = _SpecificationVisitor.default;
  var _Visitor = _interopRequireDefault(require_Visitor2());
  exports.Visitor = _Visitor.default;
  var _visitor = require_visitor5();
  exports.keyMap = _visitor.keyMap;
  exports.getNodeType = _visitor.getNodeType;
  var _registration = require_registration3();
  exports.CallbackElement = _registration.CallbackElement;
  exports.ComponentsElement = _registration.ComponentsElement;
  exports.ContactElement = _registration.ContactElement;
  exports.DiscriminatorElement = _registration.DiscriminatorElement;
  exports.EncodingElement = _registration.EncodingElement;
  exports.ExampleElement = _registration.ExampleElement;
  exports.ExternalDocumentationElement = _registration.ExternalDocumentationElement;
  exports.HeaderElement = _registration.HeaderElement;
  exports.InfoElement = _registration.InfoElement;
  exports.LicenseElement = _registration.LicenseElement;
  exports.LinkElement = _registration.LinkElement;
  exports.MediaTypeElement = _registration.MediaTypeElement;
  exports.OAuthFlowElement = _registration.OAuthFlowElement;
  exports.OAuthFlowsElement = _registration.OAuthFlowsElement;
  exports.OpenapiElement = _registration.OpenapiElement;
  exports.OpenApi3_0Element = _registration.OpenApi3_0Element;
  exports.OperationElement = _registration.OperationElement;
  exports.ParameterElement = _registration.ParameterElement;
  exports.PathItemElement = _registration.PathItemElement;
  exports.PathsElement = _registration.PathsElement;
  exports.ReferenceElement = _registration.ReferenceElement;
  exports.RequestBodyElement = _registration.RequestBodyElement;
  exports.ResponseElement = _registration.ResponseElement;
  exports.ResponsesElement = _registration.ResponsesElement;
  exports.SchemaElement = _registration.SchemaElement;
  exports.SecurityRequirementElement = _registration.SecurityRequirementElement;
  exports.SecuritySchemeElement = _registration.SecuritySchemeElement;
  exports.ServerElement = _registration.ServerElement;
  exports.ServerVariableElement = _registration.ServerVariableElement;
  exports.TagElement = _registration.TagElement;
  exports.XmlElement = _registration.XmlElement;
  var _ComponentsCallbacks = _interopRequireDefault(require_ComponentsCallbacks());
  exports.ComponentsCallbacksElement = _ComponentsCallbacks.default;
  var _ComponentsExamples = _interopRequireDefault(require_ComponentsExamples());
  exports.ComponentsExamplesElement = _ComponentsExamples.default;
  var _ComponentsHeaders = _interopRequireDefault(require_ComponentsHeaders());
  exports.ComponentsHeadersElement = _ComponentsHeaders.default;
  var _ComponentsLinks = _interopRequireDefault(require_ComponentsLinks());
  exports.ComponentsLinksElement = _ComponentsLinks.default;
  var _ComponentsParameters = _interopRequireDefault(require_ComponentsParameters());
  exports.ComponentsParametersElement = _ComponentsParameters.default;
  var _ComponentsRequestBodies = _interopRequireDefault(require_ComponentsRequestBodies());
  exports.ComponentsRequestBodiesElement = _ComponentsRequestBodies.default;
  var _ComponentsResponses = _interopRequireDefault(require_ComponentsResponses());
  exports.ComponentsResponsesElement = _ComponentsResponses.default;
  var _ComponentsSchemas = _interopRequireDefault(require_ComponentsSchemas());
  exports.ComponentsSchemasElement = _ComponentsSchemas.default;
  var _ComponentsSecuritySchemes = _interopRequireDefault(require_ComponentsSecuritySchemes());
  exports.ComponentsSecuritySchemesElement = _ComponentsSecuritySchemes.default;
  var _DiscriminatorMapping = _interopRequireDefault(require_DiscriminatorMapping());
  exports.DiscriminatorMappingElement = _DiscriminatorMapping.default;
  var _EncodingHeaders = _interopRequireDefault(require_EncodingHeaders());
  exports.EncodingHeadersElement = _EncodingHeaders.default;
  var _HeaderContent = _interopRequireDefault(require_HeaderContent());
  exports.HeaderContentElement = _HeaderContent.default;
  var _HeaderExamples = _interopRequireDefault(require_HeaderExamples());
  exports.HeaderExamplesElement = _HeaderExamples.default;
  var _LinkParameters = _interopRequireDefault(require_LinkParameters());
  exports.LinkParametersElement = _LinkParameters.default;
  var _MediaTypeEncoding = _interopRequireDefault(require_MediaTypeEncoding());
  exports.MediaTypeEncodingElement = _MediaTypeEncoding.default;
  var _MediaTypeExamples = _interopRequireDefault(require_MediaTypeExamples());
  exports.MediaTypeExamplesElement = _MediaTypeExamples.default;
  var _OAuthFlowScopes = _interopRequireDefault(require_OAuthFlowScopes());
  exports.OAuthFlowScopesElement = _OAuthFlowScopes.default;
  var _OperationCallbacks = _interopRequireDefault(require_OperationCallbacks());
  exports.OperationCallbacksElement = _OperationCallbacks.default;
  var _OperationParameters = _interopRequireDefault(require_OperationParameters());
  exports.OperationParametersElement = _OperationParameters.default;
  var _OperationSecurity = _interopRequireDefault(require_OperationSecurity());
  exports.OperationSecurityElement = _OperationSecurity.default;
  var _OperationServers = _interopRequireDefault(require_OperationServers());
  exports.OperationServersElement = _OperationServers.default;
  var _OperationTags = _interopRequireDefault(require_OperationTags());
  exports.OperationTagsElement = _OperationTags.default;
  var _ParameterContent = _interopRequireDefault(require_ParameterContent());
  exports.ParameterContentElement = _ParameterContent.default;
  var _ParameterExamples = _interopRequireDefault(require_ParameterExamples());
  exports.ParameterExamplesElement = _ParameterExamples.default;
  var _PathItemParameters = _interopRequireDefault(require_PathItemParameters());
  exports.PathItemParametersElement = _PathItemParameters.default;
  var _PathItemServers = _interopRequireDefault(require_PathItemServers());
  exports.PathItemServersElement = _PathItemServers.default;
  var _RequestBodyContent = _interopRequireDefault(require_RequestBodyContent());
  exports.RequestBodyContentElement = _RequestBodyContent.default;
  var _ResponseContent = _interopRequireDefault(require_ResponseContent());
  exports.ResponseContentElement = _ResponseContent.default;
  var _ResponseHeaders = _interopRequireDefault(require_ResponseHeaders());
  exports.ResponseHeadersElement = _ResponseHeaders.default;
  var _ResponseLinks = _interopRequireDefault(require_ResponseLinks());
  exports.ResponseLinksElement = _ResponseLinks.default;
  var _Security = _interopRequireDefault(require_Security());
  exports.SecurityElement = _Security.default;
  var _Servers = _interopRequireDefault(require_Servers());
  exports.ServersElement = _Servers.default;
  var _ServerVariables = _interopRequireDefault(require_ServerVariables());
  exports.ServerVariablesElement = _ServerVariables.default;
  var _Tags = _interopRequireDefault(require_Tags());
  exports.TagsElement = _Tags.default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Callback.cjs
var require_Callback2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Callback extends _apidomNsOpenapi.CallbackElement {
  }
  var _default = Callback;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Components.cjs
var require_Components2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Components extends _apidomNsOpenapi.ComponentsElement {
    get pathItems() {
      return this.get("pathItems");
    }
    set pathItems(pathItems) {
      this.set("pathItems", pathItems);
    }
  }
  var _default = Components;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Contact.cjs
var require_Contact2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Contact extends _apidomNsOpenapi.ContactElement {
  }
  var _default = Contact;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Discriminator.cjs
var require_Discriminator2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Discriminator extends _apidomNsOpenapi.DiscriminatorElement {
  }
  var _default = Discriminator;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Encoding.cjs
var require_Encoding2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Encoding extends _apidomNsOpenapi.EncodingElement {
  }
  var _default = Encoding;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Example.cjs
var require_Example2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Example extends _apidomNsOpenapi.ExampleElement {
  }
  var _default = Example;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/ExternalDocumentation.cjs
var require_ExternalDocumentation2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class ExternalDocumentation extends _apidomNsOpenapi.ExternalDocumentationElement {
  }
  var _default = ExternalDocumentation;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Header.cjs
var require_Header2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Header extends _apidomNsOpenapi.HeaderElement {
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
  }
  var _default = Header;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Info.cjs
var require_Info2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Info extends _apidomNsOpenapi.InfoElement {
    get license() {
      return this.get("license");
    }
    set license(licenseElement) {
      this.set("license", licenseElement);
    }
    get summary() {
      return this.get("summary");
    }
    set summary(summary) {
      this.set("summary", summary);
    }
  }
  var _default = Info;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/JsonSchemaDialect.cjs
var require_JsonSchemaDialect = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class JsonSchemaDialect extends _apidomCore.StringElement {
    static default = new JsonSchemaDialect("https://spec.openapis.org/oas/3.1/dialect/base");
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "jsonSchemaDialect";
    }
  }
  var _default = JsonSchemaDialect;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/License.cjs
var require_License2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class License extends _apidomNsOpenapi.LicenseElement {
    get identifier() {
      return this.get("identifier");
    }
    set identifier(name) {
      this.set("identifier", name);
    }
  }
  var _default = License;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Link.cjs
var require_Link2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Link extends _apidomNsOpenapi.LinkElement {
  }
  var _default = Link;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/MediaType.cjs
var require_MediaType2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class MediaType extends _apidomNsOpenapi.MediaTypeElement {
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
  }
  var _default = MediaType;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/OAuthFlow.cjs
var require_OAuthFlow2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class OAuthFlow extends _apidomNsOpenapi.OAuthFlowElement {
  }
  var _default = OAuthFlow;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/OAuthFlows.cjs
var require_OAuthFlows2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class OAuthFlows extends _apidomNsOpenapi.OAuthFlowsElement {
  }
  var _default = OAuthFlows;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Openapi.cjs
var require_Openapi2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Openapi extends _apidomNsOpenapi.OpenapiElement {
  }
  var _default = Openapi;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/OpenApi3-1.cjs
var require_OpenApi3_1 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class OpenApi3_1 extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "openApi3_1";
      this.classes.push("api");
    }
    get openapi() {
      return this.get("openapi");
    }
    set openapi(openapi) {
      this.set("openapi", openapi);
    }
    get info() {
      return this.get("info");
    }
    set info(info) {
      this.set("info", info);
    }
    get jsonSchemaDialect() {
      return this.get("jsonSchemaDialect");
    }
    set jsonSchemaDialect(jsonSchemaDialect) {
      this.set("jsonSchemaDialect", jsonSchemaDialect);
    }
    get servers() {
      return this.get("servers");
    }
    set servers(servers) {
      this.set("servers", servers);
    }
    get paths() {
      return this.get("paths");
    }
    set paths(paths) {
      this.set("paths", paths);
    }
    get components() {
      return this.get("components");
    }
    set components(components) {
      this.set("components", components);
    }
    get security() {
      return this.get("security");
    }
    set security(security) {
      this.set("security", security);
    }
    get tags() {
      return this.get("tags");
    }
    set tags(tags) {
      this.set("tags", tags);
    }
    get externalDocs() {
      return this.get("externalDocs");
    }
    set externalDocs(externalDocs) {
      this.set("externalDocs", externalDocs);
    }
    get webhooks() {
      return this.get("webhooks");
    }
    set webhooks(webhooks) {
      this.set("webhooks", webhooks);
    }
  }
  var _default = OpenApi3_1;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Operation.cjs
var require_Operation2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Operation extends _apidomNsOpenapi.OperationElement {
    get requestBody() {
      return this.get("requestBody");
    }
    set requestBody(requestBody) {
      this.set("requestBody", requestBody);
    }
  }
  var _default = Operation;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Parameter.cjs
var require_Parameter2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Parameter extends _apidomNsOpenapi.ParameterElement {
    get schema() {
      return this.get("schema");
    }
    set schema(schema) {
      this.set("schema", schema);
    }
  }
  var _default = Parameter;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/PathItem.cjs
var require_PathItem2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class PathItem extends _apidomNsOpenapi.PathItemElement {
    get GET() {
      return this.get("get");
    }
    set GET(operation) {
      this.set("GET", operation);
    }
    get PUT() {
      return this.get("put");
    }
    set PUT(operation) {
      this.set("PUT", operation);
    }
    get POST() {
      return this.get("post");
    }
    set POST(operation) {
      this.set("POST", operation);
    }
    get DELETE() {
      return this.get("delete");
    }
    set DELETE(operation) {
      this.set("DELETE", operation);
    }
    get OPTIONS() {
      return this.get("options");
    }
    set OPTIONS(operation) {
      this.set("OPTIONS", operation);
    }
    get HEAD() {
      return this.get("head");
    }
    set HEAD(operation) {
      this.set("HEAD", operation);
    }
    get PATCH() {
      return this.get("patch");
    }
    set PATCH(operation) {
      this.set("PATCH", operation);
    }
    get TRACE() {
      return this.get("trace");
    }
    set TRACE(operation) {
      this.set("TRACE", operation);
    }
  }
  var _default = PathItem;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Paths.cjs
var require_Paths2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Paths extends _apidomNsOpenapi.PathsElement {
  }
  var _default = Paths;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Reference.cjs
var require_Reference3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Reference extends _apidomNsOpenapi.ReferenceElement {
  }
  Object.defineProperty(Reference.prototype, "description", {
    get() {
      return this.get("description");
    },
    set(description) {
      this.set("description", description);
    },
    enumerable: true
  });
  Object.defineProperty(Reference.prototype, "summary", {
    get() {
      return this.get("summary");
    },
    set(description) {
      this.set("summary", description);
    },
    enumerable: true
  });
  var _default = Reference;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/RequestBody.cjs
var require_RequestBody2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class RequestBody extends _apidomNsOpenapi.RequestBodyElement {
  }
  var _default = RequestBody;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Response.cjs
var require_Response2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Response2 extends _apidomNsOpenapi.ResponseElement {
  }
  var _default = Response2;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Responses.cjs
var require_Responses2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Responses extends _apidomNsOpenapi.ResponsesElement {
  }
  var _default = Responses;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Schema.cjs
var require_Schema3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Schema extends _apidomCore.ObjectElement {
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.element = "schema";
    }
    get $schema() {
      return this.get("$schema");
    }
    set $schema($schema) {
      this.set("$schema", $schema);
    }
    get $vocabulary() {
      return this.get("$vocabulary");
    }
    set $vocabulary($vocabulary) {
      this.set("$vocabulary", $vocabulary);
    }
    get $id() {
      return this.get("$id");
    }
    set $id($id) {
      this.set("$id", $id);
    }
    get $anchor() {
      return this.get("$anchor");
    }
    set $anchor($anchor) {
      this.set("$anchor", $anchor);
    }
    get $dynamicAnchor() {
      return this.get("$dynamicAnchor");
    }
    set $dynamicAnchor($dynamicAnchor) {
      this.set("$dynamicAnchor", $dynamicAnchor);
    }
    get $dynamicRef() {
      return this.get("$dynamicRef");
    }
    set $dynamicRef($dynamicRef) {
      this.set("$dynamicRef", $dynamicRef);
    }
    get $ref() {
      return this.get("$ref");
    }
    set $ref($ref) {
      this.set("$ref", $ref);
    }
    get $defs() {
      return this.get("$defs");
    }
    set $defs($defs) {
      this.set("$defs", $defs);
    }
    get $comment() {
      return this.get("$comment");
    }
    set $comment($comment) {
      this.set("$comment", $comment);
    }
    get allOf() {
      return this.get("allOf");
    }
    set allOf(allOf) {
      this.set("allOf", allOf);
    }
    get anyOf() {
      return this.get("anyOf");
    }
    set anyOf(anyOf) {
      this.set("anyOf", anyOf);
    }
    get oneOf() {
      return this.get("oneOf");
    }
    set oneOf(oneOf) {
      this.set("oneOf", oneOf);
    }
    get not() {
      return this.get("not");
    }
    set not(not) {
      this.set("not", not);
    }
    get if() {
      return this.get("if");
    }
    set if(ifSchema) {
      this.set("if", ifSchema);
    }
    get then() {
      return this.get("then");
    }
    set then(thenSchema) {
      this.set("then", thenSchema);
    }
    get else() {
      return this.get("else");
    }
    set else(elseSchema) {
      this.set("else", elseSchema);
    }
    get dependentSchemas() {
      return this.get("dependentSchemas");
    }
    set dependentSchemas(dependentSchemas) {
      this.set("dependentSchemas", dependentSchemas);
    }
    get prefixItems() {
      return this.get("prefixItems");
    }
    set prefixItems(prefixItems) {
      this.set("prefixItems", prefixItems);
    }
    get items() {
      return this.get("items");
    }
    set items(items) {
      this.set("items", items);
    }
    get containsProp() {
      return this.get("contains");
    }
    set containsProp(containsProp) {
      this.set("contains", containsProp);
    }
    get properties() {
      return this.get("properties");
    }
    set properties(properties) {
      this.set("properties", properties);
    }
    get patternProperties() {
      return this.get("patternProperties");
    }
    set patternProperties(patternProperties) {
      this.set("patternProperties", patternProperties);
    }
    get additionalProperties() {
      return this.get("additionalProperties");
    }
    set additionalProperties(additionalProperties) {
      this.set("additionalProperties", additionalProperties);
    }
    get propertyNames() {
      return this.get("propertyNames");
    }
    set propertyNames(propertyNames) {
      this.set("propertyNames", propertyNames);
    }
    get unevaluatedItems() {
      return this.get("unevaluatedItems");
    }
    set unevaluatedItems(unevaluatedItems) {
      this.set("unevaluatedItems", unevaluatedItems);
    }
    get unevaluatedProperties() {
      return this.get("unevaluatedProperties");
    }
    set unevaluatedProperties(unevaluatedProperties) {
      this.set("unevaluatedProperties", unevaluatedProperties);
    }
    get type() {
      return this.get("type");
    }
    set type(type) {
      this.set("type", type);
    }
    get enum() {
      return this.get("enum");
    }
    set enum(enumVal) {
      this.set("enum", enumVal);
    }
    get const() {
      return this.get("const");
    }
    set const(constVal) {
      this.set("const", constVal);
    }
    get multipleOf() {
      return this.get("multipleOf");
    }
    set multipleOf(multipleOf) {
      this.set("multipleOf", multipleOf);
    }
    get maximum() {
      return this.get("maximum");
    }
    set maximum(maximum) {
      this.set("maximum", maximum);
    }
    get exclusiveMaximum() {
      return this.get("exclusiveMaximum");
    }
    set exclusiveMaximum(exclusiveMaximum) {
      this.set("exclusiveMaximum", exclusiveMaximum);
    }
    get minimum() {
      return this.get("minimum");
    }
    set minimum(minimum) {
      this.set("minimum", minimum);
    }
    get exclusiveMinimum() {
      return this.get("exclusiveMinimum");
    }
    set exclusiveMinimum(exclusiveMinimum) {
      this.set("exclusiveMinimum", exclusiveMinimum);
    }
    get maxLength() {
      return this.get("maxLength");
    }
    set maxLength(maxLength) {
      this.set("maxLength", maxLength);
    }
    get minLength() {
      return this.get("minLength");
    }
    set minLength(minLength) {
      this.set("minLength", minLength);
    }
    get pattern() {
      return this.get("pattern");
    }
    set pattern(pattern) {
      this.set("pattern", pattern);
    }
    get maxItems() {
      return this.get("maxItems");
    }
    set maxItems(maxItems) {
      this.set("maxItems", maxItems);
    }
    get minItems() {
      return this.get("minItems");
    }
    set minItems(minItems) {
      this.set("minItems", minItems);
    }
    get uniqueItems() {
      return this.get("uniqueItems");
    }
    set uniqueItems(uniqueItems) {
      this.set("uniqueItems", uniqueItems);
    }
    get maxContains() {
      return this.get("maxContains");
    }
    set maxContains(maxContains) {
      this.set("maxContains", maxContains);
    }
    get minContains() {
      return this.get("minContains");
    }
    set minContains(minContains) {
      this.set("minContains", minContains);
    }
    get maxProperties() {
      return this.get("maxProperties");
    }
    set maxProperties(maxProperties) {
      this.set("maxProperties", maxProperties);
    }
    get minProperties() {
      return this.get("minProperties");
    }
    set minProperties(minProperties) {
      this.set("minProperties", minProperties);
    }
    get required() {
      return this.get("required");
    }
    set required(required) {
      this.set("required", required);
    }
    get dependentRequired() {
      return this.get("dependentRequired");
    }
    set dependentRequired(dependentRequired) {
      this.set("dependentRequired", dependentRequired);
    }
    get title() {
      return this.get("title");
    }
    set title(title) {
      this.set("title", title);
    }
    get description() {
      return this.get("description");
    }
    set description(description) {
      this.set("description", description);
    }
    get default() {
      return this.get("default");
    }
    set default(defaultVal) {
      this.set("default", defaultVal);
    }
    get deprecated() {
      return this.get("deprecated");
    }
    set deprecated(deprecated) {
      this.set("deprecated", deprecated);
    }
    get readOnly() {
      return this.get("readOnly");
    }
    set readOnly(readOnly) {
      this.set("readOnly", readOnly);
    }
    get writeOnly() {
      return this.get("writeOnly");
    }
    set writeOnly(writeOnly) {
      this.set("writeOnly", writeOnly);
    }
    get examples() {
      return this.get("examples");
    }
    set examples(examples) {
      this.set("examples", examples);
    }
    get format() {
      return this.get("format");
    }
    set format(format) {
      this.set("format", format);
    }
    get contentEncoding() {
      return this.get("contentEncoding");
    }
    set contentEncoding(contentEncoding) {
      this.set("contentEncoding", contentEncoding);
    }
    get contentMediaType() {
      return this.get("contentMediaType");
    }
    set contentMediaType(contentMediaType) {
      this.set("contentMediaType", contentMediaType);
    }
    get contentSchema() {
      return this.get("contentSchema");
    }
    set contentSchema(contentSchema) {
      this.set("contentSchema", contentSchema);
    }
    get discriminator() {
      return this.get("discriminator");
    }
    set discriminator(discriminator) {
      this.set("discriminator", discriminator);
    }
    get xml() {
      return this.get("xml");
    }
    set xml(xml) {
      this.set("xml", xml);
    }
    get externalDocs() {
      return this.get("externalDocs");
    }
    set externalDocs(externalDocs) {
      this.set("externalDocs", externalDocs);
    }
    get example() {
      return this.get("example");
    }
    set example(example) {
      this.set("example", example);
    }
  }
  var _default = Schema;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/SecurityRequirement.cjs
var require_SecurityRequirement2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class SecurityRequirement extends _apidomNsOpenapi.SecurityRequirementElement {
  }
  var _default = SecurityRequirement;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/SecurityScheme.cjs
var require_SecurityScheme2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class SecurityScheme extends _apidomNsOpenapi.SecuritySchemeElement {
  }
  var _default = SecurityScheme;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Server.cjs
var require_Server2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Server extends _apidomNsOpenapi.ServerElement {
  }
  var _default = Server;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/ServerVariable.cjs
var require_ServerVariable2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class ServerVariable extends _apidomNsOpenapi.ServerVariableElement {
  }
  var _default = ServerVariable;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Tag.cjs
var require_Tag3 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Tag extends _apidomNsOpenapi.TagElement {
  }
  var _default = Tag;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/Xml.cjs
var require_Xml2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();

  class Xml extends _apidomNsOpenapi.XmlElement {
  }
  var _default = Xml;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/namespace.cjs
var require_namespace4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _Callback = _interopRequireDefault(require_Callback2());
  var _Components = _interopRequireDefault(require_Components2());
  var _Contact = _interopRequireDefault(require_Contact2());
  var _Discriminator = _interopRequireDefault(require_Discriminator2());
  var _Encoding = _interopRequireDefault(require_Encoding2());
  var _Example = _interopRequireDefault(require_Example2());
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation2());
  var _Header = _interopRequireDefault(require_Header2());
  var _Info = _interopRequireDefault(require_Info2());
  var _JsonSchemaDialect = _interopRequireDefault(require_JsonSchemaDialect());
  var _License = _interopRequireDefault(require_License2());
  var _Link = _interopRequireDefault(require_Link2());
  var _MediaType = _interopRequireDefault(require_MediaType2());
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow2());
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows2());
  var _Openapi = _interopRequireDefault(require_Openapi2());
  var _OpenApi = _interopRequireDefault(require_OpenApi3_1());
  var _Operation = _interopRequireDefault(require_Operation2());
  var _Parameter = _interopRequireDefault(require_Parameter2());
  var _PathItem = _interopRequireDefault(require_PathItem2());
  var _Paths = _interopRequireDefault(require_Paths2());
  var _Reference = _interopRequireDefault(require_Reference3());
  var _RequestBody = _interopRequireDefault(require_RequestBody2());
  var _Response = _interopRequireDefault(require_Response2());
  var _Responses = _interopRequireDefault(require_Responses2());
  var _Schema = _interopRequireDefault(require_Schema3());
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement2());
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme2());
  var _Server = _interopRequireDefault(require_Server2());
  var _ServerVariable = _interopRequireDefault(require_ServerVariable2());
  var _Tag = _interopRequireDefault(require_Tag3());
  var _Xml = _interopRequireDefault(require_Xml2());
  var openApi3_1 = {
    namespace: (options) => {
      const {
        base
      } = options;
      base.register("callback", _Callback.default);
      base.register("components", _Components.default);
      base.register("contact", _Contact.default);
      base.register("discriminator", _Discriminator.default);
      base.register("encoding", _Encoding.default);
      base.register("example", _Example.default);
      base.register("externalDocumentation", _ExternalDocumentation.default);
      base.register("header", _Header.default);
      base.register("info", _Info.default);
      base.register("jsonSchemaDialect", _JsonSchemaDialect.default);
      base.register("license", _License.default);
      base.register("link", _Link.default);
      base.register("mediaType", _MediaType.default);
      base.register("oAuthFlow", _OAuthFlow.default);
      base.register("oAuthFlows", _OAuthFlows.default);
      base.register("openapi", _Openapi.default);
      base.register("openApi3_1", _OpenApi.default);
      base.register("operation", _Operation.default);
      base.register("parameter", _Parameter.default);
      base.register("pathItem", _PathItem.default);
      base.register("paths", _Paths.default);
      base.register("reference", _Reference.default);
      base.register("requestBody", _RequestBody.default);
      base.register("response", _Response.default);
      base.register("responses", _Responses.default);
      base.register("schema", _Schema.default);
      base.register("securityRequirement", _SecurityRequirement.default);
      base.register("securityScheme", _SecurityScheme.default);
      base.register("server", _Server.default);
      base.register("serverVariable", _ServerVariable.default);
      base.register("tag", _Tag.default);
      base.register("xml", _Xml.default);
      return base;
    }
  };
  var _default = openApi3_1;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/nces/ComponentsPathItems.cjs
var require_ComponentsPathItems = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class ComponentsPathItems extends _apidomCore.ObjectElement {
    static primaryClass = "components-path-items";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(ComponentsPathItems.primaryClass);
    }
  }
  var _default = ComponentsPathItems;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/elements/nces/Webhooks.cjs
var require_Webhooks = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();

  class Webhooks extends _apidomCore.ObjectElement {
    static primaryClass = "webhooks";
    constructor(content, meta, attributes) {
      super(content, meta, attributes);
      this.classes.push(Webhooks.primaryClass);
    }
  }
  var _default = Webhooks;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/traversal/visitor.cjs
var require_visitor6 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.keyMap = exports.getNodeType = undefined;
  var _apidomCore = require_cjs4();
  var getNodeType = (element) => {
    if (!(0, _apidomCore.isElement)(element)) {
      return;
    }
    return `${element.element.charAt(0).toUpperCase() + element.element.slice(1)}Element`;
  };
  exports.getNodeType = getNodeType;
  var keyMap = {
    CallbackElement: ["content"],
    ComponentsElement: ["content"],
    ContactElement: ["content"],
    DiscriminatorElement: ["content"],
    Encoding: ["content"],
    Example: ["content"],
    ExternalDocumentationElement: ["content"],
    HeaderElement: ["content"],
    InfoElement: ["content"],
    LicenseElement: ["content"],
    MediaTypeElement: ["content"],
    OAuthFlowElement: ["content"],
    OAuthFlowsElement: ["content"],
    OpenApi3_1Element: ["content"],
    OperationElement: ["content"],
    ParameterElement: ["content"],
    PathItemElement: ["content"],
    PathsElement: ["content"],
    ReferenceElement: ["content"],
    RequestBodyElement: ["content"],
    ResponseElement: ["content"],
    ResponsesElement: ["content"],
    SchemaElement: ["content"],
    SecurityRequirementElement: ["content"],
    SecuritySchemeElement: ["content"],
    ServerElement: ["content"],
    ServerVariableElement: ["content"],
    TagElement: ["content"],
    ..._apidomCore.keyMap
  };
  exports.keyMap = keyMap;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/replace-empty-element.cjs
var require_replace_empty_element3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _Info = _interopRequireDefault(require_Info2());
  var _Contact = _interopRequireDefault(require_Contact2());
  var _License = _interopRequireDefault(require_License2());
  var _Paths = _interopRequireDefault(require_Paths2());
  var _PathItem = _interopRequireDefault(require_PathItem2());
  var _Components = _interopRequireDefault(require_Components2());
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation2());
  var _Operation = _interopRequireDefault(require_Operation2());
  var _Schema = _interopRequireDefault(require_Schema3());
  var _RequestBody = _interopRequireDefault(require_RequestBody2());
  var _Responses = _interopRequireDefault(require_Responses2());
  var _Response = _interopRequireDefault(require_Response2());
  var _Server = _interopRequireDefault(require_Server2());
  var _Discriminator = _interopRequireDefault(require_Discriminator2());
  var _Xml = _interopRequireDefault(require_Xml2());
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows2());
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow2());
  var _ServerVariable = _interopRequireDefault(require_ServerVariable2());
  var _Parameter = _interopRequireDefault(require_Parameter2());
  var _Example = _interopRequireDefault(require_Example2());
  var _Header = _interopRequireDefault(require_Header2());
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme2());
  var _Link = _interopRequireDefault(require_Link2());
  var _Callback = _interopRequireDefault(require_Callback2());
  var _MediaType = _interopRequireDefault(require_MediaType2());
  var _Encoding = _interopRequireDefault(require_Encoding2());
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement2());
  var _Tag = _interopRequireDefault(require_Tag3());
  var _ComponentsPathItems = _interopRequireDefault(require_ComponentsPathItems());
  var _Webhooks = _interopRequireDefault(require_Webhooks());
  var _visitor = require_visitor6();
  var schema = {
    OpenApi3_1Element: {
      info(...args) {
        return new _Info.default(...args);
      },
      servers(...args) {
        return new _apidomNsOpenapi.ServersElement(...args);
      },
      paths(...args) {
        return new _Paths.default(...args);
      },
      webhooks(...args) {
        return new _Webhooks.default(...args);
      },
      components(...args) {
        return new _Components.default(...args);
      },
      security(...args) {
        return new _apidomNsOpenapi.SecurityElement(...args);
      },
      tags(...args) {
        return new _apidomNsOpenapi.TagsElement(...args);
      },
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      }
    },
    InfoElement: {
      contact(...args) {
        return new _Contact.default(...args);
      },
      license(...args) {
        return new _License.default(...args);
      }
    },
    ServerElement: {
      variables(...args) {
        return new _apidomNsOpenapi.ServerVariablesElement(...args);
      }
    },
    ServerVariableElement: {
      enum(...args) {
        return new _apidomCore.ArrayElement(...args);
      }
    },
    PathsElement: {
      "[key: *]": function key(...args) {
        return new _PathItem.default(...args);
      }
    },
    PathItemElement: {
      get(...args) {
        return new _Operation.default(...args);
      },
      put(...args) {
        return new _Operation.default(...args);
      },
      post(...args) {
        return new _Operation.default(...args);
      },
      delete(...args) {
        return new _Operation.default(...args);
      },
      options(...args) {
        return new _Operation.default(...args);
      },
      head(...args) {
        return new _Operation.default(...args);
      },
      patch(...args) {
        return new _Operation.default(...args);
      },
      trace(...args) {
        return new _Operation.default(...args);
      },
      servers(...args) {
        return new _apidomNsOpenapi.PathItemServersElement(...args);
      },
      parameters(...args) {
        return new _apidomNsOpenapi.PathItemParametersElement(...args);
      }
    },
    OperationElement: {
      tags(...args) {
        return new _apidomNsOpenapi.OperationTagsElement(...args);
      },
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      },
      parameters(...args) {
        return new _apidomNsOpenapi.OperationParametersElement(...args);
      },
      requestBody(...args) {
        return new _RequestBody.default(...args);
      },
      responses(...args) {
        return new _Responses.default(...args);
      },
      callbacks(...args) {
        return new _apidomNsOpenapi.OperationCallbacksElement(...args);
      },
      security(...args) {
        return new _apidomNsOpenapi.OperationSecurityElement(...args);
      },
      servers(...args) {
        return new _apidomNsOpenapi.OperationServersElement(...args);
      }
    },
    ParameterElement: {
      schema(...args) {
        return new _Schema.default(...args);
      },
      examples(...args) {
        return new _apidomNsOpenapi.ParameterExamplesElement(...args);
      },
      content(...args) {
        return new _apidomNsOpenapi.ParameterContentElement(...args);
      }
    },
    RequestBodyElement: {
      content(...args) {
        return new _apidomNsOpenapi.RequestBodyContentElement(...args);
      }
    },
    MediaTypeElement: {
      schema(...args) {
        return new _Schema.default(...args);
      },
      examples(...args) {
        return new _apidomNsOpenapi.MediaTypeExamplesElement(...args);
      },
      encoding(...args) {
        return new _apidomNsOpenapi.MediaTypeEncodingElement(...args);
      }
    },
    EncodingElement: {
      headers(...args) {
        return new _apidomNsOpenapi.EncodingHeadersElement(...args);
      }
    },
    ResponsesElement: {
      "[key: *]": function key(...args) {
        return new _Response.default(...args);
      }
    },
    ResponseElement: {
      headers(...args) {
        return new _apidomNsOpenapi.ResponseHeadersElement(...args);
      },
      content(...args) {
        return new _apidomNsOpenapi.ResponseContentElement(...args);
      },
      links(...args) {
        return new _apidomNsOpenapi.ResponseLinksElement(...args);
      }
    },
    CallbackElement: {
      "[key: *]": function key(...args) {
        return new _PathItem.default(...args);
      }
    },
    LinkElement: {
      server(...args) {
        return new _Server.default(...args);
      }
    },
    HeaderElement: {
      schema(...args) {
        return new _Schema.default(...args);
      },
      examples(...args) {
        return new _apidomNsOpenapi.HeaderExamplesElement(...args);
      },
      content(...args) {
        return new _apidomNsOpenapi.HeaderContentElement(...args);
      }
    },
    ComponentsElement: {
      schemas(...args) {
        return new _apidomNsOpenapi.ComponentsSchemasElement(...args);
      },
      responses(...args) {
        return new _apidomNsOpenapi.ComponentsResponsesElement(...args);
      },
      parameters(...args) {
        return new _apidomNsOpenapi.ComponentsParametersElement(...args);
      },
      examples(...args) {
        return new _apidomNsOpenapi.ComponentsExamplesElement(...args);
      },
      requestBodies(...args) {
        return new _apidomNsOpenapi.ComponentsRequestBodiesElement(...args);
      },
      headers(...args) {
        return new _apidomNsOpenapi.ComponentsHeadersElement(...args);
      },
      securitySchemes(...args) {
        return new _apidomNsOpenapi.ComponentsSecuritySchemesElement(...args);
      },
      links(...args) {
        return new _apidomNsOpenapi.ComponentsLinksElement(...args);
      },
      callbacks(...args) {
        return new _apidomNsOpenapi.ComponentsCallbacksElement(...args);
      },
      pathItems(...args) {
        return new _ComponentsPathItems.default(...args);
      }
    },
    SecurityRequirementElement: {
      "[key: *]": function key(...args) {
        return new _apidomCore.ArrayElement(...args);
      }
    },
    TagElement: {
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      }
    },
    SchemaElement: {
      $vocabulary(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-$vocabulary");
        return element;
      },
      $defs(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-$defs");
        return element;
      },
      allOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-allOf");
        return element;
      },
      anyOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-anyOf");
        return element;
      },
      oneOf(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-oneOf");
        return element;
      },
      not(...args) {
        return new _Schema.default(...args);
      },
      if(...args) {
        return new _Schema.default(...args);
      },
      then(...args) {
        return new _Schema.default(...args);
      },
      else(...args) {
        return new _Schema.default(...args);
      },
      dependentSchemas(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-dependentSchemas");
        return element;
      },
      prefixItems(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-prefixItems");
        return element;
      },
      items(...args) {
        return new _Schema.default(...args);
      },
      contains(...args) {
        return new _Schema.default(...args);
      },
      properties(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-properties");
        return element;
      },
      patternProperties(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-patternProperties");
        return element;
      },
      additionalProperties(...args) {
        return new _Schema.default(...args);
      },
      propertyNames(...args) {
        return new _Schema.default(...args);
      },
      unevaluatedItems(...args) {
        return new _Schema.default(...args);
      },
      unevaluatedProperties(...args) {
        return new _Schema.default(...args);
      },
      type(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-type");
        return element;
      },
      enum(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-enum");
        return element;
      },
      required(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-required");
        return element;
      },
      dependentRequired(...args) {
        const element = new _apidomCore.ObjectElement(...args);
        element.classes.push("json-schema-dependentRequired");
        return element;
      },
      examples(...args) {
        const element = new _apidomCore.ArrayElement(...args);
        element.classes.push("json-schema-examples");
        return element;
      },
      contentSchema(...args) {
        return new _Schema.default(...args);
      },
      discriminator(...args) {
        return new _Discriminator.default(...args);
      },
      xml(...args) {
        return new _Xml.default(...args);
      },
      externalDocs(...args) {
        return new _ExternalDocumentation.default(...args);
      }
    },
    DiscriminatorElement: {
      mapping(...args) {
        return new _apidomNsOpenapi.DiscriminatorMappingElement(...args);
      }
    },
    SecuritySchemeElement: {
      flows(...args) {
        return new _OAuthFlows.default(...args);
      }
    },
    OAuthFlowsElement: {
      implicit(...args) {
        return new _OAuthFlow.default(...args);
      },
      password(...args) {
        return new _OAuthFlow.default(...args);
      },
      clientCredentials(...args) {
        return new _OAuthFlow.default(...args);
      },
      authorizationCode(...args) {
        return new _OAuthFlow.default(...args);
      }
    },
    OAuthFlowElement: {
      scopes(...args) {
        return new _apidomNsOpenapi.OAuthFlowScopesElement(...args);
      }
    },
    [_Webhooks.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _PathItem.default(...args);
      }
    },
    [_apidomNsOpenapi.ServerVariablesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _ServerVariable.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsSchemasElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsResponsesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Response.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsParametersElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Parameter.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsExamplesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Example.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsRequestBodiesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _RequestBody.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsHeadersElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Header.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsSecuritySchemesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _SecurityScheme.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsLinksElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Link.default(...args);
      }
    },
    [_apidomNsOpenapi.ComponentsCallbacksElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Callback.default(...args);
      }
    },
    [_ComponentsPathItems.default.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _PathItem.default(...args);
      }
    },
    [_apidomNsOpenapi.OperationCallbacksElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Callback.default(...args);
      }
    },
    [_apidomNsOpenapi.ParameterExamplesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Example.default(...args);
      }
    },
    [_apidomNsOpenapi.ParameterContentElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _MediaType.default(...args);
      }
    },
    [_apidomNsOpenapi.RequestBodyContentElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _MediaType.default(...args);
      }
    },
    [_apidomNsOpenapi.MediaTypeExamplesElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Example.default(...args);
      }
    },
    [_apidomNsOpenapi.MediaTypeEncodingElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Encoding.default(...args);
      }
    },
    [_apidomNsOpenapi.EncodingHeadersElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Header.default(...args);
      }
    },
    [_apidomNsOpenapi.ResponseHeadersElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Header.default(...args);
      }
    },
    [_apidomNsOpenapi.ResponseContentElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _MediaType.default(...args);
      }
    },
    [_apidomNsOpenapi.ResponseLinksElement.primaryClass]: {
      "[key: *]": function key(...args) {
        return new _Link.default(...args);
      }
    },
    "json-schema-$defs": {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-dependentSchemas": {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-properties": {
      "[key: *]": function key(...args) {
        return new _Schema.default(...args);
      }
    },
    [_apidomNsOpenapi.ServersElement.primaryClass]: {
      "<*>": (...args) => new _Server.default(...args)
    },
    [_apidomNsOpenapi.SecurityElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _SecurityRequirement.default(...args);
      }
    },
    [_apidomNsOpenapi.TagsElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Tag.default(...args);
      }
    },
    [_apidomNsOpenapi.PathItemServersElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Server.default(...args);
      }
    },
    [_apidomNsOpenapi.PathItemParametersElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Parameter.default(...args);
      }
    },
    [_apidomNsOpenapi.OperationParametersElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Parameter.default(...args);
      }
    },
    [_apidomNsOpenapi.OperationSecurityElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _SecurityRequirement.default(...args);
      }
    },
    [_apidomNsOpenapi.OperationServersElement.primaryClass]: {
      "<*>": function asterisk(...args) {
        return new _Server.default(...args);
      }
    },
    "json-schema-allOf": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-anyOf": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-oneOf": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    },
    "json-schema-prefixItems": {
      "<*>": function asterisk(...args) {
        return new _Schema.default(...args);
      }
    }
  };
  var findElementFactory = (ancestor, keyName) => {
    var _ancestor$classes$fir;
    const elementType = (0, _visitor.getNodeType)(ancestor);
    const keyMapping = schema[elementType] || schema[(_ancestor$classes$fir = ancestor.classes.first) == null || _ancestor$classes$fir.toValue == null ? undefined : _ancestor$classes$fir.toValue()];
    return typeof keyMapping === "undefined" ? undefined : Object.prototype.hasOwnProperty.call(keyMapping, "[key: *]") ? keyMapping["[key: *]"] : keyMapping[keyName];
  };
  var plugin = () => ({
    predicates
  }) => {
    const isEmptyElement = (element) => predicates.isStringElement(element) && predicates.includesClasses(["yaml-e-node", "yaml-e-scalar"], element);
    return {
      visitor: {
        MemberElement(element, ...rest) {
          if (!isEmptyElement(element.value))
            return;
          const [, , , ancestors] = rest;
          const ancestor = ancestors[ancestors.length - 1];
          const elementFactory = findElementFactory(ancestor, element.key.toValue());
          if (typeof elementFactory === "undefined")
            return;
          const originalValue = element.value;
          return new _apidomCore.MemberElement(element.key, elementFactory.call({
            context: ancestor
          }, undefined, originalValue.meta.clone(), originalValue.attributes.clone()), element.meta.clone(), element.attributes.clone());
        },
        StringElement(element, ...rest) {
          if (!isEmptyElement(element))
            return;
          const [, , , ancestors] = rest;
          const ancestor = ancestors[ancestors.length - 1];
          if (!predicates.isArrayElement(ancestor))
            return;
          const elementFactory = findElementFactory(ancestor, "<*>");
          if (typeof elementFactory === "undefined")
            return;
          return elementFactory.call({
            context: element
          }, undefined, element.meta.clone(), element.attributes.clone());
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/normalize-parameters.cjs
var require_normalize_parameters = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var plugin = () => ({
    predicates
  }) => {
    const parameterEquals = (parameter1, parameter2) => {
      if (!predicates.isParameterElement(parameter1))
        return false;
      if (!predicates.isParameterElement(parameter2))
        return false;
      if (!predicates.isStringElement(parameter1.name))
        return false;
      if (!predicates.isStringElement(parameter1.in))
        return false;
      if (!predicates.isStringElement(parameter2.name))
        return false;
      if (!predicates.isStringElement(parameter2.in))
        return false;
      return (0, _apidomCore.toValue)(parameter1.name) === (0, _apidomCore.toValue)(parameter2.name) && (0, _apidomCore.toValue)(parameter1.in) === (0, _apidomCore.toValue)(parameter2.in);
    };
    const pathItemParameters = [];
    return {
      visitor: {
        PathItemElement: {
          enter(pathItemElement, key, parent, path, ancestors) {
            if (ancestors.some(predicates.isComponentsElement)) {
              return;
            }
            const {
              parameters
            } = pathItemElement;
            if (predicates.isArrayElement(parameters)) {
              pathItemParameters.push([...parameters.content]);
            } else {
              pathItemParameters.push([]);
            }
          },
          leave() {
            pathItemParameters.pop();
          }
        },
        OperationElement: {
          leave(operationElement) {
            const parentPathItemParameters = (0, _ramda.last)(pathItemParameters);
            if (!Array.isArray(parentPathItemParameters) || parentPathItemParameters.length === 0) {
              return;
            }
            const operationParameters = (0, _ramda.pathOr)([], ["parameters", "content"], operationElement);
            const mergedParameters = (0, _ramda.uniqWith)(parameterEquals, [...operationParameters, ...parentPathItemParameters]);
            operationElement.parameters = new _apidomNsOpenapi.OperationParametersElement(mergedParameters);
          }
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/normalize-security-requirements.cjs
var require_normalize_security_requirements = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var plugin = () => ({
    predicates
  }) => {
    let topLevelSecurity;
    return {
      visitor: {
        OpenApi3_1Element: {
          enter(openapiElement) {
            if (predicates.isArrayElement(openapiElement.security)) {
              topLevelSecurity = openapiElement.security;
            }
          },
          leave() {
            topLevelSecurity = undefined;
          }
        },
        OperationElement: {
          leave(operationElement, key, parent, path, ancestors) {
            if (ancestors.some(predicates.isComponentsElement)) {
              return;
            }
            const missingOperationLevelSecurity = typeof operationElement.security === "undefined";
            const hasTopLevelSecurity = typeof topLevelSecurity !== "undefined";
            if (missingOperationLevelSecurity && hasTopLevelSecurity) {
              var _topLevelSecurity;
              operationElement.security = new _apidomNsOpenapi.OperationSecurityElement((_topLevelSecurity = topLevelSecurity) == null ? undefined : _topLevelSecurity.content);
            }
          }
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/normalize-servers.cjs
var require_normalize_servers = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _apidomNsOpenapi = require_cjs8();
  var plugin = () => ({
    predicates
  }) => {
    let openAPIServers;
    const pathItemServers = [];
    return {
      visitor: {
        OpenApi3_1Element: {
          enter(openapiElement) {
            if (predicates.isArrayElement(openapiElement.servers)) {
              var _openapiElement$serve;
              openAPIServers = (_openapiElement$serve = openapiElement.servers) == null ? undefined : _openapiElement$serve.content;
            }
          },
          leave() {
            openAPIServers = undefined;
          }
        },
        PathItemElement: {
          enter(pathItemElement, key, parent, path, ancestors) {
            if (ancestors.some(predicates.isComponentsElement)) {
              return;
            }
            if (typeof pathItemElement.servers === "undefined" && typeof openAPIServers !== "undefined") {
              pathItemElement.servers = new _apidomNsOpenapi.PathItemServersElement(openAPIServers);
            }
            const {
              servers
            } = pathItemElement;
            if (typeof servers !== "undefined" && predicates.isArrayElement(servers)) {
              pathItemServers.push([...servers.content]);
            } else {
              pathItemServers.push(undefined);
            }
          },
          leave() {
            pathItemServers.pop();
          }
        },
        OperationElement: {
          enter(operationElement) {
            const parentPathItemServers = (0, _ramda.last)(pathItemServers);
            if (typeof parentPathItemServers === "undefined")
              return;
            if (predicates.isArrayElement(operationElement.servers))
              return;
            operationElement.servers = new _apidomNsOpenapi.OperationServersElement(parentPathItemServers);
          }
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/normalize-operation-ids.cjs
var require_normalize_operation_ids = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var removeSpaces = (operationId) => {
    return operationId.replace(/\s/g, "");
  };
  var replaceSpecialCharsWithUnderscore = (operationId) => {
    return operationId.replace(/\W/gi, "_");
  };
  var createNormalizedOperationId = (path, method) => {
    const normalizedMethod = replaceSpecialCharsWithUnderscore(removeSpaces(method.toLowerCase()));
    const normalizedPath = replaceSpecialCharsWithUnderscore(removeSpaces(path));
    return `${normalizedMethod}${normalizedPath}`;
  };
  var normalizeOperationId = (operationId, path, method) => {
    const withoutSpaces = removeSpaces(operationId);
    if (withoutSpaces.length > 0) {
      return replaceSpecialCharsWithUnderscore(withoutSpaces);
    }
    return createNormalizedOperationId(path, method);
  };
  var plugin = ({
    operationIdNormalizer = normalizeOperationId
  } = {}) => ({
    predicates,
    namespace
  }) => {
    const paths = [];
    const normalizedOperations = [];
    const links = [];
    return {
      visitor: {
        OpenApi3_1Element: {
          leave() {
            const normalizedOperationGroups = (0, _ramda.groupBy)((operationElement) => {
              return (0, _apidomCore.toValue)(operationElement.operationId);
            }, normalizedOperations);
            Object.entries(normalizedOperationGroups).forEach(([normalizedOperationId, operationElements]) => {
              if (!Array.isArray(operationElements))
                return;
              if (operationElements.length <= 1)
                return;
              operationElements.forEach((operationElement, index) => {
                const indexedNormalizedOperationId = `${normalizedOperationId}${index + 1}`;
                operationElement.operationId = new namespace.elements.String(indexedNormalizedOperationId);
              });
            });
            links.forEach((linkElement) => {
              var _operationElement$ope;
              if (typeof linkElement.operationId === "undefined")
                return;
              const linkOperationId = String((0, _apidomCore.toValue)(linkElement.operationId));
              const operationElement = normalizedOperations.find((normalizedOperationElement) => {
                const originalOperationId = (0, _apidomCore.toValue)(normalizedOperationElement.meta.get("originalOperationId"));
                return originalOperationId === linkOperationId;
              });
              if (typeof operationElement === "undefined")
                return;
              linkElement.operationId = (_operationElement$ope = operationElement.operationId) == null ? undefined : _operationElement$ope.clone();
              linkElement.meta.set("originalOperationId", linkOperationId);
              linkElement.set("__originalOperationId", linkOperationId);
            });
            normalizedOperations.length = 0;
            links.length = 0;
          }
        },
        PathItemElement: {
          enter(pathItemElement) {
            const path = (0, _ramda.defaultTo)("path", (0, _apidomCore.toValue)(pathItemElement.meta.get("path")));
            paths.push(path);
          },
          leave() {
            paths.pop();
          }
        },
        OperationElement: {
          enter(operationElement) {
            if (typeof operationElement.operationId === "undefined")
              return;
            const originalOperationId = String((0, _apidomCore.toValue)(operationElement.operationId));
            const path = (0, _ramda.last)(paths);
            const method = (0, _ramda.defaultTo)("method", (0, _apidomCore.toValue)(operationElement.meta.get("http-method")));
            const normalizedOperationId = operationIdNormalizer(originalOperationId, path, method);
            if (originalOperationId === normalizedOperationId)
              return;
            operationElement.operationId = new namespace.elements.String(normalizedOperationId);
            operationElement.set("__originalOperationId", originalOperationId);
            operationElement.meta.set("originalOperationId", originalOperationId);
            normalizedOperations.push(operationElement);
          }
        },
        LinkElement: {
          leave(linkElement) {
            if (!predicates.isLinkElement(linkElement))
              return;
            if (typeof linkElement.operationId === "undefined")
              return;
            links.push(linkElement);
          }
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/normalize-parameter-examples.cjs
var require_normalize_parameter_examples = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var plugin = () => ({
    predicates
  }) => {
    return {
      visitor: {
        ParameterElement: {
          leave(parameterElement, key, parent, path, ancestors) {
            var _parameterElement$sch, _parameterElement$sch2;
            if (ancestors.some(predicates.isComponentsElement)) {
              return;
            }
            if (typeof parameterElement.schema === "undefined" || !predicates.isSchemaElement(parameterElement.schema)) {
              return;
            }
            if (typeof ((_parameterElement$sch = parameterElement.schema) == null ? undefined : _parameterElement$sch.example) === "undefined" && typeof ((_parameterElement$sch2 = parameterElement.schema) == null ? undefined : _parameterElement$sch2.examples) === "undefined") {
              return;
            }
            if (typeof parameterElement.examples !== "undefined" && predicates.isObjectElement(parameterElement.examples)) {
              const examples = parameterElement.examples.map((example) => {
                var _example$value;
                return (_example$value = example.value) == null ? undefined : _example$value.clone();
              });
              if (typeof parameterElement.schema.examples !== "undefined") {
                parameterElement.schema.set("examples", examples);
              }
              if (typeof parameterElement.schema.example !== "undefined") {
                parameterElement.schema.set("example", examples);
              }
              return;
            }
            if (typeof parameterElement.example !== "undefined") {
              if (typeof parameterElement.schema.examples !== "undefined") {
                parameterElement.schema.set("examples", [parameterElement.example.clone()]);
              }
              if (typeof parameterElement.schema.example !== "undefined") {
                parameterElement.schema.set("example", parameterElement.example.clone());
              }
            }
          }
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/plugins/normalize-header-examples.cjs
var require_normalize_header_examples = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var plugin = () => ({
    predicates
  }) => {
    return {
      visitor: {
        HeaderElement: {
          leave(headerElement, key, parent, path, ancestors) {
            var _headerElement$schema, _headerElement$schema2;
            if (ancestors.some(predicates.isComponentsElement)) {
              return;
            }
            if (typeof headerElement.schema === "undefined" || !predicates.isSchemaElement(headerElement.schema)) {
              return;
            }
            if (typeof ((_headerElement$schema = headerElement.schema) == null ? undefined : _headerElement$schema.example) === "undefined" && typeof ((_headerElement$schema2 = headerElement.schema) == null ? undefined : _headerElement$schema2.examples) === "undefined") {
              return;
            }
            if (typeof headerElement.examples !== "undefined" && predicates.isObjectElement(headerElement.examples)) {
              const examples = headerElement.examples.map((example) => {
                var _example$value;
                return (_example$value = example.value) == null ? undefined : _example$value.clone();
              });
              if (typeof headerElement.schema.examples !== "undefined") {
                headerElement.schema.set("examples", examples);
              }
              if (typeof headerElement.schema.example !== "undefined") {
                headerElement.schema.set("example", examples);
              }
              return;
            }
            if (typeof headerElement.example !== "undefined") {
              if (typeof headerElement.schema.examples !== "undefined") {
                headerElement.schema.set("examples", [headerElement.example.clone()]);
              }
              if (typeof headerElement.schema.example !== "undefined") {
                headerElement.schema.set("example", headerElement.example.clone());
              }
            }
          }
        }
      }
    };
  };
  var _default = plugin;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/predicates.cjs
var require_predicates9 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.isServerVariableElement = exports.isServerElement = exports.isSecurityRequirementElement = exports.isSchemaElement = exports.isResponsesElement = exports.isResponseElement = exports.isRequestBodyElement = exports.isReferenceElementExternal = exports.isReferenceElement = exports.isPathsElement = exports.isPathItemElementExternal = exports.isPathItemElement = exports.isParameterElement = exports.isOperationElement = exports.isOpenapiElement = exports.isOpenApi3_1Element = exports.isMediaTypeElement = exports.isLinkElementExternal = exports.isLinkElement = exports.isLicenseElement = exports.isJsonSchemaDialectElement = exports.isInfoElement = exports.isHeaderElement = exports.isExternalDocumentationElement = exports.isExampleElement = exports.isContactElement = exports.isComponentsElement = exports.isCallbackElement = exports.isBooleanJsonSchemaElement = undefined;
  var _apidomCore = require_cjs4();
  var _Callback = _interopRequireDefault(require_Callback2());
  var _Components = _interopRequireDefault(require_Components2());
  var _Contact = _interopRequireDefault(require_Contact2());
  var _Example = _interopRequireDefault(require_Example2());
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation2());
  var _Header = _interopRequireDefault(require_Header2());
  var _Info = _interopRequireDefault(require_Info2());
  var _JsonSchemaDialect = _interopRequireDefault(require_JsonSchemaDialect());
  var _License = _interopRequireDefault(require_License2());
  var _Link = _interopRequireDefault(require_Link2());
  var _Openapi = _interopRequireDefault(require_Openapi2());
  var _OpenApi = _interopRequireDefault(require_OpenApi3_1());
  var _Operation = _interopRequireDefault(require_Operation2());
  var _Parameter = _interopRequireDefault(require_Parameter2());
  var _PathItem = _interopRequireDefault(require_PathItem2());
  var _Paths = _interopRequireDefault(require_Paths2());
  var _Reference = _interopRequireDefault(require_Reference3());
  var _RequestBody = _interopRequireDefault(require_RequestBody2());
  var _Response = _interopRequireDefault(require_Response2());
  var _Responses = _interopRequireDefault(require_Responses2());
  var _Schema = _interopRequireDefault(require_Schema3());
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement2());
  var _Server = _interopRequireDefault(require_Server2());
  var _ServerVariable = _interopRequireDefault(require_ServerVariable2());
  var _MediaType = _interopRequireDefault(require_MediaType2());
  var isCallbackElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Callback.default || hasBasicElementProps(element) && isElementType("callback", element) && primitiveEq("object", element);
  });
  exports.isCallbackElement = isCallbackElement;
  var isComponentsElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Components.default || hasBasicElementProps(element) && isElementType("components", element) && primitiveEq("object", element);
  });
  exports.isComponentsElement = isComponentsElement;
  var isContactElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Contact.default || hasBasicElementProps(element) && isElementType("contact", element) && primitiveEq("object", element);
  });
  exports.isContactElement = isContactElement;
  var isExampleElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Example.default || hasBasicElementProps(element) && isElementType("example", element) && primitiveEq("object", element);
  });
  exports.isExampleElement = isExampleElement;
  var isExternalDocumentationElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _ExternalDocumentation.default || hasBasicElementProps(element) && isElementType("externalDocumentation", element) && primitiveEq("object", element);
  });
  exports.isExternalDocumentationElement = isExternalDocumentationElement;
  var isHeaderElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Header.default || hasBasicElementProps(element) && isElementType("header", element) && primitiveEq("object", element);
  });
  exports.isHeaderElement = isHeaderElement;
  var isInfoElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Info.default || hasBasicElementProps(element) && isElementType("info", element) && primitiveEq("object", element);
  });
  exports.isInfoElement = isInfoElement;
  var isJsonSchemaDialectElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _JsonSchemaDialect.default || hasBasicElementProps(element) && isElementType("jsonSchemaDialect", element) && primitiveEq("string", element);
  });
  exports.isJsonSchemaDialectElement = isJsonSchemaDialectElement;
  var isLicenseElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _License.default || hasBasicElementProps(element) && isElementType("license", element) && primitiveEq("object", element);
  });
  exports.isLicenseElement = isLicenseElement;
  var isLinkElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Link.default || hasBasicElementProps(element) && isElementType("link", element) && primitiveEq("object", element);
  });
  exports.isLinkElement = isLinkElement;
  var isLinkElementExternal = (element) => {
    if (!isLinkElement(element)) {
      return false;
    }
    if (!(0, _apidomCore.isStringElement)(element.operationRef)) {
      return false;
    }
    const value = element.operationRef.toValue();
    return typeof value === "string" && value.length > 0 && !value.startsWith("#");
  };
  exports.isLinkElementExternal = isLinkElementExternal;
  var isOpenapiElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Openapi.default || hasBasicElementProps(element) && isElementType("openapi", element) && primitiveEq("string", element);
  });
  exports.isOpenapiElement = isOpenapiElement;
  var isOpenApi3_1Element = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq,
    hasClass
  }) => {
    return (element) => element instanceof _OpenApi.default || hasBasicElementProps(element) && isElementType("openApi3_1", element) && primitiveEq("object", element) && hasClass("api", element);
  });
  exports.isOpenApi3_1Element = isOpenApi3_1Element;
  var isOperationElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Operation.default || hasBasicElementProps(element) && isElementType("operation", element) && primitiveEq("object", element);
  });
  exports.isOperationElement = isOperationElement;
  var isParameterElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Parameter.default || hasBasicElementProps(element) && isElementType("parameter", element) && primitiveEq("object", element);
  });
  exports.isParameterElement = isParameterElement;
  var isPathItemElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _PathItem.default || hasBasicElementProps(element) && isElementType("pathItem", element) && primitiveEq("object", element);
  });
  exports.isPathItemElement = isPathItemElement;
  var isPathItemElementExternal = (element) => {
    if (!isPathItemElement(element)) {
      return false;
    }
    if (!(0, _apidomCore.isStringElement)(element.$ref)) {
      return false;
    }
    const value = element.$ref.toValue();
    return typeof value === "string" && value.length > 0 && !value.startsWith("#");
  };
  exports.isPathItemElementExternal = isPathItemElementExternal;
  var isPathsElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Paths.default || hasBasicElementProps(element) && isElementType("paths", element) && primitiveEq("object", element);
  });
  exports.isPathsElement = isPathsElement;
  var isReferenceElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Reference.default || hasBasicElementProps(element) && isElementType("reference", element) && primitiveEq("object", element);
  });
  exports.isReferenceElement = isReferenceElement;
  var isReferenceElementExternal = (element) => {
    if (!isReferenceElement(element)) {
      return false;
    }
    if (!(0, _apidomCore.isStringElement)(element.$ref)) {
      return false;
    }
    const value = element.$ref.toValue();
    return typeof value === "string" && value.length > 0 && !value.startsWith("#");
  };
  exports.isReferenceElementExternal = isReferenceElementExternal;
  var isRequestBodyElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _RequestBody.default || hasBasicElementProps(element) && isElementType("requestBody", element) && primitiveEq("object", element);
  });
  exports.isRequestBodyElement = isRequestBodyElement;
  var isResponseElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Response.default || hasBasicElementProps(element) && isElementType("response", element) && primitiveEq("object", element);
  });
  exports.isResponseElement = isResponseElement;
  var isResponsesElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Responses.default || hasBasicElementProps(element) && isElementType("responses", element) && primitiveEq("object", element);
  });
  exports.isResponsesElement = isResponsesElement;
  var isSchemaElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Schema.default || hasBasicElementProps(element) && isElementType("schema", element) && primitiveEq("object", element);
  });
  exports.isSchemaElement = isSchemaElement;
  var isBooleanJsonSchemaElement = (element) => {
    return (0, _apidomCore.isBooleanElement)(element) && element.classes.includes("boolean-json-schema");
  };
  exports.isBooleanJsonSchemaElement = isBooleanJsonSchemaElement;
  var isSecurityRequirementElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _SecurityRequirement.default || hasBasicElementProps(element) && isElementType("securityRequirement", element) && primitiveEq("object", element);
  });
  exports.isSecurityRequirementElement = isSecurityRequirementElement;
  var isServerElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _Server.default || hasBasicElementProps(element) && isElementType("server", element) && primitiveEq("object", element);
  });
  exports.isServerElement = isServerElement;
  var isServerVariableElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _ServerVariable.default || hasBasicElementProps(element) && isElementType("serverVariable", element) && primitiveEq("object", element);
  });
  exports.isServerVariableElement = isServerVariableElement;
  var isMediaTypeElement = (0, _apidomCore.createPredicate)(({
    hasBasicElementProps,
    isElementType,
    primitiveEq
  }) => {
    return (element) => element instanceof _MediaType.default || hasBasicElementProps(element) && isElementType("mediaType", element) && primitiveEq("object", element);
  });
  exports.isMediaTypeElement = isMediaTypeElement;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/toolbox.cjs
var require_toolbox4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var openApi3_1Predicates = _interopRequireWildcard(require_predicates9());
  var _namespace = _interopRequireDefault(require_namespace4());
  var createToolbox = () => {
    const namespace = (0, _apidomCore.createNamespace)(_namespace.default);
    const predicates = {
      ...openApi3_1Predicates,
      isStringElement: _apidomCore.isStringElement,
      isArrayElement: _apidomCore.isArrayElement,
      isObjectElement: _apidomCore.isObjectElement,
      includesClasses: _apidomCore.includesClasses
    };
    return {
      predicates,
      namespace
    };
  };
  var _default = createToolbox;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/predicates.cjs
var require_predicates10 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.isOpenApi3_1LikeElement = undefined;
  var _apidomCore = require_cjs4();
  var isOpenApi3_1LikeElement = (element) => {
    return (0, _apidomCore.isObjectElement)(element) && element.hasKey("openapi") && element.hasKey("info");
  };
  exports.isOpenApi3_1LikeElement = isOpenApi3_1LikeElement;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/index.cjs
var require_open_api_3_1 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomNsOpenapi = require_cjs8();
  var _OpenApi = _interopRequireDefault(require_OpenApi3_1());
  var OpenApi3_1Visitor = (0, _stampit.default)(_apidomNsOpenapi.FixedFieldsVisitor, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "OpenApi"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _OpenApi.default;
      this.openApiSemanticElement = this.element;
    },
    methods: {
      ObjectElement(objectElement) {
        this.openApiGenericElement = objectElement;
        return _apidomNsOpenapi.FixedFieldsVisitor.compose.methods.ObjectElement.call(this, objectElement);
      }
    }
  });
  var _default = OpenApi3_1Visitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/info/index.cjs
var require_info2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Info = _interopRequireDefault(require_Info2());
  var {
    visitors: {
      document: {
        objects: {
          Info: {
            $visitor: BaseInfoVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var InfoVisitor = (0, _stampit.default)(BaseInfoVisitor, {
    init() {
      this.element = new _Info.default;
    }
  });
  var _default = InfoVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/info/SummaryVisitor.cjs
var require_SummaryVisitor4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var SummaryVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = SummaryVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/contact/index.cjs
var require_contact2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Contact = _interopRequireDefault(require_Contact2());
  var {
    visitors: {
      document: {
        objects: {
          Contact: {
            $visitor: BaseContactVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ContactVisitor = (0, _stampit.default)(BaseContactVisitor, {
    init() {
      this.element = new _Contact.default;
    }
  });
  var _default = ContactVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/license/index.cjs
var require_license2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _License = _interopRequireDefault(require_License2());
  var {
    visitors: {
      document: {
        objects: {
          License: {
            $visitor: BaseLicenseVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var LicenseVisitor = (0, _stampit.default)(BaseLicenseVisitor, {
    init() {
      this.element = new _License.default;
    }
  });
  var _default = LicenseVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/license/IdentifierVisitor.cjs
var require_IdentifierVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var IdentifierVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = IdentifierVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/link/index.cjs
var require_link2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Link = _interopRequireDefault(require_Link2());
  var {
    visitors: {
      document: {
        objects: {
          Link: {
            $visitor: BaseLinkVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var LinkVisitor = (0, _stampit.default)(BaseLinkVisitor, {
    init() {
      this.element = new _Link.default;
    }
  });
  var _default = LinkVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/JsonSchemaDialectVisitor.cjs
var require_JsonSchemaDialectVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _JsonSchemaDialect = _interopRequireDefault(require_JsonSchemaDialect());
  var JsonSchemaDialectVisitor = (0, _stampit.default)(_apidomNsOpenapi.SpecificationVisitor, _apidomNsOpenapi.FallbackVisitor, {
    methods: {
      StringElement(stringElement) {
        const jsonSchemaDialectElement = new _JsonSchemaDialect.default(stringElement.toValue());
        this.copyMetaAndAttributes(stringElement, jsonSchemaDialectElement);
        this.element = jsonSchemaDialectElement;
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = JsonSchemaDialectVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/server/index.cjs
var require_server2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Server = _interopRequireDefault(require_Server2());
  var {
    visitors: {
      document: {
        objects: {
          Server: {
            $visitor: BaseServerVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ServerVisitor = (0, _stampit.default)(BaseServerVisitor, {
    init() {
      this.element = new _Server.default;
    }
  });
  var _default = ServerVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/server-variable/index.cjs
var require_server_variable2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _ServerVariable = _interopRequireDefault(require_ServerVariable2());
  var {
    visitors: {
      document: {
        objects: {
          ServerVariable: {
            $visitor: BaseServerVariableVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ServerVariableVisitor = (0, _stampit.default)(BaseServerVariableVisitor, {
    init() {
      this.element = new _ServerVariable.default;
    }
  });
  var _default = ServerVariableVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/media-type/index.cjs
var require_media_type2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _MediaType = _interopRequireDefault(require_MediaType2());
  var {
    visitors: {
      document: {
        objects: {
          MediaType: {
            $visitor: BaseMediaTypeVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var MediaTypeVisitor = (0, _stampit.default)(BaseMediaTypeVisitor, {
    init() {
      this.element = new _MediaType.default;
    }
  });
  var _default = MediaTypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/security-requirement/index.cjs
var require_security_requirement2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement2());
  var {
    visitors: {
      document: {
        objects: {
          SecurityRequirement: {
            $visitor: BaseSecurityRequirementVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var SecurityRequirementVisitor = (0, _stampit.default)(BaseSecurityRequirementVisitor, {
    init() {
      this.element = new _SecurityRequirement.default;
    }
  });
  var _default = SecurityRequirementVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/components/index.cjs
var require_components2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Components = _interopRequireDefault(require_Components2());
  var {
    visitors: {
      document: {
        objects: {
          Components: {
            $visitor: BaseComponentsVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ComponentsVisitor = (0, _stampit.default)(BaseComponentsVisitor, {
    init() {
      this.element = new _Components.default;
    }
  });
  var _default = ComponentsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/tag/index.cjs
var require_tag2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Tag = _interopRequireDefault(require_Tag3());
  var {
    visitors: {
      document: {
        objects: {
          Tag: {
            $visitor: BaseTagVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var TagVisitor = (0, _stampit.default)(BaseTagVisitor, {
    init() {
      this.element = new _Tag.default;
    }
  });
  var _default = TagVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/reference/index.cjs
var require_reference2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Reference = _interopRequireDefault(require_Reference3());
  var {
    visitors: {
      document: {
        objects: {
          Reference: {
            $visitor: BaseReferenceVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ReferenceVisitor = (0, _stampit.default)(BaseReferenceVisitor, {
    init() {
      this.element = new _Reference.default;
    }
  });
  var _default = ReferenceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/reference/SummaryVisitor.cjs
var require_SummaryVisitor5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var SummaryVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = SummaryVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/reference/DescriptionVisitor.cjs
var require_DescriptionVisitor16 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var DescriptionVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/parameter/index.cjs
var require_parameter2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Parameter = _interopRequireDefault(require_Parameter2());
  var {
    visitors: {
      document: {
        objects: {
          Parameter: {
            $visitor: BaseParameterVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ParameterVisitor = (0, _stampit.default)(BaseParameterVisitor, {
    init() {
      this.element = new _Parameter.default;
    }
  });
  var _default = ParameterVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/header/index.cjs
var require_header2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Header = _interopRequireDefault(require_Header2());
  var {
    visitors: {
      document: {
        objects: {
          Header: {
            $visitor: BaseHeaderVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var HeaderVisitor = (0, _stampit.default)(BaseHeaderVisitor, {
    init() {
      this.element = new _Header.default;
    }
  });
  var _default = HeaderVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ParentSchemaAwareVisitor.cjs
var require_ParentSchemaAwareVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var ParentSchemaAwareVisitor = (0, _stampit.default)({
    props: {
      parent: null
    },
    init({
      parent = this.parent
    }) {
      this.parent = parent;
      this.passingOptionsNames = [...this.passingOptionsNames, "parent"];
    }
  });
  var _default = ParentSchemaAwareVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/index.cjs
var require_schema6 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _predicates = require_predicates9();
  var _Schema = _interopRequireDefault(require_Schema3());
  var _JsonSchemaDialect = _interopRequireDefault(require_JsonSchemaDialect());
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var SchemaVisitor = (0, _stampit.default)(_apidomNsOpenapi.FixedFieldsVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"]),
      canSupportSpecificationExtensions: true
    },
    init() {
      const getJsonSchemaDialect = () => {
        let jsonSchemaDialect;
        if (this.openApiSemanticElement !== null && (0, _predicates.isJsonSchemaDialectElement)(this.openApiSemanticElement.jsonSchemaDialect)) {
          jsonSchemaDialect = this.openApiSemanticElement.jsonSchemaDialect.toValue();
        } else if (this.openApiGenericElement !== null && (0, _apidomCore.isStringElement)(this.openApiGenericElement.get("jsonSchemaDialect"))) {
          jsonSchemaDialect = this.openApiGenericElement.get("jsonSchemaDialect").toValue();
        } else {
          jsonSchemaDialect = _JsonSchemaDialect.default.default.toValue();
        }
        return jsonSchemaDialect;
      };
      const handle$schema = (objectElement) => {
        if ((0, _ramdaAdjunct.isNull)(this.parent) && !(0, _apidomCore.isStringElement)(objectElement.get("$schema"))) {
          this.element.setMetaProperty("inherited$schema", getJsonSchemaDialect());
        } else if ((0, _predicates.isSchemaElement)(this.parent) && !(0, _apidomCore.isStringElement)(objectElement.get("$schema"))) {
          var _this$parent$meta$get, _this$parent$$schema;
          const inherited$schema = (0, _ramda.defaultTo)((_this$parent$meta$get = this.parent.meta.get("inherited$schema")) == null ? undefined : _this$parent$meta$get.toValue(), (_this$parent$$schema = this.parent.$schema) == null ? undefined : _this$parent$$schema.toValue());
          this.element.setMetaProperty("inherited$schema", inherited$schema);
        }
      };
      const handle$id = (objectElement) => {
        var _objectElement$get;
        const inherited$id = this.parent !== null ? this.parent.getMetaProperty("inherited$id", []).clone() : new _apidomCore.ArrayElement;
        const $id = (_objectElement$get = objectElement.get("$id")) == null ? undefined : _objectElement$get.toValue();
        if ((0, _ramdaAdjunct.isNonEmptyString)($id)) {
          inherited$id.push($id);
        }
        this.element.setMetaProperty("inherited$id", inherited$id);
      };
      this.ObjectElement = function _ObjectElement(objectElement) {
        this.element = new _Schema.default;
        handle$schema(objectElement);
        handle$id(objectElement);
        this.parent = this.element;
        const result = _apidomNsOpenapi.FixedFieldsVisitor.compose.methods.ObjectElement.call(this, objectElement);
        if ((0, _apidomCore.isStringElement)(this.element.$ref)) {
          this.element.classes.push("reference-element");
          this.element.setMetaProperty("referenced-element", "schema");
        }
        return result;
      };
      this.BooleanElement = function _BooleanElement(booleanElement) {
        this.element = booleanElement.clone();
        this.element.classes.push("boolean-json-schema");
        return _apidomCore.BREAK;
      };
    }
  });
  var _default = SchemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$schemaVisitor.cjs
var require_$schemaVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var $schemaVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = $schemaVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$vocabularyVisitor.cjs
var require_$vocabularyVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var $vocabularyVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      ObjectElement(objectElement) {
        this.element = objectElement.clone();
        this.element.classes.push("json-schema-$vocabulary");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = $vocabularyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$idVisitor.cjs
var require_$idVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var $idVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = $idVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$anchorVisitor.cjs
var require_$anchorVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var $anchorVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = $anchorVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$dynamicAnchorVisitor.cjs
var require_$dynamicAnchorVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var $dynamicAnchorVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = $dynamicAnchorVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$dynamicRefVisitor.cjs
var require_$dynamicRefVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var $dynamicRefVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = $dynamicRefVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$refVisitor.cjs
var require_$refVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var $refVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("reference-value");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = $refVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$defsVisitor.cjs
var require_$defsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var $defsVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"])
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-$defs");
    }
  });
  var _default = $defsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/$commentVisitor.cjs
var require_$commentVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var $commentVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = $commentVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/AllOfVisitor.cjs
var require_AllOfVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var AllOfVisitor = (0, _stampit.default)(_apidomNsOpenapi.SpecificationVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-allOf");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          if ((0, _apidomCore.isObjectElement)(item)) {
            const schemaElement = this.toRefractedElement(["document", "objects", "Schema"], item);
            this.element.push(schemaElement);
          } else {
            const element = item.clone();
            this.element.push(element);
          }
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = AllOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/AnyOfVisitor.cjs
var require_AnyOfVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var AnyOfVisitor = (0, _stampit.default)(_apidomNsOpenapi.SpecificationVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-anyOf");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          if ((0, _apidomCore.isObjectElement)(item)) {
            const schemaElement = this.toRefractedElement(["document", "objects", "Schema"], item);
            this.element.push(schemaElement);
          } else {
            const element = item.clone();
            this.element.push(element);
          }
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = AnyOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/OneOfVisitor.cjs
var require_OneOfVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var OneOfVisitor = (0, _stampit.default)(_apidomNsOpenapi.SpecificationVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-oneOf");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          if ((0, _apidomCore.isObjectElement)(item)) {
            const schemaElement = this.toRefractedElement(["document", "objects", "Schema"], item);
            this.element.push(schemaElement);
          } else {
            const element = item.clone();
            this.element.push(element);
          }
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = OneOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/DependentSchemasVisitor.cjs
var require_DependentSchemasVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var DependentSchemasVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"])
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-dependentSchemas");
    }
  });
  var _default = DependentSchemasVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/PrefixItemsVisitor.cjs
var require_PrefixItemsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var PrefixItemsVisitor = (0, _stampit.default)(_apidomNsOpenapi.SpecificationVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    init() {
      this.element = new _apidomCore.ArrayElement;
      this.element.classes.push("json-schema-prefixItems");
    },
    methods: {
      ArrayElement(arrayElement) {
        arrayElement.forEach((item) => {
          if ((0, _apidomCore.isObjectElement)(item)) {
            const schemaElement = this.toRefractedElement(["document", "objects", "Schema"], item);
            this.element.push(schemaElement);
          } else {
            const element = item.clone();
            this.element.push(element);
          }
        });
        this.copyMetaAndAttributes(arrayElement, this.element);
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = PrefixItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/PropertiesVisitor.cjs
var require_PropertiesVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var PropertiesVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"])
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-properties");
    }
  });
  var _default = PropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/PatternProperties.cjs
var require_PatternProperties = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var _ParentSchemaAwareVisitor = _interopRequireDefault(require_ParentSchemaAwareVisitor2());
  var PatternPropertiesVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _ParentSchemaAwareVisitor.default, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"])
    },
    init() {
      this.element = new _apidomCore.ObjectElement;
      this.element.classes.push("json-schema-patternProperties");
    }
  });
  var _default = PatternPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/TypeVisitor.cjs
var require_TypeVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var TypeVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      StringElement(stringElement) {
        this.element = stringElement.clone();
        this.element.classes.push("json-schema-type");
        return _apidomCore.BREAK;
      },
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-type");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = TypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/EnumVisitor.cjs
var require_EnumVisitor3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomAst = require_cjs3();
  var _apidomNsOpenapi = require_cjs8();
  var EnumVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-enum");
        return _apidomAst.BREAK;
      }
    }
  });
  var _default = EnumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ConstVisitor.cjs
var require_ConstVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ConstVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ConstVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MultipleOfVisitor.cjs
var require_MultipleOfVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MultipleOfVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MultipleOfVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MaximumVisitor.cjs
var require_MaximumVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MaximumVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MaximumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ExclusiveMaximumVisitor.cjs
var require_ExclusiveMaximumVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ExclusiveMaximumVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ExclusiveMaximumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MinimumVisitor.cjs
var require_MinimumVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MinimumVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MinimumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ExclusiveMinimumVisitor.cjs
var require_ExclusiveMinimumVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ExclusiveMinimumVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ExclusiveMinimumVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MaxLengthVisitor.cjs
var require_MaxLengthVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MaxLengthVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MaxLengthVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MinLengthVisitor.cjs
var require_MinLengthVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MinLengthVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MinLengthVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/PatternVisitor.cjs
var require_PatternVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var PatternVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = PatternVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MaxItemsVisitor.cjs
var require_MaxItemsVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MaxItemsVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MaxItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MinItemsVisitor.cjs
var require_MinItemsVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MinItemsVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MinItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/UniqueItemsVisitor.cjs
var require_UniqueItemsVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var UniqueItemsVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = UniqueItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MaxContainsVisitor.cjs
var require_MaxContainsVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MaxContainsVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MaxContainsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MinContainsVisitor.cjs
var require_MinContainsVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MinContainsVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MinContainsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MaxPropertiesVisitor.cjs
var require_MaxPropertiesVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MaxPropertiesVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MaxPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/MinPropertiesVisitor.cjs
var require_MinPropertiesVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var MinPropertiesVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = MinPropertiesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/RequiredVisitor.cjs
var require_RequiredVisitor5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var RequiredVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-required");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = RequiredVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/DependentRequiredVisitor.cjs
var require_DependentRequiredVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var DependentRequiredVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      ObjectElement(objectElement) {
        this.element = objectElement.clone();
        this.element.classes.push("json-schema-dependentRequired");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = DependentRequiredVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/TitleVisitor.cjs
var require_TitleVisitor4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var TitleVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = TitleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/DescriptionVisitor.cjs
var require_DescriptionVisitor17 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var DescriptionVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = DescriptionVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/DefaultVisitor.cjs
var require_DefaultVisitor4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var DefaultVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = DefaultVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/DeprecatedVisitor.cjs
var require_DeprecatedVisitor5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var DeprecatedVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = DeprecatedVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ReadOnlyVisitor.cjs
var require_ReadOnlyVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ReadOnlyVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ReadOnlyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/WriteOnlyVisitor.cjs
var require_WriteOnlyVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var WriteOnlyVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = WriteOnlyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ExamplesVisitor.cjs
var require_ExamplesVisitor6 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs8();
  var ExamplesVisitor = (0, _stampit.default)(_apidomNsOpenapi.FallbackVisitor, {
    methods: {
      ArrayElement(arrayElement) {
        this.element = arrayElement.clone();
        this.element.classes.push("json-schema-examples");
        return _apidomCore.BREAK;
      }
    }
  });
  var _default = ExamplesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/FormatVisitor.cjs
var require_FormatVisitor2 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var FormatVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = FormatVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ContentEncodingVisitor.cjs
var require_ContentEncodingVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ContentEncodingVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ContentEncodingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ContentMediaTypeVisitor.cjs
var require_ContentMediaTypeVisitor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ContentMediaTypeVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ContentMediaTypeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/schema/ExampleVisitor.cjs
var require_ExampleVisitor5 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var ExampleVisitor = _apidomNsOpenapi.FallbackVisitor;
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/distriminator/index.cjs
var require_distriminator2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Discriminator = _interopRequireDefault(require_Discriminator2());
  var {
    visitors: {
      document: {
        objects: {
          Discriminator: {
            $visitor: BaseDiscriminatorVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var DiscriminatorVisitor = (0, _stampit.default)(BaseDiscriminatorVisitor, {
    props: {
      canSupportSpecificationExtensions: true
    },
    init() {
      this.element = new _Discriminator.default;
    }
  });
  var _default = DiscriminatorVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/xml/index.cjs
var require_xml2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Xml = _interopRequireDefault(require_Xml2());
  var {
    visitors: {
      document: {
        objects: {
          XML: {
            $visitor: BaseXMLVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var XmlVisitor = (0, _stampit.default)(BaseXMLVisitor, {
    init() {
      this.element = new _Xml.default;
    }
  });
  var _default = XmlVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/components/SchemasVisitor.cjs
var require_SchemasVisitor2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomNsOpenapi = require_cjs8();
  var SchemasVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (0, _ramda.always)(["document", "objects", "Schema"])
    },
    init() {
      this.element = new _apidomNsOpenapi.ComponentsSchemasElement;
    }
  });
  var _default = SchemasVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/components/PathItemsVisitor.cjs
var require_PathItemsVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _ComponentsPathItems = _interopRequireDefault(require_ComponentsPathItems());
  var _predicates = require_predicates9();
  var PathItemsVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (element) => {
        return (0, _apidomNsOpenapi.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "PathItem"];
      }
    },
    init() {
      this.element = new _ComponentsPathItems.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _apidomNsOpenapi.MapVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "pathItem");
        });
        return result;
      }
    }
  });
  var _default = PathItemsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/example/index.cjs
var require_example2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Example = _interopRequireDefault(require_Example2());
  var {
    visitors: {
      document: {
        objects: {
          Example: {
            $visitor: BaseExampleVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ExampleVisitor = (0, _stampit.default)(BaseExampleVisitor, {
    init() {
      this.element = new _Example.default;
    }
  });
  var _default = ExampleVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/external-documentation/index.cjs
var require_external_documentation2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation2());
  var {
    visitors: {
      document: {
        objects: {
          ExternalDocumentation: {
            $visitor: BaseExternalDocumentationVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ExternalDocumentationVisitor = (0, _stampit.default)(BaseExternalDocumentationVisitor, {
    init() {
      this.element = new _ExternalDocumentation.default;
    }
  });
  var _default = ExternalDocumentationVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/encoding/index.cjs
var require_encoding3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Encoding = _interopRequireDefault(require_Encoding2());
  var {
    visitors: {
      document: {
        objects: {
          Encoding: {
            $visitor: BaseEncodingVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var EncodingVisitor = (0, _stampit.default)(BaseEncodingVisitor, {
    init() {
      this.element = new _Encoding.default;
    }
  });
  var _default = EncodingVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/paths/index.cjs
var require_paths4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Paths = _interopRequireDefault(require_Paths2());
  var {
    visitors: {
      document: {
        objects: {
          Paths: {
            $visitor: BasePathsVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var PathsVisitor = (0, _stampit.default)(BasePathsVisitor, {
    init() {
      this.element = new _Paths.default;
    }
  });
  var _default = PathsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/request-body/index.cjs
var require_request_body2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _RequestBody = _interopRequireDefault(require_RequestBody2());
  var {
    visitors: {
      document: {
        objects: {
          RequestBody: {
            $visitor: BaseRequestBodyVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var RequestBodyVisitor = (0, _stampit.default)(BaseRequestBodyVisitor, {
    init() {
      this.element = new _RequestBody.default;
    }
  });
  var _default = RequestBodyVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/callback/index.cjs
var require_callback2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Callback = _interopRequireDefault(require_Callback2());
  var _predicates = require_predicates9();
  var {
    visitors: {
      document: {
        objects: {
          Callback: {
            $visitor: BaseCallbackVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var CallbackVisitor = (0, _stampit.default)(BaseCallbackVisitor, {
    props: {
      specPath: (element) => {
        return (0, _apidomNsOpenapi.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "PathItem"];
      }
    },
    init() {
      this.element = new _Callback.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = BaseCallbackVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "pathItem");
        });
        return result;
      }
    }
  });
  var _default = CallbackVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/response/index.cjs
var require_response3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Response = _interopRequireDefault(require_Response2());
  var {
    visitors: {
      document: {
        objects: {
          Response: {
            $visitor: BaseResponseVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ResponseVisitor = (0, _stampit.default)(BaseResponseVisitor, {
    init() {
      this.element = new _Response.default;
    }
  });
  var _default = ResponseVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/responses/index.cjs
var require_responses2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Responses = _interopRequireDefault(require_Responses2());
  var {
    visitors: {
      document: {
        objects: {
          Responses: {
            $visitor: BaseResponsesVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var ResponsesVisitor = (0, _stampit.default)(BaseResponsesVisitor, {
    init() {
      this.element = new _Responses.default;
    }
  });
  var _default = ResponsesVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/operation/index.cjs
var require_operation2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Operation = _interopRequireDefault(require_Operation2());
  var {
    visitors: {
      document: {
        objects: {
          Operation: {
            $visitor: BaseOperationVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var OperationVisitor = (0, _stampit.default)(BaseOperationVisitor, {
    init() {
      this.element = new _Operation.default;
    }
  });
  var _default = OperationVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/path-item/index.cjs
var require_path_item2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _PathItem = _interopRequireDefault(require_PathItem2());
  var {
    visitors: {
      document: {
        objects: {
          PathItem: {
            $visitor: BasePathItemVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var PathItemVisitor = (0, _stampit.default)(BasePathItemVisitor, {
    init() {
      this.element = new _PathItem.default;
    }
  });
  var _default = PathItemVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/security-scheme/index.cjs
var require_security_scheme2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme2());
  var {
    visitors: {
      document: {
        objects: {
          SecurityScheme: {
            $visitor: BaseSecuritySchemeVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var SecuritySchemeVisitor = (0, _stampit.default)(BaseSecuritySchemeVisitor, {
    init() {
      this.element = new _SecurityScheme.default;
    }
  });
  var _default = SecuritySchemeVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/oauth-flows/index.cjs
var require_oauth_flows2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows2());
  var {
    visitors: {
      document: {
        objects: {
          OAuthFlows: {
            $visitor: BaseOAuthFlowsVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var OAuthFlowsVisitor = (0, _stampit.default)(BaseOAuthFlowsVisitor, {
    init() {
      this.element = new _OAuthFlows.default;
    }
  });
  var _default = OAuthFlowsVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/oauth-flow/index.cjs
var require_oauth_flow2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow2());
  var {
    visitors: {
      document: {
        objects: {
          OAuthFlow: {
            $visitor: BaseOAuthFlowVisitor
          }
        }
      }
    }
  } = _apidomNsOpenapi.specificationObj;
  var OAuthFlowVisitor = (0, _stampit.default)(BaseOAuthFlowVisitor, {
    init() {
      this.element = new _OAuthFlow.default;
    }
  });
  var _default = OAuthFlowVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/visitors/open-api-3-1/WebhooksVisitor.cjs
var require_WebhooksVisitor = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomNsOpenapi = require_cjs8();
  var _Webhooks = _interopRequireDefault(require_Webhooks());
  var _predicates = require_predicates9();
  var WebhooksVisitor = (0, _stampit.default)(_apidomNsOpenapi.MapVisitor, _apidomNsOpenapi.FallbackVisitor, {
    props: {
      specPath: (element) => {
        return (0, _apidomNsOpenapi.isReferenceLikeElement)(element) ? ["document", "objects", "Reference"] : ["document", "objects", "PathItem"];
      }
    },
    init() {
      this.element = new _Webhooks.default;
    },
    methods: {
      ObjectElement(objectElement) {
        const result = _apidomNsOpenapi.MapVisitor.compose.methods.ObjectElement.call(this, objectElement);
        this.element.filter(_predicates.isReferenceElement).forEach((referenceElement) => {
          referenceElement.setMetaProperty("referenced-element", "pathItem");
        });
        this.element.filter(_predicates.isPathItemElement).forEach((pathItemElement, key) => {
          pathItemElement.setMetaProperty("webhook-name", key.toValue());
        });
        return result;
      }
    }
  });
  var _default = WebhooksVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/specification.cjs
var require_specification3 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomNsOpenapi = require_cjs8();
  var _index = _interopRequireDefault(require_open_api_3_1());
  var _index2 = _interopRequireDefault(require_info2());
  var _SummaryVisitor = _interopRequireDefault(require_SummaryVisitor4());
  var _index3 = _interopRequireDefault(require_contact2());
  var _index4 = _interopRequireDefault(require_license2());
  var _IdentifierVisitor = _interopRequireDefault(require_IdentifierVisitor());
  var _index5 = _interopRequireDefault(require_link2());
  var _JsonSchemaDialectVisitor = _interopRequireDefault(require_JsonSchemaDialectVisitor());
  var _index6 = _interopRequireDefault(require_server2());
  var _index7 = _interopRequireDefault(require_server_variable2());
  var _index8 = _interopRequireDefault(require_media_type2());
  var _index9 = _interopRequireDefault(require_security_requirement2());
  var _index10 = _interopRequireDefault(require_components2());
  var _index11 = _interopRequireDefault(require_tag2());
  var _index12 = _interopRequireDefault(require_reference2());
  var _SummaryVisitor2 = _interopRequireDefault(require_SummaryVisitor5());
  var _DescriptionVisitor = _interopRequireDefault(require_DescriptionVisitor16());
  var _index13 = _interopRequireDefault(require_parameter2());
  var _index14 = _interopRequireDefault(require_header2());
  var _index15 = _interopRequireDefault(require_schema6());
  var _$schemaVisitor = _interopRequireDefault(require_$schemaVisitor2());
  var _$vocabularyVisitor = _interopRequireDefault(require_$vocabularyVisitor());
  var _$idVisitor = _interopRequireDefault(require_$idVisitor());
  var _$anchorVisitor = _interopRequireDefault(require_$anchorVisitor());
  var _$dynamicAnchorVisitor = _interopRequireDefault(require_$dynamicAnchorVisitor());
  var _$dynamicRefVisitor = _interopRequireDefault(require_$dynamicRefVisitor());
  var _$refVisitor = _interopRequireDefault(require_$refVisitor());
  var _$defsVisitor = _interopRequireDefault(require_$defsVisitor());
  var _$commentVisitor = _interopRequireDefault(require_$commentVisitor());
  var _AllOfVisitor = _interopRequireDefault(require_AllOfVisitor3());
  var _AnyOfVisitor = _interopRequireDefault(require_AnyOfVisitor3());
  var _OneOfVisitor = _interopRequireDefault(require_OneOfVisitor3());
  var _DependentSchemasVisitor = _interopRequireDefault(require_DependentSchemasVisitor());
  var _PrefixItemsVisitor = _interopRequireDefault(require_PrefixItemsVisitor());
  var _PropertiesVisitor = _interopRequireDefault(require_PropertiesVisitor3());
  var _PatternProperties = _interopRequireDefault(require_PatternProperties());
  var _TypeVisitor = _interopRequireDefault(require_TypeVisitor5());
  var _EnumVisitor = _interopRequireDefault(require_EnumVisitor3());
  var _ConstVisitor = _interopRequireDefault(require_ConstVisitor());
  var _MultipleOfVisitor = _interopRequireDefault(require_MultipleOfVisitor2());
  var _MaximumVisitor = _interopRequireDefault(require_MaximumVisitor2());
  var _ExclusiveMaximumVisitor = _interopRequireDefault(require_ExclusiveMaximumVisitor2());
  var _MinimumVisitor = _interopRequireDefault(require_MinimumVisitor2());
  var _ExclusiveMinimumVisitor = _interopRequireDefault(require_ExclusiveMinimumVisitor2());
  var _MaxLengthVisitor = _interopRequireDefault(require_MaxLengthVisitor2());
  var _MinLengthVisitor = _interopRequireDefault(require_MinLengthVisitor2());
  var _PatternVisitor = _interopRequireDefault(require_PatternVisitor2());
  var _MaxItemsVisitor = _interopRequireDefault(require_MaxItemsVisitor2());
  var _MinItemsVisitor = _interopRequireDefault(require_MinItemsVisitor2());
  var _UniqueItemsVisitor = _interopRequireDefault(require_UniqueItemsVisitor2());
  var _MaxContainsVisitor = _interopRequireDefault(require_MaxContainsVisitor());
  var _MinContainsVisitor = _interopRequireDefault(require_MinContainsVisitor());
  var _MaxPropertiesVisitor = _interopRequireDefault(require_MaxPropertiesVisitor2());
  var _MinPropertiesVisitor = _interopRequireDefault(require_MinPropertiesVisitor2());
  var _RequiredVisitor = _interopRequireDefault(require_RequiredVisitor5());
  var _DependentRequiredVisitor = _interopRequireDefault(require_DependentRequiredVisitor());
  var _TitleVisitor = _interopRequireDefault(require_TitleVisitor4());
  var _DescriptionVisitor2 = _interopRequireDefault(require_DescriptionVisitor17());
  var _DefaultVisitor = _interopRequireDefault(require_DefaultVisitor4());
  var _DeprecatedVisitor = _interopRequireDefault(require_DeprecatedVisitor5());
  var _ReadOnlyVisitor = _interopRequireDefault(require_ReadOnlyVisitor2());
  var _WriteOnlyVisitor = _interopRequireDefault(require_WriteOnlyVisitor2());
  var _ExamplesVisitor = _interopRequireDefault(require_ExamplesVisitor6());
  var _FormatVisitor = _interopRequireDefault(require_FormatVisitor2());
  var _ContentEncodingVisitor = _interopRequireDefault(require_ContentEncodingVisitor());
  var _ContentMediaTypeVisitor = _interopRequireDefault(require_ContentMediaTypeVisitor());
  var _ExampleVisitor = _interopRequireDefault(require_ExampleVisitor5());
  var _index16 = _interopRequireDefault(require_distriminator2());
  var _index17 = _interopRequireDefault(require_xml2());
  var _SchemasVisitor = _interopRequireDefault(require_SchemasVisitor2());
  var _PathItemsVisitor = _interopRequireDefault(require_PathItemsVisitor());
  var _index18 = _interopRequireDefault(require_example2());
  var _index19 = _interopRequireDefault(require_external_documentation2());
  var _index20 = _interopRequireDefault(require_encoding3());
  var _index21 = _interopRequireDefault(require_paths4());
  var _index22 = _interopRequireDefault(require_request_body2());
  var _index23 = _interopRequireDefault(require_callback2());
  var _index24 = _interopRequireDefault(require_response3());
  var _index25 = _interopRequireDefault(require_responses2());
  var _index26 = _interopRequireDefault(require_operation2());
  var _index27 = _interopRequireDefault(require_path_item2());
  var _index28 = _interopRequireDefault(require_security_scheme2());
  var _index29 = _interopRequireDefault(require_oauth_flows2());
  var _index30 = _interopRequireDefault(require_oauth_flow2());
  var _WebhooksVisitor = _interopRequireDefault(require_WebhooksVisitor());
  var specification = {
    visitors: {
      value: _apidomNsOpenapi.specificationObj.visitors.value,
      document: {
        objects: {
          OpenApi: {
            $visitor: _index.default,
            fixedFields: {
              openapi: _apidomNsOpenapi.specificationObj.visitors.document.objects.OpenApi.fixedFields.openapi,
              info: {
                $ref: "#/visitors/document/objects/Info"
              },
              jsonSchemaDialect: _JsonSchemaDialectVisitor.default,
              servers: _apidomNsOpenapi.specificationObj.visitors.document.objects.OpenApi.fixedFields.servers,
              paths: {
                $ref: "#/visitors/document/objects/Paths"
              },
              webhooks: _WebhooksVisitor.default,
              components: {
                $ref: "#/visitors/document/objects/Components"
              },
              security: _apidomNsOpenapi.specificationObj.visitors.document.objects.OpenApi.fixedFields.security,
              tags: _apidomNsOpenapi.specificationObj.visitors.document.objects.OpenApi.fixedFields.tags,
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              }
            }
          },
          Info: {
            $visitor: _index2.default,
            fixedFields: {
              title: _apidomNsOpenapi.specificationObj.visitors.document.objects.Info.fixedFields.title,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Info.fixedFields.description,
              summary: _SummaryVisitor.default,
              termsOfService: _apidomNsOpenapi.specificationObj.visitors.document.objects.Info.fixedFields.termsOfService,
              contact: {
                $ref: "#/visitors/document/objects/Contact"
              },
              license: {
                $ref: "#/visitors/document/objects/License"
              },
              version: _apidomNsOpenapi.specificationObj.visitors.document.objects.Info.fixedFields.version
            }
          },
          Contact: {
            $visitor: _index3.default,
            fixedFields: {
              name: _apidomNsOpenapi.specificationObj.visitors.document.objects.Contact.fixedFields.name,
              url: _apidomNsOpenapi.specificationObj.visitors.document.objects.Contact.fixedFields.url,
              email: _apidomNsOpenapi.specificationObj.visitors.document.objects.Contact.fixedFields.email
            }
          },
          License: {
            $visitor: _index4.default,
            fixedFields: {
              name: _apidomNsOpenapi.specificationObj.visitors.document.objects.License.fixedFields.name,
              identifier: _IdentifierVisitor.default,
              url: _apidomNsOpenapi.specificationObj.visitors.document.objects.License.fixedFields.url
            }
          },
          Server: {
            $visitor: _index6.default,
            fixedFields: {
              url: _apidomNsOpenapi.specificationObj.visitors.document.objects.Server.fixedFields.url,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Server.fixedFields.description,
              variables: _apidomNsOpenapi.specificationObj.visitors.document.objects.Server.fixedFields.variables
            }
          },
          ServerVariable: {
            $visitor: _index7.default,
            fixedFields: {
              enum: _apidomNsOpenapi.specificationObj.visitors.document.objects.ServerVariable.fixedFields.enum,
              default: _apidomNsOpenapi.specificationObj.visitors.document.objects.ServerVariable.fixedFields.default,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.ServerVariable.fixedFields.description
            }
          },
          Components: {
            $visitor: _index10.default,
            fixedFields: {
              schemas: _SchemasVisitor.default,
              responses: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.responses,
              parameters: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.parameters,
              examples: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.examples,
              requestBodies: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.requestBodies,
              headers: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.headers,
              securitySchemes: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.securitySchemes,
              links: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.links,
              callbacks: _apidomNsOpenapi.specificationObj.visitors.document.objects.Components.fixedFields.callbacks,
              pathItems: _PathItemsVisitor.default
            }
          },
          Paths: {
            $visitor: _index21.default
          },
          PathItem: {
            $visitor: _index27.default,
            fixedFields: {
              $ref: _apidomNsOpenapi.specificationObj.visitors.document.objects.PathItem.fixedFields.$ref,
              summary: _apidomNsOpenapi.specificationObj.visitors.document.objects.PathItem.fixedFields.summary,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.PathItem.fixedFields.description,
              get: {
                $ref: "#/visitors/document/objects/Operation"
              },
              put: {
                $ref: "#/visitors/document/objects/Operation"
              },
              post: {
                $ref: "#/visitors/document/objects/Operation"
              },
              delete: {
                $ref: "#/visitors/document/objects/Operation"
              },
              options: {
                $ref: "#/visitors/document/objects/Operation"
              },
              head: {
                $ref: "#/visitors/document/objects/Operation"
              },
              patch: {
                $ref: "#/visitors/document/objects/Operation"
              },
              trace: {
                $ref: "#/visitors/document/objects/Operation"
              },
              servers: _apidomNsOpenapi.specificationObj.visitors.document.objects.PathItem.fixedFields.servers,
              parameters: _apidomNsOpenapi.specificationObj.visitors.document.objects.PathItem.fixedFields.parameters
            }
          },
          Operation: {
            $visitor: _index26.default,
            fixedFields: {
              tags: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.tags,
              summary: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.summary,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.description,
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              },
              operationId: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.operationId,
              parameters: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.parameters,
              requestBody: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.requestBody,
              responses: {
                $ref: "#/visitors/document/objects/Responses"
              },
              callbacks: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.callbacks,
              deprecated: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.deprecated,
              security: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.security,
              servers: _apidomNsOpenapi.specificationObj.visitors.document.objects.Operation.fixedFields.servers
            }
          },
          ExternalDocumentation: {
            $visitor: _index19.default,
            fixedFields: {
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.ExternalDocumentation.fixedFields.description,
              url: _apidomNsOpenapi.specificationObj.visitors.document.objects.ExternalDocumentation.fixedFields.url
            }
          },
          Parameter: {
            $visitor: _index13.default,
            fixedFields: {
              name: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.name,
              in: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.in,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.description,
              required: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.required,
              deprecated: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.deprecated,
              allowEmptyValue: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.allowEmptyValue,
              style: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.style,
              explode: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.explode,
              allowReserved: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.allowReserved,
              schema: {
                $ref: "#/visitors/document/objects/Schema"
              },
              example: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.example,
              examples: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.examples,
              content: _apidomNsOpenapi.specificationObj.visitors.document.objects.Parameter.fixedFields.content
            }
          },
          RequestBody: {
            $visitor: _index22.default,
            fixedFields: {
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.RequestBody.fixedFields.description,
              content: _apidomNsOpenapi.specificationObj.visitors.document.objects.RequestBody.fixedFields.content,
              required: _apidomNsOpenapi.specificationObj.visitors.document.objects.RequestBody.fixedFields.required
            }
          },
          MediaType: {
            $visitor: _index8.default,
            fixedFields: {
              schema: {
                $ref: "#/visitors/document/objects/Schema"
              },
              example: _apidomNsOpenapi.specificationObj.visitors.document.objects.MediaType.fixedFields.example,
              examples: _apidomNsOpenapi.specificationObj.visitors.document.objects.MediaType.fixedFields.examples,
              encoding: _apidomNsOpenapi.specificationObj.visitors.document.objects.MediaType.fixedFields.encoding
            }
          },
          Encoding: {
            $visitor: _index20.default,
            fixedFields: {
              contentType: _apidomNsOpenapi.specificationObj.visitors.document.objects.Encoding.fixedFields.contentType,
              headers: _apidomNsOpenapi.specificationObj.visitors.document.objects.Encoding.fixedFields.headers,
              style: _apidomNsOpenapi.specificationObj.visitors.document.objects.Encoding.fixedFields.style,
              explode: _apidomNsOpenapi.specificationObj.visitors.document.objects.Encoding.fixedFields.explode,
              allowReserved: _apidomNsOpenapi.specificationObj.visitors.document.objects.Encoding.fixedFields.allowReserved
            }
          },
          Responses: {
            $visitor: _index25.default,
            fixedFields: {
              default: _apidomNsOpenapi.specificationObj.visitors.document.objects.Responses.fixedFields.default
            }
          },
          Response: {
            $visitor: _index24.default,
            fixedFields: {
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Response.fixedFields.description,
              headers: _apidomNsOpenapi.specificationObj.visitors.document.objects.Response.fixedFields.headers,
              content: _apidomNsOpenapi.specificationObj.visitors.document.objects.Response.fixedFields.content,
              links: _apidomNsOpenapi.specificationObj.visitors.document.objects.Response.fixedFields.links
            }
          },
          Callback: {
            $visitor: _index23.default
          },
          Example: {
            $visitor: _index18.default,
            fixedFields: {
              summary: _apidomNsOpenapi.specificationObj.visitors.document.objects.Example.fixedFields.summary,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Example.fixedFields.description,
              value: _apidomNsOpenapi.specificationObj.visitors.document.objects.Example.fixedFields.value,
              externalValue: _apidomNsOpenapi.specificationObj.visitors.document.objects.Example.fixedFields.externalValue
            }
          },
          Link: {
            $visitor: _index5.default,
            fixedFields: {
              operationRef: _apidomNsOpenapi.specificationObj.visitors.document.objects.Link.fixedFields.operationRef,
              operationId: _apidomNsOpenapi.specificationObj.visitors.document.objects.Link.fixedFields.operationId,
              parameters: _apidomNsOpenapi.specificationObj.visitors.document.objects.Link.fixedFields.parameters,
              requestBody: _apidomNsOpenapi.specificationObj.visitors.document.objects.Link.fixedFields.requestBody,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Link.fixedFields.description,
              server: {
                $ref: "#/visitors/document/objects/Server"
              }
            }
          },
          Header: {
            $visitor: _index14.default,
            fixedFields: {
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.description,
              required: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.required,
              deprecated: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.deprecated,
              allowEmptyValue: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.allowEmptyValue,
              style: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.style,
              explode: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.explode,
              allowReserved: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.allowReserved,
              schema: {
                $ref: "#/visitors/document/objects/Schema"
              },
              example: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.example,
              examples: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.examples,
              content: _apidomNsOpenapi.specificationObj.visitors.document.objects.Header.fixedFields.content
            }
          },
          Tag: {
            $visitor: _index11.default,
            fixedFields: {
              name: _apidomNsOpenapi.specificationObj.visitors.document.objects.Tag.fixedFields.name,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.Tag.fixedFields.description,
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              }
            }
          },
          Reference: {
            $visitor: _index12.default,
            fixedFields: {
              $ref: _apidomNsOpenapi.specificationObj.visitors.document.objects.Reference.fixedFields.$ref,
              summary: _SummaryVisitor2.default,
              description: _DescriptionVisitor.default
            }
          },
          Schema: {
            $visitor: _index15.default,
            fixedFields: {
              $schema: _$schemaVisitor.default,
              $vocabulary: _$vocabularyVisitor.default,
              $id: _$idVisitor.default,
              $anchor: _$anchorVisitor.default,
              $dynamicAnchor: _$dynamicAnchorVisitor.default,
              $dynamicRef: _$dynamicRefVisitor.default,
              $ref: _$refVisitor.default,
              $defs: _$defsVisitor.default,
              $comment: _$commentVisitor.default,
              allOf: _AllOfVisitor.default,
              anyOf: _AnyOfVisitor.default,
              oneOf: _OneOfVisitor.default,
              not: {
                $ref: "#/visitors/document/objects/Schema"
              },
              if: {
                $ref: "#/visitors/document/objects/Schema"
              },
              then: {
                $ref: "#/visitors/document/objects/Schema"
              },
              else: {
                $ref: "#/visitors/document/objects/Schema"
              },
              dependentSchemas: _DependentSchemasVisitor.default,
              prefixItems: _PrefixItemsVisitor.default,
              items: {
                $ref: "#/visitors/document/objects/Schema"
              },
              contains: {
                $ref: "#/visitors/document/objects/Schema"
              },
              properties: _PropertiesVisitor.default,
              patternProperties: _PatternProperties.default,
              additionalProperties: {
                $ref: "#/visitors/document/objects/Schema"
              },
              propertyNames: {
                $ref: "#/visitors/document/objects/Schema"
              },
              unevaluatedItems: {
                $ref: "#/visitors/document/objects/Schema"
              },
              unevaluatedProperties: {
                $ref: "#/visitors/document/objects/Schema"
              },
              type: _TypeVisitor.default,
              enum: _EnumVisitor.default,
              const: _ConstVisitor.default,
              multipleOf: _MultipleOfVisitor.default,
              maximum: _MaximumVisitor.default,
              exclusiveMaximum: _ExclusiveMaximumVisitor.default,
              minimum: _MinimumVisitor.default,
              exclusiveMinimum: _ExclusiveMinimumVisitor.default,
              maxLength: _MaxLengthVisitor.default,
              minLength: _MinLengthVisitor.default,
              pattern: _PatternVisitor.default,
              maxItems: _MaxItemsVisitor.default,
              minItems: _MinItemsVisitor.default,
              uniqueItems: _UniqueItemsVisitor.default,
              maxContains: _MaxContainsVisitor.default,
              minContains: _MinContainsVisitor.default,
              maxProperties: _MaxPropertiesVisitor.default,
              minProperties: _MinPropertiesVisitor.default,
              required: _RequiredVisitor.default,
              dependentRequired: _DependentRequiredVisitor.default,
              title: _TitleVisitor.default,
              description: _DescriptionVisitor2.default,
              default: _DefaultVisitor.default,
              deprecated: _DeprecatedVisitor.default,
              readOnly: _ReadOnlyVisitor.default,
              writeOnly: _WriteOnlyVisitor.default,
              examples: _ExamplesVisitor.default,
              format: _FormatVisitor.default,
              contentEncoding: _ContentEncodingVisitor.default,
              contentMediaType: _ContentMediaTypeVisitor.default,
              contentSchema: {
                $ref: "#/visitors/document/objects/Schema"
              },
              discriminator: {
                $ref: "#/visitors/document/objects/Discriminator"
              },
              xml: {
                $ref: "#/visitors/document/objects/XML"
              },
              externalDocs: {
                $ref: "#/visitors/document/objects/ExternalDocumentation"
              },
              example: _ExampleVisitor.default
            }
          },
          Discriminator: {
            $visitor: _index16.default,
            fixedFields: {
              propertyName: _apidomNsOpenapi.specificationObj.visitors.document.objects.Discriminator.fixedFields.propertyName,
              mapping: _apidomNsOpenapi.specificationObj.visitors.document.objects.Discriminator.fixedFields.mapping
            }
          },
          XML: {
            $visitor: _index17.default,
            fixedFields: {
              name: _apidomNsOpenapi.specificationObj.visitors.document.objects.XML.fixedFields.name,
              namespace: _apidomNsOpenapi.specificationObj.visitors.document.objects.XML.fixedFields.namespace,
              prefix: _apidomNsOpenapi.specificationObj.visitors.document.objects.XML.fixedFields.prefix,
              attribute: _apidomNsOpenapi.specificationObj.visitors.document.objects.XML.fixedFields.attribute,
              wrapped: _apidomNsOpenapi.specificationObj.visitors.document.objects.XML.fixedFields.wrapped
            }
          },
          SecurityScheme: {
            $visitor: _index28.default,
            fixedFields: {
              type: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.type,
              description: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.description,
              name: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.name,
              in: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.in,
              scheme: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.scheme,
              bearerFormat: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.bearerFormat,
              flows: {
                $ref: "#/visitors/document/objects/OAuthFlows"
              },
              openIdConnectUrl: _apidomNsOpenapi.specificationObj.visitors.document.objects.SecurityScheme.fixedFields.openIdConnectUrl
            }
          },
          OAuthFlows: {
            $visitor: _index29.default,
            fixedFields: {
              implicit: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              },
              password: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              },
              clientCredentials: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              },
              authorizationCode: {
                $ref: "#/visitors/document/objects/OAuthFlow"
              }
            }
          },
          OAuthFlow: {
            $visitor: _index30.default,
            fixedFields: {
              authorizationUrl: _apidomNsOpenapi.specificationObj.visitors.document.objects.OAuthFlow.fixedFields.authorizationUrl,
              tokenUrl: _apidomNsOpenapi.specificationObj.visitors.document.objects.OAuthFlow.fixedFields.tokenUrl,
              refreshUrl: _apidomNsOpenapi.specificationObj.visitors.document.objects.OAuthFlow.fixedFields.refreshUrl,
              scopes: _apidomNsOpenapi.specificationObj.visitors.document.objects.OAuthFlow.fixedFields.scopes
            }
          },
          SecurityRequirement: {
            $visitor: _index9.default
          }
        },
        extension: {
          $visitor: _apidomNsOpenapi.specificationObj.visitors.document.extension.$visitor
        }
      }
    }
  };
  var _default = specification;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/index.cjs
var require_refractor4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = exports.createRefractor = undefined;
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _specification = _interopRequireDefault(require_specification3());
  var _visitor = require_visitor6();
  var _toolbox = _interopRequireDefault(require_toolbox4());
  var refract = (value, {
    specPath = ["visitors", "document", "objects", "OpenApi", "$visitor"],
    plugins = []
  } = {}) => {
    const element = (0, _apidomCore.refract)(value);
    const resolvedSpec = (0, _apidomCore.dereference)(_specification.default);
    const rootVisitor = (0, _ramdaAdjunct.invokeArgs)(specPath, [], resolvedSpec);
    (0, _apidomCore.visit)(element, rootVisitor, {
      state: {
        specObj: resolvedSpec
      }
    });
    return (0, _apidomCore.dispatchRefractorPlugins)(rootVisitor.element, plugins, {
      toolboxCreator: _toolbox.default,
      visitorOptions: {
        keyMap: _visitor.keyMap,
        nodeTypeGetter: _visitor.getNodeType
      }
    });
  };
  var createRefractor = (specPath) => (value, options = {}) => refract(value, {
    specPath,
    ...options
  });
  exports.createRefractor = createRefractor;
  var _default = refract;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/refractor/registration.cjs
var require_registration4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  var _Callback = _interopRequireDefault(require_Callback2());
  exports.CallbackElement = _Callback.default;
  var _Components = _interopRequireDefault(require_Components2());
  exports.ComponentsElement = _Components.default;
  var _Contact = _interopRequireDefault(require_Contact2());
  exports.ContactElement = _Contact.default;
  var _Discriminator = _interopRequireDefault(require_Discriminator2());
  exports.DiscriminatorElement = _Discriminator.default;
  var _Encoding = _interopRequireDefault(require_Encoding2());
  exports.EncodingElement = _Encoding.default;
  var _Example = _interopRequireDefault(require_Example2());
  exports.ExampleElement = _Example.default;
  var _ExternalDocumentation = _interopRequireDefault(require_ExternalDocumentation2());
  exports.ExternalDocumentationElement = _ExternalDocumentation.default;
  var _Header = _interopRequireDefault(require_Header2());
  exports.HeaderElement = _Header.default;
  var _Info = _interopRequireDefault(require_Info2());
  exports.InfoElement = _Info.default;
  var _JsonSchemaDialect = _interopRequireDefault(require_JsonSchemaDialect());
  exports.JsonSchemaDialectElement = _JsonSchemaDialect.default;
  var _License = _interopRequireDefault(require_License2());
  exports.LicenseElement = _License.default;
  var _Link = _interopRequireDefault(require_Link2());
  exports.LinkElement = _Link.default;
  var _MediaType = _interopRequireDefault(require_MediaType2());
  exports.MediaTypeElement = _MediaType.default;
  var _OAuthFlow = _interopRequireDefault(require_OAuthFlow2());
  exports.OAuthFlowElement = _OAuthFlow.default;
  var _OAuthFlows = _interopRequireDefault(require_OAuthFlows2());
  exports.OAuthFlowsElement = _OAuthFlows.default;
  var _Openapi = _interopRequireDefault(require_Openapi2());
  exports.OpenapiElement = _Openapi.default;
  var _OpenApi = _interopRequireDefault(require_OpenApi3_1());
  exports.OpenApi3_1Element = _OpenApi.default;
  var _Operation = _interopRequireDefault(require_Operation2());
  exports.OperationElement = _Operation.default;
  var _Parameter = _interopRequireDefault(require_Parameter2());
  exports.ParameterElement = _Parameter.default;
  var _PathItem = _interopRequireDefault(require_PathItem2());
  exports.PathItemElement = _PathItem.default;
  var _Paths = _interopRequireDefault(require_Paths2());
  exports.PathsElement = _Paths.default;
  var _Reference = _interopRequireDefault(require_Reference3());
  exports.ReferenceElement = _Reference.default;
  var _RequestBody = _interopRequireDefault(require_RequestBody2());
  exports.RequestBodyElement = _RequestBody.default;
  var _Response = _interopRequireDefault(require_Response2());
  exports.ResponseElement = _Response.default;
  var _Responses = _interopRequireDefault(require_Responses2());
  exports.ResponsesElement = _Responses.default;
  var _Schema = _interopRequireDefault(require_Schema3());
  exports.SchemaElement = _Schema.default;
  var _SecurityRequirement = _interopRequireDefault(require_SecurityRequirement2());
  exports.SecurityRequirementElement = _SecurityRequirement.default;
  var _SecurityScheme = _interopRequireDefault(require_SecurityScheme2());
  exports.SecuritySchemeElement = _SecurityScheme.default;
  var _Server = _interopRequireDefault(require_Server2());
  exports.ServerElement = _Server.default;
  var _ServerVariable = _interopRequireDefault(require_ServerVariable2());
  exports.ServerVariableElement = _ServerVariable.default;
  var _Tag = _interopRequireDefault(require_Tag3());
  exports.TagElement = _Tag.default;
  var _Xml = _interopRequireDefault(require_Xml2());
  exports.XmlElement = _Xml.default;
  var _index = require_refractor4();
  _Callback.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Callback", "$visitor"]);
  _Components.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Components", "$visitor"]);
  _Contact.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Contact", "$visitor"]);
  _Example.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Example", "$visitor"]);
  _Discriminator.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Discriminator", "$visitor"]);
  _Encoding.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Encoding", "$visitor"]);
  _ExternalDocumentation.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "ExternalDocumentation", "$visitor"]);
  _Header.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Header", "$visitor"]);
  _Info.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Info", "$visitor"]);
  _JsonSchemaDialect.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OpenApi", "fixedFields", "jsonSchemaDialect"]);
  _License.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "License", "$visitor"]);
  _Link.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Link", "$visitor"]);
  _MediaType.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "MediaType", "$visitor"]);
  _OAuthFlow.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OAuthFlow", "$visitor"]);
  _OAuthFlows.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OAuthFlows", "$visitor"]);
  _Openapi.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OpenApi", "fixedFields", "openapi"]);
  _OpenApi.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "OpenApi", "$visitor"]);
  _Operation.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Operation", "$visitor"]);
  _Parameter.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Parameter", "$visitor"]);
  _PathItem.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "PathItem", "$visitor"]);
  _Paths.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Paths", "$visitor"]);
  _Reference.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Reference", "$visitor"]);
  _RequestBody.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "RequestBody", "$visitor"]);
  _Response.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Response", "$visitor"]);
  _Responses.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Responses", "$visitor"]);
  _Schema.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Schema", "$visitor"]);
  _SecurityRequirement.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "SecurityRequirement", "$visitor"]);
  _SecurityScheme.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "SecurityScheme", "$visitor"]);
  _Server.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Server", "$visitor"]);
  _ServerVariable.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "ServerVariable", "$visitor"]);
  _Tag.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "Tag", "$visitor"]);
  _Xml.default.refract = (0, _index.createRefractor)(["visitors", "document", "objects", "XML", "$visitor"]);
});

// node_modules/@swagger-api/apidom-ns-openapi-3-1/cjs/index.cjs
var require_cjs9 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.isPathItemElement = exports.isParameterLikeElement = exports.isParameterElement = exports.isOperationElement = exports.isOpenapiElement = exports.isOpenApiExtension = exports.isOpenApi3_1LikeElement = exports.isOpenApi3_1Element = exports.isObjectElement = exports.isNumberElement = exports.isNullElement = exports.isMemberElement = exports.isMediaTypeElement = exports.isLinkPrimitiveElement = exports.isLinkElementExternal = exports.isLinkElement = exports.isLicenseElement = exports.isJsonSchemaDialectElement = exports.isInfoElement = exports.isExternalDocumentationElement = exports.isExampleElement = exports.isElement = exports.isContactElement = exports.isComponentsElement = exports.isCallbackElement = exports.isBooleanJsonSchemaElement = exports.isBooleanElement = exports.isArrayElement = exports.getNodeType = exports.default = exports.createToolbox = exports.XmlElement = exports.WebhooksElement = exports.TagsElement = exports.TagElement = exports.ServersElement = exports.ServerVariablesElement = exports.ServerVariableElement = exports.ServerElement = exports.SecuritySchemeElement = exports.SecurityRequirementElement = exports.SecurityElement = exports.SchemaElement = exports.ResponsesElement = exports.ResponseLinksElement = exports.ResponseHeadersElement = exports.ResponseElement = exports.ResponseContentElement = exports.RequestBodyElement = exports.RequestBodyContentElement = exports.ReferenceElement = exports.PathsElement = exports.PathItemServersElement = exports.PathItemParametersElement = exports.PathItemElement = exports.ParameterExamplesElement = exports.ParameterElement = exports.ParameterContentElement = exports.OperationTagsElement = exports.OperationServersElement = exports.OperationSecurityElement = exports.OperationParametersElement = exports.OperationElement = exports.OperationCallbacksElement = exports.OpenapiElement = exports.OpenApi3_1Element = exports.OpenAPIMediaTypes = exports.OAuthFlowsElement = exports.OAuthFlowScopesElement = exports.OAuthFlowElement = exports.MediaTypeExamplesElement = exports.MediaTypeEncodingElement = exports.MediaTypeElement = exports.LinkParametersElement = exports.LinkElement = exports.LicenseElement = exports.JsonSchemaDialectElement = exports.InfoElement = exports.HeaderExamplesElement = exports.HeaderElement = exports.HeaderContentElement = exports.ExternalDocumentationElement = exports.ExampleElement = exports.EncodingHeadersElement = exports.EncodingElement = exports.DiscriminatorMappingElement = exports.DiscriminatorElement = exports.ContactElement = exports.ComponentsSecuritySchemesElement = exports.ComponentsSchemasElement = exports.ComponentsResponsesElement = exports.ComponentsRequestBodiesElement = exports.ComponentsPathItemsElement = exports.ComponentsParametersElement = exports.ComponentsLinksElement = exports.ComponentsHeadersElement = exports.ComponentsExamplesElement = exports.ComponentsElement = exports.ComponentsCallbacksElement = exports.CallbackElement = undefined;
  exports.refractorPluginReplaceEmptyElement = exports.refractorPluginNormalizeServers = exports.refractorPluginNormalizeSecurityRequirements = exports.refractorPluginNormalizeParameters = exports.refractorPluginNormalizeParameterExamples = exports.refractorPluginNormalizeOperationIds = exports.refractorPluginNormalizeHeaderExamples = exports.mediaTypes = exports.keyMap = exports.isStringElement = exports.isServerVariableElement = exports.isServerLikeElement = exports.isServerElement = exports.isSecurityRequirementElement = exports.isSchemaElement = exports.isResponsesElement = exports.isResponseLikeElement = exports.isResponseElement = exports.isRequestBodyElement = exports.isReferenceLikeElement = exports.isReferenceElementExternal = exports.isReferenceElement = exports.isRefElement = exports.isPathsElement = exports.isPathItemElementExternal = undefined;
  var _apidomCore = require_cjs4();
  exports.isRefElement = _apidomCore.isRefElement;
  exports.isLinkPrimitiveElement = _apidomCore.isLinkElement;
  exports.isMemberElement = _apidomCore.isMemberElement;
  exports.isObjectElement = _apidomCore.isObjectElement;
  exports.isArrayElement = _apidomCore.isArrayElement;
  exports.isBooleanElement = _apidomCore.isBooleanElement;
  exports.isNullElement = _apidomCore.isNullElement;
  exports.isElement = _apidomCore.isElement;
  exports.isNumberElement = _apidomCore.isNumberElement;
  exports.isStringElement = _apidomCore.isStringElement;
  var _mediaTypes = _interopRequireWildcard(require_media_types2());
  exports.mediaTypes = _mediaTypes.default;
  exports.OpenAPIMediaTypes = _mediaTypes.OpenAPIMediaTypes;
  var _namespace = _interopRequireDefault(require_namespace4());
  exports.default = _namespace.default;
  var _replaceEmptyElement = _interopRequireDefault(require_replace_empty_element3());
  exports.refractorPluginReplaceEmptyElement = _replaceEmptyElement.default;
  var _normalizeParameters = _interopRequireDefault(require_normalize_parameters());
  exports.refractorPluginNormalizeParameters = _normalizeParameters.default;
  var _normalizeSecurityRequirements = _interopRequireDefault(require_normalize_security_requirements());
  exports.refractorPluginNormalizeSecurityRequirements = _normalizeSecurityRequirements.default;
  var _normalizeServers = _interopRequireDefault(require_normalize_servers());
  exports.refractorPluginNormalizeServers = _normalizeServers.default;
  var _normalizeOperationIds = _interopRequireDefault(require_normalize_operation_ids());
  exports.refractorPluginNormalizeOperationIds = _normalizeOperationIds.default;
  var _normalizeParameterExamples = _interopRequireDefault(require_normalize_parameter_examples());
  exports.refractorPluginNormalizeParameterExamples = _normalizeParameterExamples.default;
  var _normalizeHeaderExamples = _interopRequireDefault(require_normalize_header_examples());
  exports.refractorPluginNormalizeHeaderExamples = _normalizeHeaderExamples.default;
  var _toolbox = _interopRequireDefault(require_toolbox4());
  exports.createToolbox = _toolbox.default;
  var _predicates = require_predicates9();
  exports.isCallbackElement = _predicates.isCallbackElement;
  exports.isComponentsElement = _predicates.isComponentsElement;
  exports.isInfoElement = _predicates.isInfoElement;
  exports.isJsonSchemaDialectElement = _predicates.isJsonSchemaDialectElement;
  exports.isLicenseElement = _predicates.isLicenseElement;
  exports.isOpenapiElement = _predicates.isOpenapiElement;
  exports.isOpenApi3_1Element = _predicates.isOpenApi3_1Element;
  exports.isOperationElement = _predicates.isOperationElement;
  exports.isParameterElement = _predicates.isParameterElement;
  exports.isPathItemElement = _predicates.isPathItemElement;
  exports.isPathItemElementExternal = _predicates.isPathItemElementExternal;
  exports.isReferenceElement = _predicates.isReferenceElement;
  exports.isReferenceElementExternal = _predicates.isReferenceElementExternal;
  exports.isResponseElement = _predicates.isResponseElement;
  exports.isResponsesElement = _predicates.isResponsesElement;
  exports.isSchemaElement = _predicates.isSchemaElement;
  exports.isBooleanJsonSchemaElement = _predicates.isBooleanJsonSchemaElement;
  exports.isMediaTypeElement = _predicates.isMediaTypeElement;
  exports.isServerElement = _predicates.isServerElement;
  exports.isSecurityRequirementElement = _predicates.isSecurityRequirementElement;
  exports.isExternalDocumentationElement = _predicates.isExternalDocumentationElement;
  exports.isServerVariableElement = _predicates.isServerVariableElement;
  exports.isContactElement = _predicates.isContactElement;
  exports.isExampleElement = _predicates.isExampleElement;
  exports.isLinkElement = _predicates.isLinkElement;
  exports.isLinkElementExternal = _predicates.isLinkElementExternal;
  exports.isRequestBodyElement = _predicates.isRequestBodyElement;
  exports.isPathsElement = _predicates.isPathsElement;
  var _predicates2 = require_predicates10();
  exports.isOpenApi3_1LikeElement = _predicates2.isOpenApi3_1LikeElement;
  var _apidomNsOpenapi = require_cjs8();
  exports.isParameterLikeElement = _apidomNsOpenapi.isParameterLikeElement;
  exports.isReferenceLikeElement = _apidomNsOpenapi.isReferenceLikeElement;
  exports.isResponseLikeElement = _apidomNsOpenapi.isResponseLikeElement;
  exports.isOpenApiExtension = _apidomNsOpenapi.isOpenApiExtension;
  exports.isServerLikeElement = _apidomNsOpenapi.isServerLikeElement;
  exports.ComponentsCallbacksElement = _apidomNsOpenapi.ComponentsCallbacksElement;
  exports.ComponentsExamplesElement = _apidomNsOpenapi.ComponentsExamplesElement;
  exports.ComponentsHeadersElement = _apidomNsOpenapi.ComponentsHeadersElement;
  exports.ComponentsLinksElement = _apidomNsOpenapi.ComponentsLinksElement;
  exports.ComponentsParametersElement = _apidomNsOpenapi.ComponentsParametersElement;
  exports.ComponentsRequestBodiesElement = _apidomNsOpenapi.ComponentsRequestBodiesElement;
  exports.ComponentsResponsesElement = _apidomNsOpenapi.ComponentsResponsesElement;
  exports.ComponentsSchemasElement = _apidomNsOpenapi.ComponentsSchemasElement;
  exports.ComponentsSecuritySchemesElement = _apidomNsOpenapi.ComponentsSecuritySchemesElement;
  exports.DiscriminatorMappingElement = _apidomNsOpenapi.DiscriminatorMappingElement;
  exports.EncodingHeadersElement = _apidomNsOpenapi.EncodingHeadersElement;
  exports.HeaderContentElement = _apidomNsOpenapi.HeaderContentElement;
  exports.HeaderExamplesElement = _apidomNsOpenapi.HeaderExamplesElement;
  exports.LinkParametersElement = _apidomNsOpenapi.LinkParametersElement;
  exports.MediaTypeEncodingElement = _apidomNsOpenapi.MediaTypeEncodingElement;
  exports.MediaTypeExamplesElement = _apidomNsOpenapi.MediaTypeExamplesElement;
  exports.OAuthFlowScopesElement = _apidomNsOpenapi.OAuthFlowScopesElement;
  exports.OperationCallbacksElement = _apidomNsOpenapi.OperationCallbacksElement;
  exports.OperationParametersElement = _apidomNsOpenapi.OperationParametersElement;
  exports.OperationSecurityElement = _apidomNsOpenapi.OperationSecurityElement;
  exports.OperationServersElement = _apidomNsOpenapi.OperationServersElement;
  exports.OperationTagsElement = _apidomNsOpenapi.OperationTagsElement;
  exports.ParameterContentElement = _apidomNsOpenapi.ParameterContentElement;
  exports.ParameterExamplesElement = _apidomNsOpenapi.ParameterExamplesElement;
  exports.PathItemParametersElement = _apidomNsOpenapi.PathItemParametersElement;
  exports.PathItemServersElement = _apidomNsOpenapi.PathItemServersElement;
  exports.RequestBodyContentElement = _apidomNsOpenapi.RequestBodyContentElement;
  exports.ResponseContentElement = _apidomNsOpenapi.ResponseContentElement;
  exports.ResponseHeadersElement = _apidomNsOpenapi.ResponseHeadersElement;
  exports.ResponseLinksElement = _apidomNsOpenapi.ResponseLinksElement;
  exports.SecurityElement = _apidomNsOpenapi.SecurityElement;
  exports.ServersElement = _apidomNsOpenapi.ServersElement;
  exports.ServerVariablesElement = _apidomNsOpenapi.ServerVariablesElement;
  exports.TagsElement = _apidomNsOpenapi.TagsElement;
  var _visitor = require_visitor6();
  exports.keyMap = _visitor.keyMap;
  exports.getNodeType = _visitor.getNodeType;
  var _registration = require_registration4();
  exports.CallbackElement = _registration.CallbackElement;
  exports.ComponentsElement = _registration.ComponentsElement;
  exports.ContactElement = _registration.ContactElement;
  exports.DiscriminatorElement = _registration.DiscriminatorElement;
  exports.EncodingElement = _registration.EncodingElement;
  exports.ExampleElement = _registration.ExampleElement;
  exports.ExternalDocumentationElement = _registration.ExternalDocumentationElement;
  exports.HeaderElement = _registration.HeaderElement;
  exports.InfoElement = _registration.InfoElement;
  exports.JsonSchemaDialectElement = _registration.JsonSchemaDialectElement;
  exports.LicenseElement = _registration.LicenseElement;
  exports.LinkElement = _registration.LinkElement;
  exports.MediaTypeElement = _registration.MediaTypeElement;
  exports.OAuthFlowElement = _registration.OAuthFlowElement;
  exports.OAuthFlowsElement = _registration.OAuthFlowsElement;
  exports.OpenapiElement = _registration.OpenapiElement;
  exports.OpenApi3_1Element = _registration.OpenApi3_1Element;
  exports.OperationElement = _registration.OperationElement;
  exports.ParameterElement = _registration.ParameterElement;
  exports.PathItemElement = _registration.PathItemElement;
  exports.PathsElement = _registration.PathsElement;
  exports.ReferenceElement = _registration.ReferenceElement;
  exports.RequestBodyElement = _registration.RequestBodyElement;
  exports.ResponseElement = _registration.ResponseElement;
  exports.ResponsesElement = _registration.ResponsesElement;
  exports.SchemaElement = _registration.SchemaElement;
  exports.SecurityRequirementElement = _registration.SecurityRequirementElement;
  exports.SecuritySchemeElement = _registration.SecuritySchemeElement;
  exports.ServerElement = _registration.ServerElement;
  exports.ServerVariableElement = _registration.ServerVariableElement;
  exports.TagElement = _registration.TagElement;
  exports.XmlElement = _registration.XmlElement;
  var _ComponentsPathItems = _interopRequireDefault(require_ComponentsPathItems());
  exports.ComponentsPathItemsElement = _ComponentsPathItems.default;
  var _Webhooks = _interopRequireDefault(require_Webhooks());
  exports.WebhooksElement = _Webhooks.default;
});

// node_modules/@swagger-api/apidom-reference/cjs/util/polyfills/buffer/standard-import.cjs
var require_standard_import = __commonJS((exports) => {
  exports.__esModule = true;
  var _buffer = __require("buffer");
  Object.keys(_buffer).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    if ((key in exports) && exports[key] === _buffer[key])
      return;
    exports[key] = _buffer[key];
  });
});

// node_modules/@swagger-api/apidom-reference/cjs/parse/parsers/binary/index-node.cjs
var require_index_node = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _buffer = require_standard_import();
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _index = require_errors3();
  var _Parser = _interopRequireDefault(require_Parser());
  var BinaryParser = (0, _stampit.default)(_Parser.default, {
    props: {
      name: "binary"
    },
    methods: {
      async canParse(file) {
        const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);
        return hasSupportedFileExtension;
      },
      async parse(file) {
        let base64String;
        try {
          base64String = _buffer.Buffer.from(file.data).toString("base64");
        } catch {
          base64String = _buffer.Buffer.from(file.toString()).toString("base64");
        }
        try {
          const parseResultElement = new _apidomCore.ParseResultElement;
          if (base64String.length !== 0) {
            const base64StringElement = new _apidomCore.StringElement(base64String);
            base64StringElement.classes.push("result");
            parseResultElement.push(base64StringElement);
          }
          return parseResultElement;
        } catch (error) {
          throw new _index.ParserError(`Error parsing "${file.uri}"`, {
            cause: error
          });
        }
      }
    }
  });
  var _default = BinaryParser;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/uri/errors/EvaluationJsonSchemaUriError.cjs
var require_EvaluationJsonSchemaUriError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class EvaluationJsonSchemaUriError extends _apidomError.ApiDOMError {
  }
  exports.default = EvaluationJsonSchemaUriError;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/uri/errors/index.cjs
var require_errors5 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.EvaluationJsonSchemaUriError = undefined;
  var _EvaluationJsonSchemaUriError = _interopRequireDefault(require_EvaluationJsonSchemaUriError());
  exports.EvaluationJsonSchemaUriError = _EvaluationJsonSchemaUriError.default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/$anchor/errors/EvaluationJsonSchema$anchorError.cjs
var require_EvaluationJsonSchema$anchorError = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomError = require_cjs2();

  class EvaluationJsonSchema$anchorError extends _apidomError.ApiDOMError {
  }
  exports.default = EvaluationJsonSchema$anchorError;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/$anchor/errors/InvalidJsonSchema$anchorError.cjs
var require_InvalidJsonSchema$anchorError = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _InvalidSelectorError = _interopRequireDefault(require_InvalidSelectorError());

  class InvalidJsonSchema$anchorError extends _InvalidSelectorError.default {
    constructor(anchor) {
      super(`Invalid JSON Schema \$anchor "${anchor}".`);
    }
  }
  exports.default = InvalidJsonSchema$anchorError;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/$anchor/errors/index.cjs
var require_errors6 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.InvalidJsonSchema$anchorError = exports.EvaluationJsonSchema$anchorError = undefined;
  var _EvaluationJsonSchema$anchorError = _interopRequireDefault(require_EvaluationJsonSchema$anchorError());
  exports.EvaluationJsonSchema$anchorError = _EvaluationJsonSchema$anchorError.default;
  var _InvalidJsonSchema$anchorError = _interopRequireDefault(require_InvalidJsonSchema$anchorError());
  exports.InvalidJsonSchema$anchorError = _InvalidJsonSchema$anchorError.default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/$anchor/index.cjs
var require_$anchor = __commonJS((exports) => {
  exports.__esModule = true;
  exports.uriToAnchor = exports.parse = exports.isAnchor = exports.evaluate = undefined;
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs9();
  var _url = require_url();
  var _index = require_errors6();
  exports.EvaluationJsonSchema$anchorError = _index.EvaluationJsonSchema$anchorError;
  exports.InvalidJsonSchema$anchorError = _index.InvalidJsonSchema$anchorError;
  var isAnchor = (uri) => {
    return /^[A-Za-z_][A-Za-z_0-9.-]*$/.test(uri);
  };
  exports.isAnchor = isAnchor;
  var uriToAnchor = (uri) => {
    const hash = (0, _url.getHash)(uri);
    return (0, _ramdaAdjunct.trimCharsStart)("#", hash);
  };
  exports.uriToAnchor = uriToAnchor;
  var parse = (anchor) => {
    if (!isAnchor(anchor)) {
      throw new _index.InvalidJsonSchema$anchorError(anchor);
    }
    return anchor;
  };
  exports.parse = parse;
  var evaluate = (anchor, element) => {
    const token = parse(anchor);
    const result = (0, _apidomCore.find)((e) => {
      var _e$$anchor;
      return (0, _apidomNsOpenapi.isSchemaElement)(e) && ((_e$$anchor = e.$anchor) == null ? undefined : _e$$anchor.toValue()) === token;
    }, element);
    if ((0, _ramdaAdjunct.isUndefined)(result)) {
      throw new _index.EvaluationJsonSchema$anchorError(`Evaluation failed on token: "${token}"`);
    }
    return result;
  };
  exports.evaluate = evaluate;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/strategies/openapi-3-1/util.cjs
var require_util12 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.resolveSchema$refField = exports.resolveSchema$idField = exports.refractToSchemaElement = exports.maybeRefractToSchemaElement = undefined;
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs9();
  var url = _interopRequireWildcard(require_url());
  var resolveSchema$refField = (retrievalURI, schemaElement) => {
    if (typeof schemaElement.$ref === "undefined") {
      return;
    }
    const hash = url.getHash(schemaElement.$ref.toValue());
    const inherited$id = schemaElement.meta.get("inherited$id").toValue();
    const $refBaseURI = (0, _ramda.reduce)((acc, uri) => {
      return url.resolve(acc, url.sanitize(url.stripHash(uri)));
    }, retrievalURI, [...inherited$id, schemaElement.$ref.toValue()]);
    return `${$refBaseURI}${hash === "#" ? "" : hash}`;
  };
  exports.resolveSchema$refField = resolveSchema$refField;
  var resolveSchema$idField = (retrievalURI, schemaElement) => {
    if (typeof schemaElement.$id === "undefined") {
      return;
    }
    const inherited$id = schemaElement.meta.get("inherited$id").toValue();
    return (0, _ramda.reduce)((acc, $id) => {
      return url.resolve(acc, url.sanitize(url.stripHash($id)));
    }, retrievalURI, [...inherited$id, schemaElement.$id.toValue()]);
  };
  exports.resolveSchema$idField = resolveSchema$idField;
  var refractToSchemaElement = (element) => {
    if (refractToSchemaElement.cache.has(element)) {
      return refractToSchemaElement.cache.get(element);
    }
    const refracted = _apidomNsOpenapi.SchemaElement.refract(element);
    refractToSchemaElement.cache.set(element, refracted);
    return refracted;
  };
  exports.refractToSchemaElement = refractToSchemaElement;
  refractToSchemaElement.cache = new WeakMap;
  var maybeRefractToSchemaElement = (element) => {
    if ((0, _apidomCore.isPrimitiveElement)(element)) {
      return refractToSchemaElement(element);
    }
    return element;
  };
  exports.maybeRefractToSchemaElement = maybeRefractToSchemaElement;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/selectors/uri/index.cjs
var require_uri = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.evaluate = undefined;
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs9();
  var _apidomJsonPointer = require_cjs6();
  var url = _interopRequireWildcard(require_url());
  var _index = require_errors5();
  exports.EvaluationJsonSchemaUriError = _index.EvaluationJsonSchemaUriError;
  var _index2 = require_$anchor();
  var _util = require_util12();
  var evaluate = (uri, element) => {
    const {
      cache
    } = evaluate;
    const uriStrippedHash = url.stripHash(uri);
    const isSchemaElementWith$id = (e) => (0, _apidomNsOpenapi.isSchemaElement)(e) && typeof e.$id !== "undefined";
    if (!cache.has(element)) {
      const schemaObjectElements = (0, _apidomCore.filter)(isSchemaElementWith$id, element);
      cache.set(element, Array.from(schemaObjectElements));
    }
    const result = cache.get(element).find((e) => {
      const $idBaseURI = (0, _util.resolveSchema$idField)(uriStrippedHash, e);
      return $idBaseURI === uriStrippedHash;
    });
    if ((0, _ramdaAdjunct.isUndefined)(result)) {
      throw new _index.EvaluationJsonSchemaUriError(`Evaluation failed on URI: "${uri}"`);
    }
    let fragmentEvaluate;
    let selector;
    if ((0, _index2.isAnchor)((0, _index2.uriToAnchor)(uri))) {
      fragmentEvaluate = _index2.evaluate;
      selector = (0, _index2.uriToAnchor)(uri);
    } else {
      fragmentEvaluate = _apidomJsonPointer.evaluate;
      selector = (0, _apidomJsonPointer.uriToPointer)(uri);
    }
    return fragmentEvaluate(selector, result);
  };
  exports.evaluate = evaluate;
  evaluate.cache = new WeakMap;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/strategies/openapi-3-1/visitor.cjs
var require_visitor7 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _apidomJsonPointer = require_cjs6();
  var _apidomNsOpenapi = require_cjs9();
  var _index = require_errors3();
  var url = _interopRequireWildcard(require_url());
  var _index2 = _interopRequireDefault(require_parse3());
  var _Reference = _interopRequireDefault(require_Reference());
  var _File = _interopRequireDefault(require_File());
  var _index3 = require_uri();
  var _util = require_util12();
  var _index4 = require_$anchor();
  var _EvaluationJsonSchemaUriError = _interopRequireDefault(require_EvaluationJsonSchemaUriError());
  var visitAsync = _apidomCore.visit[Symbol.for("nodejs.util.promisify.custom")];
  var OpenApi3_1ResolveVisitor = (0, _stampit.default)({
    props: {
      indirections: [],
      namespace: null,
      reference: null,
      crawledElements: null,
      crawlingMap: null,
      visited: null,
      options: null
    },
    init({
      reference,
      namespace,
      indirections = [],
      visited = new WeakSet,
      options
    }) {
      this.indirections = indirections;
      this.namespace = namespace;
      this.reference = reference;
      this.crawledElements = [];
      this.crawlingMap = {};
      this.visited = visited;
      this.options = options;
    },
    methods: {
      toBaseURI(uri) {
        return url.resolve(this.reference.uri, url.sanitize(url.stripHash(uri)));
      },
      async toReference(uri) {
        if (this.reference.depth >= this.options.resolve.maxDepth) {
          throw new _index.MaximumResolverDepthError(`Maximum resolution depth of ${this.options.resolve.maxDepth} has been exceeded by file "${this.reference.uri}"`);
        }
        const baseURI = this.toBaseURI(uri);
        const {
          refSet
        } = this.reference;
        if (refSet.has(baseURI)) {
          return refSet.find((0, _ramda.propEq)(baseURI, "uri"));
        }
        const parseResult = await (0, _index2.default)(url.unsanitize(baseURI), {
          ...this.options,
          parse: {
            ...this.options.parse,
            mediaType: "text/plain"
          }
        });
        const reference = (0, _Reference.default)({
          uri: baseURI,
          value: parseResult,
          depth: this.reference.depth + 1
        });
        refSet.add(reference);
        return reference;
      },
      ReferenceElement(referenceElement) {
        var _referenceElement$$re;
        if (!this.options.resolve.external && (0, _apidomNsOpenapi.isReferenceElementExternal)(referenceElement)) {
          return false;
        }
        const uri = (_referenceElement$$re = referenceElement.$ref) == null ? undefined : _referenceElement$$re.toValue();
        const baseURI = this.toBaseURI(uri);
        if (!(0, _ramda.has)(baseURI, this.crawlingMap)) {
          this.crawlingMap[baseURI] = this.toReference(uri);
        }
        this.crawledElements.push(referenceElement);
        return;
      },
      PathItemElement(pathItemElement) {
        var _pathItemElement$$ref;
        if (!(0, _apidomCore.isStringElement)(pathItemElement.$ref)) {
          return;
        }
        if (!this.options.resolve.external && (0, _apidomNsOpenapi.isPathItemElementExternal)(pathItemElement)) {
          return;
        }
        const uri = (_pathItemElement$$ref = pathItemElement.$ref) == null ? undefined : _pathItemElement$$ref.toValue();
        const baseURI = this.toBaseURI(uri);
        if (!(0, _ramda.has)(baseURI, this.crawlingMap)) {
          this.crawlingMap[baseURI] = this.toReference(uri);
        }
        this.crawledElements.push(pathItemElement);
        return;
      },
      LinkElement(linkElement) {
        if (!(0, _apidomCore.isStringElement)(linkElement.operationRef) && !(0, _apidomCore.isStringElement)(linkElement.operationId)) {
          return;
        }
        if (!this.options.resolve.external && (0, _apidomNsOpenapi.isLinkElementExternal)(linkElement)) {
          return;
        }
        if ((0, _apidomCore.isStringElement)(linkElement.operationRef) && (0, _apidomCore.isStringElement)(linkElement.operationId)) {
          throw new Error("LinkElement operationRef and operationId are mutually exclusive.");
        }
        if ((0, _apidomNsOpenapi.isLinkElementExternal)(linkElement)) {
          var _linkElement$operatio;
          const uri = (_linkElement$operatio = linkElement.operationRef) == null ? undefined : _linkElement$operatio.toValue();
          const baseURI = this.toBaseURI(uri);
          if (!(0, _ramda.has)(baseURI, this.crawlingMap)) {
            this.crawlingMap[baseURI] = this.toReference(uri);
          }
        }
        return;
      },
      ExampleElement(exampleElement) {
        var _exampleElement$exter;
        if (!(0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
          return;
        }
        if (!this.options.resolve.external && (0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
          return;
        }
        if (exampleElement.hasKey("value") && (0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
          throw new Error("ExampleElement value and externalValue fields are mutually exclusive.");
        }
        const uri = (_exampleElement$exter = exampleElement.externalValue) == null ? undefined : _exampleElement$exter.toValue();
        const baseURI = this.toBaseURI(uri);
        if (!(0, _ramda.has)(baseURI, this.crawlingMap)) {
          this.crawlingMap[baseURI] = this.toReference(uri);
        }
        return;
      },
      async SchemaElement(schemaElement) {
        if (this.visited.has(schemaElement)) {
          return false;
        }
        if (!(0, _apidomCore.isStringElement)(schemaElement.$ref)) {
          this.visited.add(schemaElement);
          return;
        }
        const reference = await this.toReference(url.unsanitize(this.reference.uri));
        const {
          uri: retrievalURI
        } = reference;
        const $refBaseURI = (0, _util.resolveSchema$refField)(retrievalURI, schemaElement);
        const $refBaseURIStrippedHash = url.stripHash($refBaseURI);
        const file = (0, _File.default)({
          uri: $refBaseURIStrippedHash
        });
        const isUnknownURI = (0, _ramda.none)((r) => r.canRead(file), this.options.resolve.resolvers);
        const isURL = !isUnknownURI;
        const isExternal = !isUnknownURI && retrievalURI !== $refBaseURIStrippedHash;
        if (!this.options.resolve.external && isExternal) {
          this.visited.add(schemaElement);
          return;
        }
        if (!(0, _ramda.has)($refBaseURIStrippedHash, this.crawlingMap)) {
          try {
            if (isUnknownURI || isURL) {
              this.crawlingMap[$refBaseURIStrippedHash] = reference;
            } else {
              this.crawlingMap[$refBaseURIStrippedHash] = this.toReference(url.unsanitize($refBaseURI));
            }
          } catch (error) {
            if (isURL && error instanceof _EvaluationJsonSchemaUriError.default) {
              this.crawlingMap[$refBaseURIStrippedHash] = this.toReference(url.unsanitize($refBaseURI));
            } else {
              throw error;
            }
          }
        }
        this.crawledElements.push(schemaElement);
        return;
      },
      async crawlReferenceElement(referenceElement) {
        var _referenceElement$$re2;
        const reference = await this.toReference(referenceElement.$ref.toValue());
        this.indirections.push(referenceElement);
        const jsonPointer = (0, _apidomJsonPointer.uriToPointer)((_referenceElement$$re2 = referenceElement.$ref) == null ? undefined : _referenceElement$$re2.toValue());
        let fragment = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
        if ((0, _apidomCore.isPrimitiveElement)(fragment)) {
          const referencedElementType = referenceElement.meta.get("referenced-element").toValue();
          if ((0, _apidomNsOpenapi.isReferenceLikeElement)(fragment)) {
            fragment = _apidomNsOpenapi.ReferenceElement.refract(fragment);
            fragment.setMetaProperty("referenced-element", referencedElementType);
          } else {
            const ElementClass = this.namespace.getElementClass(referencedElementType);
            fragment = ElementClass.refract(fragment);
          }
        }
        if (this.indirections.includes(fragment)) {
          throw new Error("Recursive Reference Object detected");
        }
        if (this.indirections.length > this.options.dereference.maxDepth) {
          throw new _index.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
        }
        const visitor2 = OpenApi3_1ResolveVisitor({
          reference,
          namespace: this.namespace,
          indirections: [...this.indirections],
          options: this.options
        });
        await visitAsync(fragment, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        await visitor2.crawl();
        this.indirections.pop();
      },
      async crawlPathItemElement(pathItemElement) {
        var _pathItemElement$$ref2;
        const reference = await this.toReference(pathItemElement.$ref.toValue());
        this.indirections.push(pathItemElement);
        const jsonPointer = (0, _apidomJsonPointer.uriToPointer)((_pathItemElement$$ref2 = pathItemElement.$ref) == null ? undefined : _pathItemElement$$ref2.toValue());
        let referencedElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
        if ((0, _apidomCore.isPrimitiveElement)(referencedElement)) {
          referencedElement = _apidomNsOpenapi.PathItemElement.refract(referencedElement);
        }
        if (this.indirections.includes(referencedElement)) {
          throw new Error("Recursive Path Item Object reference detected");
        }
        if (this.indirections.length > this.options.dereference.maxDepth) {
          throw new _index.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
        }
        const visitor2 = OpenApi3_1ResolveVisitor({
          reference,
          namespace: this.namespace,
          indirections: [...this.indirections],
          options: this.options
        });
        await visitAsync(referencedElement, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        await visitor2.crawl();
        this.indirections.pop();
      },
      async crawlSchemaElement(referencingElement) {
        let reference = await this.toReference(url.unsanitize(this.reference.uri));
        const {
          uri: retrievalURI
        } = reference;
        const $refBaseURI = (0, _util.resolveSchema$refField)(retrievalURI, referencingElement);
        const $refBaseURIStrippedHash = url.stripHash($refBaseURI);
        const file = (0, _File.default)({
          uri: $refBaseURIStrippedHash
        });
        const isUnknownURI = (0, _ramda.none)((r) => r.canRead(file), this.options.resolve.resolvers);
        const isURL = !isUnknownURI;
        this.indirections.push(referencingElement);
        let referencedElement;
        try {
          if (isUnknownURI || isURL) {
            const selector = $refBaseURI;
            referencedElement = (0, _index3.evaluate)(selector, (0, _util.maybeRefractToSchemaElement)(reference.value.result));
          } else {
            reference = await this.toReference(url.unsanitize($refBaseURI));
            const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
            referencedElement = (0, _util.maybeRefractToSchemaElement)((0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
          }
        } catch (error) {
          if (isURL && error instanceof _EvaluationJsonSchemaUriError.default) {
            if ((0, _index4.isAnchor)((0, _index4.uriToAnchor)($refBaseURI))) {
              reference = await this.toReference(url.unsanitize($refBaseURI));
              const selector = (0, _index4.uriToAnchor)($refBaseURI);
              referencedElement = (0, _index4.evaluate)(selector, (0, _util.maybeRefractToSchemaElement)(reference.value.result));
            } else {
              reference = await this.toReference(url.unsanitize($refBaseURI));
              const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
              referencedElement = (0, _util.maybeRefractToSchemaElement)((0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
            }
          } else {
            throw error;
          }
        }
        this.visited.add(referencingElement);
        if (this.indirections.includes(referencedElement)) {
          throw new Error("Recursive Schema Object reference detected");
        }
        if (this.indirections.length > this.options.dereference.maxDepth) {
          throw new _index.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
        }
        const visitor2 = OpenApi3_1ResolveVisitor({
          reference,
          namespace: this.namespace,
          indirections: [...this.indirections],
          options: this.options,
          visited: this.visited
        });
        await visitAsync(referencedElement, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        await visitor2.crawl();
        this.indirections.pop();
      },
      async crawl() {
        await (0, _ramda.pipe)(_ramda.values, _ramdaAdjunct.allP)(this.crawlingMap);
        this.crawlingMap = null;
        for (const element of this.crawledElements) {
          if ((0, _apidomNsOpenapi.isReferenceElement)(element)) {
            await this.crawlReferenceElement(element);
          } else if ((0, _apidomNsOpenapi.isSchemaElement)(element)) {
            await this.crawlSchemaElement(element);
          } else if ((0, _apidomNsOpenapi.isPathItemElement)(element)) {
            await this.crawlPathItemElement(element);
          }
        }
      }
    }
  });
  var _default = OpenApi3_1ResolveVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/resolve/strategies/openapi-3-1/index.cjs
var require_openapi_3_1 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = _interopRequireWildcard(require_cjs9());
  var _ResolveStrategy = _interopRequireDefault(require_ResolveStrategy());
  var _ReferenceSet = _interopRequireDefault(require_ReferenceSet());
  var _Reference = _interopRequireDefault(require_Reference());
  var _visitor = _interopRequireDefault(require_visitor7());
  var visitAsync = _apidomCore.visit[Symbol.for("nodejs.util.promisify.custom")];
  var OpenApi3_1ResolveStrategy = (0, _stampit.default)(_ResolveStrategy.default, {
    init() {
      this.name = "openapi-3-1";
    },
    methods: {
      canResolve(file) {
        var _file$parseResult;
        if (file.mediaType !== "text/plain") {
          return _apidomNsOpenapi.mediaTypes.includes(file.mediaType);
        }
        return (0, _apidomNsOpenapi.isOpenApi3_1Element)((_file$parseResult = file.parseResult) == null ? undefined : _file$parseResult.result);
      },
      async resolve(file, options) {
        const namespace = (0, _apidomCore.createNamespace)(_apidomNsOpenapi.default);
        const reference = (0, _Reference.default)({
          uri: file.uri,
          value: file.parseResult
        });
        const visitor2 = (0, _visitor.default)({
          reference,
          namespace,
          options
        });
        const refSet = (0, _ReferenceSet.default)();
        refSet.add(reference);
        await visitAsync(refSet.rootRef.value, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        await visitor2.crawl();
        return refSet;
      }
    }
  });
  var _default = OpenApi3_1ResolveStrategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-3-1-apidom/normalize.js
var require_normalize4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.pojoAdapter = exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs9();
  var _opId = _interopRequireDefault(require_op_id());
  var normalize = (element) => {
    if (!(0, _apidomCore.isObjectElement)(element))
      return element;
    if (element.hasKey("$$normalized"))
      return element;
    const plugins = [(0, _apidomNsOpenapi.refractorPluginNormalizeOperationIds)({
      operationIdNormalizer: (operationId, path, method) => (0, _opId.default)({
        operationId
      }, path, method, {
        v2OperationIdCompatibilityMode: false
      })
    }), (0, _apidomNsOpenapi.refractorPluginNormalizeParameters)(), (0, _apidomNsOpenapi.refractorPluginNormalizeSecurityRequirements)(), (0, _apidomNsOpenapi.refractorPluginNormalizeServers)(), (0, _apidomNsOpenapi.refractorPluginNormalizeParameterExamples)(), (0, _apidomNsOpenapi.refractorPluginNormalizeHeaderExamples)()];
    const normalized = (0, _apidomCore.dispatchRefractorPlugins)(element, plugins, {
      toolboxCreator: _apidomNsOpenapi.createToolbox,
      visitorOptions: {
        keyMap: _apidomNsOpenapi.keyMap,
        nodeTypeGetter: _apidomNsOpenapi.getNodeType
      }
    });
    normalized.set("$$normalized", true);
    return normalized;
  };
  var pojoAdapter = (normalizeFn) => (spec) => {
    if (spec != null && spec.$$normalized)
      return spec;
    if (pojoAdapter.cache.has(spec))
      return spec;
    const openApiElement = _apidomNsOpenapi.OpenApi3_1Element.refract(spec);
    const normalized = normalizeFn(openApiElement);
    const value = (0, _apidomCore.toValue)(normalized);
    pojoAdapter.cache.set(spec, value);
    return value;
  };
  exports.pojoAdapter = pojoAdapter;
  pojoAdapter.cache = new WeakMap;
  var _default = normalize;
  exports.default = _default;
});

// node_modules/node-abort-controller/index.js
var require_node_abort_controller = __commonJS((exports, module) => {
  var { EventEmitter } = __require("events");

  class AbortSignal2 {
    constructor() {
      this.eventEmitter = new EventEmitter;
      this.onabort = null;
      this.aborted = false;
      this.reason = undefined;
    }
    toString() {
      return "[object AbortSignal]";
    }
    get [Symbol.toStringTag]() {
      return "AbortSignal";
    }
    removeEventListener(name, handler) {
      this.eventEmitter.removeListener(name, handler);
    }
    addEventListener(name, handler) {
      this.eventEmitter.on(name, handler);
    }
    dispatchEvent(type) {
      const event = { type, target: this };
      const handlerName = `on${type}`;
      if (typeof this[handlerName] === "function")
        this[handlerName](event);
      this.eventEmitter.emit(type, event);
    }
    throwIfAborted() {
      if (this.aborted) {
        throw this.reason;
      }
    }
    static abort(reason) {
      const controller = new AbortController2;
      controller.abort();
      return controller.signal;
    }
    static timeout(time) {
      const controller = new AbortController2;
      setTimeout(() => controller.abort(new Error("TimeoutError")), time);
      return controller.signal;
    }
  }

  class AbortController2 {
    constructor() {
      this.signal = new AbortSignal2;
    }
    abort(reason) {
      if (this.signal.aborted)
        return;
      this.signal.aborted = true;
      if (reason)
        this.signal.reason = reason;
      else
        this.signal.reason = new Error("AbortError");
      this.signal.dispatchEvent("abort");
    }
    toString() {
      return "[object AbortController]";
    }
    get [Symbol.toStringTag]() {
      return "AbortController";
    }
  }
  module.exports = { AbortController: AbortController2, AbortSignal: AbortSignal2 };
});

// node_modules/swagger-client/lib/helpers/abortcontroller-ponyfill.node.js
var require_abortcontroller_ponyfill_node = __commonJS((exports) => {
  exports.__esModule = true;
  exports.AbortSignal = exports.AbortController = undefined;
  var _nodeAbortController = require_node_abort_controller();
  exports.AbortController = _nodeAbortController.AbortController;
  exports.AbortSignal = _nodeAbortController.AbortSignal;
});

// node_modules/swagger-client/lib/helpers/abortcontroller-polyfill.node.js
var require_abortcontroller_polyfill_node = __commonJS(() => {
  var _abortcontrollerPonyfillNode = require_abortcontroller_ponyfill_node();
  if (typeof globalThis.AbortController === "undefined") {
    globalThis.AbortController = _abortcontrollerPonyfillNode.AbortController;
  }
  if (typeof globalThis.AbortSignal === "undefined") {
    globalThis.AbortSignal = _abortcontrollerPonyfillNode.AbortSignal;
  }
});

// node_modules/swagger-client/lib/resolver/apidom/reference/resolve/resolvers/http-swagger-client/index.js
var require_http_swagger_client = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _empty = require_empty2();
  require_fetch_polyfill_node();
  require_abortcontroller_polyfill_node();
  var _index = _interopRequireDefault(require_http());
  var HttpResolverSwaggerClient = _empty.HttpResolver.compose({
    props: {
      name: "http-swagger-client",
      swaggerHTTPClient: _index.default,
      swaggerHTTPClientConfig: {}
    },
    init(_temp) {
      let {
        swaggerHTTPClient = this.swaggerHTTPClient
      } = _temp === undefined ? {} : _temp;
      this.swaggerHTTPClient = swaggerHTTPClient;
    },
    methods: {
      getHttpClient() {
        return this.swaggerHTTPClient;
      },
      async read(file) {
        const client = this.getHttpClient();
        const controller = new AbortController;
        const {
          signal
        } = controller;
        const timeoutID = setTimeout(() => {
          controller.abort();
        }, this.timeout);
        const credentials = this.getHttpClient().withCredentials || this.withCredentials ? "include" : "same-origin";
        const redirect = this.redirects === 0 ? "error" : "follow";
        const follow = this.redirects > 0 ? this.redirects : undefined;
        try {
          const response = await client({
            url: file.uri,
            signal,
            userFetch: async (resource, options) => {
              let res = await fetch(resource, options);
              try {
                res.headers.delete("Content-Type");
              } catch {
                res = new Response(res.body, {
                  ...res,
                  headers: new Headers(res.headers)
                });
                res.headers.delete("Content-Type");
              }
              return res;
            },
            credentials,
            redirect,
            follow,
            ...this.swaggerHTTPClientConfig
          });
          return response.text.arrayBuffer();
        } catch (error) {
          throw new _empty.ResolverError(`Error downloading "${file.uri}"`, {
            cause: error
          });
        } finally {
          clearTimeout(timeoutID);
        }
      }
    }
  });
  var _default = HttpResolverSwaggerClient;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/parse/parsers/json/index.js
var require_json4 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _empty = require_empty2();
  var JsonParser = _empty.Parser.compose({
    props: {
      name: "json-swagger-client",
      fileExtensions: [".json"],
      mediaTypes: ["application/json"]
    },
    methods: {
      async canParse(file) {
        const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);
        const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);
        if (!hasSupportedFileExtension)
          return false;
        if (hasSupportedMediaType)
          return true;
        if (!hasSupportedMediaType) {
          try {
            JSON.parse(file.toString());
            return true;
          } catch (error) {
            return false;
          }
        }
        return false;
      },
      async parse(file) {
        if (this.sourceMap) {
          throw new _empty.ParserError("json-swagger-client parser plugin doesn't support sourceMaps option");
        }
        const parseResultElement = new _apidomCore.ParseResultElement;
        const source = file.toString();
        if (this.allowEmpty && source.trim() === "") {
          return parseResultElement;
        }
        try {
          const element = (0, _apidomCore.from)(JSON.parse(source));
          element.classes.push("result");
          parseResultElement.push(element);
          return parseResultElement;
        } catch (error) {
          throw new _empty.ParserError(`Error parsing "${file.uri}"`, {
            cause: error
          });
        }
      }
    }
  });
  var _default = JsonParser;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/parse/parsers/yaml-1-2/index.js
var require_yaml_1_22 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _jsYaml = _interopRequireWildcard(require_js_yaml());
  var _apidomCore = require_cjs4();
  var _empty = require_empty2();
  var YamlParser = _empty.Parser.compose({
    props: {
      name: "yaml-1-2-swagger-client",
      fileExtensions: [".yaml", ".yml"],
      mediaTypes: ["text/yaml", "application/yaml"]
    },
    methods: {
      async canParse(file) {
        const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);
        const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);
        if (!hasSupportedFileExtension)
          return false;
        if (hasSupportedMediaType)
          return true;
        if (!hasSupportedMediaType) {
          try {
            _jsYaml.default.load(file.toString(), {
              schema: _jsYaml.JSON_SCHEMA
            });
            return true;
          } catch (error) {
            return false;
          }
        }
        return false;
      },
      async parse(file) {
        if (this.sourceMap) {
          throw new _empty.ParserError("yaml-1-2-swagger-client parser plugin doesn't support sourceMaps option");
        }
        const parseResultElement = new _apidomCore.ParseResultElement;
        const source = file.toString();
        try {
          const pojo = _jsYaml.default.load(source, {
            schema: _jsYaml.JSON_SCHEMA
          });
          if (this.allowEmpty && typeof pojo === "undefined") {
            return parseResultElement;
          }
          const element = (0, _apidomCore.from)(pojo);
          element.classes.push("result");
          parseResultElement.push(element);
          return parseResultElement;
        } catch (error) {
          throw new _empty.ParserError(`Error parsing "${file.uri}"`, {
            cause: error
          });
        }
      }
    }
  });
  var _default = YamlParser;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/parse/parsers/openapi-json-3-1/index.js
var require_openapi_json_3_1 = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _empty = require_empty2();
  var _apidomNsOpenapi = require_cjs9();
  var OpenApiJson3_1Parser = _empty.Parser.compose({
    props: {
      name: "openapi-json-3-1-swagger-client",
      fileExtensions: [".json"],
      mediaTypes: new _apidomNsOpenapi.OpenAPIMediaTypes(..._apidomNsOpenapi.mediaTypes.filterByFormat("generic"), ..._apidomNsOpenapi.mediaTypes.filterByFormat("json")),
      detectionRegExp: /"openapi"\s*:\s*"(?<version_json>3\.1\.(?:[1-9]\d*|0))"/
    },
    methods: {
      async canParse(file) {
        const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);
        const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);
        if (!hasSupportedFileExtension)
          return false;
        if (hasSupportedMediaType)
          return true;
        if (!hasSupportedMediaType) {
          try {
            const source = file.toString();
            JSON.parse(source);
            return this.detectionRegExp.test(source);
          } catch (error) {
            return false;
          }
        }
        return false;
      },
      async parse(file) {
        if (this.sourceMap) {
          throw new _empty.ParserError("openapi-json-3-1-swagger-client parser plugin doesn't support sourceMaps option");
        }
        const parseResultElement = new _apidomCore.ParseResultElement;
        const source = file.toString();
        if (this.allowEmpty && source.trim() === "") {
          return parseResultElement;
        }
        try {
          const pojo = JSON.parse(source);
          const element = _apidomNsOpenapi.OpenApi3_1Element.refract(pojo, this.refractorOpts);
          element.classes.push("result");
          parseResultElement.push(element);
          return parseResultElement;
        } catch (error) {
          throw new _empty.ParserError(`Error parsing "${file.uri}"`, {
            cause: error
          });
        }
      }
    }
  });
  var _default = OpenApiJson3_1Parser;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/parse/parsers/openapi-yaml-3-1/index.js
var require_openapi_yaml_3_1 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _jsYaml = _interopRequireWildcard(require_js_yaml());
  var _apidomCore = require_cjs4();
  var _empty = require_empty2();
  var _apidomNsOpenapi = require_cjs9();
  var OpenApiYaml3_1Parser = _empty.Parser.compose({
    props: {
      name: "openapi-yaml-3-1-swagger-client",
      fileExtensions: [".yaml", ".yml"],
      mediaTypes: new _apidomNsOpenapi.OpenAPIMediaTypes(..._apidomNsOpenapi.mediaTypes.filterByFormat("generic"), ..._apidomNsOpenapi.mediaTypes.filterByFormat("yaml")),
      detectionRegExp: /(?<YAML>^(["']?)openapi\2\s*:\s*(["']?)(?<version_yaml>3\.1\.(?:[1-9]\d*|0))\3(?:\s+|$))|(?<JSON>"openapi"\s*:\s*"(?<version_json>3\.1\.(?:[1-9]\d*|0))")/m
    },
    methods: {
      async canParse(file) {
        const hasSupportedFileExtension = this.fileExtensions.length === 0 ? true : this.fileExtensions.includes(file.extension);
        const hasSupportedMediaType = this.mediaTypes.includes(file.mediaType);
        if (!hasSupportedFileExtension)
          return false;
        if (hasSupportedMediaType)
          return true;
        if (!hasSupportedMediaType) {
          try {
            const source = file.toString();
            _jsYaml.default.load(source);
            return this.detectionRegExp.test(source);
          } catch (error) {
            return false;
          }
        }
        return false;
      },
      async parse(file) {
        if (this.sourceMap) {
          throw new _empty.ParserError("openapi-yaml-3-1-swagger-client parser plugin doesn't support sourceMaps option");
        }
        const parseResultElement = new _apidomCore.ParseResultElement;
        const source = file.toString();
        try {
          const pojo = _jsYaml.default.load(source, {
            schema: _jsYaml.JSON_SCHEMA
          });
          if (this.allowEmpty && typeof pojo === "undefined") {
            return parseResultElement;
          }
          const element = _apidomNsOpenapi.OpenApi3_1Element.refract(pojo, this.refractorOpts);
          element.classes.push("result");
          parseResultElement.push(element);
          return parseResultElement;
        } catch (error) {
          throw new _empty.ParserError(`Error parsing "${file.uri}"`, {
            cause: error
          });
        }
      }
    }
  });
  var _default = OpenApiYaml3_1Parser;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/visitor.cjs
var require_visitor8 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _ramdaAdjunct = require_lib6();
  var _apidomCore = require_cjs4();
  var _apidomJsonPointer = require_cjs6();
  var _apidomNsOpenapi = require_cjs9();
  var _index = require_$anchor();
  var _index2 = require_uri();
  var _index3 = require_errors3();
  var url = _interopRequireWildcard(require_url());
  var _index4 = _interopRequireDefault(require_parse3());
  var _Reference = _interopRequireDefault(require_Reference());
  var _File = _interopRequireDefault(require_File());
  var _util = require_util12();
  var _EvaluationJsonSchemaUriError = _interopRequireDefault(require_EvaluationJsonSchemaUriError());
  var visitAsync = _apidomCore.visit[Symbol.for("nodejs.util.promisify.custom")];
  var OpenApi3_1DereferenceVisitor = (0, _stampit.default)({
    props: {
      indirections: null,
      namespace: null,
      reference: null,
      options: null,
      ancestors: null
    },
    init({
      indirections = [],
      reference,
      namespace,
      options,
      ancestors = []
    }) {
      this.indirections = indirections;
      this.namespace = namespace;
      this.reference = reference;
      this.options = options;
      this.ancestors = [...ancestors];
    },
    methods: {
      toBaseURI(uri) {
        return url.resolve(this.reference.uri, url.sanitize(url.stripHash(uri)));
      },
      toAncestorLineage(ancestors) {
        const directAncestors = new WeakSet(ancestors.filter(_apidomCore.isElement));
        const ancestorsLineage = [...this.ancestors, directAncestors];
        return [ancestorsLineage, directAncestors];
      },
      async toReference(uri) {
        if (this.reference.depth >= this.options.resolve.maxDepth) {
          throw new _index3.MaximumResolverDepthError(`Maximum resolution depth of ${this.options.resolve.maxDepth} has been exceeded by file "${this.reference.uri}"`);
        }
        const baseURI = this.toBaseURI(uri);
        const {
          refSet
        } = this.reference;
        if (refSet.has(baseURI)) {
          return refSet.find((0, _ramda.propEq)(baseURI, "uri"));
        }
        const parseResult = await (0, _index4.default)(url.unsanitize(baseURI), {
          ...this.options,
          parse: {
            ...this.options.parse,
            mediaType: "text/plain"
          }
        });
        const reference = (0, _Reference.default)({
          uri: baseURI,
          value: parseResult,
          depth: this.reference.depth + 1
        });
        refSet.add(reference);
        return reference;
      },
      async ReferenceElement(referencingElement, key, parent, path, ancestors) {
        var _referencingElement$$, _referencingElement$$2, _referencingElement$$3, _referencingElement$d, _referencingElement$s;
        const [ancestorsLineage, directAncestors] = this.toAncestorLineage([...ancestors, parent]);
        if (ancestorsLineage.some((ancs) => ancs.has(referencingElement))) {
          return false;
        }
        if (!this.options.resolve.external && (0, _apidomNsOpenapi.isReferenceElementExternal)(referencingElement)) {
          return false;
        }
        const reference = await this.toReference((_referencingElement$$ = referencingElement.$ref) == null ? undefined : _referencingElement$$.toValue());
        const {
          uri: retrievalURI
        } = reference;
        const $refBaseURI = url.resolve(retrievalURI, (_referencingElement$$2 = referencingElement.$ref) == null ? undefined : _referencingElement$$2.toValue());
        this.indirections.push(referencingElement);
        const jsonPointer = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
        let referencedElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
        if ((0, _apidomCore.isPrimitiveElement)(referencedElement)) {
          const referencedElementType = referencingElement.meta.get("referenced-element").toValue();
          if ((0, _apidomNsOpenapi.isReferenceLikeElement)(referencedElement)) {
            referencedElement = _apidomNsOpenapi.ReferenceElement.refract(referencedElement);
            referencedElement.setMetaProperty("referenced-element", referencedElementType);
          } else {
            const ElementClass = this.namespace.getElementClass(referencedElementType);
            referencedElement = ElementClass.refract(referencedElement);
          }
        }
        if (this.indirections.includes(referencedElement)) {
          throw new Error("Recursive Reference Object detected");
        }
        if (this.indirections.length > this.options.dereference.maxDepth) {
          throw new _index3.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
        }
        directAncestors.add(referencingElement);
        const visitor2 = OpenApi3_1DereferenceVisitor({
          reference,
          namespace: this.namespace,
          indirections: [...this.indirections],
          options: this.options,
          ancestors: ancestorsLineage
        });
        referencedElement = await visitAsync(referencedElement, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        directAncestors.delete(referencingElement);
        this.indirections.pop();
        referencedElement = referencedElement.clone();
        referencedElement.setMetaProperty("ref-fields", {
          $ref: (_referencingElement$$3 = referencingElement.$ref) == null ? undefined : _referencingElement$$3.toValue(),
          description: (_referencingElement$d = referencingElement.description) == null ? undefined : _referencingElement$d.toValue(),
          summary: (_referencingElement$s = referencingElement.summary) == null ? undefined : _referencingElement$s.toValue()
        });
        referencedElement.setMetaProperty("ref-origin", reference.uri);
        const hasDescription = (0, _ramda.pathSatisfies)(_ramdaAdjunct.isNotUndefined, ["description"], referencingElement);
        const hasSummary = (0, _ramda.pathSatisfies)(_ramdaAdjunct.isNotUndefined, ["summary"], referencingElement);
        if (hasDescription && (0, _ramda.hasIn)("description", referencedElement)) {
          referencedElement.description = referencingElement.description;
        }
        if (hasSummary && (0, _ramda.hasIn)("summary", referencedElement)) {
          referencedElement.summary = referencingElement.summary;
        }
        this.indirections.pop();
        return referencedElement;
      },
      async PathItemElement(referencingElement, key, parent, path, ancestors) {
        var _referencingElement$$4, _referencingElement$$5, _referencingElement$$6;
        const [ancestorsLineage, directAncestors] = this.toAncestorLineage([...ancestors, parent]);
        if (!(0, _apidomCore.isStringElement)(referencingElement.$ref)) {
          return;
        }
        if (ancestorsLineage.some((ancs) => ancs.has(referencingElement))) {
          return false;
        }
        if (!this.options.resolve.external && (0, _apidomNsOpenapi.isPathItemElementExternal)(referencingElement)) {
          return;
        }
        const reference = await this.toReference((_referencingElement$$4 = referencingElement.$ref) == null ? undefined : _referencingElement$$4.toValue());
        const {
          uri: retrievalURI
        } = reference;
        const $refBaseURI = url.resolve(retrievalURI, (_referencingElement$$5 = referencingElement.$ref) == null ? undefined : _referencingElement$$5.toValue());
        this.indirections.push(referencingElement);
        const jsonPointer = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
        let referencedElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
        if ((0, _apidomCore.isPrimitiveElement)(referencedElement)) {
          referencedElement = _apidomNsOpenapi.PathItemElement.refract(referencedElement);
        }
        if (this.indirections.includes(referencedElement)) {
          throw new Error("Recursive Path Item Object reference detected");
        }
        if (this.indirections.length > this.options.dereference.maxDepth) {
          throw new _index3.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
        }
        directAncestors.add(referencingElement);
        const visitor2 = OpenApi3_1DereferenceVisitor({
          reference,
          namespace: this.namespace,
          indirections: [...this.indirections],
          options: this.options,
          ancestors: ancestorsLineage
        });
        referencedElement = await visitAsync(referencedElement, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        directAncestors.delete(referencingElement);
        this.indirections.pop();
        const mergedResult = new _apidomNsOpenapi.PathItemElement([...referencedElement.content], referencedElement.meta.clone(), referencedElement.attributes.clone());
        referencingElement.forEach((value, keyElement, item) => {
          mergedResult.remove(keyElement.toValue());
          mergedResult.content.push(item);
        });
        mergedResult.remove("$ref");
        mergedResult.setMetaProperty("ref-fields", {
          $ref: (_referencingElement$$6 = referencingElement.$ref) == null ? undefined : _referencingElement$$6.toValue()
        });
        mergedResult.setMetaProperty("ref-origin", reference.uri);
        return mergedResult;
      },
      async LinkElement(linkElement) {
        if (!(0, _apidomCore.isStringElement)(linkElement.operationRef) && !(0, _apidomCore.isStringElement)(linkElement.operationId)) {
          return;
        }
        if (!this.options.resolve.external && (0, _apidomNsOpenapi.isLinkElementExternal)(linkElement)) {
          return;
        }
        if ((0, _apidomCore.isStringElement)(linkElement.operationRef) && (0, _apidomCore.isStringElement)(linkElement.operationId)) {
          throw new Error("LinkElement operationRef and operationId fields are mutually exclusive.");
        }
        let operationElement;
        if ((0, _apidomCore.isStringElement)(linkElement.operationRef)) {
          var _linkElement$operatio, _linkElement$operatio2, _linkElement$operatio3;
          const jsonPointer = (0, _apidomJsonPointer.uriToPointer)((_linkElement$operatio = linkElement.operationRef) == null ? undefined : _linkElement$operatio.toValue());
          const reference = await this.toReference((_linkElement$operatio2 = linkElement.operationRef) == null ? undefined : _linkElement$operatio2.toValue());
          operationElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
          if ((0, _apidomCore.isPrimitiveElement)(operationElement)) {
            operationElement = _apidomNsOpenapi.OperationElement.refract(operationElement);
          }
          operationElement = new _apidomNsOpenapi.OperationElement([...operationElement.content], operationElement.meta.clone(), operationElement.attributes.clone());
          operationElement.setMetaProperty("ref-origin", reference.uri);
          (_linkElement$operatio3 = linkElement.operationRef) == null || _linkElement$operatio3.meta.set("operation", operationElement);
        } else if ((0, _apidomCore.isStringElement)(linkElement.operationId)) {
          var _linkElement$operatio4, _linkElement$operatio5;
          const operationId = (_linkElement$operatio4 = linkElement.operationId) == null ? undefined : _linkElement$operatio4.toValue();
          const reference = await this.toReference(url.unsanitize(this.reference.uri));
          operationElement = (0, _apidomCore.find)((e) => (0, _apidomNsOpenapi.isOperationElement)(e) && e.operationId.equals(operationId), reference.value.result);
          if ((0, _ramdaAdjunct.isUndefined)(operationElement)) {
            throw new Error(`OperationElement(operationId=${operationId}) not found.`);
          }
          (_linkElement$operatio5 = linkElement.operationId) == null || _linkElement$operatio5.meta.set("operation", operationElement);
        }
        return;
      },
      async ExampleElement(exampleElement) {
        var _exampleElement$exter;
        if (!(0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
          return;
        }
        if (!this.options.resolve.external && (0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
          return;
        }
        if (exampleElement.hasKey("value") && (0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
          throw new Error("ExampleElement value and externalValue fields are mutually exclusive.");
        }
        const reference = await this.toReference((_exampleElement$exter = exampleElement.externalValue) == null ? undefined : _exampleElement$exter.toValue());
        const valueElement = new reference.value.result.constructor(reference.value.result.content, reference.value.result.meta.clone(), reference.value.result.attributes.clone());
        valueElement.setMetaProperty("ref-origin", reference.uri);
        exampleElement.value = valueElement;
        return;
      },
      async SchemaElement(referencingElement, key, parent, path, ancestors) {
        var _referencingElement$$8;
        const [ancestorsLineage, directAncestors] = this.toAncestorLineage([...ancestors, parent]);
        if (!(0, _apidomCore.isStringElement)(referencingElement.$ref)) {
          return;
        }
        if (ancestorsLineage.some((ancs) => ancs.has(referencingElement))) {
          return false;
        }
        let reference = await this.toReference(url.unsanitize(this.reference.uri));
        let {
          uri: retrievalURI
        } = reference;
        const $refBaseURI = (0, _util.resolveSchema$refField)(retrievalURI, referencingElement);
        const $refBaseURIStrippedHash = url.stripHash($refBaseURI);
        const file = (0, _File.default)({
          uri: $refBaseURIStrippedHash
        });
        const isUnknownURI = (0, _ramda.none)((r) => r.canRead(file), this.options.resolve.resolvers);
        const isURL = !isUnknownURI;
        const isExternal = isURL && retrievalURI !== $refBaseURIStrippedHash;
        if (!this.options.resolve.external && isExternal) {
          return;
        }
        this.indirections.push(referencingElement);
        let referencedElement;
        try {
          if (isUnknownURI || isURL) {
            const selector = $refBaseURI;
            referencedElement = (0, _index2.evaluate)(selector, (0, _util.maybeRefractToSchemaElement)(reference.value.result));
          } else {
            reference = await this.toReference(url.unsanitize($refBaseURI));
            const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
            referencedElement = (0, _util.maybeRefractToSchemaElement)((0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
          }
        } catch (error) {
          if (isURL && error instanceof _EvaluationJsonSchemaUriError.default) {
            if ((0, _index.isAnchor)((0, _index.uriToAnchor)($refBaseURI))) {
              reference = await this.toReference(url.unsanitize($refBaseURI));
              retrievalURI = reference.uri;
              const selector = (0, _index.uriToAnchor)($refBaseURI);
              referencedElement = (0, _index.evaluate)(selector, (0, _util.maybeRefractToSchemaElement)(reference.value.result));
            } else {
              reference = await this.toReference(url.unsanitize($refBaseURI));
              retrievalURI = reference.uri;
              const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
              referencedElement = (0, _util.maybeRefractToSchemaElement)((0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
            }
          } else {
            throw error;
          }
        }
        if (this.indirections.includes(referencedElement)) {
          throw new Error("Recursive Schema Object reference detected");
        }
        if (this.indirections.length > this.options.dereference.maxDepth) {
          throw new _index3.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
        }
        directAncestors.add(referencingElement);
        const visitor2 = OpenApi3_1DereferenceVisitor({
          reference,
          namespace: this.namespace,
          indirections: [...this.indirections],
          options: this.options,
          ancestors: ancestorsLineage
        });
        referencedElement = await visitAsync(referencedElement, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        directAncestors.delete(referencingElement);
        this.indirections.pop();
        if ((0, _apidomNsOpenapi.isBooleanJsonSchemaElement)(referencedElement)) {
          var _referencingElement$$7;
          const referencedElementClone = referencedElement.clone();
          referencedElementClone.setMetaProperty("ref-fields", {
            $ref: (_referencingElement$$7 = referencingElement.$ref) == null ? undefined : _referencingElement$$7.toValue()
          });
          referencedElementClone.setMetaProperty("ref-origin", reference.uri);
          return referencedElementClone;
        }
        const mergedResult = new _apidomNsOpenapi.SchemaElement([...referencedElement.content], referencedElement.meta.clone(), referencedElement.attributes.clone());
        referencingElement.forEach((value, keyElement, item) => {
          mergedResult.remove(keyElement.toValue());
          mergedResult.content.push(item);
        });
        mergedResult.remove("$ref");
        mergedResult.setMetaProperty("ref-fields", {
          $ref: (_referencingElement$$8 = referencingElement.$ref) == null ? undefined : _referencingElement$$8.toValue()
        });
        mergedResult.setMetaProperty("ref-origin", reference.uri);
        return mergedResult;
      }
    }
  });
  var _default = OpenApi3_1DereferenceVisitor;
  exports.default = _default;
});

// node_modules/@swagger-api/apidom-reference/cjs/dereference/strategies/openapi-3-1/index.cjs
var require_openapi_3_12 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.resolveSchema$refField = exports.maybeRefractToSchemaElement = exports.default = undefined;
  var _stampit = _interopRequireDefault(require_stampit_min());
  var _ramda = require_src2();
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = _interopRequireWildcard(require_cjs9());
  var _DereferenceStrategy = _interopRequireDefault(require_DereferenceStrategy());
  var _Reference = _interopRequireDefault(require_Reference());
  var _ReferenceSet = _interopRequireDefault(require_ReferenceSet());
  var _visitor = _interopRequireDefault(require_visitor8());
  exports.OpenApi3_1DereferenceVisitor = _visitor.default;
  var _util = require_util12();
  exports.resolveSchema$refField = _util.resolveSchema$refField;
  exports.maybeRefractToSchemaElement = _util.maybeRefractToSchemaElement;
  var visitAsync = _apidomCore.visit[Symbol.for("nodejs.util.promisify.custom")];
  var OpenApi3_1DereferenceStrategy = (0, _stampit.default)(_DereferenceStrategy.default, {
    init() {
      this.name = "openapi-3-1";
    },
    methods: {
      canDereference(file) {
        var _file$parseResult;
        if (file.mediaType !== "text/plain") {
          return _apidomNsOpenapi.mediaTypes.includes(file.mediaType);
        }
        return (0, _apidomNsOpenapi.isOpenApi3_1Element)((_file$parseResult = file.parseResult) == null ? undefined : _file$parseResult.result);
      },
      async dereference(file, options) {
        const namespace = (0, _apidomCore.createNamespace)(_apidomNsOpenapi.default);
        const refSet = (0, _ramda.defaultTo)((0, _ReferenceSet.default)(), options.dereference.refSet);
        let reference;
        if (!refSet.has(file.uri)) {
          reference = (0, _Reference.default)({
            uri: file.uri,
            value: file.parseResult
          });
          refSet.add(reference);
        } else {
          reference = refSet.find((0, _ramda.propEq)(file.uri, "uri"));
        }
        const visitor2 = (0, _visitor.default)({
          reference,
          namespace,
          options
        });
        const dereferencedElement = await visitAsync(refSet.rootRef.value, visitor2, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        if (options.dereference.refSet === null) {
          refSet.clean();
        }
        return dereferencedElement;
      }
    }
  });
  var _default = OpenApi3_1DereferenceStrategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/utils/to-path.js
var require_to_path = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var trimParseResult = (elementPath) => elementPath.slice(2);
  var toPath = (elementPath) => {
    const elementPathSanitized = trimParseResult(elementPath);
    return elementPathSanitized.reduce((path, element, index) => {
      if ((0, _apidomCore.isMemberElement)(element)) {
        const token = String(element.key.toValue());
        path.push(token);
      } else if ((0, _apidomCore.isArrayElement)(elementPathSanitized[index - 2])) {
        const token = elementPathSanitized[index - 2].content.indexOf(element);
        path.push(token);
      }
      return path;
    }, []);
  };
  var _default = toPath;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/utils/get-root-cause.js
var require_get_root_cause = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var getRootCause = (error) => {
    if (error.cause == null)
      return error;
    let {
      cause
    } = error;
    while (cause.cause != null) {
      cause = cause.cause;
    }
    return cause;
  };
  var _default = getRootCause;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/errors/index.js
var require_errors7 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.SchemaRefError = undefined;
  var _createError = _interopRequireDefault(require_create_error());
  var SchemaRefError = (0, _createError.default)("SchemaRefError", function cb(message, extra, oriError) {
    this.originalError = oriError;
    Object.assign(this, extra || {});
  });
  exports.SchemaRefError = SchemaRefError;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/visitors/dereference.js
var require_dereference2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs9();
  var _apidomJsonPointer = require_cjs6();
  var _empty = require_empty2();
  var _openapi = require_openapi_3_12();
  var _$anchor = require_$anchor();
  var _uri = require_uri();
  var _toPath = _interopRequireDefault(require_to_path());
  var _getRootCause = _interopRequireDefault(require_get_root_cause());
  var _refs = _interopRequireDefault(require_refs());
  var _index = require_errors7();
  var {
    wrapError
  } = _refs.default;
  var visitAsync = _apidomCore.visit[Symbol.for("nodejs.util.promisify.custom")];
  var OpenApi3_1SwaggerClientDereferenceVisitor = _openapi.OpenApi3_1DereferenceVisitor.compose({
    props: {
      useCircularStructures: true,
      allowMetaPatches: false,
      basePath: null
    },
    init(_ref) {
      let {
        allowMetaPatches = this.allowMetaPatches,
        useCircularStructures = this.useCircularStructures,
        basePath = this.basePath
      } = _ref;
      this.allowMetaPatches = allowMetaPatches;
      this.useCircularStructures = useCircularStructures;
      this.basePath = basePath;
    },
    methods: {
      async ReferenceElement(referenceElement, key, parent, path, ancestors) {
        try {
          var _this$basePath, _referenceElement$$re, _referenceElement$des, _referenceElement$sum;
          const [ancestorsLineage, directAncestors] = this.toAncestorLineage([...ancestors, parent]);
          if ((0, _apidomCore.includesClasses)(["cycle"], referenceElement.$ref)) {
            return false;
          }
          if (ancestorsLineage.some((ancs) => ancs.has(referenceElement))) {
            return false;
          }
          if (!this.options.resolve.external && (0, _apidomNsOpenapi.isReferenceElementExternal)(referenceElement)) {
            return false;
          }
          const reference = await this.toReference(referenceElement.$ref.toValue());
          const {
            uri: retrievalURI
          } = reference;
          const $refBaseURI = _empty.url.resolve(retrievalURI, referenceElement.$ref.toValue());
          this.indirections.push(referenceElement);
          const jsonPointer = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
          let fragment = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
          if ((0, _apidomCore.isPrimitiveElement)(fragment)) {
            const referencedElementType = referenceElement.meta.get("referenced-element").toValue();
            if ((0, _apidomNsOpenapi.isReferenceLikeElement)(fragment)) {
              fragment = _apidomNsOpenapi.ReferenceElement.refract(fragment);
              fragment.setMetaProperty("referenced-element", referencedElementType);
            } else {
              const ElementClass = this.namespace.getElementClass(referencedElementType);
              fragment = ElementClass.refract(fragment);
            }
          }
          if (this.indirections.includes(fragment)) {
            throw new Error("Recursive JSON Pointer detected");
          }
          if (this.indirections.length > this.options.dereference.maxDepth) {
            throw new _empty.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
          }
          if (!this.useCircularStructures) {
            const hasCycles = ancestorsLineage.some((ancs) => ancs.has(fragment));
            if (hasCycles) {
              if (_empty.url.isHttpUrl(retrievalURI) || _empty.url.isFileSystemPath(retrievalURI)) {
                const cycledReferenceElement = new _apidomNsOpenapi.ReferenceElement({
                  $ref: $refBaseURI
                }, referenceElement.meta.clone(), referenceElement.attributes.clone());
                cycledReferenceElement.get("$ref").classes.push("cycle");
                return cycledReferenceElement;
              }
              return false;
            }
          }
          directAncestors.add(referenceElement);
          const visitor2 = OpenApi3_1SwaggerClientDereferenceVisitor({
            reference,
            namespace: this.namespace,
            indirections: [...this.indirections],
            options: this.options,
            ancestors: ancestorsLineage,
            allowMetaPatches: this.allowMetaPatches,
            useCircularStructures: this.useCircularStructures,
            basePath: (_this$basePath = this.basePath) != null ? _this$basePath : [...(0, _toPath.default)([...ancestors, parent, referenceElement]), "$ref"]
          });
          fragment = await visitAsync(fragment, visitor2, {
            keyMap: _apidomNsOpenapi.keyMap,
            nodeTypeGetter: _apidomNsOpenapi.getNodeType
          });
          directAncestors.delete(referenceElement);
          this.indirections.pop();
          fragment = fragment.clone();
          fragment.setMetaProperty("ref-fields", {
            $ref: (_referenceElement$$re = referenceElement.$ref) == null ? undefined : _referenceElement$$re.toValue(),
            description: (_referenceElement$des = referenceElement.description) == null ? undefined : _referenceElement$des.toValue(),
            summary: (_referenceElement$sum = referenceElement.summary) == null ? undefined : _referenceElement$sum.toValue()
          });
          fragment.setMetaProperty("ref-origin", reference.uri);
          const hasDescription = typeof referenceElement.description !== "undefined";
          const hasSummary = typeof referenceElement.summary !== "undefined";
          if (hasDescription && ("description" in fragment)) {
            fragment.description = referenceElement.description;
          }
          if (hasSummary && ("summary" in fragment)) {
            fragment.summary = referenceElement.summary;
          }
          if (this.allowMetaPatches && (0, _apidomCore.isObjectElement)(fragment)) {
            const objectFragment = fragment;
            if (typeof objectFragment.get("$$ref") === "undefined") {
              const baseURI = _empty.url.resolve(retrievalURI, $refBaseURI);
              objectFragment.set("$$ref", baseURI);
            }
          }
          return fragment;
        } catch (error) {
          var _this$basePath2, _this$options$derefer;
          const rootCause = (0, _getRootCause.default)(error);
          const wrappedError = wrapError(rootCause, {
            baseDoc: this.reference.uri,
            $ref: referenceElement.$ref.toValue(),
            pointer: (0, _apidomJsonPointer.uriToPointer)(referenceElement.$ref.toValue()),
            fullPath: (_this$basePath2 = this.basePath) != null ? _this$basePath2 : [...(0, _toPath.default)([...ancestors, parent, referenceElement]), "$ref"]
          });
          (_this$options$derefer = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer = _this$options$derefer.errors) == null || _this$options$derefer.push == null || _this$options$derefer.push(wrappedError);
          return;
        }
      },
      async PathItemElement(pathItemElement, key, parent, path, ancestors) {
        try {
          var _this$basePath3, _pathItemElement$$ref;
          const [ancestorsLineage, directAncestors] = this.toAncestorLineage([...ancestors, parent]);
          if (!(0, _apidomCore.isStringElement)(pathItemElement.$ref)) {
            return;
          }
          if ((0, _apidomCore.includesClasses)(["cycle"], pathItemElement.$ref)) {
            return false;
          }
          if (ancestorsLineage.some((ancs) => ancs.has(pathItemElement))) {
            return false;
          }
          if (!this.options.resolve.external && (0, _apidomNsOpenapi.isPathItemElementExternal)(pathItemElement)) {
            return;
          }
          const reference = await this.toReference(pathItemElement.$ref.toValue());
          const {
            uri: retrievalURI
          } = reference;
          const $refBaseURI = _empty.url.resolve(retrievalURI, pathItemElement.$ref.toValue());
          this.indirections.push(pathItemElement);
          const jsonPointer = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
          let referencedElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);
          if ((0, _apidomCore.isPrimitiveElement)(referencedElement)) {
            referencedElement = _apidomNsOpenapi.PathItemElement.refract(referencedElement);
          }
          if (this.indirections.includes(referencedElement)) {
            throw new Error("Recursive JSON Pointer detected");
          }
          if (this.indirections.length > this.options.dereference.maxDepth) {
            throw new _empty.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
          }
          if (!this.useCircularStructures) {
            const hasCycles = ancestorsLineage.some((ancs) => ancs.has(referencedElement));
            if (hasCycles) {
              if (_empty.url.isHttpUrl(retrievalURI) || _empty.url.isFileSystemPath(retrievalURI)) {
                const cycledPathItemElement = new _apidomNsOpenapi.PathItemElement({
                  $ref: $refBaseURI
                }, pathItemElement.meta.clone(), pathItemElement.attributes.clone());
                cycledPathItemElement.get("$ref").classes.push("cycle");
                return cycledPathItemElement;
              }
              return false;
            }
          }
          directAncestors.add(pathItemElement);
          const visitor2 = OpenApi3_1SwaggerClientDereferenceVisitor({
            reference,
            namespace: this.namespace,
            indirections: [...this.indirections],
            options: this.options,
            ancestors: ancestorsLineage,
            allowMetaPatches: this.allowMetaPatches,
            useCircularStructures: this.useCircularStructures,
            basePath: (_this$basePath3 = this.basePath) != null ? _this$basePath3 : [...(0, _toPath.default)([...ancestors, parent, pathItemElement]), "$ref"]
          });
          referencedElement = await visitAsync(referencedElement, visitor2, {
            keyMap: _apidomNsOpenapi.keyMap,
            nodeTypeGetter: _apidomNsOpenapi.getNodeType
          });
          directAncestors.delete(pathItemElement);
          this.indirections.pop();
          const mergedPathItemElement = new _apidomNsOpenapi.PathItemElement([...referencedElement.content], referencedElement.meta.clone(), referencedElement.attributes.clone());
          pathItemElement.forEach((valueElement, keyElement, item) => {
            mergedPathItemElement.remove(keyElement.toValue());
            mergedPathItemElement.content.push(item);
          });
          mergedPathItemElement.remove("$ref");
          mergedPathItemElement.setMetaProperty("ref-fields", {
            $ref: (_pathItemElement$$ref = pathItemElement.$ref) == null ? undefined : _pathItemElement$$ref.toValue()
          });
          mergedPathItemElement.setMetaProperty("ref-origin", reference.uri);
          if (this.allowMetaPatches) {
            if (typeof mergedPathItemElement.get("$$ref") === "undefined") {
              const baseURI = _empty.url.resolve(retrievalURI, $refBaseURI);
              mergedPathItemElement.set("$$ref", baseURI);
            }
          }
          return mergedPathItemElement;
        } catch (error) {
          var _this$basePath4, _this$options$derefer2;
          const rootCause = (0, _getRootCause.default)(error);
          const wrappedError = wrapError(rootCause, {
            baseDoc: this.reference.uri,
            $ref: pathItemElement.$ref.toValue(),
            pointer: (0, _apidomJsonPointer.uriToPointer)(pathItemElement.$ref.toValue()),
            fullPath: (_this$basePath4 = this.basePath) != null ? _this$basePath4 : [...(0, _toPath.default)([...ancestors, parent, pathItemElement]), "$ref"]
          });
          (_this$options$derefer2 = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer2 = _this$options$derefer2.errors) == null || _this$options$derefer2.push == null || _this$options$derefer2.push(wrappedError);
          return;
        }
      },
      async SchemaElement(referencingElement, key, parent, path, ancestors) {
        try {
          var _this$basePath5, _referencingElement$$2;
          const [ancestorsLineage, directAncestors] = this.toAncestorLineage([...ancestors, parent]);
          if (!(0, _apidomCore.isStringElement)(referencingElement.$ref)) {
            return;
          }
          if ((0, _apidomCore.includesClasses)(["cycle"], referencingElement.$ref)) {
            return false;
          }
          if (ancestorsLineage.some((ancs) => ancs.has(referencingElement))) {
            return false;
          }
          let reference = await this.toReference(_empty.url.unsanitize(this.reference.uri));
          let {
            uri: retrievalURI
          } = reference;
          const $refBaseURI = (0, _openapi.resolveSchema$refField)(retrievalURI, referencingElement);
          const $refBaseURIStrippedHash = _empty.url.stripHash($refBaseURI);
          const file = (0, _empty.File)({
            uri: $refBaseURIStrippedHash
          });
          const isUnknownURI = !this.options.resolve.resolvers.some((r) => r.canRead(file));
          const isURL = !isUnknownURI;
          const isExternal = isURL && retrievalURI !== $refBaseURIStrippedHash;
          if (!this.options.resolve.external && isExternal) {
            return;
          }
          this.indirections.push(referencingElement);
          let referencedElement;
          try {
            if (isUnknownURI || isURL) {
              const selector = $refBaseURI;
              referencedElement = (0, _uri.evaluate)(selector, (0, _openapi.maybeRefractToSchemaElement)(reference.value.result));
            } else {
              reference = await this.toReference(_empty.url.unsanitize($refBaseURI));
              retrievalURI = reference.uri;
              const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
              referencedElement = (0, _openapi.maybeRefractToSchemaElement)((0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
            }
          } catch (error) {
            if (isURL && error instanceof _uri.EvaluationJsonSchemaUriError) {
              if ((0, _$anchor.isAnchor)((0, _$anchor.uriToAnchor)($refBaseURI))) {
                reference = await this.toReference(_empty.url.unsanitize($refBaseURI));
                retrievalURI = reference.uri;
                const selector = (0, _$anchor.uriToAnchor)($refBaseURI);
                referencedElement = (0, _$anchor.evaluate)(selector, (0, _openapi.maybeRefractToSchemaElement)(reference.value.result));
              } else {
                reference = await this.toReference(_empty.url.unsanitize($refBaseURI));
                retrievalURI = reference.uri;
                const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
                referencedElement = (0, _openapi.maybeRefractToSchemaElement)((0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
              }
            } else {
              throw error;
            }
          }
          if (this.indirections.includes(referencedElement)) {
            throw new Error("Recursive Schema Object reference detected");
          }
          if (this.indirections.length > this.options.dereference.maxDepth) {
            throw new _empty.MaximumDereferenceDepthError(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
          }
          if (!this.useCircularStructures) {
            const hasCycles = ancestorsLineage.some((ancs) => ancs.has(referencedElement));
            if (hasCycles) {
              if (_empty.url.isHttpUrl(retrievalURI) || _empty.url.isFileSystemPath(retrievalURI)) {
                const baseURI = _empty.url.resolve(retrievalURI, $refBaseURI);
                const cycledSchemaElement = new _apidomNsOpenapi.SchemaElement({
                  $ref: baseURI
                }, referencingElement.meta.clone(), referencingElement.attributes.clone());
                cycledSchemaElement.get("$ref").classes.push("cycle");
                return cycledSchemaElement;
              }
              return false;
            }
          }
          directAncestors.add(referencingElement);
          const mergeVisitor = OpenApi3_1SwaggerClientDereferenceVisitor({
            reference,
            namespace: this.namespace,
            indirections: [...this.indirections],
            options: this.options,
            useCircularStructures: this.useCircularStructures,
            allowMetaPatches: this.allowMetaPatches,
            ancestors: ancestorsLineage,
            basePath: (_this$basePath5 = this.basePath) != null ? _this$basePath5 : [...(0, _toPath.default)([...ancestors, parent, referencingElement]), "$ref"]
          });
          referencedElement = await visitAsync(referencedElement, mergeVisitor, {
            keyMap: _apidomNsOpenapi.keyMap,
            nodeTypeGetter: _apidomNsOpenapi.getNodeType
          });
          directAncestors.delete(referencingElement);
          this.indirections.pop();
          if ((0, _apidomNsOpenapi.isBooleanJsonSchemaElement)(referencedElement)) {
            var _referencingElement$$;
            const jsonSchemaBooleanElement = referencedElement.clone();
            jsonSchemaBooleanElement.setMetaProperty("ref-fields", {
              $ref: (_referencingElement$$ = referencingElement.$ref) == null ? undefined : _referencingElement$$.toValue()
            });
            jsonSchemaBooleanElement.setMetaProperty("ref-origin", retrievalURI);
            return jsonSchemaBooleanElement;
          }
          const mergedSchemaElement = new _apidomNsOpenapi.SchemaElement([...referencedElement.content], referencedElement.meta.clone(), referencedElement.attributes.clone());
          referencingElement.forEach((memberValue, memberKey, member) => {
            mergedSchemaElement.remove(memberKey.toValue());
            mergedSchemaElement.content.push(member);
          });
          mergedSchemaElement.remove("$ref");
          mergedSchemaElement.setMetaProperty("ref-fields", {
            $ref: (_referencingElement$$2 = referencingElement.$ref) == null ? undefined : _referencingElement$$2.toValue()
          });
          mergedSchemaElement.setMetaProperty("ref-origin", retrievalURI);
          if (this.allowMetaPatches) {
            if (typeof mergedSchemaElement.get("$$ref") === "undefined") {
              const baseURI = _empty.url.resolve(retrievalURI, $refBaseURI);
              mergedSchemaElement.set("$$ref", baseURI);
            }
          }
          return mergedSchemaElement;
        } catch (error) {
          var _this$basePath6, _this$options$derefer3;
          const rootCause = (0, _getRootCause.default)(error);
          const wrappedError = new _index.SchemaRefError(`Could not resolve reference: ${rootCause.message}`, {
            baseDoc: this.reference.uri,
            $ref: referencingElement.$ref.toValue(),
            fullPath: (_this$basePath6 = this.basePath) != null ? _this$basePath6 : [...(0, _toPath.default)([...ancestors, parent, referencingElement]), "$ref"]
          }, rootCause);
          (_this$options$derefer3 = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer3 = _this$options$derefer3.errors) == null || _this$options$derefer3.push == null || _this$options$derefer3.push(wrappedError);
          return;
        }
      },
      async LinkElement() {
        return;
      },
      async ExampleElement(exampleElement, key, parent, path, ancestors) {
        try {
          return await _openapi.OpenApi3_1DereferenceVisitor.compose.methods.ExampleElement.call(this, exampleElement, key, parent, path, ancestors);
        } catch (error) {
          var _exampleElement$exter, _this$basePath7, _this$options$derefer4;
          const rootCause = (0, _getRootCause.default)(error);
          const wrappedError = wrapError(rootCause, {
            baseDoc: this.reference.uri,
            externalValue: (_exampleElement$exter = exampleElement.externalValue) == null ? undefined : _exampleElement$exter.toValue(),
            fullPath: (_this$basePath7 = this.basePath) != null ? _this$basePath7 : [...(0, _toPath.default)([...ancestors, parent, exampleElement]), "externalValue"]
          });
          (_this$options$derefer4 = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer4 = _this$options$derefer4.errors) == null || _this$options$derefer4.push == null || _this$options$derefer4.push(wrappedError);
          return;
        }
      }
    }
  });
  var _default = OpenApi3_1SwaggerClientDereferenceVisitor;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/utils/compose.js
var require_compose2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _openapi = _interopRequireDefault(require_openapi_3_12());
  var compose = _openapi.default.compose.bind();
  var _default = compose;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/visitors/parameters.js
var require_parameters2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _compose = _interopRequireDefault(require_compose2());
  var _toPath = _interopRequireDefault(require_to_path());
  var ParameterMacroVisitor = (0, _compose.default)({
    init(_ref) {
      let {
        parameterMacro,
        options
      } = _ref;
      this.parameterMacro = parameterMacro;
      this.options = options;
    },
    props: {
      parameterMacro: null,
      options: null,
      macroOperation: null,
      OperationElement: {
        enter(operationElement) {
          this.macroOperation = operationElement;
        },
        leave() {
          this.macroOperation = null;
        }
      },
      ParameterElement: {
        leave(parameterElement, key, parent, path, ancestors) {
          const pojoOperation = this.macroOperation === null ? null : (0, _apidomCore.toValue)(this.macroOperation);
          const pojoParameter = (0, _apidomCore.toValue)(parameterElement);
          try {
            const macroValue = this.parameterMacro(pojoOperation, pojoParameter);
            parameterElement.set("default", macroValue);
          } catch (error) {
            var _this$options$derefer;
            const macroError = new Error(error, {
              cause: error
            });
            macroError.fullPath = (0, _toPath.default)([...ancestors, parent]);
            (_this$options$derefer = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer = _this$options$derefer.errors) == null || _this$options$derefer.push == null || _this$options$derefer.push(macroError);
          }
        }
      }
    }
  });
  var _default = ParameterMacroVisitor;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/visitors/properties.js
var require_properties2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _compose = _interopRequireDefault(require_compose2());
  var _toPath = _interopRequireDefault(require_to_path());
  var ModelPropertyMacroVisitor = (0, _compose.default)({
    init(_ref) {
      let {
        modelPropertyMacro,
        options
      } = _ref;
      this.modelPropertyMacro = modelPropertyMacro;
      this.options = options;
    },
    props: {
      modelPropertyMacro: null,
      options: null,
      SchemaElement: {
        leave(schemaElement, key, parent, path, ancestors) {
          if (typeof schemaElement.properties === "undefined")
            return;
          if (!(0, _apidomCore.isObjectElement)(schemaElement.properties))
            return;
          schemaElement.properties.forEach((property) => {
            if (!(0, _apidomCore.isObjectElement)(property))
              return;
            try {
              const macroValue = this.modelPropertyMacro((0, _apidomCore.toValue)(property));
              property.set("default", macroValue);
            } catch (error) {
              var _this$options$derefer;
              const macroError = new Error(error, {
                cause: error
              });
              macroError.fullPath = [...(0, _toPath.default)([...ancestors, parent, schemaElement]), "properties"];
              (_this$options$derefer = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer = _this$options$derefer.errors) == null || _this$options$derefer.push == null || _this$options$derefer.push(macroError);
            }
          });
        }
      }
    }
  });
  var _default = ModelPropertyMacroVisitor;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/visitors/all-of.js
var require_all_of2 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _apidomNsOpenapi = require_cjs9();
  var _compose = _interopRequireDefault(require_compose2());
  var _toPath = _interopRequireDefault(require_to_path());
  var AllOfVisitor = (0, _compose.default)({
    init(_ref) {
      let {
        options
      } = _ref;
      this.options = options;
    },
    props: {
      options: null,
      SchemaElement: {
        leave(schemaElement, key, parent, path, ancestors) {
          if (typeof schemaElement.allOf === "undefined")
            return;
          if (!(0, _apidomCore.isArrayElement)(schemaElement.allOf)) {
            var _this$options$derefer;
            const error = new TypeError("allOf must be an array");
            error.fullPath = [...(0, _toPath.default)([...ancestors, parent, schemaElement]), "allOf"];
            (_this$options$derefer = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer = _this$options$derefer.errors) == null || _this$options$derefer.push == null || _this$options$derefer.push(error);
            return;
          }
          if (schemaElement.allOf.isEmpty) {
            return new _apidomNsOpenapi.SchemaElement(schemaElement.content.filter((memberElement) => memberElement.key.toValue() !== "allOf"), schemaElement.meta.clone(), schemaElement.attributes.clone());
          }
          const includesSchemaElementOnly = schemaElement.allOf.content.every(_apidomNsOpenapi.isSchemaElement);
          if (!includesSchemaElementOnly) {
            var _this$options$derefer2;
            const error = new TypeError("Elements in allOf must be objects");
            error.fullPath = [...(0, _toPath.default)([...ancestors, parent, schemaElement]), "allOf"];
            (_this$options$derefer2 = this.options.dereference.dereferenceOpts) == null || (_this$options$derefer2 = _this$options$derefer2.errors) == null || _this$options$derefer2.push == null || _this$options$derefer2.push(error);
            return;
          }
          const mergedSchemaElement = _apidomCore.deepmerge.all([...schemaElement.allOf.content, schemaElement]);
          if (!schemaElement.hasKey("$$ref")) {
            mergedSchemaElement.remove("$$ref");
          }
          if (schemaElement.hasKey("example")) {
            const member = mergedSchemaElement.getMember("example");
            member.value = schemaElement.get("example");
          }
          if (schemaElement.hasKey("examples")) {
            const member = mergedSchemaElement.getMember("examples");
            member.value = schemaElement.get("examples");
          }
          mergedSchemaElement.remove("allOf");
          return mergedSchemaElement;
        }
      }
    }
  });
  var _default = AllOfVisitor;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/apidom/reference/dereference/strategies/openapi-3-1-swagger-client/index.js
var require_openapi_3_1_swagger_client = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _empty = require_empty2();
  var _openapi = _interopRequireDefault(require_openapi_3_12());
  var _apidomNsOpenapi = _interopRequireWildcard(require_cjs9());
  var _dereference = _interopRequireDefault(require_dereference2());
  var _parameters = _interopRequireDefault(require_parameters2());
  var _properties = _interopRequireDefault(require_properties2());
  var _allOf = _interopRequireDefault(require_all_of2());
  var visitAsync = _apidomCore.visit[Symbol.for("nodejs.util.promisify.custom")];
  var OpenApi3_1SwaggerClientDereferenceStrategy = _openapi.default.compose({
    props: {
      useCircularStructures: true,
      allowMetaPatches: false,
      parameterMacro: null,
      modelPropertyMacro: null,
      mode: "non-strict",
      ancestors: null
    },
    init(_temp) {
      let {
        useCircularStructures = this.useCircularStructures,
        allowMetaPatches = this.allowMetaPatches,
        parameterMacro = this.parameterMacro,
        modelPropertyMacro = this.modelPropertyMacro,
        mode = this.mode,
        ancestors = []
      } = _temp === undefined ? {} : _temp;
      this.name = "openapi-3-1-swagger-client";
      this.useCircularStructures = useCircularStructures;
      this.allowMetaPatches = allowMetaPatches;
      this.parameterMacro = parameterMacro;
      this.modelPropertyMacro = modelPropertyMacro;
      this.mode = mode;
      this.ancestors = [...ancestors];
    },
    methods: {
      async dereference(file, options) {
        var _options$dereference$;
        const visitors = [];
        const namespace = (0, _apidomCore.createNamespace)(_apidomNsOpenapi.default);
        const refSet = (_options$dereference$ = options.dereference.refSet) != null ? _options$dereference$ : (0, _empty.ReferenceSet)();
        let reference;
        if (!refSet.has(file.uri)) {
          reference = (0, _empty.Reference)({
            uri: file.uri,
            value: file.parseResult
          });
          refSet.add(reference);
        } else {
          reference = refSet.find((ref) => ref.uri === file.uri);
        }
        const dereferenceVisitor = (0, _dereference.default)({
          reference,
          namespace,
          options,
          useCircularStructures: this.useCircularStructures,
          allowMetaPatches: this.allowMetaPatches,
          ancestors: this.ancestors
        });
        visitors.push(dereferenceVisitor);
        if (typeof this.parameterMacro === "function") {
          const parameterMacroVisitor = (0, _parameters.default)({
            parameterMacro: this.parameterMacro,
            options
          });
          visitors.push(parameterMacroVisitor);
        }
        if (typeof this.modelPropertyMacro === "function") {
          const modelPropertyMacroVisitor = (0, _properties.default)({
            modelPropertyMacro: this.modelPropertyMacro,
            options
          });
          visitors.push(modelPropertyMacroVisitor);
        }
        if (this.mode !== "strict") {
          const allOfVisitor = (0, _allOf.default)({
            options
          });
          visitors.push(allOfVisitor);
        }
        const rootVisitor = (0, _apidomCore.mergeAllVisitors)(visitors, {
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        const dereferencedElement = await visitAsync(refSet.rootRef.value, rootVisitor, {
          keyMap: _apidomNsOpenapi.keyMap,
          nodeTypeGetter: _apidomNsOpenapi.getNodeType
        });
        if (options.dereference.refSet === null) {
          refSet.clean();
        }
        return dereferencedElement;
      }
    }
  });
  var _default = OpenApi3_1SwaggerClientDereferenceStrategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-3-1-apidom/resolve.js
var require_resolve5 = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _apidomCore = require_cjs4();
  var _apidomJsonPointer = require_cjs6();
  var _apidomNsOpenapi = require_cjs9();
  var _empty = require_empty2();
  var _binary = _interopRequireDefault(require_index_node());
  var _openapi = _interopRequireDefault(require_openapi_3_1());
  var optionsUtil = _interopRequireWildcard(require_options());
  var _normalize = _interopRequireDefault(require_normalize4());
  var _index = _interopRequireDefault(require_http_swagger_client());
  var _index2 = _interopRequireDefault(require_json4());
  var _index3 = _interopRequireDefault(require_yaml_1_22());
  var _index4 = _interopRequireDefault(require_openapi_json_3_1());
  var _index5 = _interopRequireDefault(require_openapi_yaml_3_1());
  var _index6 = _interopRequireDefault(require_openapi_3_1_swagger_client());
  var resolveOpenAPI31Strategy = async (options) => {
    const {
      spec,
      timeout,
      redirects,
      requestInterceptor,
      responseInterceptor,
      pathDiscriminator = [],
      allowMetaPatches = false,
      useCircularStructures = false,
      skipNormalization = false,
      parameterMacro = null,
      modelPropertyMacro = null,
      mode = "non-strict"
    } = options;
    try {
      const {
        cache
      } = resolveOpenAPI31Strategy;
      const cwd = _empty.url.isHttpUrl(_empty.url.cwd()) ? _empty.url.cwd() : "https://smartbear.com/";
      const retrievalURI = optionsUtil.retrievalURI(options);
      const baseURI = _empty.url.resolve(cwd, retrievalURI);
      let openApiElement;
      if (cache.has(spec)) {
        openApiElement = cache.get(spec);
      } else {
        openApiElement = _apidomNsOpenapi.OpenApi3_1Element.refract(spec);
        openApiElement.classes.push("result");
        cache.set(spec, openApiElement);
      }
      const openApiParseResultElement = new _apidomCore.ParseResultElement([openApiElement]);
      const jsonPointer = (0, _apidomJsonPointer.compile)(pathDiscriminator);
      const jsonPointerURI = jsonPointer === "" ? "" : `#${jsonPointer}`;
      const fragmentElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, openApiElement);
      const openApiElementReference = (0, _empty.Reference)({
        uri: baseURI,
        value: openApiParseResultElement
      });
      const refSet = (0, _empty.ReferenceSet)({
        refs: [openApiElementReference]
      });
      if (jsonPointer !== "")
        refSet.rootRef = null;
      const ancestors = [new WeakSet([fragmentElement])];
      const errors = [];
      const dereferenced = await (0, _empty.dereferenceApiDOM)(fragmentElement, {
        resolve: {
          baseURI: `${baseURI}${jsonPointerURI}`,
          resolvers: [(0, _index.default)({
            timeout: timeout || 1e4,
            redirects: redirects || 10
          })],
          resolverOpts: {
            swaggerHTTPClientConfig: {
              requestInterceptor,
              responseInterceptor
            }
          },
          strategies: [(0, _openapi.default)()]
        },
        parse: {
          mediaType: _apidomNsOpenapi.mediaTypes.latest(),
          parsers: [(0, _index4.default)({
            allowEmpty: false,
            sourceMap: false
          }), (0, _index5.default)({
            allowEmpty: false,
            sourceMap: false
          }), (0, _index2.default)({
            allowEmpty: false,
            sourceMap: false
          }), (0, _index3.default)({
            allowEmpty: false,
            sourceMap: false
          }), (0, _binary.default)({
            allowEmpty: false,
            sourceMap: false
          })]
        },
        dereference: {
          maxDepth: 100,
          strategies: [(0, _index6.default)({
            allowMetaPatches,
            useCircularStructures,
            parameterMacro,
            modelPropertyMacro,
            mode,
            ancestors
          })],
          refSet,
          dereferenceOpts: {
            errors
          }
        }
      });
      const transcluded = (0, _apidomCore.transclude)(fragmentElement, dereferenced, openApiElement);
      const normalized = skipNormalization ? transcluded : (0, _normalize.default)(transcluded);
      return {
        spec: (0, _apidomCore.toValue)(normalized),
        errors
      };
    } catch (error) {
      if (error instanceof _apidomJsonPointer.InvalidJsonPointerError || error instanceof _apidomJsonPointer.EvaluationJsonPointerError) {
        return {
          spec: null,
          errors: []
        };
      }
      throw error;
    }
  };
  resolveOpenAPI31Strategy.cache = new WeakMap;
  var _default = resolveOpenAPI31Strategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/resolver/strategies/openapi-3-1-apidom/index.js
var require_openapi_3_1_apidom = __commonJS((exports) => {
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = undefined;
  var _resolve = _interopRequireDefault(require_resolve5());
  var _normalize = _interopRequireWildcard(require_normalize4());
  var _openapiPredicates = require_openapi_predicates();
  var openApi31ApiDOMStrategy = {
    name: "openapi-3-1-apidom",
    match(_ref) {
      let {
        spec
      } = _ref;
      return (0, _openapiPredicates.isOpenAPI31)(spec);
    },
    normalize(_ref2) {
      let {
        spec
      } = _ref2;
      return (0, _normalize.pojoAdapter)(_normalize.default)(spec);
    },
    async resolve(options) {
      return (0, _resolve.default)(options);
    }
  };
  var _default = openApi31ApiDOMStrategy;
  exports.default = _default;
});

// node_modules/swagger-client/lib/helpers/each-operation.js
var require_each_operation = __commonJS((exports) => {
  var eachOperation = function(spec, cb, find) {
    if (!spec || typeof spec !== "object" || !spec.paths || typeof spec.paths !== "object") {
      return null;
    }
    const {
      paths
    } = spec;
    for (const pathName in paths) {
      for (const method in paths[pathName]) {
        if (method.toUpperCase() === "PARAMETERS") {
          continue;
        }
        const operation = paths[pathName][method];
        if (!operation || typeof operation !== "object") {
          continue;
        }
        const operationObj = {
          spec,
          pathName,
          method: method.toUpperCase(),
          operation
        };
        const cbValue = cb(operationObj);
        if (find && cbValue) {
          return operationObj;
        }
      }
    }
    return;
  };
  exports.__esModule = true;
  exports.default = eachOperation;
});

// node_modules/swagger-client/lib/helpers/find-operation.js
var require_find_operation = __commonJS((exports) => {
  var findOperation = function(spec, predicate) {
    return (0, _eachOperation.default)(spec, predicate, true) || null;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = findOperation;
  var _eachOperation = _interopRequireDefault(require_each_operation());
});

// node_modules/swagger-client/lib/helpers/id-from-path-method/legacy.js
var require_legacy = __commonJS((exports) => {
  var idFromPathMethodLegacy = function(pathName, method) {
    return `${method.toLowerCase()}-${pathName}`;
  };
  exports.__esModule = true;
  exports.default = idFromPathMethodLegacy;
});

// node_modules/swagger-client/lib/helpers/get-operation-raw.js
var require_get_operation_raw = __commonJS((exports) => {
  var getOperationRaw = function(spec, id) {
    if (!spec || !spec.paths) {
      return null;
    }
    return (0, _findOperation.default)(spec, (_ref) => {
      let {
        pathName,
        method,
        operation
      } = _ref;
      if (!operation || typeof operation !== "object") {
        return false;
      }
      const rawOperationId = operation.operationId;
      const operationId = (0, _opId.default)(operation, pathName, method);
      const legacyOperationId = (0, _legacy.default)(pathName, method);
      return [operationId, legacyOperationId, rawOperationId].some((val) => val && val === id);
    });
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.default = getOperationRaw;
  var _findOperation = _interopRequireDefault(require_find_operation());
  var _opId = _interopRequireDefault(require_op_id());
  var _legacy = _interopRequireDefault(require_legacy());
});

// node_modules/swagger-client/lib/helpers/index.js
var require_helpers4 = __commonJS((exports) => {
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.opId = exports.idFromPathMethodLegacy = exports.idFromPathMethod = exports.getOperationRaw = exports.findOperation = exports.eachOperation = undefined;
  var _eachOperation = _interopRequireDefault(require_each_operation());
  exports.eachOperation = _eachOperation.default;
  var _findOperation = _interopRequireDefault(require_find_operation());
  exports.findOperation = _findOperation.default;
  var _getOperationRaw = _interopRequireDefault(require_get_operation_raw());
  exports.getOperationRaw = _getOperationRaw.default;
  var _opId = _interopRequireDefault(require_op_id());
  exports.opId = _opId.default;
  var _index = _interopRequireDefault(require_id_from_path_method());
  exports.idFromPathMethod = _index.default;
  var _legacy = _interopRequireDefault(require_legacy());
  exports.idFromPathMethodLegacy = _legacy.default;
});

// node_modules/swagger-client/lib/interfaces.js
var require_interfaces = __commonJS((exports) => {
  var makeExecute = function(swaggerJs) {
    if (swaggerJs === undefined) {
      swaggerJs = {};
    }
    return (_ref) => {
      let {
        pathName,
        method,
        operationId
      } = _ref;
      return function(parameters, opts) {
        if (opts === undefined) {
          opts = {};
        }
        const {
          requestInterceptor,
          responseInterceptor,
          userFetch
        } = swaggerJs;
        return swaggerJs.execute({
          spec: swaggerJs.spec,
          requestInterceptor,
          responseInterceptor,
          userFetch,
          pathName,
          method,
          parameters,
          operationId,
          ...opts
        });
      };
    };
  };
  var makeApisTagOperationsOperationExecute = function(swaggerJs) {
    if (swaggerJs === undefined) {
      swaggerJs = {};
    }
    const cb = self2.makeExecute(swaggerJs);
    const tagOperations = self2.mapTagOperations({
      v2OperationIdCompatibilityMode: swaggerJs.v2OperationIdCompatibilityMode,
      spec: swaggerJs.spec,
      cb
    });
    const apis = {};
    for (const tag in tagOperations) {
      apis[tag] = {
        operations: {}
      };
      for (const op in tagOperations[tag]) {
        apis[tag].operations[op] = {
          execute: tagOperations[tag][op]
        };
      }
    }
    return {
      apis
    };
  };
  var makeApisTagOperation = function(swaggerJs) {
    if (swaggerJs === undefined) {
      swaggerJs = {};
    }
    const cb = self2.makeExecute(swaggerJs);
    return {
      apis: self2.mapTagOperations({
        v2OperationIdCompatibilityMode: swaggerJs.v2OperationIdCompatibilityMode,
        spec: swaggerJs.spec,
        cb
      })
    };
  };
  var mapTagOperations = function(_ref2) {
    let {
      spec,
      cb = nullFn,
      defaultTag = "default",
      v2OperationIdCompatibilityMode
    } = _ref2;
    const operationIdCounter = {};
    const tagOperations = {};
    (0, _index.eachOperation)(spec, (_ref3) => {
      let {
        pathName,
        method,
        operation
      } = _ref3;
      const tags = operation.tags ? normalizeArray(operation.tags) : [defaultTag];
      tags.forEach((tag) => {
        if (typeof tag !== "string") {
          return;
        }
        tagOperations[tag] = tagOperations[tag] || {};
        const tagObj = tagOperations[tag];
        const id = (0, _index.opId)(operation, pathName, method, {
          v2OperationIdCompatibilityMode
        });
        const cbResult = cb({
          spec,
          pathName,
          method,
          operation,
          operationId: id
        });
        if (operationIdCounter[id]) {
          operationIdCounter[id] += 1;
          tagObj[`${id}${operationIdCounter[id]}`] = cbResult;
        } else if (typeof tagObj[id] !== "undefined") {
          const originalCounterValue = operationIdCounter[id] || 1;
          operationIdCounter[id] = originalCounterValue + 1;
          tagObj[`${id}${operationIdCounter[id]}`] = cbResult;
          const temp = tagObj[id];
          delete tagObj[id];
          tagObj[`${id}${originalCounterValue}`] = temp;
        } else {
          tagObj[id] = cbResult;
        }
      });
    });
    return tagOperations;
  };
  exports.__esModule = true;
  exports.makeApisTagOperation = makeApisTagOperation;
  exports.makeApisTagOperationsOperationExecute = makeApisTagOperationsOperationExecute;
  exports.makeExecute = makeExecute;
  exports.mapTagOperations = mapTagOperations;
  exports.self = undefined;
  var _index = require_helpers4();
  var nullFn = () => null;
  var normalizeArray = (arg) => Array.isArray(arg) ? arg : [arg];
  var self2 = {
    mapTagOperations,
    makeExecute
  };
  exports.self = self2;
});

// node_modules/cookie/index.js
var require_cookie = __commonJS((exports) => {
  var parse = function(str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var obj = {};
    var opt = options || {};
    var dec = opt.decode || decode;
    var index = 0;
    while (index < str.length) {
      var eqIdx = str.indexOf("=", index);
      if (eqIdx === -1) {
        break;
      }
      var endIdx = str.indexOf(";", index);
      if (endIdx === -1) {
        endIdx = str.length;
      } else if (endIdx < eqIdx) {
        index = str.lastIndexOf(";", eqIdx - 1) + 1;
        continue;
      }
      var key = str.slice(index, eqIdx).trim();
      if (obj[key] === undefined) {
        var val = str.slice(eqIdx + 1, endIdx).trim();
        if (val.charCodeAt(0) === 34) {
          val = val.slice(1, -1);
        }
        obj[key] = tryDecode(val, dec);
      }
      index = endIdx + 1;
    }
    return obj;
  };
  var serialize = function(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode;
    if (typeof enc !== "function") {
      throw new TypeError("option encode is invalid");
    }
    if (!fieldContentRegExp.test(name)) {
      throw new TypeError("argument name is invalid");
    }
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError("argument val is invalid");
    }
    var str = name + "=" + value;
    if (opt.maxAge != null) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge) || !isFinite(maxAge)) {
        throw new TypeError("option maxAge is invalid");
      }
      str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=" + opt.path;
    }
    if (opt.expires) {
      var expires = opt.expires;
      if (!isDate(expires) || isNaN(expires.valueOf())) {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=" + expires.toUTCString();
    }
    if (opt.httpOnly) {
      str += "; HttpOnly";
    }
    if (opt.secure) {
      str += "; Secure";
    }
    if (opt.priority) {
      var priority = typeof opt.priority === "string" ? opt.priority.toLowerCase() : opt.priority;
      switch (priority) {
        case "low":
          str += "; Priority=Low";
          break;
        case "medium":
          str += "; Priority=Medium";
          break;
        case "high":
          str += "; Priority=High";
          break;
        default:
          throw new TypeError("option priority is invalid");
      }
    }
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  };
  var decode = function(str) {
    return str.indexOf("%") !== -1 ? decodeURIComponent(str) : str;
  };
  var encode = function(val) {
    return encodeURIComponent(val);
  };
  var isDate = function(val) {
    return __toString.call(val) === "[object Date]" || val instanceof Date;
  };
  var tryDecode = function(str, decode2) {
    try {
      return decode2(str);
    } catch (e) {
      return str;
    }
  };
  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  exports.parse = parse;
  exports.serialize = serialize;
  var __toString = Object.prototype.toString;
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
});

// node_modules/is-plain-object/dist/is-plain-object.js
var require_is_plain_object = __commonJS((exports) => {
  var isObject = function(o) {
    return Object.prototype.toString.call(o) === "[object Object]";
  };
  var isPlainObject = function(o) {
    var ctor, prot;
    if (isObject(o) === false)
      return false;
    ctor = o.constructor;
    if (ctor === undefined)
      return true;
    prot = ctor.prototype;
    if (isObject(prot) === false)
      return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  /*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  exports.isPlainObject = isPlainObject;
});

// node_modules/swagger-client/lib/execute/swagger2/parameter-builders.js
var require_parameter_builders = __commonJS((exports) => {
  var bodyBuilder = function(_ref) {
    let {
      req,
      value
    } = _ref;
    req.body = value;
  };
  var formDataBuilder = function(_ref2) {
    let {
      req,
      value,
      parameter
    } = _ref2;
    if (value || parameter.allowEmptyValue) {
      req.form = req.form || {};
      req.form[parameter.name] = {
        value,
        allowEmptyValue: parameter.allowEmptyValue,
        collectionFormat: parameter.collectionFormat
      };
    }
  };
  var headerBuilder = function(_ref3) {
    let {
      req,
      parameter,
      value
    } = _ref3;
    req.headers = req.headers || {};
    if (typeof value !== "undefined") {
      req.headers[parameter.name] = value;
    }
  };
  var pathBuilder = function(_ref4) {
    let {
      req,
      value,
      parameter
    } = _ref4;
    req.url = req.url.split(`{${parameter.name}}`).join(encodeURIComponent(value));
  };
  var queryBuilder = function(_ref5) {
    let {
      req,
      value,
      parameter
    } = _ref5;
    req.query = req.query || {};
    if (value === false && parameter.type === "boolean") {
      value = "false";
    }
    if (value === 0 && ["number", "integer"].indexOf(parameter.type) > -1) {
      value = "0";
    }
    if (value) {
      req.query[parameter.name] = {
        collectionFormat: parameter.collectionFormat,
        value
      };
    } else if (parameter.allowEmptyValue && value !== undefined) {
      const paramName = parameter.name;
      req.query[paramName] = req.query[paramName] || {};
      req.query[paramName].allowEmptyValue = true;
    }
  };
  exports.__esModule = true;
  exports.default = undefined;
  var _default = {
    body: bodyBuilder,
    header: headerBuilder,
    query: queryBuilder,
    path: pathBuilder,
    formData: formDataBuilder
  };
  exports.default = _default;
});

// node_modules/swagger-client/lib/execute/oas3/content-serializer.js
var require_content_serializer = __commonJS((exports) => {
  var serialize = function(value, mediaType) {
    if (mediaType.includes("application/json")) {
      if (typeof value === "string") {
        return value;
      }
      return JSON.stringify(value);
    }
    return value.toString();
  };
  exports.__esModule = true;
  exports.default = serialize;
});

// node_modules/swagger-client/lib/execute/oas3/parameter-builders.js
var require_parameter_builders2 = __commonJS((exports) => {
  var path = function(_ref) {
    let {
      req,
      value,
      parameter
    } = _ref;
    const {
      name,
      style,
      explode,
      content
    } = parameter;
    if (content) {
      const effectiveMediaType = Object.keys(content)[0];
      req.url = req.url.split(`{${name}}`).join((0, _styleSerializer.encodeDisallowedCharacters)((0, _contentSerializer.default)(value, effectiveMediaType), {
        escape: true
      }));
      return;
    }
    const styledValue = (0, _styleSerializer.default)({
      key: parameter.name,
      value,
      style: style || "simple",
      explode: explode || false,
      escape: true
    });
    req.url = req.url.split(`{${name}}`).join(styledValue);
  };
  var query = function(_ref2) {
    let {
      req,
      value,
      parameter
    } = _ref2;
    req.query = req.query || {};
    if (parameter.content) {
      const effectiveMediaType = Object.keys(parameter.content)[0];
      const serializedValue = (0, _contentSerializer.default)(value, effectiveMediaType);
      if (serializedValue) {
        req.query[parameter.name] = serializedValue;
      } else if (parameter.allowEmptyValue && value !== undefined) {
        const paramName = parameter.name;
        req.query[paramName] = req.query[paramName] || {};
        req.query[paramName].allowEmptyValue = true;
      }
      return;
    }
    if (value === false) {
      value = "false";
    }
    if (value === 0) {
      value = "0";
    }
    if (value) {
      const {
        style,
        explode,
        allowReserved
      } = parameter;
      req.query[parameter.name] = {
        value,
        serializationOption: {
          style,
          explode,
          allowReserved
        }
      };
    } else if (parameter.allowEmptyValue && value !== undefined) {
      const paramName = parameter.name;
      req.query[paramName] = req.query[paramName] || {};
      req.query[paramName].allowEmptyValue = true;
    }
  };
  var header = function(_ref3) {
    let {
      req,
      parameter,
      value
    } = _ref3;
    req.headers = req.headers || {};
    if (PARAMETER_HEADER_BLACKLIST.indexOf(parameter.name.toLowerCase()) > -1) {
      return;
    }
    if (parameter.content) {
      const effectiveMediaType = Object.keys(parameter.content)[0];
      req.headers[parameter.name] = (0, _contentSerializer.default)(value, effectiveMediaType);
      return;
    }
    if (typeof value !== "undefined") {
      req.headers[parameter.name] = (0, _styleSerializer.default)({
        key: parameter.name,
        value,
        style: parameter.style || "simple",
        explode: typeof parameter.explode === "undefined" ? false : parameter.explode,
        escape: false
      });
    }
  };
  var cookie = function(_ref4) {
    let {
      req,
      parameter,
      value
    } = _ref4;
    req.headers = req.headers || {};
    const type = typeof value;
    if (parameter.content) {
      const effectiveMediaType = Object.keys(parameter.content)[0];
      req.headers.Cookie = `${parameter.name}=${(0, _contentSerializer.default)(value, effectiveMediaType)}`;
      return;
    }
    if (type !== "undefined") {
      const prefix = type === "object" && !Array.isArray(value) && parameter.explode ? "" : `${parameter.name}=`;
      req.headers.Cookie = prefix + (0, _styleSerializer.default)({
        key: parameter.name,
        value,
        escape: false,
        style: parameter.style || "form",
        explode: typeof parameter.explode === "undefined" ? false : parameter.explode
      });
    }
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.cookie = cookie;
  exports.header = header;
  exports.path = path;
  exports.query = query;
  var _styleSerializer = _interopRequireWildcard(require_style_serializer());
  var _contentSerializer = _interopRequireDefault(require_content_serializer());
  var PARAMETER_HEADER_BLACKLIST = ["accept", "authorization", "content-type"];
});

// node_modules/swagger-client/lib/helpers/btoa.node.js
var require_btoa_node = __commonJS((exports) => {
  exports.__esModule = true;
  exports.default = undefined;
  var _buffer = __require("buffer");
  var btoa2 = (val) => {
    let buffer;
    if (val instanceof _buffer.Buffer) {
      buffer = val;
    } else {
      buffer = _buffer.Buffer.from(val.toString(), "binary");
    }
    return buffer.toString("base64");
  };
  var _default = btoa2;
  exports.default = _default;
});

// node_modules/swagger-client/lib/execute/oas3/build-request.js
var require_build_request = __commonJS((exports) => {
  var buildRequest = function(options, req) {
    const {
      operation,
      requestBody,
      securities,
      spec,
      attachContentTypeForEmptyPayload
    } = options;
    let {
      requestContentType
    } = options;
    req = applySecurities({
      request: req,
      securities,
      operation,
      spec
    });
    const requestBodyDef = operation.requestBody || {};
    const requestBodyMediaTypes = Object.keys(requestBodyDef.content || {});
    const isExplicitContentTypeValid = requestContentType && requestBodyMediaTypes.indexOf(requestContentType) > -1;
    if (requestBody || attachContentTypeForEmptyPayload) {
      if (requestContentType && isExplicitContentTypeValid) {
        req.headers["Content-Type"] = requestContentType;
      } else if (!requestContentType) {
        const firstMediaType = requestBodyMediaTypes[0];
        if (firstMediaType) {
          req.headers["Content-Type"] = firstMediaType;
          requestContentType = firstMediaType;
        }
      }
    } else if (requestContentType && isExplicitContentTypeValid) {
      req.headers["Content-Type"] = requestContentType;
    }
    if (!options.responseContentType && operation.responses) {
      const mediaTypes = Object.entries(operation.responses).filter((_ref) => {
        let [key, value] = _ref;
        const code = parseInt(key, 10);
        return code >= 200 && code < 300 && (0, _isPlainObject.isPlainObject)(value.content);
      }).reduce((acc, _ref2) => {
        let [, value] = _ref2;
        return acc.concat(Object.keys(value.content));
      }, []);
      if (mediaTypes.length > 0) {
        req.headers.accept = mediaTypes.join(", ");
      }
    }
    if (requestBody) {
      if (requestContentType) {
        if (requestBodyMediaTypes.indexOf(requestContentType) > -1) {
          if (requestContentType === "application/x-www-form-urlencoded" || requestContentType === "multipart/form-data") {
            if (typeof requestBody === "object") {
              var _requestBodyDef$conte, _requestBodyDef$conte2;
              const encoding = (_requestBodyDef$conte = (_requestBodyDef$conte2 = requestBodyDef.content[requestContentType]) == null ? undefined : _requestBodyDef$conte2.encoding) != null ? _requestBodyDef$conte : {};
              req.form = {};
              Object.keys(requestBody).forEach((k) => {
                req.form[k] = {
                  value: requestBody[k],
                  encoding: encoding[k] || {}
                };
              });
            } else {
              req.form = requestBody;
            }
          } else {
            req.body = requestBody;
          }
        }
      } else {
        req.body = requestBody;
      }
    }
    return req;
  };
  var applySecurities = function(_ref3) {
    var _spec$components;
    let {
      request,
      securities = {},
      operation = {},
      spec
    } = _ref3;
    const result = {
      ...request
    };
    const {
      authorized = {}
    } = securities;
    const security = operation.security || spec.security || [];
    const isAuthorized = authorized && !!Object.keys(authorized).length;
    const securityDef = (spec == null || (_spec$components = spec.components) == null ? undefined : _spec$components.securitySchemes) || {};
    result.headers = result.headers || {};
    result.query = result.query || {};
    if (!Object.keys(securities).length || !isAuthorized || !security || Array.isArray(operation.security) && !operation.security.length) {
      return request;
    }
    security.forEach((securityObj) => {
      Object.keys(securityObj).forEach((key) => {
        const auth = authorized[key];
        const schema = securityDef[key];
        if (!auth) {
          return;
        }
        const value = auth.value || auth;
        const {
          type
        } = schema;
        if (auth) {
          if (type === "apiKey") {
            if (schema.in === "query") {
              result.query[schema.name] = value;
            }
            if (schema.in === "header") {
              result.headers[schema.name] = value;
            }
            if (schema.in === "cookie") {
              result.cookies[schema.name] = value;
            }
          } else if (type === "http") {
            if (/^basic$/i.test(schema.scheme)) {
              const username = value.username || "";
              const password = value.password || "";
              const encoded = (0, _btoaNode.default)(`${username}:${password}`);
              result.headers.Authorization = `Basic ${encoded}`;
            }
            if (/^bearer$/i.test(schema.scheme)) {
              result.headers.Authorization = `Bearer ${value}`;
            }
          } else if (type === "oauth2" || type === "openIdConnect") {
            const token = auth.token || {};
            const tokenName = schema["x-tokenName"] || "access_token";
            const tokenValue = token[tokenName];
            let tokenType = token.token_type;
            if (!tokenType || tokenType.toLowerCase() === "bearer") {
              tokenType = "Bearer";
            }
            result.headers.Authorization = `${tokenType} ${tokenValue}`;
          }
        }
      });
    });
    return result;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.applySecurities = applySecurities;
  exports.default = buildRequest;
  var _isPlainObject = require_is_plain_object();
  var _btoaNode = _interopRequireDefault(require_btoa_node());
});

// node_modules/swagger-client/lib/execute/swagger2/build-request.js
var require_build_request2 = __commonJS((exports) => {
  var buildRequest = function(options, req) {
    const {
      spec,
      operation,
      securities,
      requestContentType,
      responseContentType,
      attachContentTypeForEmptyPayload
    } = options;
    req = applySecurities({
      request: req,
      securities,
      operation,
      spec
    });
    if (req.body || req.form || attachContentTypeForEmptyPayload) {
      if (requestContentType) {
        req.headers["Content-Type"] = requestContentType;
      } else if (Array.isArray(operation.consumes)) {
        [req.headers["Content-Type"]] = operation.consumes;
      } else if (Array.isArray(spec.consumes)) {
        [req.headers["Content-Type"]] = spec.consumes;
      } else if (operation.parameters && operation.parameters.filter((p) => p.type === "file").length) {
        req.headers["Content-Type"] = "multipart/form-data";
      } else if (operation.parameters && operation.parameters.filter((p) => p.in === "formData").length) {
        req.headers["Content-Type"] = "application/x-www-form-urlencoded";
      }
    } else if (requestContentType) {
      const isBodyParamPresent = operation.parameters && operation.parameters.filter((p) => p.in === "body").length > 0;
      const isFormDataParamPresent = operation.parameters && operation.parameters.filter((p) => p.in === "formData").length > 0;
      if (isBodyParamPresent || isFormDataParamPresent) {
        req.headers["Content-Type"] = requestContentType;
      }
    }
    if (!responseContentType && Array.isArray(operation.produces) && operation.produces.length > 0) {
      req.headers.accept = operation.produces.join(", ");
    }
    return req;
  };
  var applySecurities = function(_ref) {
    let {
      request,
      securities = {},
      operation = {},
      spec
    } = _ref;
    const result = {
      ...request
    };
    const {
      authorized = {},
      specSecurity = []
    } = securities;
    const security = operation.security || specSecurity;
    const isAuthorized = authorized && !!Object.keys(authorized).length;
    const securityDef = spec.securityDefinitions;
    result.headers = result.headers || {};
    result.query = result.query || {};
    if (!Object.keys(securities).length || !isAuthorized || !security || Array.isArray(operation.security) && !operation.security.length) {
      return request;
    }
    security.forEach((securityObj) => {
      Object.keys(securityObj).forEach((key) => {
        const auth = authorized[key];
        if (!auth) {
          return;
        }
        const {
          token
        } = auth;
        const value = auth.value || auth;
        const schema = securityDef[key];
        const {
          type
        } = schema;
        const tokenName = schema["x-tokenName"] || "access_token";
        const oauthToken = token && token[tokenName];
        let tokenType = token && token.token_type;
        if (auth) {
          if (type === "apiKey") {
            const inType = schema.in === "query" ? "query" : "headers";
            result[inType] = result[inType] || {};
            result[inType][schema.name] = value;
          } else if (type === "basic") {
            if (value.header) {
              result.headers.authorization = value.header;
            } else {
              const username = value.username || "";
              const password = value.password || "";
              value.base64 = (0, _btoaNode.default)(`${username}:${password}`);
              result.headers.authorization = `Basic ${value.base64}`;
            }
          } else if (type === "oauth2" && oauthToken) {
            tokenType = !tokenType || tokenType.toLowerCase() === "bearer" ? "Bearer" : tokenType;
            result.headers.authorization = `${tokenType} ${oauthToken}`;
          }
        }
      });
    });
    return result;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.applySecurities = applySecurities;
  exports.default = buildRequest;
  var _btoaNode = _interopRequireDefault(require_btoa_node());
});

// node_modules/swagger-client/lib/execute/index.js
var require_execute = __commonJS((exports) => {
  var execute = function(_ref) {
    let {
      http: userHttp,
      fetch: fetch2,
      spec,
      operationId,
      pathName,
      method,
      parameters,
      securities,
      ...extras
    } = _ref;
    const http = userHttp || fetch2 || _index.default;
    if (pathName && method && !operationId) {
      operationId = (0, _index2.idFromPathMethodLegacy)(pathName, method);
    }
    const request = self2.buildRequest({
      spec,
      operationId,
      parameters,
      securities,
      http,
      ...extras
    });
    if (request.body && ((0, _isPlainObject.isPlainObject)(request.body) || Array.isArray(request.body))) {
      request.body = JSON.stringify(request.body);
    }
    return http(request);
  };
  var buildRequest = function(options) {
    const {
      spec,
      operationId,
      responseContentType,
      scheme,
      requestInterceptor,
      responseInterceptor,
      contextUrl,
      userFetch,
      server,
      serverVariables,
      http,
      signal
    } = options;
    let {
      parameters,
      parameterBuilders
    } = options;
    const specIsOAS3 = (0, _openapiPredicates.isOpenAPI3)(spec);
    if (!parameterBuilders) {
      if (specIsOAS3) {
        parameterBuilders = OAS3_PARAMETER_BUILDERS;
      } else {
        parameterBuilders = _parameterBuilders.default;
      }
    }
    const credentials = http && http.withCredentials ? "include" : "same-origin";
    let req = {
      url: "",
      credentials,
      headers: {},
      cookies: {}
    };
    if (signal) {
      req.signal = signal;
    }
    if (requestInterceptor) {
      req.requestInterceptor = requestInterceptor;
    }
    if (responseInterceptor) {
      req.responseInterceptor = responseInterceptor;
    }
    if (userFetch) {
      req.userFetch = userFetch;
    }
    const operationRaw = (0, _index2.getOperationRaw)(spec, operationId);
    if (!operationRaw) {
      throw new OperationNotFoundError(`Operation ${operationId} not found`);
    }
    const {
      operation = {},
      method,
      pathName
    } = operationRaw;
    req.url += baseUrl({
      spec,
      scheme,
      contextUrl,
      server,
      serverVariables,
      pathName,
      method
    });
    if (!operationId) {
      delete req.cookies;
      return req;
    }
    req.url += pathName;
    req.method = `${method}`.toUpperCase();
    parameters = parameters || {};
    const path = spec.paths[pathName] || {};
    if (responseContentType) {
      req.headers.accept = responseContentType;
    }
    const combinedParameters = deduplicateParameters([].concat(arrayOrEmpty(operation.parameters)).concat(arrayOrEmpty(path.parameters)));
    combinedParameters.forEach((parameter) => {
      const builder = parameterBuilders[parameter.in];
      let value;
      if (parameter.in === "body" && parameter.schema && parameter.schema.properties) {
        value = parameters;
      }
      value = parameter && parameter.name && parameters[parameter.name];
      if (typeof value === "undefined") {
        value = parameter && parameter.name && parameters[`${parameter.in}.${parameter.name}`];
      } else if (findParametersWithName(parameter.name, combinedParameters).length > 1) {
        console.warn(`Parameter '${parameter.name}' is ambiguous because the defined spec has more than one parameter with the name: '${parameter.name}' and the passed-in parameter values did not define an 'in' value.`);
      }
      if (value === null) {
        return;
      }
      if (typeof parameter.default !== "undefined" && typeof value === "undefined") {
        value = parameter.default;
      }
      if (typeof value === "undefined" && parameter.required && !parameter.allowEmptyValue) {
        throw new Error(`Required parameter ${parameter.name} is not provided`);
      }
      if (specIsOAS3 && parameter.schema && parameter.schema.type === "object" && typeof value === "string") {
        try {
          value = JSON.parse(value);
        } catch (e) {
          throw new Error("Could not parse object parameter value string as JSON");
        }
      }
      if (builder) {
        builder({
          req,
          parameter,
          value,
          operation,
          spec
        });
      }
    });
    const versionSpecificOptions = {
      ...options,
      operation
    };
    if (specIsOAS3) {
      req = (0, _buildRequest.default)(versionSpecificOptions, req);
    } else {
      req = (0, _buildRequest2.default)(versionSpecificOptions, req);
    }
    if (req.cookies && Object.keys(req.cookies).length) {
      const cookieString = Object.keys(req.cookies).reduce((prev, cookieName) => {
        const cookieValue = req.cookies[cookieName];
        const prefix = prev ? "&" : "";
        const stringified = _cookie.default.serialize(cookieName, cookieValue);
        return prev + prefix + stringified;
      }, "");
      req.headers.Cookie = cookieString;
    }
    if (req.cookies) {
      delete req.cookies;
    }
    (0, _index.mergeInQueryOrForm)(req);
    return req;
  };
  var baseUrl = function(obj) {
    const specIsOAS3 = (0, _openapiPredicates.isOpenAPI3)(obj.spec);
    return specIsOAS3 ? oas3BaseUrl(obj) : swagger2BaseUrl(obj);
  };
  var oas3BaseUrl = function(_ref2) {
    var _spec$paths, _spec$paths2;
    let {
      spec,
      pathName,
      method,
      server,
      contextUrl,
      serverVariables = {}
    } = _ref2;
    const servers = (spec == null || (_spec$paths = spec.paths) == null || (_spec$paths = _spec$paths[pathName]) == null || (_spec$paths = _spec$paths[(method || "").toLowerCase()]) == null ? undefined : _spec$paths.servers) || (spec == null || (_spec$paths2 = spec.paths) == null || (_spec$paths2 = _spec$paths2[pathName]) == null ? undefined : _spec$paths2.servers) || (spec == null ? undefined : spec.servers);
    let selectedServerUrl = "";
    let selectedServerObj = null;
    if (server && servers && servers.length) {
      const serverUrls = servers.map((srv) => srv.url);
      if (serverUrls.indexOf(server) > -1) {
        selectedServerUrl = server;
        selectedServerObj = servers[serverUrls.indexOf(server)];
      }
    }
    if (!selectedServerUrl && servers && servers.length) {
      selectedServerUrl = servers[0].url;
      [selectedServerObj] = servers;
    }
    if (selectedServerUrl.indexOf("{") > -1) {
      const varNames = getVariableTemplateNames(selectedServerUrl);
      varNames.forEach((vari) => {
        if (selectedServerObj.variables && selectedServerObj.variables[vari]) {
          const variableDefinition = selectedServerObj.variables[vari];
          const variableValue = serverVariables[vari] || variableDefinition.default;
          const re = new RegExp(`{${vari}}`, "g");
          selectedServerUrl = selectedServerUrl.replace(re, variableValue);
        }
      });
    }
    return buildOas3UrlWithContext(selectedServerUrl, contextUrl);
  };
  var buildOas3UrlWithContext = function(ourUrl, contextUrl) {
    if (ourUrl === undefined) {
      ourUrl = "";
    }
    if (contextUrl === undefined) {
      contextUrl = "";
    }
    const parsedUrl = ourUrl && contextUrl ? parseURIReference(_empty.url.resolve(contextUrl, ourUrl)) : parseURIReference(ourUrl);
    const parsedContextUrl = parseURIReference(contextUrl);
    const computedScheme = stripNonAlpha(parsedUrl.protocol) || stripNonAlpha(parsedContextUrl.protocol);
    const computedHost = parsedUrl.host || parsedContextUrl.host;
    const computedPath = parsedUrl.pathname;
    let res;
    if (computedScheme && computedHost) {
      res = `${computedScheme}://${computedHost + computedPath}`;
    } else {
      res = computedPath;
    }
    return res[res.length - 1] === "/" ? res.slice(0, -1) : res;
  };
  var getVariableTemplateNames = function(str) {
    const results = [];
    const re = /{([^}]+)}/g;
    let text;
    while (text = re.exec(str)) {
      results.push(text[1]);
    }
    return results;
  };
  var swagger2BaseUrl = function(_ref3) {
    let {
      spec,
      scheme,
      contextUrl = ""
    } = _ref3;
    const parsedContextUrl = parseURIReference(contextUrl);
    const firstSchemeInSpec = Array.isArray(spec.schemes) ? spec.schemes[0] : null;
    const computedScheme = scheme || firstSchemeInSpec || stripNonAlpha(parsedContextUrl.protocol) || "http";
    const computedHost = spec.host || parsedContextUrl.host || "";
    const computedPath = spec.basePath || "";
    let res;
    if (computedScheme && computedHost) {
      res = `${computedScheme}://${computedHost + computedPath}`;
    } else {
      res = computedPath;
    }
    return res[res.length - 1] === "/" ? res.slice(0, -1) : res;
  };
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  var _interopRequireDefault = require_interopRequireDefault().default;
  exports.__esModule = true;
  exports.baseUrl = baseUrl;
  exports.buildRequest = buildRequest;
  exports.execute = execute;
  exports.self = undefined;
  var _cookie = _interopRequireDefault(require_cookie());
  var _isPlainObject = require_is_plain_object();
  var _empty = require_empty2();
  var _index = _interopRequireWildcard(require_http());
  var _createError = _interopRequireDefault(require_create_error());
  var _parameterBuilders = _interopRequireDefault(require_parameter_builders());
  var OAS3_PARAMETER_BUILDERS = _interopRequireWildcard(require_parameter_builders2());
  var _buildRequest = _interopRequireDefault(require_build_request());
  var _buildRequest2 = _interopRequireDefault(require_build_request2());
  var _index2 = require_helpers4();
  var _openapiPredicates = require_openapi_predicates();
  var arrayOrEmpty = (ar) => Array.isArray(ar) ? ar : [];
  var parseURIReference = (uriReference) => {
    try {
      return new URL(uriReference);
    } catch {
      const parsedURL = new URL(uriReference, "https://swagger.io");
      const pathname = String(uriReference).startsWith("/") ? parsedURL.pathname : parsedURL.pathname.substring(1);
      return {
        hash: parsedURL.hash,
        host: "",
        hostname: "",
        href: "",
        origin: "",
        password: "",
        pathname,
        port: "",
        protocol: "",
        search: parsedURL.search,
        searchParams: parsedURL.searchParams
      };
    }
  };
  var OperationNotFoundError = (0, _createError.default)("OperationNotFoundError", function cb(message, extra, oriError) {
    this.originalError = oriError;
    Object.assign(this, extra || {});
  });
  var findParametersWithName = (name, parameters) => parameters.filter((p) => p.name === name);
  var deduplicateParameters = (parameters) => {
    const paramsMap = {};
    parameters.forEach((p) => {
      if (!paramsMap[p.in]) {
        paramsMap[p.in] = {};
      }
      paramsMap[p.in][p.name] = p;
    });
    const dedupedParameters = [];
    Object.keys(paramsMap).forEach((i) => {
      Object.keys(paramsMap[i]).forEach((p) => {
        dedupedParameters.push(paramsMap[i][p]);
      });
    });
    return dedupedParameters;
  };
  var self2 = {
    buildRequest
  };
  exports.self = self2;
  var stripNonAlpha = (str) => str ? str.replace(/\W/g, "") : null;
});

// node_modules/swagger-client/lib/index.js
var require_lib7 = __commonJS((exports) => {
  var Swagger = function(url, opts) {
    if (opts === undefined) {
      opts = {};
    }
    if (typeof url === "string") {
      opts.url = url;
    } else {
      opts = url;
    }
    if (!(this instanceof Swagger)) {
      return new Swagger(opts);
    }
    Object.assign(this, opts);
    const prom = this.resolve().then(() => {
      if (!this.disableInterfaces) {
        Object.assign(this, Swagger.makeApisTagOperation(this));
      }
      return this;
    });
    prom.client = this;
    return prom;
  };
  var _interopRequireDefault = require_interopRequireDefault().default;
  var _interopRequireWildcard = require_interopRequireWildcard().default;
  exports.__esModule = true;
  exports.helpers = exports.default = undefined;
  var _index = _interopRequireWildcard(require_http());
  var _index2 = require_resolver();
  var _index3 = require_subtree_resolver();
  var _index4 = _interopRequireDefault(require_generic());
  var _index5 = _interopRequireWildcard(require_openapi_2());
  var _index6 = _interopRequireDefault(require_openapi_3_0());
  var _index7 = _interopRequireDefault(require_openapi_3_1_apidom());
  var _interfaces = require_interfaces();
  var _index8 = require_execute();
  var _index9 = require_helpers4();
  var _index10 = _interopRequireDefault(require_http_swagger_client());
  var _index11 = _interopRequireDefault(require_json4());
  var _index12 = _interopRequireDefault(require_yaml_1_22());
  var _index13 = _interopRequireDefault(require_openapi_json_3_1());
  var _index14 = _interopRequireDefault(require_openapi_yaml_3_1());
  var _index15 = _interopRequireDefault(require_openapi_3_1_swagger_client());
  Swagger.http = _index.default;
  Swagger.makeHttp = _index.makeHttp.bind(null, Swagger.http);
  Swagger.resolveStrategies = {
    "openapi-3-1-apidom": _index7.default,
    "openapi-3-0": _index6.default,
    "openapi-2-0": _index5.default,
    generic: _index4.default
  };
  Swagger.resolve = (0, _index2.makeResolve)({
    strategies: [Swagger.resolveStrategies["openapi-3-1-apidom"], Swagger.resolveStrategies["openapi-3-0"], Swagger.resolveStrategies["openapi-2-0"], Swagger.resolveStrategies.generic]
  });
  Swagger.resolveSubtree = (0, _index3.makeResolveSubtree)({
    strategies: [Swagger.resolveStrategies["openapi-3-1-apidom"], Swagger.resolveStrategies["openapi-3-0"], Swagger.resolveStrategies["openapi-2-0"], Swagger.resolveStrategies.generic]
  });
  Swagger.execute = _index8.execute;
  Swagger.serializeRes = _index.serializeRes;
  Swagger.serializeHeaders = _index.serializeHeaders;
  Swagger.clearCache = _index5.clearCache;
  Swagger.makeApisTagOperation = _interfaces.makeApisTagOperation;
  Swagger.buildRequest = _index8.buildRequest;
  Swagger.helpers = {
    opId: _index9.opId
  };
  Swagger.getBaseUrl = _index8.baseUrl;
  Swagger.apidom = {
    resolve: {
      resolvers: {
        HttpResolverSwaggerClient: _index10.default
      }
    },
    parse: {
      parsers: {
        JsonParser: _index11.default,
        YamlParser: _index12.default,
        OpenApiJson3_1Parser: _index13.default,
        OpenApiYaml3_1Parser: _index14.default
      }
    },
    dereference: {
      strategies: {
        OpenApi3_1SwaggerClientDereferenceStrategy: _index15.default
      }
    }
  };
  Swagger.prototype = {
    http: _index.default,
    execute(options) {
      this.applyDefaults();
      return Swagger.execute({
        spec: this.spec,
        http: this.http,
        securities: {
          authorized: this.authorizations
        },
        contextUrl: typeof this.url === "string" ? this.url : undefined,
        requestInterceptor: this.requestInterceptor || null,
        responseInterceptor: this.responseInterceptor || null,
        ...options
      });
    },
    resolve(options) {
      if (options === undefined) {
        options = {};
      }
      return Swagger.resolve({
        spec: this.spec,
        url: this.url,
        http: this.http || this.fetch,
        allowMetaPatches: this.allowMetaPatches,
        useCircularStructures: this.useCircularStructures,
        requestInterceptor: this.requestInterceptor || null,
        responseInterceptor: this.responseInterceptor || null,
        skipNormalization: this.skipNormalization || false,
        ...options
      }).then((obj) => {
        this.originalSpec = this.spec;
        this.spec = obj.spec;
        this.errors = obj.errors;
        return this;
      });
    }
  };
  Swagger.prototype.applyDefaults = function applyDefaults() {
    const {
      spec
    } = this;
    const specUrl = this.url;
    if (specUrl && specUrl.startsWith("http")) {
      const parsed = new URL(specUrl);
      if (!spec.host) {
        spec.host = parsed.host;
      }
      if (!spec.schemes) {
        spec.schemes = [parsed.protocol.replace(":", "")];
      }
      if (!spec.basePath) {
        spec.basePath = "/";
      }
    }
  };
  var {
    helpers
  } = Swagger;
  exports.helpers = helpers;
  var _default = Swagger;
  exports.default = _default;
});

// node_modules/swagger-client/lib/commonjs.js
var require_commonjs = __commonJS((exports, module) => {
  var {
    default: SwaggerClient
  } = require_lib7();
  module.exports = SwaggerClient;
});

// generateEndpointCode.ts
var exports_generateEndpointCode = {};
__export(exports_generateEndpointCode, {
  generateEndpointCode: () => {
    {
      return generateEndpointCode;
    }
  }
});
async function generateEndpointCode(_apiSchema) {
  const apiSchema = await import_swagger_client.default.resolve(_apiSchema);
  let code = "";
  const builder = {};
  const tags = apiSchema.tags?.map((tag) => tag.name) ?? [];
  tags.forEach((tag) => {
    builder[tag] = {
      queries: [],
      mutations: []
    };
  });
  for (const path in apiSchema.paths) {
    const pathData = apiSchema.paths[path];
    for (const method in pathData) {
      const operation = pathData[method];
      const tagsAttr = method === "get" ? "providesTags" : "invalidatesTags";
      const builderMethod = method === "get" ? "query" : "mutation";
      operation.tags?.forEach((tag) => {
        const response = operation.responses?.[200];
        console.log(response);
        builder[tag][method === "get" ? "queries" : "mutations"].push(`  ${summaryToTitle(operation.summary)}: (builder) => builder.${builderMethod}({
    query: (params) => ({
      url: '${path}', // Adjust the URL based on your schema
      method: '${method.toUpperCase()}',
      params,
      response: "${response?.description ?? ""} ${response?.type ?? ""}"
    }),
    ${tagsAttr}: () => ['${operation.tags?.join("', '")}'],
  }),\n`);
      });
    }
  }
  Object.keys(builder).forEach((tag) => {
    code += `export const ${tag}Endpoints = {\n`;
    code += builder[tag].queries.join("");
    code += builder[tag].mutations.join("");
    code += `};\n\n\n`;
  });
  return code;
}
var import_swagger_client, summaryToTitle;
var init_generateEndpointCode = __esm(() => {
  import_swagger_client = __toESM(require_commonjs(), 1);
  summaryToTitle = function(summary) {
    return summary.split(" ").map((word, i) => {
      if (i === 0) {
        return word.toLowerCase();
      }
      return word[0].toUpperCase() + word.slice(1).toLowerCase();
    }).map((word) => word.replace(/[^a-zA-Z0-9]/g, "")).join("");
  };
});

// index.ts
var import_command_line_args = __toESM(require_dist(), 1);
var import_yaml = __toESM(require_dist2(), 1);
var { startLoad: startLoad2, stopLoad: stopLoad2 } = (init_load(), __toCommonJS(exports_load));
var {
  generateEndpointCode: generateEndpointCode2
} = (init_generateEndpointCode(), __toCommonJS(exports_generateEndpointCode));
var log = console.log;
var divider = "--------------------------------------------------------------------";
var logDivider = () => log(divider);
var options = import_command_line_args.default([
  {
    name: "src",
    alias: "s",
    type: String,
    multiple: false
  }
]);
var fetchOpenApiSpec = async () => {
  if (!options.src) {
    console.log("Please provide a source open-api spec");
    process.exit(1);
  }
  const spec = await fetch(options.src);
  return await spec.text();
};
var parseOpenApiSpec = (spec) => {
  const res = {
    type: "JSON",
    data: null
  };
  try {
    res.data = JSON.parse(spec);
  } catch (err) {
    console.log("Failed to parse open-api spec as JSON");
    console.log("Trying to parse as YAML...");
    try {
      res.data = import_yaml.default.parse(spec);
      res.type = "YAML";
    } catch (err2) {
      console.log("Failed to parse open-api spec as YAML");
      console.log("Please provide a valid open-api spec");
      process.exit(1);
    }
  }
  return res;
};
logDivider();
log("Fetching open-api spec");
startLoad2();
fetchOpenApiSpec().then((spec) => {
  stopLoad2("Done! Resolved open-api spec");
  logDivider();
  console.log("Parsing...");
  const parsed = parseOpenApiSpec(spec);
  console.log("Done!");
  logDivider();
  console.log("Creating endpoints...");
  const endpoints = generateEndpointCode2(parsed.data);
  Bun.write("out.ts", endpoints);
  console.log("Endpoints written to out.ts! \u2705");
  logDivider();
}).catch((err) => {
  stopLoad2("Failed to fetch open-api spec. Please enter a valid URL!");
  log(logDivider(), log(err));
});
